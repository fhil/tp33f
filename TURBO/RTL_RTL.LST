Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 1
msx_asm\rtl_rtl.ASM



      1	    0000				  .model small
      2	    0000				  .code
      3						  .486	; .8086
      4
      5
      6						  include msx_gen\runtime.mc
1     7					 ; ^QW:	find current word
1     8					 ; ^QS:	find current word without first	letter (for names that start with an
1     9					 ;	underscore)
1    10
1    11					 ; - define the	symbol 'MSX' to	compile	the msx	compiler
1    12					 ;   otherwise the PC version will be generated
1    13
1    14					 ; - define the	symbol 'USELIB'	to compile all library routines
1    15					 ; - define the	symbol 'NEWEXT'	to use the new external	routine
1    16
1    17	    0000			 MESSAGESFORTILBURG:
1    18
1    19		  =0204			 NEEDEDMEMMANVERSION	    EQU	0204h
1    20		  =0222			 NEEDEDGIOSVERSION	    EQU	0222h
1    21
1    22	    0000			 RUNTIME:
1    23					 ;NEWEXT:
1    24	    0000			 FASTREAL:
1    25
1    26	    0000			 MSX:
1    27
1    28		  =0005			 MSXDOS	 EQU 5
1    29	    0000			 USELIB:
1    30
1    31						  PUBLIC CON1OUTPTR
1    32
1    33						  PUBLIC L005C,L005D
1    34						 PUBLIC	L0065,L0066,L006C,L0080,L00CE
1    35						 PUBLIC	L00E0,L00F4,L0100,L0101,L0168
1    36						 PUBLIC	L0168,L0169,L01AE,L01E1
1    37						 PUBLIC	L01B4,L01BC,L01FA,L0200,L021D
1    38						 PUBLIC	L023E,L0259,L0262,L026B
1    39						 PUBLIC	L0284,L0299,L02A2,L0310,L03C9
1    40						 PUBLIC	L03E1,L03EE,L0406,L04A6,L04B4,L04D2,L04AF
1    41						 PUBLIC	L0591,L059B,L0612,L0783
1    42						 PUBLIC	L07F7,L1008,L11A3,L14E8,L1726
1    43
1    44						 PUBLIC	A2L
1    45
1    46						 ; defined in COMPILER.MAC
1    47						 EXTRN L278E
1    48
1    49						 INCLUDE STDIO.INC
2    50		  =0004			 FIL_HDR  EQU 4			     ; length of FILE header
2    51
2    52						  include ..\library\fileio.inc
3    53
3    54					 ; FILEIO.MAC global definitions file
3    55
3    56						  GLOBAL DOS2Present:NEAR
3    57						  GLOBAL InitFileIO:NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 2
msx_asm\rtl_rtl.ASM



3    58						  GLOBAL GetError:NEAR
3    59						  GLOBAL SetErrorHandler:NEAR
3    60						  GLOBAL ResErrorHandler:NEAR
3    61
3    62						  GLOBAL ParseName:NEAR
3    63						  GLOBAL SetExtension:NEAR
3    64
3    65						  GLOBAL CreateFile:NEAR
3    66						  GLOBAL OpenFile:NEAR
3    67						  GLOBAL ReadFile:NEAR
3    68						  GLOBAL WriteFile:NEAR
3    69						  GLOBAL CloseFile:NEAR
3    70						  GLOBAL FileSeek:NEAR
3    71						  GLOBAL FilePos:NEAR
3    72						  GLOBAL FileSize:NEAR
3    73						  GLOBAL DeleteFile:NEAR     ; or subdirectory
3    74						  GLOBAL RenameFile:NEAR     ; or subdirectory
3    75						  GLOBAL GetCurrentDirectory:NEAR
3    76
3    77						  GLOBAL FatalError:NEAR     ; 0 = no fatal error, NonZero = fatal
3    78						  GLOBAL ErrorNumber:NEAR    ; 0 = no error, NonZero = DOS 2 error code
3    79
3    80		  =0024			 FCB_LEN	   EQU 36	     ; length of an FCB
3    81
3    82		  =0000			 FCB_DRIVE	   EQU 0	     ; Drive Number
3    83		  =0001			 FCB_NAME	   EQU 1	     ; Name
3    84		  =0009			 FCB_EXT	   EQU 9	     ; Extension
3    85		  =000E			 FCB_RECSIZE	   EQU 0EH	     ; Record Size (word)
3    86		  =0010			 FCB_FILESIZE	   EQU 10H	     ; File Size (long)
3    87		  =0021			 FCB_FILEPOS	   EQU 21H	     ; File Position (long)
3    88
3    89
2    90
2    91		  =0000			 FIB_F	  EQU 0			     ; Flags byte
2    92		  =0001			 FIB_CHR  EQU 1			     ; Character buffer
2    93		  =0002			 FIB_PTR  EQU 2			     ; Sector buffer pointer
2    94		  =0004			 FIB_NUM  EQU 4			     ; Number of records
2    95		  =0006			 FIB_REC  EQU 6			     ; Record length
2    96		  =0008			 FIB_CUR  EQU 8			     ; Current record
2    97		  =000C			 FIB_FCB  EQU 12		     ; First byte of FCB
2    98		  =0030			 FIB_BUF  EQU 48		     ; First byte of sector buffer
2    99
2   100		  =00B0			 FIB_LEN  EQU FIB_BUF+128	     ; total length of a complete FIB
2   101
2   102		  =0000			 DOS_FLG  EQU 0			     ; Flags byte
2   103		  =0001			 DOS_CHR  EQU 1			     ; Character buffer
2   104		  =0002			 DOS_PTR  EQU 2			     ; Sector buffer pointer
2   105		  =0004			 DOS_BLEN EQU 4			     ; Sector buffer length
2   106		  =0006			 DOS_NUM  EQU 6			     ; Number of records
2   107		  =000A			 DOS_REC  EQU 10		     ; Record length
2   108		  =000C			 DOS_CUR  EQU 12		     ; Current record
2   109		  =0010			 DOS_FCB  EQU 16		     ; First byte FCB/Handle structure
2   110		  =0051			 DOS_BUF  EQU (16 + 65)		     ; First byte of sector buffer
2   111
2   112		  =00D1			 DOS_LEN  EQU (DOS_BUF + 128)
2   113
2   114						  include ..\library\macros.inc
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 3
msx_asm\rtl_rtl.ASM



3   115					 OFF_HL	  MACRO	CURRENT,NEW
3   116						  LOCAL	DIF
3   117					 DIF	  EQU (NEW)-(CURRENT)
3   118
3   119					 IFDEF MSX
3   120						  IFE DIF-1
3   121						   DB 23h; INC HL
3   122						  ELSE
3   123						   IFE DIF-2
3   124						    DB 23h; INC	HL
3   125						    DB 23h; INC	HL
3   126						   ELSE
3   127						    IFE	DIF-3
3   128						     DB	23h; INC HL
3   129						     DB	23h; INC HL
3   130						     DB	23h; INC HL
3   131						    ELSE
3   132						     IFE DIF+1
3   133						      DB 2bh; DEC HL
3   134						     ELSE
3   135						      IFE DIF+2
3   136						       DB 2bh; DEC HL
3   137						       DB 2bh; DEC HL
3   138						      ELSE
3   139						       IFE DIF+3
3   140							DB 2bh;	DEC HL
3   141							DB 2bh;	DEC HL
3   142							DB 2bh;	DEC HL
3   143						       ELSE
3   144							IFE DIF
3   145							ELSE
3   146							 DB 0D5H ; PUSH	DE
3   147							 DB 11H
3   148							 DW DIF
3   149							 DB 19H	 ; ADD HL,DE
3   150							 DB 0D1H ; POP DE
3   151							ENDIF
3   152						       ENDIF
3   153						      ENDIF
3   154						     ENDIF
3   155						    ENDIF
3   156						   ENDIF
3   157						  ENDIF
3   158					 ELSE
3   159						  IFE DIF-1
3   160						   INC bx
3   161						  ELSE
3   162						   IFE DIF-2
3   163						    INC	bx
3   164						    INC	bx
3   165						   ELSE
3   166						    IFE	DIF-3
3   167						     INC bx
3   168						     INC bx
3   169						     INC bx
3   170						    ELSE
3   171						     IFE DIF+1
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 4
msx_asm\rtl_rtl.ASM



3   172						      DEC bx
3   173						     ELSE
3   174						      IFE DIF+2
3   175						       DEC bx
3   176						       DEC bx
3   177						      ELSE
3   178						       IFE DIF+3
3   179							DEC bx
3   180							DEC bx
3   181							DEC bx
3   182						       ELSE
3   183							IFE DIF
3   184							ELSE
3   185							 push dx
3   186							 mov dx,DIF
3   187							 ADD bx,dx
3   188							 pop dx
3   189							ENDIF
3   190						       ENDIF
3   191						      ENDIF
3   192						     ENDIF
3   193						    ENDIF
3   194						   ENDIF
3   195						  ENDIF
3   196					 ENDIF
3   197
3   198						  ENDM
3   199
3   200					 dc	 macro string
3   201
3   202						 strsize sizestr <string>
3   203						 pos = 0
3   204
3   205						 irpc parameter,string
3   206							 pos = pos + 1
3   207
3   208							 if pos	EQ strsize - 1
3   209							 db '&parameter' + 80h
3   210							 endif
3   211
3   212							 if pos	GT 1
3   213								 if pos	LT strsize -1
3   214									 db '&parameter'
3   215								 endif
3   216							 endif
3   217
3   218						 endm
3   219
3   220						 endm
3   221
3   222
2   223
1   224
1   225						 INCLUDE LIBDEFS.INC
2   226
2   227
2   228					 GLOBAL2  MACRO	NAME
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 5
msx_asm\rtl_rtl.ASM



2   229						  GLOBAL NAME :	NEAR
2   230
2   231						  IFDEF	MSX
2   232						  IFDEF	RUNTIME
2   233						  GLOBAL _&NAME	: NEAR
2   234					 _&NAME:
2   235						  ELSE
2   236							   _&NAME EQU NAME
2   237						  ENDIF
2   238						  ELSE
2   239							   _&NAME EQU NAME
2   240						  ENDIF
2   241
2   242						  ENDM
2   243
2   244					 GLOBALS MACRO NAMES
2   245
2   246						  IRP NAME,<NAMES>
2   247							   GLOBAL2 <NAME>
2   248						  ENDM
2   249
2   250						  ENDM
2   251
2   252						  GLOBAL L0004:NEAR	     ; def. init.mac
2   253						  GLOBAL L0006:NEAR	     ; def. init.mac
2   254						  GLOBAL L005C:NEAR	     ; def. init.mac
2   255						  GLOBAL L005D:NEAR	     ; def. init.mac
2   256						  GLOBAL L0065:NEAR	     ; def. init.mac
2   257						  GLOBAL L0066:NEAR	     ; def. init.mac
2   258						  GLOBAL L006C:NEAR	     ; def. init.mac
2   259						  GLOBAL L0080:NEAR	     ; def. init.mac
*Warning* LIBDEFS.INC(38) Global type doesn't match symbol type: L0080
2   260						  GLOBAL L00CE:NEAR	     ; def. init.mac
2   261						  GLOBAL L00E0:NEAR	     ; def. init.mac
2   262						  GLOBAL L0100:NEAR	     ; def. init.mac
2   263						  GLOBAL L0101:NEAR	     ; def. init.mac
2   264						  GLOBAL L0168:NEAR	     ; def. init.mac
2   265						  GLOBAL L0169:NEAR	     ; def. init.mac
2   266						  GLOBAL L01AE:NEAR	     ; def. init.mac
2   267						  GLOBAL L01B4:NEAR	     ; def. init.mac
2   268						  GLOBAL L01BC:NEAR	     ; def. init.mac
2   269						  GLOBAL L01D0:NEAR	     ; def. init.mac
2   270						  GLOBAL L01E1:NEAR	     ; def. init.mac
2   271						  GLOBAL L01E8:NEAR	     ; def. init.mac
2   272						  GLOBAL L01FA:NEAR	     ; def. init.mac
2   273						  GLOBAL L0200:NEAR	     ; def. init.mac
2   274						  GLOBAL L023E:NEAR	     ; def. init.mac
2   275						  GLOBAL L0259:NEAR	     ; def. init.mac
2   276						  GLOBAL L0262:NEAR	     ; def. init.mac
2   277						  GLOBAL L026B:NEAR	     ; def. init.mac
2   278						  GLOBAL L0284:NEAR	     ; def. init.mac
2   279						  GLOBAL L0299:NEAR	     ; def. init.mac
2   280						  GLOBAL L02A2:NEAR	     ; def. init.mac
2   281						  GLOBAL L030A:NEAR	     ; def. init.mac
2   282						  GLOBAL L0310:NEAR	     ; def. init.mac
2   283						  GLOBAL L0364:NEAR	     ; def. init.mac
2   284						  GLOBAL L03C9:NEAR	     ; def. init.mac
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 6
msx_asm\rtl_rtl.ASM



2   285						  GLOBAL L03E1:NEAR	     ; def. init.mac
2   286						  GLOBAL L03EE:NEAR	     ; def. init.mac
2   287						  GLOBAL L0406:NEAR	     ; def. init.mac
2   288						  GLOBAL L04A6:NEAR	     ; def. init.mac
2   289						  GLOBAL L04B4:NEAR	     ; def. init.mac
2   290						  GLOBAL L04D2:NEAR	     ; def. init.mac
2   291						  GLOBAL L04AF:NEAR	     ; def. init.mac
2   292						  GLOBAL L0581:NEAR	     ; def. init.mac
2   293						  GLOBAL L0591:NEAR	     ; def. init.mac
2   294						  GLOBAL L059B:NEAR	     ; def. init.mac
2   295						  GLOBAL L0612:NEAR	     ; def. init.mac
2   296						  GLOBAL L0783:NEAR	     ; def. init.mac
2   297						  GLOBAL L07F7:NEAR	     ; def. init.mac
2   298						  GLOBAL L1008:NEAR	     ; def. init.mac
2   299						  GLOBAL L11A3:NEAR	     ; def. init.mac
2   300						  GLOBAL L149B:NEAR	     ; def. init.mac
2   301						  GLOBAL L14E8:NEAR	     ; def. init.mac
2   302						  GLOBAL L1726:NEAR	     ; def. init.mac
2   303						  GLOBAL L20E2:NEAR	     ; def. init.mac
2   304
2   305						  GLOBAL CON1OUTPTR:NEAR     ; def. init.mac
2   306						  GLOBAL CONSTPTR:NEAR	     ; def. init.mac
2   307						  GLOBAL A2L:NEAR	     ; def. init.mac
2   308						  GLOBAL L_NEG:NEAR	     ; def. init.mac
2   309						  GLOBAL L_R:NEAR	     ; def. init.mac
2   310						  GLOBAL PREFIX:NEAR	     ; def. init.mac
2   311
2   312						  GLOBAL DEF_TYPE:NEAR	     ; def. compiler.mac
2   313						  GLOBAL L72E1:NEAR	     ; def. compiler.mac, no conditon error
2   314						  GLOBAL L7B5C:NEAR	     ; def. compiler.mac
2   315						  GLOBAL L7B62:NEAR	     ; def. compiler.mac
2   316
2   317						  GLOBAL L7BF5:NEAR	     ; def. end.mac
2   318
2   319						  GLOBAL O_BYTE:NEAR,O_CALHL:NEAR,O_CODE:NEAR,O_HL:NEAR
2   320						  GLOBAL O_JPHL:NEAR,O_LDDE:NEAR,O_LDHL:NEAR,O_PSHHL:NEAR
2   321
2   322						  GLOBAL ParseByteVar:NEAR   ; def. glib.mac
2   323						  GLOBAL ParseIntVar:NEAR    ; def. glib.mac
2   324						  GLOBAL ParseIntError:NEAR  ; def. glib.mac
2   325						  GLOBAL ParseStrVAR64:NEAR  ; def. glib.mac
2   326						  GLOBAL ParseVAR64:NEAR     ; def. glib.mac
2   327
2   328						  GLOBAL TableIndex2:NEAR    ; def. compiler.mac
2   329
2   330						  ; GIOS Procedures
2   331						  GLOBAL P_DELETEFILE:NEAR   ; def. glib.mac
2   332						  GLOBAL P_DEFINEPICTURE:NEAR; def. glib.mac
2   333						  GLOBAL P_PFILLSHAPE:NEAR   ; def. glib.mac
2   334						  GLOBAL P_PPAINT:NEAR	     ; def. glib.mac
2   335						  GLOBAL P_MEMEXPAND:NEAR    ; def. glib.mac
2   336						  GLOBAL P_MEMTOVRAM:NEAR    ; def. glib.mac
2   337						  GLOBAL P_MEMLOADPICTURE:NEAR;	def. glib.mac
2   338						  GLOBAL P_MEMUNCRUNCH:NEAR  ; def. glib.mac
2   339						  GLOBAL P_MEMSAVEPICTURE:NEAR;	def. glib.mac
2   340						  GLOBAL P_SETCLIPPING:NEAR  ; def. glib.mac
2   341						  GLOBAL P_SETVIEWPORT:NEAR  ; def. glib.mac
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 7
msx_asm\rtl_rtl.ASM



2   342						  GLOBAL P_GETVIEWPORT:NEAR  ; def. glib.mac
2   343						  GLOBAL P_MEMCOPY:NEAR	     ; def. glib.mac
2   344						  GLOBAL P_BLOAD:NEAR	     ; def. glib.mac
2   345						  GLOBAL P_BSAVE:NEAR	     ; def. glib.mac
2   346						  GLOBAL P_CHANGECOLOR:NEAR  ; def. glib.mac
2   347						  GLOBAL P_CHANGESCREEN:NEAR ; def. glib.mac
2   348						  GLOBAL P_CIRCLE:NEAR	     ; def. glib.mac
2   349						  GLOBAL P_CLEARMEM:NEAR     ; def. glib.mac
2   350						  GLOBAL P_DATE:NEAR	     ; def. glib.mac
2   351						  GLOBAL P_DISPLAYPAGE:NEAR  ; def. glib.mac
2   352						  GLOBAL P_ELLIPSE:NEAR	     ; def. glib.mac
2   353						  GLOBAL P_EXPAND:NEAR	     ; def. glib.mac
2   354						  GLOBAL P_FASTBOX:NEAR	     ; def. glib.mac
2   355						  GLOBAL P_FASTCOPY:NEAR     ; def. glib.mac
2   356						  GLOBAL P_FILLBOX:NEAR	     ; def. glib.mac
2   357						  GLOBAL P_FILLSHAPE:NEAR    ; def. glib.mac
2   358						  GLOBAL P_FILLSPRITE:NEAR   ; def. glib.mac
2   359						  GLOBAL P_GCOPY:NEAR	     ; def. glib.mac
2   360						  GLOBAL P_GETDOSVERSION:NEAR; def. glib.mac
2   361						  GLOBAL P_LINE:NEAR	     ; def. glib.mac
2   362						  GLOBAL P_LOADPICTURE:NEAR  ; def. glib.mac
2   363						  GLOBAL P_LOADVRAM:NEAR     ; def. glib.mac
2   364						  GLOBAL P_MEMREADFILE:NEAR  ; def. glib.mac
2   365						  GLOBAL P_MEMWRITEFILE:NEAR ; def. glib.mac
2   366						  GLOBAL P_MEMAPPENDFILE:NEAR; def. glib.mac
2   367						  GLOBAL P_MOVEVRAM:NEAR     ; def. glib.mac
2   368						  GLOBAL P_PAINT:NEAR	     ; def. glib.mac
2   369						  GLOBAL P_PSET:NEAR	     ; def. glib.mac
2   370						  GLOBAL P_PUTSPRITE:NEAR    ; def. glib.mac
2   371						  GLOBAL P_READMEM:NEAR	     ; def. glib.mac
2   372						  GLOBAL P_READSECTOR:NEAR   ; def. glib.mac
2   373						  GLOBAL P_SAVEPICTURE:NEAR  ; def. glib.mac
2   374						  GLOBAL P_SAVEVRAM:NEAR     ; def. glib.mac
2   375						  GLOBAL P_SCREEN:NEAR	     ; def. glib.mac
2   376						  GLOBAL P_SCREENOFF:NEAR    ; def. glib.mac
2   377						  GLOBAL P_SCREENON:NEAR     ; def. glib.mac
2   378						  GLOBAL P_SETCHANNEL:NEAR   ; def. glib.mac
2   379						  GLOBAL P_SOUND:NEAR	     ; def. glib.mac
2   380						  GLOBAL P_SPRITEATTRIBUTEADDRESS:NEAR	; def. glib.mac
2   381						  GLOBAL P_SPRITECOLOR:NEAR  ; def. glib.mac
2   382						  GLOBAL P_SPRITEPATTERN:NEAR; def. glib.mac
2   383						  GLOBAL P_SPRITEPATTERNADDRESS:NEAR	; def. glib.mac
2   384						  GLOBAL P_SPRITESIZE:NEAR   ; def. glib.mac
2   385						  GLOBAL P_SPRITESOFF:NEAR   ; def. glib.mac
2   386						  GLOBAL P_SPRITESON:NEAR    ; def. glib.mac
2   387						  GLOBAL P_TIME:NEAR	     ; def. glib.mac
2   388						  GLOBAL P_UNCRUNCH:NEAR     ; def. glib.mac
2   389						  GLOBAL P_VPOKE:NEAR	     ; def. glib.mac
2   390						  GLOBAL P_WAITVDP:NEAR	     ; def. glib.mac
2   391						  GLOBAL P_WRITEMEM:NEAR     ; def. glib.mac
2   392						  GLOBAL P_WRITESECTOR:NEAR  ; def. glib.mac
2   393						  GLOBAL P_WRITEVDP:NEAR     ; def. glib.mac
2   394
2   395						  ; GIOS Functions
2   396						  GLOBAL F_TSRPRESENT:NEAR   ; def. glib.mac
2   397						  GLOBAL F_GETCLIPPING:NEAR  ; def. glib.mac
2   398						  GLOBAL F_SIMULATEDDISK:NEAR; def. glib.mac
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 8
msx_asm\rtl_rtl.ASM



2   399						  GLOBAL F_FINDFIRST:NEAR    ; def. glib.mac
2   400						  GLOBAL F_FINDNEXT:NEAR     ; def. glib.mac
2   401						  GLOBAL F_GETDRIVE:NEAR     ; def. glib.mac
2   402						  GLOBAL F_TESTDRIVE:NEAR    ; def. glib.mac
2   403						  GLOBAL F_GETERROR:NEAR     ; def. glib.mac
2   404						  GLOBAL F_GETFKEY:NEAR	     ; def. glib.mac
2   405						  GLOBAL F_GETPAD:NEAR	     ; def. glib.mac
2   406						  GLOBAL F_GETPDL:NEAR	     ; def. glib.mac
2   407						  GLOBAL F_GETCHANNEL:NEAR   ; def. glib.mac
2   408						  GLOBAL F_GETPAGEID:NEAR    ; def. glib.mac
2   409						  GLOBAL F_POINT:NEAR	     ; def. glib.mac
2   410						  GLOBAL F_READPSG:NEAR	     ; def. glib.mac
2   411						  GLOBAL F_READSTATUS:NEAR   ; def. glib.mac
2   412						  GLOBAL F_READVDP:NEAR	     ; def. glib.mac
2   413						  GLOBAL F_SEARCH:NEAR	     ; def. glib.mac
2   414						  GLOBAL F_SETDATE:NEAR	     ; def. glib.mac
2   415						  GLOBAL F_SETMEM:NEAR	     ; def. glib.mac
2   416						  GLOBAL F_SETTIME:NEAR	     ; def. glib.mac
2   417						  GLOBAL F_STICK:NEAR	     ; def. glib.mac
2   418						  GLOBAL F_STRIG:NEAR	     ; def. glib.mac
2   419						  GLOBAL F_VPEEK:NEAR	     ; def. glib.mac
2   420
2   421
1   422
1   423						 ORG 100H
1   424
1   425	    0100			 L0100:
1   426
1   427
1   428	    0100  C3				  DB 0C3H
1   429
1   430	    0101  0000e			 L0101:	  DW L20E2
1   431
1   432	    0103			 MAGICNUMBER:			     ; must be at 103H
1   433	    0103  12 34	56 78			  DB 12H,34H,56H,78H
1   434	    0107			 TURBOPASCALVERSION:
1   435	    0107  03 03	61 04			  DB 03H,03H,'a',04H	     ; must be at 107H
1   436
1   437	    010B  021Br				  DW L016B		     ; must be at 10BH
1   438	    010D  0000				  DW 0			     ; reserved	10DH
1   439	    010F  0000				  DW 0			     ; reserved	10FH
1   440	    0111  0000				  DW 0			     ; reserved	111H
1   441	    0113  0000				  DW 0
1   442	    0115  0000				  DW 0
1   443	    0117  0000				  DW 0
1   444	    0119  0000				  DW 0
1   445	    011B  0000				  DW 0
1   446	    011D  0000				  DW 0
1   447	    011F  0000				  DW 0
1   448	    0121  0000				  DW 0
1   449	    0123  0000				  DW 0
1   450
1   451					 ;PREFIX:  DB 'TURBO '		      ;	for 'TURBO.MSG'	or 'TURBO.OVR'
1   452
1   453					 ;L0000:   DB 0
1   454					 ;L0001:   DW 0
1   455
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 9
msx_asm\rtl_rtl.ASM



1   456					 ;L0004:   DB 0			       ; current drive ?
1   457
1   458					 ;L0005:   DB 0
1   459
1   460
1   461	    0125  00			 L0038:	 DB 0
1   462	    0126  0000			 L0039:	 DW 0
1   463
1   464						  ; L005C points to an area of 64 bytes	because	of the use
1   465						  ; as a file handle or	FCB for	the new	routines
1   466	    0128  00			 L005C:	  DB 0			     ; start of	FCB
1   467
1   468	    0129  08*(00)		 L005D:	 db 8 dup (0)			 ; name
1   469
1   470	    0131  00			 L0065:	 DB 0			 ; FCB extension, first	letter
1   471	    0132  02*(00)		 L0066:	 db 2 dup (0)			 ; second and third letter
1   472
1   473	    0134  00			 L0068:	 DB 0			 ; 0CH
1   474	    0135  00				 DB 0			 ; 0DH
1   475	    0136  00				 DB 0			 ; 0EH
1   476	    0137  00				 DB 0			 ; 0FH
1   477	    0138  04*(00)		 L006C:	 db 4 dup (0)			 ; 10H-13H
1   478	    013C  04*(00)		 L0070:	 db 4 dup (0)			 ; 14H-17H
1   479	    0140  08*(00)		 L0074:	 db 8 dup (0)			 ; 18H-1FH
1   480	    0148  00			 L007C:	 DB 0			 ; 20H
1   481	    0149  0000			 L007D:	 DW 0			 ; 21H-22H
1   482	    014B  0000				 DW 0			 ; 23H-24H
1   483
1   484	    014D  1B*(00)			  db 64	- 37 dup (0)
1   485
1   486		  =0080			 L0080	 EQU 0080H
1   487
1   488						 GLOBALS CONSTPTR
2   489
2   490						  IRP NAME,<CONSTPTR>
2   491							   GLOBAL2 <NAME>
2   492						  ENDM
3   493							   GLOBAL2 <CONSTPTR>
4   494						  GLOBAL CONSTPTR : NEAR
4   495
4   496						  GLOBAL _CONSTPTR : NEAR
4   497	    0168			 _CONSTPTR:
4   498
2   499
1   500	    0168			 CONSTPTR:; FUNCTION KeyPressed: BOOLEAN;
1   501	    0168  C3				 DB 0C3H
1   502	    0169  03C9r			 CONSTPTR_1:DW L0316
1   503
1   504						 GLOBALS CONINPTR
2   505
2   506						  IRP NAME,<CONINPTR>
2   507							   GLOBAL2 <NAME>
2   508						  ENDM
3   509							   GLOBAL2 <CONINPTR>
4   510						  GLOBAL CONINPTR : NEAR
4   511
4   512						  GLOBAL _CONINPTR : NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 10
msx_asm\rtl_rtl.ASM



4   513	    016B			 _CONINPTR:
4   514
2   515
1   516	    016B			 CONINPTR:			 ; console input routine
1   517	    016B  C3				 DB 0C3H
1   518	    016C  03D7r			 CONINPTR_1:DW L0320
1   519
1   520						 GLOBALS CONOUTPTR
2   521
2   522						  IRP NAME,<CONOUTPTR>
2   523							   GLOBAL2 <NAME>
2   524						  ENDM
3   525							   GLOBAL2 <CONOUTPTR>
4   526						  GLOBAL CONOUTPTR : NEAR
4   527
4   528						  GLOBAL _CONOUTPTR : NEAR
4   529	    016E			 _CONOUTPTR:
4   530
2   531
1   532	    016E			 CONOUTPTR:			 ; console output routine
1   533	    016E  C3				 DB 0C3H
1   534	    016F  03F1r			 CON1OUTPTR:DW L0339
1   535
1   536						 GLOBALS LSTOUTPTR
2   537
2   538						  IRP NAME,<LSTOUTPTR>
2   539							   GLOBAL2 <NAME>
2   540						  ENDM
3   541							   GLOBAL2 <LSTOUTPTR>
4   542						  GLOBAL LSTOUTPTR : NEAR
4   543
4   544						  GLOBAL _LSTOUTPTR : NEAR
4   545	    0171			 _LSTOUTPTR:
4   546
2   547
1   548	    0171			 LSTOUTPTR:
1   549	    0171  C3				  DB 0c3h
1   550	    0172  03E9r				 DW  L032F		     ; jump opcode at 00A9H
1   551									 ; LSTOUTPTR at	absolute 00AAH
1   552
1   553						 GLOBALS AUXOUTPTR
2   554
2   555						  IRP NAME,<AUXOUTPTR>
2   556							   GLOBAL2 <NAME>
2   557						  ENDM
3   558							   GLOBAL2 <AUXOUTPTR>
4   559						  GLOBAL AUXOUTPTR : NEAR
4   560
4   561						  GLOBAL _AUXOUTPTR : NEAR
4   562	    0174			 _AUXOUTPTR:
4   563
2   564
1   565	    0174			 AUXOUTPTR:
1   566	    0174  C3				 DB 0c3h
1   567	    0175  03EDr				 DW  L0334		 ; jump	opcode at 00ACH
1   568									 ; AUXOUTPTR at	absolute 00ADH
1   569
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 11
msx_asm\rtl_rtl.ASM



1   570						 GLOBALS AUXINPTR
2   571
2   572						  IRP NAME,<AUXINPTR>
2   573							   GLOBAL2 <NAME>
2   574						  ENDM
3   575							   GLOBAL2 <AUXINPTR>
4   576						  GLOBAL AUXINPTR : NEAR
4   577
4   578						  GLOBAL _AUXINPTR : NEAR
4   579	    0177			 _AUXINPTR:
4   580
2   581
1   582	    0177			 AUXINPTR:
1   583	    0177  C3				 DB 0c3h
1   584	    0178  03E5r				 DW  L032A		 ; jump	opcode at 00AFH
1   585									 ; AUXINPTR  at	absolute 00B0H
1   586
1   587						 GLOBALS USROUTPTR
2   588
2   589						  IRP NAME,<USROUTPTR>
2   590							   GLOBAL2 <NAME>
2   591						  ENDM
3   592							   GLOBAL2 <USROUTPTR>
4   593						  GLOBAL USROUTPTR : NEAR
4   594
4   595						  GLOBAL _USROUTPTR : NEAR
4   596	    017A			 _USROUTPTR:
4   597
2   598
1   599	    017A			 USROUTPTR:
1   600	    017A  C3				 DB 0c3h
1   601	    017B  03F1r				 DW  L0339		 ; jump	opcode at 00B2H
1   602									 ; USROUTPTR at	absolute 00B3H
1   603
1   604						 GLOBALS USRINPTR
2   605
2   606						  IRP NAME,<USRINPTR>
2   607							   GLOBAL2 <NAME>
2   608						  ENDM
3   609							   GLOBAL2 <USRINPTR>
4   610						  GLOBAL USRINPTR : NEAR
4   611
4   612						  GLOBAL _USRINPTR : NEAR
4   613	    017D			 _USRINPTR:
4   614
2   615
1   616	    017D			 USRINPTR:
1   617	    017D  C3				 DB 0c3h
1   618	    017E  03D7r				 DW  L0320		 ; jump	opcode at 00B5H
1   619									 ; USRINPTR  at	absolute 00B6H
1   620
1   621
1   622
1   623
1   624						  ; the	order of the next 6 words must not be changed
1   625
1   626						 GLOBALS L00B8
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 12
msx_asm\rtl_rtl.ASM



2   627
2   628						  IRP NAME,<L00B8>
2   629							   GLOBAL2 <NAME>
2   630						  ENDM
3   631							   GLOBAL2 <L00B8>
4   632						  GLOBAL L00B8 : NEAR
4   633
4   634						  GLOBAL _L00B8	: NEAR
4   635	    0180			 _L00B8:
4   636
2   637
1   638	    0180  0000			 L00B8:	  DW 0			     ; CON, TRM, 00B8
1   639
1   640						 GLOBALS L00BA
2   641
2   642						  IRP NAME,<L00BA>
2   643							   GLOBAL2 <NAME>
2   644						  ENDM
3   645							   GLOBAL2 <L00BA>
4   646						  GLOBAL L00BA : NEAR
4   647
4   648						  GLOBAL _L00BA	: NEAR
4   649	    0182			 _L00BA:
4   650
2   651
1   652	    0182  0000			 L00BA:	 DW 0			 ; KBD,	    00BA
1   653
1   654						 GLOBALS LST
2   655
2   656						  IRP NAME,<LST>
2   657							   GLOBAL2 <NAME>
2   658						  ENDM
3   659							   GLOBAL2 <LST>
4   660						  GLOBAL LST : NEAR
4   661
4   662						  GLOBAL _LST :	NEAR
4   663	    0184			 _LST:
4   664
2   665
1   666	    0184  0000			 LST:	 DW 0			 ; LST,	    00BC, absolute 00BCH
1   667
1   668						 GLOBALS L00BE
2   669
2   670						  IRP NAME,<L00BE>
2   671							   GLOBAL2 <NAME>
2   672						  ENDM
3   673							   GLOBAL2 <L00BE>
4   674						  GLOBAL L00BE : NEAR
4   675
4   676						  GLOBAL _L00BE	: NEAR
4   677	    0186			 _L00BE:
4   678
2   679
1   680	    0186  0000			 L00BE:	 DW 0			 ; AUX,	    00BE
1   681
1   682						 GLOBALS L00C0
2   683
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 13
msx_asm\rtl_rtl.ASM



2   684						  IRP NAME,<L00C0>
2   685							   GLOBAL2 <NAME>
2   686						  ENDM
3   687							   GLOBAL2 <L00C0>
4   688						  GLOBAL L00C0 : NEAR
4   689
4   690						  GLOBAL _L00C0	: NEAR
4   691	    0188			 _L00C0:
4   692
2   693
1   694	    0188  0000			 L00C0:	 DW 0			 ; USR,	    00C0
1   695
1   696						 GLOBALS OUTPUT
2   697
2   698						  IRP NAME,<OUTPUT>
2   699							   GLOBAL2 <NAME>
2   700						  ENDM
3   701							   GLOBAL2 <OUTPUT>
4   702						  GLOBAL OUTPUT	: NEAR
4   703
4   704						  GLOBAL _OUTPUT : NEAR
4   705	    018A			 _OUTPUT:
4   706
2   707
1   708	    018A  0000			 OUTPUT: DW 0			 ; OUTPUT,   00C2, absolute 00C2H
1   709
1   710
1   711
1   712
1   713						 GLOBALS BUFLEN
2   714
2   715						  IRP NAME,<BUFLEN>
2   716							   GLOBAL2 <NAME>
2   717						  ENDM
3   718							   GLOBAL2 <BUFLEN>
4   719						  GLOBAL BUFLEN	: NEAR
4   720
4   721						  GLOBAL _BUFLEN : NEAR
4   722	    018C			 _BUFLEN:
4   723
2   724
1   725	    018C  00			 BUFLEN: DB 0;			 ; BUFLEN    at	absolute 00D1H
1   726
1   727						 GLOBALS ERRORPTR
2   728
2   729						  IRP NAME,<ERRORPTR>
2   730							   GLOBAL2 <NAME>
2   731						  ENDM
3   732							   GLOBAL2 <ERRORPTR>
4   733						  GLOBAL ERRORPTR : NEAR
4   734
4   735						  GLOBAL _ERRORPTR : NEAR
4   736	    018D			 _ERRORPTR:
4   737
2   738
1   739	    018D			 ERRORPTR:
1   740	    018D  C3				 DB 0C3H
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 14
msx_asm\rtl_rtl.ASM



1   741	    018E  0000			 ERRORPTR_1:DW 0
1   742
1   743						 GLOBALS CBREAK
2   744
2   745						  IRP NAME,<CBREAK>
2   746							   GLOBAL2 <NAME>
2   747						  ENDM
3   748							   GLOBAL2 <CBREAK>
4   749						  GLOBAL CBREAK	: NEAR
4   750
4   751						  GLOBAL _CBREAK : NEAR
4   752	    0190			 _CBREAK:
4   753
2   754
1   755	    0190  0000			 CBREAK:DW 0			 ; CBREAK    at	absolute 00DDH
1   756
1   757						 GLOBALS HEAPPTR
2   758
2   759						  IRP NAME,<HEAPPTR>
2   760							   GLOBAL2 <NAME>
2   761						  ENDM
3   762							   GLOBAL2 <HEAPPTR>
4   763						  GLOBAL HEAPPTR : NEAR
4   764
4   765						  GLOBAL _HEAPPTR : NEAR
4   766	    0192			 _HEAPPTR:
4   767
2   768
1   769	    0192  0000			 HEAPPTR:DW 0			 ; HEAPPTR   at	absolute 00C4H
1   770
1   771						 GLOBALS RECURPTR
2   772
2   773						  IRP NAME,<RECURPTR>
2   774							   GLOBAL2 <NAME>
2   775						  ENDM
3   776							   GLOBAL2 <RECURPTR>
4   777						  GLOBAL RECURPTR : NEAR
4   778
4   779						  GLOBAL _RECURPTR : NEAR
4   780	    0194			 _RECURPTR:
4   781
2   782
1   783	    0194  0000			 RECURPTR:DW 0			 ; RECURPTR  at	absolute 00C6H
1   784
1   785	    0196  0000			 L00C8:	 DW 0			 ; 32 bit Seed number
1   786	    0198  00				  DB 0
1   787	    0199  00			 L00CB:	  DB 0			     ; waarde van R register
1   788
1   789	    019A  0000			 L00CC:	  DW 0			     ; start of	pascal source code
1   790	    019C  0000			 L00CE:	 DW 0
1   791	    019E  0000			 ERRORSTACK:DW 0		     ;
1   792
1   793		  =_TEXT:019F		 ERROREXITOK EQU $-1		     ; high byte of stack pointer is always
1   794									     ; NZ if filled in
1   795
1   796	    01A0  00			 L00D0:	  DB 0			     ; IORESULT	value
1   797
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 15
msx_asm\rtl_rtl.ASM



1   798	    01A1  0000			 L00D2:	  DW 0			     ; address to temp buffer of 256 bytes
1   799
1   800	    01A3  0000			 L00D4:	  DW 0
1   801	    01A5  0000			 L00D6:	 DW 0
1   802	    01A7  00			 L00D8:	 DB 0
1   803	    01A8  00			 L00DC:	  DB 0			     ; current Overlay Drive
1   804	    01A9  0000			 L00DE:	 DW 0
1   805	    01AB  00			 L00E0:	 DB 0
1   806
1   807	    01AC  0000			 L00E2:	 DW 0			 ; current device pointer
1   808									     ; (FIB pointer)
1   809
1   810	    01AE  0000			 L00E4:	 DW 0
1   811	    01B0  0000			 L00E6:	 DW 0
1   812	    01B2  0000			 L00E8:	 DW 0
1   813		  =_TEXT:01B3		 L00E9	  EQU L00E8+1
1   814	    01B4  0000			 L00EA:	 DW 0
1   815	    01B6  00			 L00EC:	 DB 0
1   816	    01B7  0000			 L00ED:	 DW 0			 ; old device pointer
1   817
1   818	    01B9			 OVERLAYLOADONLY:
1   819	    01B9  00				  DB 0
1   820	    01BA			 OVERLAYINFOADDRESS:
1   821	    01BA  0000				  DW 0
1   822	    01BC			 OVERLAYPOS:
1   823	    01BC  0000				  DW 0
1   824	    01BE  0000				  DW 0
1   825	    01C0			 OVERLAYDATALEN:
1   826	    01C0  0000				  DW 0
1   827
1   828						 ; tabel van 16	bytes, soort buffer
1   829	    01C2  0000			 L00F0:	 DW 0
1   830	    01C4  0000			 L00F2:	 DW 0
1   831	    01C6  0000			 L00F4:	 DW 0			 ; MemAvail
1   832	    01C8  0000			 L00F6:	 DW 0			 ; MaxAvail
1   833	    01CA  0000			 L00F8:	 DW 0
1   834	    01CC  08*(00)			 db 8 dup (0)
1   835
1   836					 ;	  DW 0ABCDH		  ; Magic
1   837					 ;	  DB 0CDH,0ABH
1   838					 ;	  DB 'Copyright	(C) 1994 MSX Computer Club Enschede',0
1   839
1   840	    01D4  0004			 L0124:	 DW 4			 ; Operating frequency of CPU (1-12 MHz)
1   841
1   842	    01D6  A1 42	00		 L0126:	 DB 0A1H,'B',0
1   843
1   844	    01D9  2A*(00)			 db 42 dup (0)			 ; patch area of 42 bytes
1   845
1   846	    0203			 L0153:	 ; TermTypStr
1   847	    0203  03 6D	73 78			 DB 3,'msx'		    ; STRING
1   848	    0207  11*(00)			 db L0153+21-$ dup (0)
1   849
1   850	    0218  50			 L0168:	 DB 80			 ; ScreenWidth
1   851	    0219  18			 L0169:	 DB 24			 ; ScreenHeight
1   852
1   853	    021A  00				 DB 0			 ; Why ?
1   854
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 16
msx_asm\rtl_rtl.ASM



1   855	    021B			 L016B:	 ; InitialStr, 16 bytes
1   856	    021B  03 1B	78 35 1D		 DB 3,1BH,'x5',1DH
1   857	    0220  0B*(00)			 db L016B+16-$ dup (0)		 ; fill	rest
1   858
1   859	    022B			 L017B:	 ; ResetStr, 16	bytes
1   860	    022B  10*(00)			 db L017B+16-$ dup (0)		 ; fill	rest
1   861
1   862	    023B			 L018B:	 ; CursorStr, 16 bytes
1   863	    023B  04 1B	59 00 00		 DB 4,1BH,'Y',0,0
1   864	    0240  0B*(00)			 db L018B+16-$ dup (0)		 ; fill	rest
1   865
1   866	    024B  01			 L019B:	 DB 1			 ; 0 = ASCII, 1	= Binary Address
1   867	    024C  20			 L019C:	 DB 32			 ; ColumnOffset
1   868	    024D  20			 L019D:	 DB 32			 ; LineOffset
1   869	    024E  04			 L019E:	 DB 4			 ; XPosition in	CursorStr
1   870	    024F  03			 L019F:	 DB 3			 ; YPosition in	CursorStr
1   871	    0250  0000			 L01A0:	 DW 0			 ; Delay after cursor address (0 - 255 ms)
1   872
1   873	    0252			 L01A2:	 ; ClearScrStr,	6 bytes
1   874	    0252  01 0C				 DB 1,0CH		 ; length = 1
1   875	    0254  04*(00)			 db L01A2+6-$ dup (0)		 ; fill	rest
1   876
1   877	    0258			 L01A8:	 ; HomeStr, 6 bytes
1   878	    0258  00				 DB 0			 ; length = 0
1   879	    0259  05*(00)			 db L01A8+6-$ dup (0)
1   880
1   881	    025E			 L01AE:	 ; InsLineStr, 6 bytes
1   882	    025E  02 1B	4C			 DB 2,1BH,'L'
1   883	    0261  03*(00)			 db L01AE+6-$ dup (0)
1   884
1   885	    0264			 L01B4:	 ; DelLineStr, 6 bytes
1   886	    0264  02 1B	4D			 DB 2,1BH,'M'
1   887	    0267  03*(00)			 db L01B4+6-$ dup (0)
1   888
1   889	    026A  0000			 L01BA:	 DW 0			 ; DelayLine
1   890
1   891	    026C			 L01BC:	 ; EraToEolStr
1   892	    026C  02 1B	4B			 DB 2,1BH,'K'
1   893	    026F  03*(00)			 db L01BC+6-$ dup (0)
1   894
1   895	    0272			 L01C2:	 ; HLStartStr		 ; Start of highlighting
1   896	    0272  00				 DB 0
1   897	    0273  05*(00)			 db L01C2+6-$ dup (0)
1   898
1   899	    0278			 L01C8:	 ; HLEndStr		 ; End of highlighting
1   900	    0278  00				 DB 0
1   901	    0279  05*(00)			 db L01C8+6-$ dup (0)
1   902
1   903	    027E  0000			 L01CE:	 DW 0			 ; DelayHL, delay after
1   904									 ; EraToEol and	HighLight
1   905
1   906	    0280  7E			 L01D0:	  DB 7eh
1   907	    0281  B7				 DB 0b7h
1   908	    0282  37				 DB 37h
1   909	    0283  C8				 DB 0c8h
1   910	    0284  23			 L01D4:	 DB 23h
1   911	    0285  F5				 DB 0f5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 17
msx_asm\rtl_rtl.ASM



1   912	    0286  E5				 DB 0e5h
1   913	    0287  7E				 DB 7eh
1   914	    0288  CD				 DB 0cdh
1   915	    0289  0298r				 DW  L01E8
1   916	    028B  E1				 DB 0e1h
1   917	    028C  F1				 DB 0f1h
1   918	    028D  3D				 DB 3dh
1   919	    028E  C8				 DB 0c8h
1   920	    028F  18 F3				 DB 18h,( L01D4)-$-1
1   921
1   922	    0291  CD			 L01E1:	  DB 0cdh
1   923	    0292  02B0r				 DW  L0200		   ; print CR,LF
1   924	    0294  0D 0A	00			 DB 0DH,0AH,0
1   925	    0297  C9				 DB 0c9h
1   926
1   927	    0298  6F			 L01E8:	  DB 6fh
1   928	    0299  E5				 DB 0e5h
1   929	    029A  CD				 DB 0cdh
1   930	    029B  016Er				 DW  CONOUTPTR
1   931	    029D  C9				 DB 0c9h
1   932
1   933	    029E			 L01EE:	 ; print character A with/without highlighting
1   934	    029E  FE 80				 DB 0feh, 080H
1   935	    02A0  DC				 DB 0dch
1   936	    02A1  031Er				 DW L026B		 ; LowVideo
1   937	    02A3  D4				 DB 0d4h
1   938	    02A4  0337r				 DW L0284		 ; HighVideo
1   939	    02A6  E6 7F				 DB 0e6h, 07FH
1   940	    02A8  18 EE				 DB 18h,( L01E8)-$-1
1   941
1   942	    02AA			 L01FA:	  ; print ASCIIZ-string	with highlighting
1   943	    02AA  E5				 DB 0e5h
1   944	    02AB  21				 DB 21h
1   945	    02AC  029Er				 DW L01EE
1   946	    02AE  18 04				 DB 18h,( L0204)-$-1
1   947
1   948	    02B0			 L0200:	 ; print ASCIIZ-string without highlighting
1   949	    02B0  E5				 DB 0e5h
1   950	    02B1  21				 DB 21h
1   951	    02B2  0298r				 DW L01E8
1   952	    02B4  22			 L0204:	 DB 22h
1   953	    02B5  02CEr				 DW L0213
1   954	    02B7  E1				 DB 0e1h
1   955	    02B8  E3				 DB 0e3h
1   956	    02B9  F5			 L0209:	 DB 0f5h
1   957	    02BA  C5				 DB 0c5h
1   958	    02BB  D5			 L020B:	 DB 0d5h
1   959
1   960	    02BC  7E			 L020C:	 DB 7eh
1   961	    02BD  23				 DB 23h
1   962	    02BE  B7				 DB 0b7h
1   963	    02BF  28 07				 DB 28h,(L0218)-$-1
1   964	    02C1  E5				 DB 0e5h
1   965	    02C2  CD			 L0212:	 DB 0cdh
1   966	    02C3  02CDr				 DW  J0213		 ; call	address, address is change able
1   967	    02C5  E1				 DB 0e1h
1   968	    02C6  18 F4				 DB 18h,( L020C)-$-1
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 18
msx_asm\rtl_rtl.ASM



1   969
1   970	    02C8  D1			 L0218:	 DB 0d1h
1   971	    02C9  C1				 DB 0c1h
1   972	    02CA  F1				 DB 0f1h
1   973	    02CB  E3				 DB 0e3h	 ; continue after string data
1   974	    02CC  C9				 DB 0c9h
1   975
1   976	    02CD			 J0213:
1   977	    02CD  C3				 DB 0C3H
1   978	    02CE  06BEr			 L0213:	 DW L04D2
1   979
1   980						 GLOBALS L021D
2   981
2   982						  IRP NAME,<L021D>
2   983							   GLOBAL2 <NAME>
2   984						  ENDM
3   985							   GLOBAL2 <L021D>
4   986						  GLOBAL L021D : NEAR
4   987
4   988						  GLOBAL _L021D	: NEAR
4   989	    02D0			 _L021D:
4   990
2   991
1   992	    02D0			 L021D:	 ; LIB,	delay
1   993						 ; in:	 HL = time to wait
1   994	    02D0  7D				 DB 7dh			 ; delay
1   995	    02D1  B4				 DB 0b4h
1   996	    02D2  C8				 DB 0c8h
1   997	    02D3  3A				 DB 3ah
1   998	    02D4  01D4r				 DW L0124		 ; A = frequency
1   999	    02D6  87				 DB 087h
1  1000	    02D7  87				 DB 087h
1  1001	    02D8  87				 DB 087h
1  1002	    02D9  E3			 L0226:	 DB 0e3h
1  1003	    02DA  E3				 DB 0e3h
1  1004	    02DB  E3				 DB 0e3h
1  1005	    02DC  E3				 DB 0e3h
1  1006	    02DD  C5				 DB 0c5h
1  1007	    02DE  01				 DB 01h
1  1008	    02DF  04D2				 DW 1234
1  1009	    02E1  C1				 DB 0c1h
1  1010	    02E2  3D				 DB 3dh
1  1011	    02E3  20 F4				 DB 20h,(L0226)-$-1
1  1012	    02E5  2B				 DB 2bh
1  1013	    02E6  18 E8				 DB 18h,( L021D)-$-1		 ; Delay
1  1014
1  1015	    02E8  CD			 L0235:	 DB 0cdh
1  1016	    02E9  0280r				 DW  L01D0
1  1017	    02EB  D8				 DB 0d8h
1  1018	    02EC  2A				 DB 02ah
1  1019	    02ED  027Er				 DW L01CE		 ; HL =	DelayHL, delay highlighting
1  1020	    02EF  18 DF				 DB 18h,( L021D)-$-1		 ; Delay
1  1021
1  1022						 GLOBALS L023E
2  1023
2  1024						  IRP NAME,<L023E>
2  1025							   GLOBAL2 <NAME>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 19
msx_asm\rtl_rtl.ASM



2  1026						  ENDM
3  1027							   GLOBAL2 <L023E>
4  1028						  GLOBAL L023E : NEAR
4  1029
4  1030						  GLOBAL _L023E	: NEAR
4  1031	    02F1			 _L023E:
4  1032
2  1033
1  1034	    02F1			 L023E:	 ; PROCEDURE ClrSCr;
1  1035	    02F1  F5				 DB 0f5h
1  1036	    02F2  C5				 DB 0c5h
1  1037	    02F3  D5				 DB 0d5h
1  1038	    02F4  E5				 DB 0e5h
1  1039
1  1040	    02F5  21				 DB 21h
1  1041	    02F6  0258r				 DW L01A8		 ; HL =	HomeStr
1  1042	    02F8  CD				 DB 0cdh
1  1043	    02F9  02E8r				 DW  L0235
1  1044	    02FB  21				 DB 21h
1  1045	    02FC  0252r				 DW L01A2		 ; HL =	ClearScrStr
1  1046
1  1047	    02FE  CD			 L024B:	 DB 0cdh
1  1048	    02FF  0280r				 DW  L01D0
1  1049	    0301  2A				 DB 02ah
1  1050	    0302  026Ar				 DW L01BA		 ; HL =	DelayLine
1  1051	    0304  D4				 DB 0d4h
1  1052	    0305  02D0r				 DW L021D		 ; Delay
1  1053
1  1054	    0307  E1				 DB 0e1h
1  1055	    0308  D1				 DB 0d1h
1  1056	    0309  C1				 DB 0c1h
1  1057	    030A  F1				 DB 0f1h
1  1058	    030B  C9				 DB 0c9h
1  1059
1  1060						 GLOBALS L0259
2  1061
2  1062						  IRP NAME,<L0259>
2  1063							   GLOBAL2 <NAME>
2  1064						  ENDM
3  1065							   GLOBAL2 <L0259>
4  1066						  GLOBAL L0259 : NEAR
4  1067
4  1068						  GLOBAL _L0259	: NEAR
4  1069	    030C			 _L0259:
4  1070
2  1071
1  1072	    030C			 L0259:	 ; PROCEDURE DelLine
1  1073	    030C  F5				 DB 0f5h
1  1074	    030D  C5				 DB 0c5h
1  1075	    030E  D5				 DB 0d5h
1  1076	    030F  E5				 DB 0e5h
1  1077	    0310  21				 DB 21h
1  1078	    0311  0264r				 DW L01B4		 ; DelLineStr
1  1079	    0313  18 E9				 DB 18h,( L024B)-$-1
1  1080
1  1081						 GLOBALS L0262
2  1082
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 20
msx_asm\rtl_rtl.ASM



2  1083						  IRP NAME,<L0262>
2  1084							   GLOBAL2 <NAME>
2  1085						  ENDM
3  1086							   GLOBAL2 <L0262>
4  1087						  GLOBAL L0262 : NEAR
4  1088
4  1089						  GLOBAL _L0262	: NEAR
4  1090	    0315			 _L0262:
4  1091
2  1092
1  1093	    0315			 L0262:	 ; PROCEDURE InsLine;
1  1094	    0315  F5				 DB 0f5h
1  1095	    0316  C5				 DB 0c5h
1  1096	    0317  D5				 DB 0d5h
1  1097	    0318  E5				 DB 0e5h
1  1098	    0319  21				 DB 21h
1  1099	    031A  025Er				 DW L01AE		 ; InsLineStr
1  1100	    031C  18 E0				 DB 18h,( L024B)-$-1
1  1101
1  1102						 GLOBALS L026B
2  1103
2  1104						  IRP NAME,<L026B>
2  1105							   GLOBAL2 <NAME>
2  1106						  ENDM
3  1107							   GLOBAL2 <L026B>
4  1108						  GLOBAL L026B : NEAR
4  1109
4  1110						  GLOBAL _L026B	: NEAR
4  1111	    031E			 _L026B:
4  1112
2  1113
1  1114	    031E			 L026B:	 ; PROCEDURE LowVideo;
1  1115	    031E  F5				 DB 0f5h
1  1116	    031F  3A				 DB 3ah
1  1117	    0320  01ABr				 DW L00E0
1  1118	    0322  B7				 DB 0b7h
1  1119	    0323  28 10				 DB 28h,(L0282)-$-1
1  1120
1  1121	    0325  C5				 DB 0c5h
1  1122	    0326  D5				 DB 0d5h
1  1123	    0327  E5				 DB 0e5h
1  1124	    0328  AF				 DB 0afh
1  1125	    0329  32				 DB 32h
1  1126	    032A  01ABr				 DW L00E0
1  1127	    032C  21				 DB 21h
1  1128	    032D  0278r				 DW L01C8		 ; HLEndStr
1  1129
1  1130	    032F  CD			 L027C:	 DB 0cdh
1  1131	    0330  02E8r				 DW  L0235
1  1132
1  1133	    0332  E1				 DB 0e1h
1  1134	    0333  D1				 DB 0d1h
1  1135	    0334  C1				 DB 0c1h
1  1136	    0335  F1			 L0282:	 DB 0f1h
1  1137	    0336  C9				 DB 0c9h
1  1138
1  1139						 GLOBALS L0284
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 21
msx_asm\rtl_rtl.ASM



2  1140
2  1141						  IRP NAME,<L0284>
2  1142							   GLOBAL2 <NAME>
2  1143						  ENDM
3  1144							   GLOBAL2 <L0284>
4  1145						  GLOBAL L0284 : NEAR
4  1146
4  1147						  GLOBAL _L0284	: NEAR
4  1148	    0337			 _L0284:
4  1149
2  1150
1  1151	    0337			 L0284:	 ; PROCEDURE NormVideo;
1  1152	    0337  F5				 DB 0f5h
1  1153	    0338  3A				 DB 3ah
1  1154	    0339  01ABr				 DW L00E0
1  1155	    033B  FE FF				 DB 0feh, 0FFH
1  1156	    033D  28 F6				 DB 28h,(L0282)-$-1
1  1157
1  1158	    033F  C5				 DB 0c5h
1  1159	    0340  D5				 DB 0d5h
1  1160	    0341  E5				 DB 0e5h
1  1161	    0342  3E FF				 DB 3eh,0FFH
1  1162	    0344  32				 DB 32h
1  1163	    0345  01ABr				 DW L00E0
1  1164	    0347  21				 DB 21h
1  1165	    0348  0272r				 DW L01C2		 ; HLStartStr
1  1166	    034A  18 E3				 DB 18h,( L027C)-$-1
1  1167
1  1168						 GLOBALS L0299
2  1169
2  1170						  IRP NAME,<L0299>
2  1171							   GLOBAL2 <NAME>
2  1172						  ENDM
3  1173							   GLOBAL2 <L0299>
4  1174						  GLOBAL L0299 : NEAR
4  1175
4  1176						  GLOBAL _L0299	: NEAR
4  1177	    034C			 _L0299:
4  1178
2  1179
1  1180	    034C			 L0299:	 ; PROCEDURE ClrEol;
1  1181	    034C  F5				 DB 0f5h
1  1182	    034D  C5				 DB 0c5h
1  1183	    034E  D5				 DB 0d5h
1  1184	    034F  E5				 DB 0e5h
1  1185	    0350  21				 DB 21h
1  1186	    0351  026Cr				 DW L01BC		 ; EraToEolStr
1  1187	    0353  18 DA				 DB 18h,( L027C)-$-1
1  1188
1  1189	    0355			 L02A2:	 ; in:	 L = X,	0..79
1  1190						 ;	 H = Y,	0..23
1  1191	    0355  F5				 DB 0f5h
1  1192	    0356  C5				 DB 0c5h
1  1193	    0357  D5				 DB 0d5h
1  1194	    0358  E5				 DB 0e5h
1  1195	    0359  E5				 DB 0e5h
1  1196	    035A  21				 DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 22
msx_asm\rtl_rtl.ASM



1  1197	    035B  023Br				 DW L018B
1  1198	    035D  11				 DB 11h
1  1199	    035E  01C2r				 DW L00F0
1  1200	    0360  01				 DB 01h
1  1201	    0361  0010				 DW 0010H
1  1202	    0363  ED B0				 DB 0edh,0b0h
1  1203	    0365  D1				 DB 0d1h
1  1204	    0366  3A				 DB 3ah
1  1205	    0367  024Er				 DW L019E
1  1206	    0369  4F				 DB 4fh
1  1207	    036A  3A				 DB 3ah
1  1208	    036B  024Cr				 DW L019C
1  1209	    036D  82				 DB 082h
1  1210	    036E  D5				 DB 0d5h
1  1211	    036F  CD				 DB 0cdh
1  1212	    0370  038Fr				 DW  L02DC
1  1213	    0372  D1				 DB 0d1h
1  1214	    0373  3A				 DB 3ah
1  1215	    0374  024Fr				 DW L019F
1  1216	    0376  4F				 DB 4fh
1  1217	    0377  3A				 DB 3ah
1  1218	    0378  024Dr				 DW L019D
1  1219	    037A  83				 DB 083h
1  1220	    037B  CD				 DB 0cdh
1  1221	    037C  038Fr				 DW  L02DC
1  1222	    037E  21				  DB 21h
1  1223	    037F  01C2r				 DW L00F0
1  1224	    0381  CD				  DB 0cdh
1  1225	    0382  0280r				 DW  L01D0
1  1226
1  1227	    0384  2A				 DB 02ah
1  1228	    0385  0250r				 DW L01A0		 ; DelayCursor
1  1229	    0387  CD				 DB 0cdh
1  1230	    0388  02D0r				 DW  L021D		 ; Delay
1  1231	    038A  E1				 DB 0e1h
1  1232	    038B  D1				 DB 0d1h
1  1233	    038C  C1				 DB 0c1h
1  1234	    038D  F1				 DB 0f1h
1  1235	    038E  C9				 DB 0c9h
1  1236
1  1237	    038F  21			 L02DC:	 DB 21h
1  1238	    0390  01C2r				 DW L00F0
1  1239	    0392  06 00				 DB 06h,0
1  1240	    0394  09				 DB 09h
1  1241	    0395  EB				 DB 0ebh
1  1242	    0396  21				 DB 21h
1  1243	    0397  024Br				 DW L019B
1  1244	    0399  34				 DB 034h
1  1245	    039A  35				 DB 035h
1  1246	    039B  28 02				 DB 28h,(L02EC)-$-1
1  1247	    039D  12				 DB 12h
1  1248	    039E  C9				 DB 0c9h
1  1249
1  1250	    039F  1B			 L02EC:	 DB 1bh
1  1251	    03A0  1B				 DB 1bh
1  1252	    03A1  21				 DB 21h
1  1253	    03A2  03BDr				 DW TAB110100+3
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 23
msx_asm\rtl_rtl.ASM



1  1254	    03A4  06 03				 DB 06h,3
1  1255
1  1256	    03A6  2B			 L02F3:	 DB 2bh
1  1257
1  1258	    03A7  0E 2F				 DB 0eh,'0'-1
1  1259	    03A9  0C			 L02F6:	 DB 0ch
1  1260	    03AA  96				 DB 096h
1  1261	    03AB  30 FC				 DB 30h,(L02F6)-$-1
1  1262
1  1263	    03AD  86				 DB 086h
1  1264	    03AE  F5				 DB 0f5h
1  1265	    03AF  79				 DB 79h
1  1266	    03B0  FE 30				 DB 0feh, '0'
1  1267	    03B2  28 01			 L02FF:	 DB 28h,(L0302)-$-1
1  1268
1  1269	    03B4  12				 DB 12h
1  1270	    03B5  13			 L0302:	 DB 13h
1  1271	    03B6  F1				 DB 0f1h
1  1272	    03B7  10 ED				 DB 10h,( L02F3)-$-1
1  1273	    03B9  C9				 DB 0c9h
1  1274
1  1275	    03BA			 TAB110100:
1  1276	    03BA  01 0A	64			 DB 1,10,100
1  1277
1  1278						 GLOBALS L030A
2  1279
2  1280						  IRP NAME,<L030A>
2  1281							   GLOBAL2 <NAME>
2  1282						  ENDM
3  1283							   GLOBAL2 <L030A>
4  1284						  GLOBAL L030A : NEAR
4  1285
4  1286						  GLOBAL _L030A	: NEAR
4  1287	    03BD			 _L030A:
4  1288
2  1289
1  1290	    03BD			 L030A:	 ; PROCEDURE CrtInit;
1  1291	    03BD  21				 DB 21h
1  1292	    03BE  021Br				 DW L016B		 ; InitialStr
1  1293	    03C0  C3				 DB 0c3h
1  1294	    03C1  02E8r				 DW  L0235
1  1295
1  1296						 GLOBALS L0310
2  1297
2  1298						  IRP NAME,<L0310>
2  1299							   GLOBAL2 <NAME>
2  1300						  ENDM
3  1301							   GLOBAL2 <L0310>
4  1302						  GLOBAL L0310 : NEAR
4  1303
4  1304						  GLOBAL _L0310	: NEAR
4  1305	    03C3			 _L0310:
4  1306
2  1307
1  1308	    03C3			 L0310:	 ; PROCEDURE CrtExit;
1  1309	    03C3  21				 DB 21h
1  1310	    03C4  022Br				 DW L017B		 ; ResetStr
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 24
msx_asm\rtl_rtl.ASM



1  1311	    03C6  C3				 DB 0c3h
1  1312	    03C7  02E8r				 DW  L0235
1  1313
1  1314	    03C9			 L0316:	  ; tests if there is a	character in the input buffer
1  1315						 ; and places it in a temporary	buffer to read it the next time
1  1316						 ; in:	 -
1  1317						 ; out:	 HL = false = 0, if no character present
1  1318						 ;	 HL = true = 1,	if a character was present
1  1319						 ; MSX version,	FAST
1  1320	    03C9  2A				 DB 02ah
1  1321	    03CA  F3FA				 DW 0F3FAH
1  1322	    03CC  3A				 DB 3ah
1  1323	    03CD  F3F8				 DW 0F3F8H
1  1324	    03CF  95				 DB 095h
1  1325	    03D0  3E 01				 DB 3eh,1			 ; assume there	are characters present
1  1326	    03D2  20 01				 DB 20h,(L0316_OK)-$-1		 ; jump	if characters present
1  1327
1  1328	    03D4  3D				 DB 3dh			 ; FALSE if not
1  1329	    03D5			 L0316_OK:
1  1330
1  1331	    03D5  18 0A				 DB 18h,( L0326)-$-1
1  1332
1  1333	    03D7			 L0320:	 ; in:	 -
1  1334						 ; out:	 HL = character	read from keyboard
1  1335						 ;	 H = always zero
1  1336	    03D7  0E 08				  DB 0eh,8		       ; standard input	without	echo
1  1337									     ; this is not CPM compatible !!!
1  1338
1  1339	    03D9			 L0321:
1  1340	    03D9  CD				  DB 0cdh
1  1341	    03DA  0005				 DW  MSXDOS
1  1342						  ; L =	A = character read from	keyboard
1  1343	    03DC  18 03				  DB 18h,( L0326)-$-1
1  1344
1  1345
1  1346	    03DE  CD			 L0323:	  DB 0cdh
1  1347	    03DF  041Br				 DW  L035F
1  1348
1  1349	    03E1  6F			 L0326:	 DB 6fh
1  1350	    03E2  26 00				 DB 26h,0
1  1351	    03E4  C9				 DB 0c9h
1  1352
1  1353	    03E5			 L032A:
1  1354	    03E5  0E 03				  DB 0eh,3		       ; Reader	Input, Auxiliary Input
1  1355	    03E7  18 F0				  DB 18h,( L0321)-$-1
1  1356
1  1357
1  1358	    03E9			 L032F:	  ; List Output, Printer Output
1  1359	    03E9  16 05				  DB 16h,5
1  1360	    03EB  18 06				  DB 18h,( L033C)-$-1
1  1361
1  1362
1  1363	    03ED			 L0334:	  ; Puncher Output, Auxiliary Output
1  1364	    03ED  16 04				  DB 16h,4
1  1365	    03EF  18 02				  DB 18h,( L033C)-$-1
1  1366
1  1367	    03F1			 L0339:	  ; Console Output
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 25
msx_asm\rtl_rtl.ASM



1  1368	    03F1  16 02				  DB 16h,2		       ; Console Output
1  1369
1  1370	    03F3  E1			 L033C:	 DB 0e1h		 ; pop return address
1  1371	    03F4  C1				 DB 0c1h		 ; C = character to print
1  1372	    03F5  E5				 DB 0e5h		 ; push	return address
1  1373
1  1374	    03F6  3A				 DB 3ah
1  1375	    03F7  0190r				 DW CBREAK
1  1376	    03F9  B7				 DB 0b7h
1  1377	    03FA  28 1A				 DB 28h,(L035D_1)-$-1		 ; jump	if no break allowed
1  1378
1  1379	    03FC  D5				 DB 0d5h
1  1380	    03FD  C5				 DB 0c5h
1  1381	    03FE  CD				 DB 0cdh
1  1382	    03FF  0168r				 DW  CONSTPTR
1  1383	    0401  7C				 DB 7ch
1  1384	    0402  B5				 DB 0b5h
1  1385	    0403  28 0F				 DB 28h,(L035D)-$-1		 ; jump	if no character	present
1  1386
1  1387	    0405  CD				  DB 0cdh
1  1388	    0406  05CCr				 DW  L03E1		   ; A = character from	console
1  1389	    0408  FE 13				 DB 0feh, 013H
1  1390	    040A  20 08				 DB 20h,(L035D)-$-1
1  1391
1  1392	    040C  CD				 DB 0cdh
1  1393	    040D  05CCr				 DW  L03E1		 ; A = character from console
1  1394	    040F  FE 03				 DB 0feh, 3
1  1395	    0411  CA				  DB 0cah
1  1396	    0412  27FDr				 DW L20D4		  ; jump to Program Abort if ^C	pressed
1  1397
1  1398	    0414  C1			 L035D:	 DB 0c1h
1  1399	    0415  D1				 DB 0d1h
1  1400
1  1401	    0416			 L035D_1:
1  1402	    0416  59				  DB 59h		     ; E = character to	print
1  1403	    0417  4A				  DB 4ah		     ; DOS function
1  1404	    0418  C3				  DB 0c3h
1  1405	    0419  0005				 DW  MSXDOS
1  1406
1  1407	    041B			 L035F:
1  1408	    041B  2A				 DB 02ah
1  1409	    041C  0001				 DW 0001H
1  1410	    041E  19				 DB 019h
1  1411	    041F  E9				 DB 0e9h
1  1412
1  1413						  GLOBALS L0364
2  1414
2  1415						  IRP NAME,<L0364>
2  1416							   GLOBAL2 <NAME>
2  1417						  ENDM
3  1418							   GLOBAL2 <L0364>
4  1419						  GLOBAL L0364 : NEAR
4  1420
4  1421						  GLOBAL _L0364	: NEAR
4  1422	    0420			 _L0364:
4  1423
2  1424
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 26
msx_asm\rtl_rtl.ASM



1  1425	    0420			 L0364:	  ; InitCharIO
1  1426	    0420  22				  DB 22h
1  1427	    0421  01A1r				 DW L00D2	       ; LIB, set temp buffer address
1  1428	    0423  78				 DB 78h
1  1429	    0424  32				 DB 32h
1  1430	    0425  0190r				 DW CBREAK
1  1431					 ;	  LD A,C
1  1432					 ;	  OR A
1  1433					 ;	  JR Z,L037A
1  1434
1  1435	    0427  3E C3				 DB 3eh,0C3H		 ; install CBREAK handler at RST 0008H !
1  1436	    0429  32				 DB 32h
1  1437	    042A  0008				 DW 0008H		 ; LD (L0038),A
1  1438	    042C  21				 DB 21h
1  1439	    042D  270Ar				 DW L1FFB
1  1440	    042F  22				 DB 22h
1  1441	    0430  0009				 DW 0009H		 ; LD (L0039),HL
1  1442
1  1443	    0432			 L037A:
1  1444	    0432  21				 DB 21h
1  1445	    0433  0590r				 DW L03A5
1  1446	    0435  11				 DB 11h
1  1447	    0436  0168r				 DW CONSTPTR
1  1448	    0438  01				 DB 01h
1  1449	    0439  0018				 DW L03A5_L
1  1450	    043B  ED B0				 DB 0edh,0b0h
1  1451
1  1452	    043D  21				 DB 21h
1  1453	    043E  05A8r				 DW L03BD
1  1454	    0440  11				 DB 11h
1  1455	    0441  0180r				 DW L00B8
1  1456	    0443  01				 DB 01h
1  1457	    0444  000C				 DW 000CH
1  1458	    0446  ED B0				 DB 0edh,0b0h			 ; flag	bits of	I/O routines
1  1459
1  1460	    0448  AF				 DB 0afh
1  1461	    0449  6F				 DB 6fh
1  1462	    044A  67				 DB 67h
1  1463	    044B  32				 DB 32h
1  1464	    044C  01A0r				 DW L00D0		 ; reset IORESULT value
1  1465	    044E  22				 DB 22h
1  1466	    044F  01A3r				 DW L00D4
1  1467	    0451  22				 DB 22h
1  1468	    0452  01A5r				 DW L00D6
1  1469	    0454  3E 7E				 DB 3eh,07EH
1  1470	    0456  32				 DB 32h
1  1471	    0457  018Cr				 DW BUFLEN
1  1472	    0459  32				 DB 32h
1  1473	    045A  01ABr				 DW L00E0
1  1474
1  1475	    045C  CD				  DB 0cdh
1  1476	    045D  0000e				 DW  INITFILEIO		   ; Set DOS2Present variable
1  1477
1  1478	    045F  3A				  DB 3ah
1  1479	    0460  0000e				 DW DOS2PRESENT
1  1480	    0462  B7				  DB 0b7h
1  1481	    0463  C4				  DB 0c4h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 27
msx_asm\rtl_rtl.ASM



1  1482	    0464  046Dr				 DW CHECKREDIRECTION
1  1483
1  1484	    0466  32				  DB 32h
1  1485	    0467  046Cr				 DW REDIRECTIONFLAG	; 0 if DOS 1
1  1486									     ; NonZero if DOS 2	and redirection	active
1  1487
1  1488	    0469  C3				 DB 0c3h
1  1489	    046A  047Br				 DW  IGIOS
1  1490
1  1491	    046C			 REDIRECTIONFLAG:
1  1492	    046C  00				  DB 0			     ; 0 = no input redirection
1  1493									     ; 255 = input redirection
1  1494
1  1495	    046D			 CHECKREDIRECTION:
1  1496						  ; in:	   -
1  1497						  ; out:   A = 0 if no redirection
1  1498						  ;	   A = 255 if redirection present
1  1499	    046D  3E 00				  DB 3eh,0		       ; Get State
1  1500	    046F  0E 70				  DB 0eh,70H		       ; Get/Set Redirection State
1  1501	    0471  CD				  DB 0cdh
1  1502	    0472  0005				 DW  MSXDOS
1  1503	    0474  3E 00				  DB 3eh,0		       ; assume	no input redirection
1  1504	    0476  CB 40				  DB 0cbh,040h
1  1505	    0478  C8				  DB 0c8h		       ; return	if no input redirection
1  1506
1  1507	    0479  3D				  DB 3dh		      ;	A = 255
1  1508	    047A  C9				  DB 0c9h
1  1509
1  1510	    047B			 IGIOS:	  ; checks if GIOS-TSR is present
1  1511
1  1512	    047B  AF				 DB 0afh
1  1513	    047C  32				 DB 32h
1  1514	    047D  0581r				 DW GIOSOK
1  1515	    047F  6F				 DB 6fh
1  1516	    0480  67				 DB 67h
1  1517	    0481  22				 DB 22h
1  1518	    0482  057Fr				 DW MEMMNVER		 ; reset MemMan	version
1  1519	    0484  22				 DB 22h
1  1520	    0485  0582r				 DW GIOSVER		 ; reset GIOSVersion
1  1521
1  1522	    0487  3E AA				  DB 3eh,0AAH		       ; runtime: MemMan not present
1  1523	    0489  32				  DB 32h
1  1524	    048A  2737r				 DW L201D
1  1525
1  1526	    048C  21				  DB 21h
1  1527	    048D  2736r				 DW L201C
1  1528	    048F  22				  DB 22h
1  1529	    0490  057Cr				 DW RUNGIOS+1	       ; default r.error
1  1530
1  1531	    0492  CD				 DB 0cdh
1  1532	    0493  0567r				 DW  CHKMMAN
1  1533	    0495  32				 DB 32h
1  1534	    0496  057Er				 DW MEMMAN		 ; 1 = MemMan present
1  1535									 ; 0 = MemMan not present
1  1536	    0498  C8				 DB 0c8h		 ; quit	if not present
1  1537
1  1538	    0499  3E AB				  DB 3eh,0ABH		       ; runtime: Wrong	MemMan version
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 28
msx_asm\rtl_rtl.ASM



1  1539	    049B  32				  DB 32h
1  1540	    049C  2737r				 DW L201D
1  1541
1  1542	    049E  06 07				 DB 06h,7			 ; MemMan version
1  1543	    04A0  11				 DB 11h
1  1544	    04A1  4D32				 DW 4DH*256+50
1  1545	    04A3  D5				 DB 0d5h
1  1546	    04A4  CD				 DB 0cdh
1  1547	    04A5  FFCA				 DW  0FFCAH		 ; get MemMan version
1  1548	    04A7  22				 DB 22h
1  1549	    04A8  057Fr				 DW MEMMNVER		 ; save	MemManVersion #H.L
1  1550
1  1551	    04AA  11				  DB 11h
1  1552	    04AB  0204				 DW NEEDEDMEMMANVERSION	 ; minimum version
1  1553	    04AD  B7				  DB 0b7h
1  1554	    04AE  ED 52				  DB 0EDH,052h			; current >= NeededMemManVersion ?
1  1555
1  1556	    04B0  06 08				 DB 06h,8			 ; address of XTsrCall
1  1557	    04B2  D1				 DB 0d1h
1  1558
1  1559	    04B3  D8				  DB 0d8h		       ; return	if Wrong MemMan	version
1  1560
1  1561	    04B4  3E AC				  DB 3eh,0ACH		       ; runtime: GIOS-tsr not present
1  1562	    04B6  32				  DB 32h
1  1563	    04B7  2737r				 DW L201D
1  1564
1  1565	    04B9  CD				 DB 0cdh
1  1566	    04BA  FFCA				 DW  0FFCAH		 ; get address of XTsrCall
1  1567	    04BC  22				 DB 22h
1  1568	    04BD  050Br				 DW TSRCALL1
1  1569
1  1570	    04BF  21				 DB 21h
1  1571	    04C0  0584r				 DW GIOSTSRNAME
1  1572	    04C2  CD				  DB 0cdh
1  1573	    04C3  0517r				 DW  CHECKTSR
1  1574	    04C5  C8				 DB 0c8h		 ; quit	if GIOS	TSR not	present
1  1575
1  1576	    04C6  3E AD				  DB 3eh,0ADH		       ; runtime: GIOS not present
1  1577	    04C8  32				  DB 32h
1  1578	    04C9  2737r				 DW L201D
1  1579
1  1580						  ; BC = TsrID
1  1581
1  1582					 ;	   PUSH	BC		      ;	save TsrID
1  1583					 ;
1  1584					 ;	   LD A,1		      ;	WriteIndex
1  1585					 ;	   LD HL,4		      ;	Set address of ErrorNumber
1  1586					 ;	   LD DE,ErrorNumber	      ;	ErrorNumber address
1  1587					 ;
1  1588					 ;	   CALL	TSRCALL
1  1589					 ;
1  1590					 ;	   POP BC		      ;	restore	TsrID
1  1591
1  1592
1  1593	    04CB  C5				  DB 0c5h		     ; save TsrID
1  1594
1  1595	    04CC  AF				 DB 0afh		 ; ReadIndex
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 29
msx_asm\rtl_rtl.ASM



1  1596	    04CD  21				 DB 21h
1  1597	    04CE  0000				 DW 0			 ; GetVersion
1  1598
1  1599	    04D0  CD				  DB 0cdh
1  1600	    04D1  0507r				 DW  TSRCALL
1  1601	    04D3  53ED 0582r			 DW 53edh,GIOSVER
1  1602
1  1603	    04D7  C1				 DB 0c1h		 ; restore TsrID
1  1604
1  1605
1  1606	    04D8  7A				  DB 7ah
1  1607	    04D9  B3				 DB 0b3h
1  1608	    04DA  C8				 DB 0c8h		 ; quit	if COM-file not	loaded
1  1609									     ; runtime:	GIOS not present
1  1610
1  1611	    04DB  3E AE				  DB 3eh,0AEH		       ; runtime: Wrong	GIOS version
1  1612	    04DD  32				  DB 32h
1  1613	    04DE  2737r				 DW L201D
1  1614
1  1615	    04E0  21				  DB 21h
1  1616	    04E1  0222				 DW NEEDEDGIOSVERSION
1  1617	    04E3  EB				  DB 0ebh
1  1618	    04E4  B7				  DB 0b7h
1  1619	    04E5  ED 52				  DB 0EDH,052h			; current - NeededGIOSVersion
1  1620	    04E7  D8				  DB 0d8h		       ; quit if current < NeededGIOSVersion
1  1621
1  1622	    04E8  3E 01				  DB 3eh,1
1  1623	    04EA  32				 DB 32h
1  1624	    04EB  0581r				 DW GIOSOK		 ; 1 = GIOS Present, if	TSR and	COM-file
1  1625									 ;		   loaded
1  1626
1  1627	    04ED  AF				 DB 0afh		 ; ReadIndex
1  1628	    04EE  21				 DB 21h
1  1629	    04EF  0001				 DW 1			 ; Get RunGIOS
1  1630	    04F1  CD				 DB 0cdh
1  1631	    04F2  0507r				 DW  TSRCALL
1  1632	    04F4  53ED 057Cr			  DW 53edh,RUNGIOS+1
1  1633
1  1634	    04F8  21				  DB 21h
1  1635	    04F9  0000e				 DW ERRORNUMBER
1  1636	    04FB  E5				  DB 0e5h		     ; address of ErrorNumber
1  1637	    04FC  21				  DB 21h
1  1638	    04FD  0000				 DW 0
1  1639	    04FF  E5				  DB 0e5h		     ; Dummy
1  1640	    0500  E5				  DB 0e5h		     ; Dummy
1  1641
1  1642	    0501  3E 01				  DB 3eh,1		       ; GIOSInit ( AddressErrorNumber,	0, 0)
1  1643	    0503  CD				  DB 0cdh
1  1644	    0504  057Br				 DW  RUNGIOS		   ; call because return address must
1  1645									     ; be pushed before	entering GIOS
1  1646
1  1647	    0506  C9				  DB 0c9h
1  1648
1  1649	    0507			 TSRCALL: ; in:	 BC = TsrID
1  1650	    0507  C5				 DB 0c5h
1  1651	    0508  DD E1				 DB 0ddh,0e1h			 ; IX =	TsrID
1  1652	    050A  C3				 DB 0C3H
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 30
msx_asm\rtl_rtl.ASM



1  1653	    050B  0000			 TSRCALL1:DW 0
1  1654
1  1655	    050D			 CHECKMEMMAN:
1  1656						  ; caution: the second	address	popped from the	stack must be the
1  1657						  ;	     address to	return to when pascal continues
1  1658	    050D  3A				  DB 3ah
1  1659	    050E  2737r				 DW L201D
1  1660	    0510  FE AC				  DB 0feh, 0ACH
1  1661	    0512  D0				  DB 0d0h		      ;	continue if error = MemMan not present or
1  1662									     ;		   error = wrong MemMan	version
1  1663
1  1664	    0513  E1				  DB 0e1h		      ;	remove call address to checkmemman
1  1665	    0514  C3				  DB 0c3h
1  1666	    0515  2738r				 DW  L2027
1  1667
1  1668	    0517			 CHECKTSR:
1  1669						 ; in:	 HL = name of TSR
1  1670						 ; out:	 BC = TsrID code
1  1671						 ;	 A = 1,	present
1  1672						 ;	 A = 0,	not present
1  1673	    0517  11				 DB 11h
1  1674	    0518  4D3E				 DW 4DH*256+62
1  1675	    051A  CD				 DB 0cdh
1  1676	    051B  FFCA				 DW  0FFCAH
1  1677	    051D  3F				 DB 3fh
1  1678	    051E  3E 00				 DB 3eh,0
1  1679	    0520  8F				 DB 08fh
1  1680	    0521  C9				 DB 0c9h
1  1681
1  1682	    0522  20 20	20 20 20 20 20+	 TSRNAME: DB '		  '
   1683		  20 20	20 20 20
1  1684
1  1685						 GLOBALS TSRPRESENT
2  1686
2  1687						  IRP NAME,<TSRPRESENT>
2  1688							   GLOBAL2 <NAME>
2  1689						  ENDM
3  1690							   GLOBAL2 <TSRPRESENT>
4  1691						  GLOBAL TSRPRESENT : NEAR
4  1692
4  1693						  GLOBAL _TSRPRESENT : NEAR
4  1694	    052E			 _TSRPRESENT:
4  1695
2  1696
1  1697	    052E			 TSRPRESENT:
1  1698						 ; in:	 string	with tsr-name pushed on	stack
1  1699	    052E  CD				  DB 0cdh
1  1700	    052F  050Dr				 DW  CHECKMEMMAN	   ; check if memman is	present
1  1701
1  1702	    0531  DD E1				 DB 0ddh,0e1h			 ; IX =	return address
1  1703
1  1704	    0533  21				 DB 21h
1  1705	    0534  0000				 DW 0
1  1706	    0536  45				 DB 45h
1  1707	    0537  39				 DB 039h	 ; HL =	SP
1  1708	    0538  4E				 DB 4eh		 ; BC =	length of string
1  1709
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 31
msx_asm\rtl_rtl.ASM



1  1710	    0539  23				 DB 23h
1  1711
1  1712	    053A  E5				 DB 0e5h
1  1713	    053B  09				 DB 09h		 ; HL +	length of string
1  1714	    053C  E3				 DB 0e3h	 ; push	new stack pointer
1  1715									 ; HL =	start of first data byte
1  1716
1  1717	    053D  79				 DB 79h
1  1718	    053E  FE 0D				 DB 0feh, 12 + 1
1  1719	    0540  3E 0C				 DB 3eh,12			 ; assume 12 spaces
1  1720	    0542  38 01				 DB 38h,(TSRPRESENT1)-$-1		 ; jump	if length <= 12
1  1721
1  1722	    0544  4F				 DB 4fh			 ; maximum length of 12
1  1723
1  1724	    0545			 TSRPRESENT1:
1  1725	    0545  91				 DB 091h		 ; minus number	of characters
1  1726
1  1727	    0546  11				 DB 11h
1  1728	    0547  0522r				 DW TSRNAME
1  1729
1  1730	    0549  0C				 DB 0ch
1  1731	    054A  0D				 DB 0dh
1  1732	    054B  28 02				 DB 28h,(TSRPRESENT2)-$-1		 ; jump	if string = empty
1  1733
1  1734	    054D  ED B0				 DB 0edh,0b0h			 ; copy	string
1  1735
1  1736	    054F			 TSRPRESENT2:
1  1737	    054F  EB				 DB 0ebh
1  1738
1  1739	    0550			 TSRPRESENT3:
1  1740	    0550  B7				 DB 0b7h
1  1741	    0551  28 06				 DB 28h,(TSRPRESENT4)-$-1
1  1742
1  1743	    0553  36 20				 DB 36h,' '
1  1744	    0555  23				 DB 23h
1  1745	    0556  3D				 DB 3dh
1  1746	    0557  18 F7				 DB 18h,( TSRPRESENT3)-$-1
1  1747
1  1748	    0559			 TSRPRESENT4:
1  1749	    0559  E1				 DB 0e1h
1  1750	    055A  F9				 DB 0f9h		 ; pop string from stack
1  1751
1  1752	    055B  DD E5				 DB 0ddh,0e5h			 ; restore return address
1  1753
1  1754	    055D  21				 DB 21h
1  1755	    055E  0522r				 DW TSRNAME
1  1756	    0560  CD				 DB 0cdh
1  1757	    0561  0517r				 DW  CHECKTSR
1  1758	    0563  6F				 DB 6fh			 ; return boolean
1  1759	    0564  26 00				 DB 26h,0
1  1760	    0566  C9				 DB 0c9h
1  1761
1  1762
1  1763	    0567			 CHKMMAN: ; in:	 -
1  1764						 ; out:	 A = 1,	MemMan present,	Z-flag = 0
1  1765						 ;	 A = 0,	not present, Z-flag = 1
1  1766	    0567  3E 65				 DB 3eh,65H
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 32
msx_asm\rtl_rtl.ASM



1  1767	    0569  11				 DB 11h
1  1768	    056A  4D1E				 DW 4DH*256+30
1  1769	    056C  CD				 DB 0cdh
1  1770	    056D  FFCA				 DW  0FFCAH
1  1771	    056F  11				 DB 11h
1  1772	    0570  4D1E				 DW 4DH*256+30
1  1773	    0572  CD				 DB 0cdh
1  1774	    0573  FFCA				 DW  0FFCAH
1  1775	    0575  C6 01				 DB 0c6h,1
1  1776	    0577  3E 00				 DB 3eh,0
1  1777	    0579  8F				 DB 08fh
1  1778	    057A  C9				 DB 0c9h
1  1779
1  1780
1  1781						 GLOBALS RUNGIOS
2  1782
2  1783						  IRP NAME,<RUNGIOS>
2  1784							   GLOBAL2 <NAME>
2  1785						  ENDM
3  1786							   GLOBAL2 <RUNGIOS>
4  1787						  GLOBAL RUNGIOS : NEAR
4  1788
4  1789						  GLOBAL _RUNGIOS : NEAR
4  1790	    057B			 _RUNGIOS:
4  1791
2  1792
1  1793	    057B  C3			 RUNGIOS: DB 0C3H
1  1794	    057C  2736r				  DW L201C		     ; default r.error GIOS not	present
1  1795
1  1796						 GLOBALS MEMMAN
2  1797
2  1798						  IRP NAME,<MEMMAN>
2  1799							   GLOBAL2 <NAME>
2  1800						  ENDM
3  1801							   GLOBAL2 <MEMMAN>
4  1802						  GLOBAL MEMMAN	: NEAR
4  1803
4  1804						  GLOBAL _MEMMAN : NEAR
4  1805	    057E			 _MEMMAN:
4  1806
2  1807
1  1808	    057E  00			 MEMMAN: DB 0			 ; 1 = MemMan present, 0 = not present
1  1809
1  1810						 GLOBALS MEMMNVER
2  1811
2  1812						  IRP NAME,<MEMMNVER>
2  1813							   GLOBAL2 <NAME>
2  1814						  ENDM
3  1815							   GLOBAL2 <MEMMNVER>
4  1816						  GLOBAL MEMMNVER : NEAR
4  1817
4  1818						  GLOBAL _MEMMNVER : NEAR
4  1819	    057F			 _MEMMNVER:
4  1820
2  1821
1  1822	    057F  0000			 MEMMNVER:DW 0			 ; version: H.L
1  1823
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 33
msx_asm\rtl_rtl.ASM



1  1824						 GLOBALS GIOSOK
2  1825
2  1826						  IRP NAME,<GIOSOK>
2  1827							   GLOBAL2 <NAME>
2  1828						  ENDM
3  1829							   GLOBAL2 <GIOSOK>
4  1830						  GLOBAL GIOSOK	: NEAR
4  1831
4  1832						  GLOBAL _GIOSOK : NEAR
4  1833	    0581			 _GIOSOK:
4  1834
2  1835
1  1836	    0581  00			 GIOSOK: DB 0			 ; 1 = GIOS present,   0 = not present
1  1837
1  1838						 GLOBALS GIOSVER
2  1839
2  1840						  IRP NAME,<GIOSVER>
2  1841							   GLOBAL2 <NAME>
2  1842						  ENDM
3  1843							   GLOBAL2 <GIOSVER>
4  1844						  GLOBAL GIOSVER : NEAR
4  1845
4  1846						  GLOBAL _GIOSVER : NEAR
4  1847	    0582			 _GIOSVER:
4  1848
2  1849
1  1850	    0582  0000			 GIOSVER: DW 0			 ; version: H.L, hexadecimal
1  1851	    0584			 GIOSTSRNAME:
1  1852	    0584  46 48	20 47 49 4F 53+		 DB 'FH	GIOS 2.1 '
   1853		  20 32	2E 31 20
1  1854
1  1855	    0590  C3			 L03A5:	 DB 0c3h
1  1856	    0591  03C9r				 DW  L0316		 ; keypressed
1  1857	    0593  C3				 DB 0c3h
1  1858	    0594  03D7r				 DW  L0320		 ; read	character from console
1  1859	    0596  C3				 DB 0c3h
1  1860	    0597  03F1r				 DW  L0339		 ; write character to console
1  1861	    0599  C3				 DB 0c3h
1  1862	    059A  03E9r				 DW  L032F
1  1863	    059C  C3				 DB 0c3h
1  1864	    059D  03EDr				 DW  L0334
1  1865	    059F  C3				 DB 0c3h
1  1866	    05A0  03E5r				 DW  L032A
1  1867	    05A2  C3				 DB 0c3h
1  1868	    05A3  03F1r				 DW  L0339		 ; write character to console
1  1869	    05A5  C3				 DB 0c3h
1  1870	    05A6  03D7r				 DW  L0320		 ; read	character from console
1  1871		  =0018			 L03A5_L EQU $ - L03A5
1  1872
1  1873	    05A8  00C1			 L03BD:	 DW 0C1H		 ; Con / Trm	 , read	and write
1  1874	    05AA  0082				 DW 82H			 ; Kbd		 , read
1  1875	    05AC  0043				 DW 43H			 ; Lst		 , write
1  1876	    05AE  00C4				 DW 0C4H		 ; Aux		 , read	and write
1  1877	    05B0  00C5				 DW 0C5H		 ; Usr		 , read	and write
1  1878	    05B2  00C1				 DW 0C1H		 ; Input / Output	 , read	and write
1  1879
1  1880	    05B4			 L03C9:	 ; in:	 A = character to print
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 34
msx_asm\rtl_rtl.ASM



1  1881						 ; out:	 -
1  1882						 ; changes: -
1  1883	    05B4  C5				 DB 0c5h
1  1884	    05B5  D5				 DB 0d5h
1  1885	    05B6  E5				 DB 0e5h
1  1886	    05B7  DD E5				 DB 0ddh,0e5h
1  1887	    05B9  FD E5				 DB 0fdh,0e5h
1  1888	    05BB  F5				 DB 0f5h
1  1889	    05BC  6F				 DB 6fh
1  1890	    05BD  26 00				 DB 26h,0
1  1891	    05BF  E5				 DB 0e5h
1  1892	    05C0  CD				 DB 0cdh
1  1893	    05C1  016Er				 DW  CONOUTPTR
1  1894	    05C3  F1				 DB 0f1h
1  1895
1  1896	    05C4  FD E1			 L03D9:	 DB 0fdh,0e1h
1  1897	    05C6  DD E1				 DB 0ddh,0e1h
1  1898	    05C8  E1				 DB 0e1h
1  1899	    05C9  D1				 DB 0d1h
1  1900	    05CA  C1				 DB 0c1h
1  1901	    05CB  C9				 DB 0c9h
1  1902
1  1903	    05CC			 L03E1:	 ; in:	 -
1  1904						 ; out:	 A = character read from console
1  1905						 ; changes: F
1  1906	    05CC  C5				 DB 0c5h
1  1907	    05CD  D5				 DB 0d5h
1  1908	    05CE  E5				 DB 0e5h
1  1909	    05CF  DD E5				 DB 0ddh,0e5h
1  1910	    05D1  FD E5				 DB 0fdh,0e5h
1  1911	    05D3  CD			 L03E8:	  DB 0cdh
1  1912	    05D4  016Br				 DW  CONINPTR
1  1913	    05D6  7D				 DB 7dh
1  1914	    05D7  18 EB				 DB 18h,( L03D9)-$-1		 ; same	end as 'print character'
1  1915
1  1916						 ; -----------------------------------------------------------
1  1917
1  1918	    05D9			 L03EE:	  ; parses a filename at DE with wildcards to FCB at L005C
1  1919	    05D9  0E FF				 DB 0eh,0FFH		 ; with	wildcards
1  1920	    05DB  18 0C				 DB 18h,( L03FE)-$-1
1  1921
1  1922	    05DD			 L03F2:	  ; parses a string whose address is in	L00D2 to FCB at	L005C
1  1923						 ; with	no wildcards, skips leading spaces in string
1  1924	    05DD  0E 00				 DB 0eh,0			 ; don't allow wildcards
1  1925	    05DF  ED 5B				 DB 0edh,5bh
1  1926	    05E1  01A1r				 DW L00D2
1  1927	    05E3  13			 L03F8:	  DB 13h
1  1928	    05E4  1A				 DB 1ah
1  1929	    05E5  FE 20				 DB 0feh, ' '
1  1930	    05E7  28 FA				 DB 28h,(L03F8)-$-1		 ; skip	leading	spaces
1  1931
1  1932	    05E9  21			 L03FE:	 DB 21h
1  1933	    05EA  0131r				 DW L0065		 ; HL =	start address for extension
1  1934	    05EC  06 03				 DB 06h,3			 ; 3 characters
1  1935	    05EE  CD				 DB 0cdh
1  1936	    05EF  0666r				 DW  L047B
1  1937
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 35
msx_asm\rtl_rtl.ASM



1  1938	    05F1			 L0406:	 ; parses a complete filename at address in DE to FCB at L005C
1  1939						 ; in:	 DE = source address for filename
1  1940						 ;	  C = 0, no wildcards
1  1941	    05F1  1A				 DB 1ah
1  1942	    05F2  CD				 DB 0cdh
1  1943	    05F3  0691r				 DW  L04A6		 ; upcase
1  1944	    05F5  FE 41				 DB 0feh, 'A'
1  1945	    05F7  38 12				 DB 38h,(L0420)-$-1		 ; jump	if < 'A'
1  1946	    05F9  FE 51				 DB 0feh, 'Q'
1  1947	    05FB  30 0E				 DB 30h,(L0420)-$-1		 ; jump	if >= 'Q'
1  1948	    05FD  47				 DB 47h			 ; save	first character	in B
1  1949	    05FE  13				 DB 13h
1  1950	    05FF  1A				 DB 1ah
1  1951	    0600  FE 3A				 DB 0feh, ':'			  ; next character is ':' ?
1  1952	    0602  20 06				 DB 20h,(L041F)-$-1		 ; no, don't start with	a drive	specification
1  1953	    0604  78				 DB 78h			 ; A = drive letter
1  1954	    0605  D6 40				 DB 0d6h, 040H		 ; 1 = 'A:', 2 = 'B:' etc..
1  1955	    0607  13				 DB 13h			 ; to character	after ':'
1  1956	    0608  18 02				 DB 18h,( L0421)-$-1
1  1957
1  1958	    060A  1B			 L041F:	 DB 1bh			 ; back	to first character
1  1959
1  1960	    060B  AF			 L0420:	 DB 0afh		 ; default drive
1  1961	    060C  21			 L0421:	 DB 21h
1  1962	    060D  0128r				 DW L005C
1  1963	    060F  77				 DB 77h		 ; set drive specification
1  1964	    0610  23				 DB 23h
1  1965
1  1966	    0611  0C				 DB 0ch			 ; C = 0 if no wildcards are allowed
1  1967	    0612  0D				 DB 0dh
1  1968	    0613  28 19				 DB 28h,(L0443)-$-1		 ; jump	to skip	wildcards
1  1969
1  1970	    0615  1A				 DB 1ah
1  1971	    0616  CD				 DB 0cdh
1  1972	    0617  066Dr				 DW  L0482
1  1973	    0619  20 13				 DB 20h,(L0443)-$-1
1  1974	    061B  FE 3F				 DB 0feh, '?'
1  1975	    061D  28 0F				 DB 28h,(L0443)-$-1
1  1976	    061F  FE 2A				 DB 0feh, '*'
1  1977	    0621  28 0B				 DB 28h,(L0443)-$-1
1  1978	    0623  FE 2E				 DB 0feh, '.'
1  1979	    0625  28 07				 DB 28h,(L0443)-$-1
1  1980	    0627  06 0B				 DB 06h,11
1  1981	    0629  CD				 DB 0cdh
1  1982	    062A  0662r				 DW  L0477
1  1983	    062C  18 10				 DB 18h,( L0453)-$-1
1  1984
1  1985	    062E  06 08			 L0443:	 DB 06h,8
1  1986	    0630  CD				 DB 0cdh
1  1987	    0631  0649r				 DW  L045E
1  1988	    0633  1A				 DB 1ah
1  1989	    0634  FE 2E				 DB 0feh, '.'			  ; followed by	an extension ?
1  1990	    0636  20 06				 DB 20h,(L0453)-$-1		 ; no, skip parsing of an extension
1  1991
1  1992	    0638  13				 DB 13h			 ; to first character of extension
1  1993	    0639  06 03				 DB 06h,3
1  1994	    063B  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 36
msx_asm\rtl_rtl.ASM



1  1995	    063C  0649r				 DW  L045E		 ; parse extension
1  1996
1  1997	    063E  21			 L0453:	 DB 21h
1  1998	    063F  0134r				 DW L005C+12		 ; clear rest of the FCB
1  1999	    0641  06 19				  DB 06h,FCB_LEN-11	       ; 33e, -12
1  2000	    0643  36 00			 L0458:	 DB 36h,0
1  2001	    0645  23				 DB 23h
1  2002	    0646  10 FB				 DB 10h,( L0458)-$-1
1  2003	    0648  C9				 DB 0c9h
1  2004
1  2005	    0649  1A			 L045E:	 DB 1ah
1  2006	    064A  0C				 DB 0ch			 ; skip	wildcard check if not allowed
1  2007	    064B  0D				 DB 0dh
1  2008	    064C  28 08				 DB 28h,(L046B)-$-1
1  2009
1  2010	    064E  FE 3F				 DB 0feh, '?'
1  2011	    0650  28 09				 DB 28h,(L0470)-$-1		 ; fill	as if normal letter
1  2012	    0652  FE 2A				 DB 0feh, '*'
1  2013	    0654  28 0B				 DB 28h,(L0476)-$-1		 ; fill	rest with '?'-wildcards
1  2014
1  2015	    0656  CD			 L046B:	 DB 0cdh
1  2016	    0657  066Dr				 DW  L0482
1  2017	    0659  28 0B				 DB 28h,(L047B)-$-1		 ; jump	if abnormal character found, end of
1  2018									 ; string found, fill rest with	spaces
1  2019
1  2020	    065B  77			 L0470:	 DB 77h
1  2021	    065C  23				 DB 23h
1  2022	    065D  13				 DB 13h
1  2023	    065E  10 E9				 DB 10h,( L045E)-$-1
1  2024	    0660  C9				 DB 0c9h
1  2025
1  2026	    0661  13			 L0476:	 DB 13h
1  2027
1  2028	    0662			 L0477:	 ; fill	rest with '?'-wildcards
1  2029	    0662  3E 3F				 DB 3eh,'?'
1  2030	    0664  18 02				 DB 18h,( L047D)-$-1
1  2031
1  2032	    0666			 L047B:	 ; fill	rest with spaces
1  2033	    0666  3E 20				 DB 3eh,' '
1  2034
1  2035	    0668  77			 L047D:	 DB 77h
1  2036	    0669  23				 DB 23h
1  2037	    066A  10 FC				 DB 10h,( L047D)-$-1
1  2038	    066C  C9				 DB 0c9h
1  2039
1  2040	    066D  CD			 L0482:	 DB 0cdh
1  2041	    066E  0691r				 DW  L04A6		 ; upcase A
1  2042	    0670  FE 20				 DB 0feh, ' '			  ; < '	' ?
1  2043	    0672  38 0D				 DB 38h,(L0496)-$-1
1  2044
1  2045	    0674  E5				 DB 0e5h
1  2046	    0675  C5				 DB 0c5h
1  2047	    0676  21				 DB 21h
1  2048	    0677  0683r				 DW L0498		 ; HL =	address	of data	to scan
1  2049	    0679  01				 DB 01h
1  2050	    067A  000E				 DW L04911		 ; BC =	length of data to scan
1  2051	    067C  ED B1				 DB 0edh,0b1h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 37
msx_asm\rtl_rtl.ASM



1  2052	    067E  C1				 DB 0c1h
1  2053	    067F  E1				 DB 0e1h
1  2054	    0680  C9				 DB 0c9h		 ; return Z-flag = '1' if A found in data
1  2055
1  2056	    0681  BF			 L0496:	 DB 0bfh		 ; return with Z-flag corresponding to A
1  2057	    0682  C9				 DB 0c9h
1  2058
1  2059	    0683			 L0498:	 ; SepTable
1  2060	    0683  20 2E	2C 3B 3A 3D 3F+		 DB ' .,;:=?*[]<>{}'
   2061		  2A 5B	5D 3C 3E 7B 7D
1  2062		  =000E			 L04911	 EQU $-L0498
1  2063
1  2064						 ; -----------------------------------------------------------
1  2065
1  2066	    0691			 L04A6:	 ; in:	 A = character
1  2067						 ; out:	 A = upcased, if A >= 'a' and A	<= 'z'
1  2068	    0691  FE 61				 DB 0feh, 'a'
1  2069	    0693  D8				 DB 0d8h
1  2070	    0694  FE 7B				 DB 0feh, 'z'+1
1  2071	    0696  D0				 DB 0d0h
1  2072	    0697  D6 20				 DB 0d6h, 'a'-'A'
1  2073	    0699  C9				 DB 0c9h
1  2074
1  2075	    069A  7C			 L04AF:	 DB 7ch
1  2076	    069B  CD				 DB 0cdh
1  2077	    069C  069Fr				 DW  L04B4
1  2078	    069E  7D				 DB 7dh
1  2079
1  2080	    069F  F5			 L04B4:	 DB 0f5h
1  2081	    06A0  1F				 DB 1fh
1  2082	    06A1  1F				 DB 1fh
1  2083	    06A2  1F				 DB 1fh
1  2084	    06A3  1F				 DB 1fh
1  2085	    06A4  CD				 DB 0cdh
1  2086	    06A5  06A8r				 DW  L04BD
1  2087	    06A7  F1				 DB 0f1h
1  2088	    06A8  E6 0F			 L04BD:	 DB 0e6h, 00FH
1  2089	    06AA  FE 0A				 DB 0feh, 10
1  2090	    06AC  38 02				 DB 38h,(L04BE)-$-1
1  2091	    06AE  C6 07				 DB 0c6h,7
1  2092	    06B0  C6 30			 L04BE:	 DB 0c6h,'0'
1  2093	    06B2  C3				 DB 0c3h
1  2094	    06B3  05B4r				 DW  L03C9		 ; print digit
1  2095
1  2096	    06B5			 L04C8:	 ; converts integer HL to an unsigned byte A
1  2097						 ; in:	 HL
1  2098						 ; out:	 A = 0 and carry set, if HL < 0
1  2099						 ;	 A = L and carry reset,	if HL <	256
1  2100						 ;	 otherwise A = 255
1  2101	    06B5  AF				 DB 0afh
1  2102	    06B6  37				 DB 37h			 ; assume HL is	negative
1  2103	    06B7  CB 7C				 DB 0cbh,07ch
1  2104	    06B9  C0				 DB 0c0h		 ; return with carry set if negative
1  2105
1  2106	    06BA  7C				 DB 7ch
1  2107	    06BB  B7				 DB 0b7h
1  2108	    06BC  7D				 DB 7dh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 38
msx_asm\rtl_rtl.ASM



1  2109	    06BD  C8				 DB 0c8h		 ; return if HL	< 256
1  2110
1  2111	    06BE  3A			 L04D2:	 DB 3ah
1  2112	    06BF  06C2r				 DW L04D2_D		 ; code	area
1  2113	    06C1  C9				 DB 0c9h
1  2114
1  2115	    06C2  00			 L04D2_D: DB 0			 ; data	area
1  2116
1  2117
1  2118
1  2119						 GLOBALS L04D4
2  2120
2  2121						  IRP NAME,<L04D4>
2  2122							   GLOBAL2 <NAME>
2  2123						  ENDM
3  2124							   GLOBAL2 <L04D4>
4  2125						  GLOBAL L04D4 : NEAR
4  2126
4  2127						  GLOBAL _L04D4	: NEAR
4  2128	    06C3			 _L04D4:
4  2129
2  2130
1  2131	    06C3			 L04D4:	  ; the	return address of this routine is the start address
1  2132						  ; of the pascal code !!
1  2133	    06C3  F3				  DB 0f3h
1  2134	    06C4  32				  DB 32h
1  2135	    06C5  01A7r				 DW L00D8
1  2136	    06C7  C5				 DB 0c5h
1  2137	    06C8  CD				  DB 0cdh
1  2138	    06C9  259Ar				 DW  L1EAF
1  2139	    06CB  C1				 DB 0c1h
1  2140	    06CC  2A				 DB 02ah
1  2141	    06CD  0006				 DW 0006H		 ; HL =	top of memory
1  2142	    06CF  B7				 DB 0b7h
1  2143	    06D0  ED 42				 DB 0EDH,042h		 ; < top of memory ?
1  2144	    06D2  DA				  DB 0dah
1  2145	    06D3  27D1r				 DW L20A8		  ; jump if out	of memory
1  2146
1  2147	    06D5  EB				 DB 0ebh
1  2148	    06D6  D1				 DB 0d1h
1  2149	    06D7  F9				 DB 0f9h
1  2150	    06D8  FB				  DB 0fbh
1  2151	    06D9  01				 DB 01h
1  2152	    06DA  FC00				 DW -1024
1  2153	    06DC  09				 DB 09h
1  2154	    06DD  22				 DB 22h
1  2155	    06DE  0194r				 DW RECURPTR
1  2156
1  2157	    06E0  AF				 DB 0afh
1  2158					 ;	   LD L,A
1  2159					 ;	   LD H,A
1  2160					 ;	   LD (L00CE),HL
1  2161	    06E1  32				  DB 32h
1  2162	    06E2  01A8r				 DW L00DC		; reset	Overlay	Drive
1  2163	    06E4  3E C3				 DB 3eh,0C3H
1  2164	    06E6  32				  DB 32h
1  2165	    06E7  018Dr				 DW ERRORPTR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 39
msx_asm\rtl_rtl.ASM



1  2166	    06E9  21				  DB 21h
1  2167	    06EA  2868r				 DW L20DE
1  2168	    06EC  22				 DB 22h
1  2169	    06ED  018Er				 DW ERRORPTR_1
1  2170	    06EF  EB				 DB 0ebh
1  2171	    06F0  22				  DB 22h
1  2172	    06F1  019Ar				 DW L00CC	       ; set start address of pascal code
1  2173	    06F3  E9				 DB 0e9h
1  2174
1  2175						 GLOBALS L0508
2  2176
2  2177						  IRP NAME,<L0508>
2  2178							   GLOBAL2 <NAME>
2  2179						  ENDM
3  2180							   GLOBAL2 <L0508>
4  2181						  GLOBAL L0508 : NEAR
4  2182
4  2183						  GLOBAL _L0508	: NEAR
4  2184	    06F4			 _L0508:
4  2185
2  2186
1  2187	    06F4			 L0508:	 ; heap	alloc
1  2188						 ; in:	 HL = source of	data to	put on heap
1  2189						 ;	 BC = length of	data to	allocate
1  2190	    06F4  E5				 DB 0e5h
1  2191	    06F5  2A				 DB 02ah
1  2192	    06F6  0194r				 DW RECURPTR
1  2193	    06F8  B7				 DB 0b7h
1  2194	    06F9  ED 42				 DB 0EDH,042h		 ; decrease with BC bytes
1  2195	    06FB  22				 DB 22h
1  2196	    06FC  0194r				 DW RECURPTR
1  2197	    06FE  ED 5B				 DB 0edh,5bh
1  2198	    0700  0192r				 DW HEAPPTR
1  2199	    0702  B7				 DB 0b7h
1  2200	    0703  ED 52				 DB 0EDH,052h
1  2201	    0705  19				 DB 019h
1  2202	    0706  EB				 DB 0ebh
1  2203	    0707  E1				 DB 0e1h
1  2204	    0708  DA				 DB 0dah
1  2205	    0709  2460r				 DW L1D75
1  2206	    070B  ED B0				 DB 0edh,0b0h
1  2207	    070D  C9				 DB 0c9h
1  2208
1  2209
1  2210
1  2211
1  2212						 GLOBALS L0522
2  2213
2  2214						  IRP NAME,<L0522>
2  2215							   GLOBAL2 <NAME>
2  2216						  ENDM
3  2217							   GLOBAL2 <L0522>
4  2218						  GLOBAL L0522 : NEAR
4  2219
4  2220						  GLOBAL _L0522	: NEAR
4  2221	    070E			 _L0522:
4  2222
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 40
msx_asm\rtl_rtl.ASM



2  2223
1  2224	    070E			 L0522:	 ; heap	de-alloc
1  2225	    070E  2A				 DB 02ah
1  2226	    070F  0194r				 DW RECURPTR
1  2227	    0711  ED B0				 DB 0edh,0b0h
1  2228	    0713  22				 DB 22h
1  2229	    0714  0194r				 DW RECURPTR
1  2230					 ; 33e	       EXX			  ; restore registers
1  2231	    0716  C9				 DB 0c9h
1  2232
1  2233
1  2234
1  2235
1  2236						 GLOBALS L052C
2  2237
2  2238						  IRP NAME,<L052C>
2  2239							   GLOBAL2 <NAME>
2  2240						  ENDM
3  2241							   GLOBAL2 <L052C>
4  2242						  GLOBAL L052C : NEAR
4  2243
4  2244						  GLOBAL _L052C	: NEAR
4  2245	    0717			 _L052C:
4  2246
2  2247
1  2248	    0717			 L052C:	 ; LIB
1  2249						 ; get REAL HLDEBC from	address	HL
1  2250						 ; in:	 HL = address of REAL, variable
1  2251						 ; out:	 HLDEBC	= REAL stored at that address
1  2252	    0717  5E				 DB 5eh		 ; get HL part
1  2253	    0718  23				 DB 23h
1  2254	    0719  56				 DB 56h
1  2255	    071A  23				 DB 23h
1  2256	    071B  D5				 DB 0d5h		 ; save	HL part
1  2257	    071C  5E				 DB 5eh		 ; get DE part
1  2258	    071D  23				 DB 23h
1  2259	    071E  56				 DB 56h
1  2260	    071F  23				 DB 23h
1  2261	    0720  4E				 DB 4eh		 ; get BC part
1  2262	    0721  23				 DB 23h
1  2263	    0722  46				 DB 46h
1  2264	    0723  E1				 DB 0e1h		 ; restore HL part
1  2265	    0724  C9				 DB 0c9h
1  2266
1  2267
1  2268
1  2269
1  2270						 GLOBALS L053A
2  2271
2  2272						  IRP NAME,<L053A>
2  2273							   GLOBAL2 <NAME>
2  2274						  ENDM
3  2275							   GLOBAL2 <L053A>
4  2276						  GLOBAL L053A : NEAR
4  2277
4  2278						  GLOBAL _L053A	: NEAR
4  2279	    0725			 _L053A:
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 41
msx_asm\rtl_rtl.ASM



4  2280
2  2281
1  2282	    0725			 L053A:	 ; PushString
1  2283	    0725  DD E1				 DB 0ddh,0e1h			 ; LIB
1  2284	    0727  EB				 DB 0ebh
1  2285	    0728  1A				 DB 1ah
1  2286	    0729  4F				 DB 4fh
1  2287	    072A  06 00				 DB 06h,0
1  2288	    072C  2F				 DB 2fh
1  2289	    072D  6F				 DB 6fh
1  2290	    072E  26 FF				 DB 26h,0FFH
1  2291	    0730  39				 DB 039h
1  2292	    0731  F9				 DB 0f9h
1  2293	    0732  EB				 DB 0ebh
1  2294	    0733  03				 DB 03h
1  2295	    0734  ED B0				 DB 0edh,0b0h
1  2296	    0736  DD E9				 DB 0ddh,0e9h
1  2297
1  2298						 GLOBALS L054D
2  2299
2  2300						  IRP NAME,<L054D>
2  2301							   GLOBAL2 <NAME>
2  2302						  ENDM
3  2303							   GLOBAL2 <L054D>
4  2304						  GLOBAL L054D : NEAR
4  2305
4  2306						  GLOBAL _L054D	: NEAR
4  2307	    0738			 _L054D:
4  2308
2  2309
1  2310	    0738			 L054D:	 ; PushConstantString
1  2311						 ; string follows call to this function
1  2312	    0738  D1				 DB 0d1h
1  2313	    0739  1A				 DB 1ah
1  2314	    073A  4F				 DB 4fh
1  2315	    073B  06 00				 DB 06h,0
1  2316	    073D  2F				 DB 2fh
1  2317	    073E  6F				 DB 6fh
1  2318	    073F  26 FF				 DB 26h,0FFH
1  2319	    0741  39				 DB 039h
1  2320	    0742  F9				 DB 0f9h
1  2321	    0743  EB				 DB 0ebh
1  2322	    0744  03				 DB 03h
1  2323	    0745  ED B0				 DB 0edh,0b0h
1  2324	    0747  E9				 DB 0e9h
1  2325
1  2326						 GLOBALS L055D
2  2327
2  2328						  IRP NAME,<L055D>
2  2329							   GLOBAL2 <NAME>
2  2330						  ENDM
3  2331							   GLOBAL2 <L055D>
4  2332						  GLOBAL L055D : NEAR
4  2333
4  2334						  GLOBAL _L055D	: NEAR
4  2335	    0748			 _L055D:
4  2336
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 42
msx_asm\rtl_rtl.ASM



2  2337
1  2338	    0748			 L055D:	 ; push	a SET on to the	stack
1  2339						 ; in:	 HL = address of SET to	push on	the stack
1  2340						 ;	 B = offset within SET
1  2341						 ;	 C = length of SET
1  2342	    0748  DD E1				 DB 0ddh,0e1h
1  2343	    074A  EB				 DB 0ebh
1  2344	    074B  21				 DB 21h
1  2345	    074C  FFE0				 DW -32
1  2346	    074E  39				 DB 039h
1  2347	    074F  F9				 DB 0f9h		 ; reserve 32 bytes for	a SET
1  2348	    0750  EB				 DB 0ebh		 ; HL =	source address of SET
1  2349									 ; DE =	start of reserved SET
1  2350	    0751  C5				 DB 0c5h
1  2351
1  2352						 ; clear first unused bytes
1  2353	    0752  04				 DB 04h
1  2354	    0753  05				 DB 05h
1  2355	    0754  28 05				 DB 28h,(L0570)-$-1		 ; jump	if no unused bytes
1  2356
1  2357	    0756  AF				 DB 0afh
1  2358
1  2359	    0757  12			 L056C:	 DB 12h
1  2360	    0758  13				 DB 13h
1  2361	    0759  10 FC				 DB 10h,( L056C)-$-1
1  2362						 ; B = 0
1  2363	    075B			 L0570:
1  2364	    075B  ED B0				 DB 0edh,0b0h			 ; copy	used bytes to reserved SET
1  2365	    075D  C1				 DB 0c1h		 ; B = offset
1  2366									 ; C = length
1  2367
1  2368	    075E  3E 20				 DB 3eh,020H		 ; A = 32 - offset - length
1  2369	    0760  90				 DB 090h
1  2370	    0761  91				 DB 091h
1  2371	    0762  28 06				 DB 28h,(L057F)-$-1		 ; jump	if no last unused bytes
1  2372
1  2373						 ; clear last unused bytes
1  2374	    0764  47				 DB 47h
1  2375	    0765  AF				 DB 0afh
1  2376	    0766  12			 L057B:	 DB 12h
1  2377	    0767  13				 DB 13h
1  2378	    0768  10 FC				 DB 10h,( L057B)-$-1
1  2379	    076A  DD E9			 L057F:	 DB 0ddh,0e9h			 ; jump	to return address
1  2380
1  2381
1  2382						 GLOBALS L0581
2  2383
2  2384						  IRP NAME,<L0581>
2  2385							   GLOBAL2 <NAME>
2  2386						  ENDM
3  2387							   GLOBAL2 <L0581>
4  2388						  GLOBAL L0581 : NEAR
4  2389
4  2390						  GLOBAL _L0581	: NEAR
4  2391	    076C			 _L0581:
4  2392
2  2393
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 43
msx_asm\rtl_rtl.ASM



1  2394	    076C			 L0581:	 ; LIB
1  2395						 ; push	new empty SET on stack
1  2396						 ; in:	 -
1  2397						 ; out:	 a new SET pushed on to	the stack
1  2398	    076C  DD E1				 DB 0ddh,0e1h			 ; LIB
1  2399	    076E  21				 DB 21h
1  2400	    076F  FFE0				 DW -32
1  2401	    0771  39				 DB 039h
1  2402	    0772  F9				 DB 0f9h		 ; reserve 32 bytes
1  2403
1  2404						 ; clear the SET with zeroes
1  2405	    0773  06 20				 DB 06h,020H
1  2406	    0775  AF				 DB 0afh
1  2407	    0776  77			 L058B:	 DB 77h
1  2408	    0777  23				 DB 23h
1  2409	    0778  10 FC				 DB 10h,( L058B)-$-1
1  2410
1  2411	    077A  DD E9				 DB 0ddh,0e9h
1  2412
1  2413						 GLOBALS L0591
2  2414
2  2415						  IRP NAME,<L0591>
2  2416							   GLOBAL2 <NAME>
2  2417						  ENDM
3  2418							   GLOBAL2 <L0591>
4  2419						  GLOBAL L0591 : NEAR
4  2420
4  2421						  GLOBAL _L0591	: NEAR
4  2422	    077C			 _L0591:
4  2423
2  2424
1  2425	    077C			 L0591:	 ; add element HL to SET at stack
1  2426						 ;
1  2427	    077C  DD E1				 DB 0ddh,0e1h
1  2428	    077E  45				 DB 45h			 ; B = element to add
1  2429	    077F  CD				 DB 0cdh
1  2430	    0780  07A5r				 DW  L05BA
1  2431
1  2432	    0782  B6			 L0597:	 DB 0b6h
1  2433	    0783  77				 DB 77h
1  2434
1  2435	    0784  DD E9			 L0599:	 DB 0ddh,0e9h
1  2436
1  2437						 GLOBALS L059B
2  2438
2  2439						  IRP NAME,<L059B>
2  2440							   GLOBAL2 <NAME>
2  2441						  ENDM
3  2442							   GLOBAL2 <L059B>
4  2443						  GLOBAL L059B : NEAR
4  2444
4  2445						  GLOBAL _L059B	: NEAR
4  2446	    0786			 _L059B:
4  2447
2  2448
1  2449	    0786			 L059B:
1  2450	    0786  DD E1				 DB 0ddh,0e1h			 ; LIB
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 44
msx_asm\rtl_rtl.ASM



1  2451	    0788  D1				 DB 0d1h
1  2452	    0789  7D				 DB 7dh
1  2453	    078A  93				 DB 093h
1  2454	    078B  38 F7				 DB 38h,(L0599)-$-1
1  2455	    078D  3C				 DB 3ch
1  2456	    078E  4F				 DB 4fh
1  2457	    078F  43				 DB 43h
1  2458	    0790  CD				 DB 0cdh
1  2459	    0791  07A5r				 DW  L05BA
1  2460	    0793  5F				 DB 5fh
1  2461	    0794  41				 DB 41h
1  2462	    0795  AF				 DB 0afh
1  2463	    0796  B3			 L05AB:	 DB 0b3h
1  2464	    0797  CB 23				 DB 0cbh,23h
1  2465	    0799  30 06				 DB 30h,(L05B6)-$-1
1  2466	    079B  B6				 DB 0b6h
1  2467	    079C  77				 DB 77h
1  2468	    079D  23				 DB 23h
1  2469	    079E  AF				 DB 0afh
1  2470	    079F  1E 01				 DB 1eh,1
1  2471	    07A1  10 F3			 L05B6:	 DB 10h,( L05AB)-$-1
1  2472	    07A3  18 DD				 DB 18h,( L0597)-$-1
1  2473
1  2474	    07A5  78			 L05BA:	 DB 78h
1  2475	    07A6  E6 F8				 DB 0e6h, 0F8H		 ; calculate byte offset
1  2476	    07A8  0F				 DB 0fh
1  2477	    07A9  0F				 DB 0fh
1  2478	    07AA  0F				 DB 0fh
1  2479	    07AB  C6 02				 DB 0c6h,2			 ; add 2 for return address
1  2480	    07AD  6F				 DB 6fh
1  2481	    07AE  26 00				 DB 26h,0
1  2482	    07B0  39				 DB 039h
1  2483	    07B1  78				 DB 78h
1  2484	    07B2  E6 07				 DB 0e6h, 7
1  2485	    07B4  3C				 DB 3ch
1  2486	    07B5  47				 DB 47h
1  2487	    07B6  AF				 DB 0afh
1  2488	    07B7  37				 DB 37h
1  2489	    07B8  17			 L05CD:	 DB 17h
1  2490	    07B9  10 FD				 DB 10h,( L05CD)-$-1
1  2491	    07BB  C9				 DB 0c9h
1  2492
1  2493
1  2494
1  2495						 GLOBALS L05D1
2  2496
2  2497						  IRP NAME,<L05D1>
2  2498							   GLOBAL2 <NAME>
2  2499						  ENDM
3  2500							   GLOBAL2 <L05D1>
4  2501						  GLOBAL L05D1 : NEAR
4  2502
4  2503						  GLOBAL _L05D1	: NEAR
4  2504	    07BC			 _L05D1:
4  2505
2  2506
1  2507	    07BC			 L05D1:	 ; LIB
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 45
msx_asm\rtl_rtl.ASM



1  2508						 ; puts	REAL HL'DE'BC' at address HL
1  2509						 ; compare with	'A:=ln(2)' where HL = address of A and HL'DE'BC'
1  2510						 ; is the result of ln(2)
1  2511						 ; in:	 HL, HL',DE',BC'
1  2512						 ; out:	 HL + 5
1  2513	    07BC  E5				 DB 0e5h		 ; destination address on stack
1  2514	    07BD  D9				 DB 0d9h		 ; REAL	in HLDEBC
1  2515	    07BE  EB				 DB 0ebh
1  2516	    07BF  E3				 DB 0e3h
1  2517	    07C0  73				 DB 73h		 ; save	HL first
1  2518	    07C1  23				 DB 23h
1  2519	    07C2  72				 DB 72h
1  2520	    07C3  23				 DB 23h
1  2521	    07C4  D1				 DB 0d1h
1  2522	    07C5  73				 DB 73h		 ; save	DE
1  2523	    07C6  23				 DB 23h
1  2524	    07C7  72				 DB 72h
1  2525	    07C8  23				 DB 23h
1  2526	    07C9  71				 DB 71h		 ; save	BC
1  2527	    07CA  23				 DB 23h
1  2528	    07CB  70				 DB 70h
1  2529	    07CC  C9				 DB 0c9h
1  2530
1  2531
1  2532
1  2533						 GLOBALS L05E2
2  2534
2  2535						  IRP NAME,<L05E2>
2  2536							   GLOBAL2 <NAME>
2  2537						  ENDM
3  2538							   GLOBAL2 <L05E2>
4  2539						  GLOBAL L05E2 : NEAR
4  2540
4  2541						  GLOBAL _L05E2	: NEAR
4  2542	    07CD			 _L05E2:
4  2543
2  2544
1  2545	    07CD			 L05E2:	 ; pop pushed STRING
1  2546						 ; copy	pushed <string>	to address HL, truncate	to maximum length of B
1  2547						 ; in:	 <string> pushed at stack
1  2548						 ;	 HL = destination address for string
1  2549						 ;	  B = maximum length of	string to copy
1  2550						 ; out:	 DE = first byte after destination string
1  2551						 ; changes: AF,BC,DE,HL,IX
1  2552	    07CD  DD E1				 DB 0ddh,0e1h			 ; IX =	return address
1  2553
1  2554	    07CF  78				 DB 78h			 ; A = maximum length of string
1  2555	    07D0  EB				 DB 0ebh		 ; DE =	destination address
1  2556
1  2557	    07D1  21				 DB 21h
1  2558	    07D2  0000				 DW 0
1  2559	    07D4  44				 DB 44h			 ; B = 0
1  2560	    07D5  39				 DB 039h	 ; HL =	SP
1  2561	    07D6  4E				 DB 4eh		 ; BC =	length byte of string
1  2562	    07D7  E5				 DB 0e5h		 ; save	start of string
1  2563	    07D8  09				 DB 09h		 ; HL =	address	of last	string character
1  2564
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 46
msx_asm\rtl_rtl.ASM



1  2565	    07D9  23			 L05EE:	 DB 23h			 ; HL =	address	just after string
1  2566									     ; stack pointer to	return
1  2567
1  2568	    07DA  E3				 DB 0e3h	 ; HL =	start of string
1  2569									 ; address just	after string at	stack
1  2570									 ; new stack pointer pushed at stack
1  2571
1  2572	    07DB  B9				 DB 0b9h		 ; maximum length - string length
1  2573									 ; string length > maximum length ?
1  2574	    07DC  38 01				 DB 38h,(L05F4)-$-1		 ; yes,	jump if	true (ignore rest of string)
1  2575
1  2576						 ; maximum length <= string length
1  2577	    07DE  79				 DB 79h			 ; truncate string length to maximum
1  2578
1  2579	    07DF  12			 L05F4:	 DB 12h		 ; set length of destination string
1  2580	    07E0  13				 DB 13h			 ; DE =	first databyte of destination string
1  2581	    07E1  23				 DB 23h			 ; HL =	first databyte of string
1  2582	    07E2  B7				 DB 0b7h
1  2583	    07E3  28 03				 DB 28h,(L05FD)-$-1		 ; quit	if length = 0
1  2584
1  2585	    07E5  4F				 DB 4fh			 ; C = length of truncated string
1  2586	    07E6  ED B0				 DB 0edh,0b0h			 ; copy	string data
1  2587
1  2588	    07E8  E1			 L05FD:	 DB 0e1h		 ; address just	after string
1  2589	    07E9  F9				 DB 0f9h		 ; remove string from stack
1  2590
1  2591	    07EA  DD E9				 DB 0ddh,0e9h			 ; jump	to return address
1  2592
1  2593
1  2594
1  2595
1  2596						 GLOBALS L0601
2  2597
2  2598						  IRP NAME,<L0601>
2  2599							   GLOBAL2 <NAME>
2  2600						  ENDM
3  2601							   GLOBAL2 <L0601>
4  2602						  GLOBAL L0601 : NEAR
4  2603
4  2604						  GLOBAL _L0601	: NEAR
4  2605	    07EC			 _L0601:
4  2606
2  2607
1  2608	    07EC			 L0601:	 ; pop pushed STRING
1  2609						 ; copy	pushed <string>	to address HL, truncate	to maximum length of B
1  2610						 ; in:	 <string> pushed first on stack
1  2611						 ;	 <destination> pushed as second	on stack
1  2612	    07EC  DD E1				 DB 0ddh,0e1h
1  2613	    07EE  78				 DB 78h
1  2614	    07EF  21				 DB 21h
1  2615	    07F0  0000				 DW 0
1  2616	    07F2  44				 DB 44h			 ; B = 0
1  2617	    07F3  39				 DB 039h
1  2618	    07F4  4E				 DB 4eh		 ; BC =	length of start
1  2619	    07F5  E5				 DB 0e5h		 ; save	start of string
1  2620	    07F6  09				 DB 09h
1  2621	    07F7  23				 DB 23h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 47
msx_asm\rtl_rtl.ASM



1  2622	    07F8  5E				 DB 5eh		 ; DE =	destination address of string
1  2623	    07F9  23				 DB 23h
1  2624	    07FA  56				 DB 56h		 ; HL =	highest	byte of	pushed parameters
1  2625	    07FB  18 DC				 DB 18h,( L05EE)-$-1
1  2626
1  2627
1  2628
1  2629						 GLOBALS L0612
2  2630
2  2631						  IRP NAME,<L0612>
2  2632							   GLOBAL2 <NAME>
2  2633						  ENDM
3  2634							   GLOBAL2 <L0612>
4  2635						  GLOBAL L0612 : NEAR
4  2636
4  2637						  GLOBAL _L0612	: NEAR
4  2638	    07FD			 _L0612:
4  2639
2  2640
1  2641	    07FD			 L0612:	 ; pop pushed set to the address in HL
1  2642						 ; in:	 HL = destination address of SET
1  2643						 ;	 C = bytes to copy from	SET
1  2644						 ;	 B = offset within SET
1  2645	    07FD  DD E1				 DB 0ddh,0e1h			 ; LIB
1  2646	    07FF  EB				 DB 0ebh
1  2647	    0800  68				 DB 68h			 ; HL =	offset within SET
1  2648	    0801  26 00				 DB 26h,0
1  2649	    0803  44				 DB 44h			 ; BC =	length
1  2650	    0804  39				 DB 039h
1  2651	    0805  ED B0				 DB 0edh,0b0h			 ; copy	set to given address
1  2652
1  2653	    0807  21				 DB 21h
1  2654	    0808  0020				 DW 0020H
1  2655
1  2656	    080A  39			 L061F:	 DB 039h
1  2657	    080B  F9				 DB 0f9h
1  2658	    080C  DD E9				 DB 0ddh,0e9h
1  2659
1  2660
1  2661
1  2662						 GLOBALS L0623
2  2663
2  2664						  IRP NAME,<L0623>
2  2665							   GLOBAL2 <NAME>
2  2666						  ENDM
3  2667							   GLOBAL2 <L0623>
4  2668						  GLOBAL L0623 : NEAR
4  2669
4  2670						  GLOBAL _L0623	: NEAR
4  2671	    080E			 _L0623:
4  2672
2  2673
1  2674	    080E			 L0623:	 ; pop pushed set to the pushed	address
1  2675						 ; PROCEDURE CopySet(VAR Set1: set; Set2: set);
1  2676						 ;
1  2677						 ; in:	 <SET> first pushed parameter
1  2678						 ;	 <ADDRESS> second pushed parameter
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 48
msx_asm\rtl_rtl.ASM



1  2679						 ;	 C = bytes to copy from	SET
1  2680						 ;	 B = offset within SET
1  2681	    080E  DD E1				 DB 0ddh,0e1h
1  2682	    0810  21				 DB 21h
1  2683	    0811  0020				 DW 0020H		 ; HL =	length of a SET
1  2684	    0813  39				 DB 039h
1  2685	    0814  5E				 DB 5eh		 ; DE =	address	where to put SET
1  2686	    0815  23				 DB 23h			 ;
1  2687	    0816  56				 DB 56h		 ;
1  2688
1  2689	    0817  68				 DB 68h			 ; HL =	offset within SET
1  2690	    0818  26 00				 DB 26h,0
1  2691	    081A  44				 DB 44h			 ; BC =	length
1  2692	    081B  39				 DB 039h	 ; HL =	SP + offset
1  2693
1  2694	    081C  ED B0				 DB 0edh,0b0h
1  2695	    081E  21				 DB 21h
1  2696	    081F  0022				 DW 0022H		 ; remove SET and address
1  2697	    0821  18 E7				 DB 18h,( L061F)-$-1
1  2698
1  2699						 GLOBALS L0638
2  2700
2  2701						  IRP NAME,<L0638>
2  2702							   GLOBAL2 <NAME>
2  2703						  ENDM
3  2704							   GLOBAL2 <L0638>
4  2705						  GLOBAL L0638 : NEAR
4  2706
4  2707						  GLOBAL _L0638	: NEAR
4  2708	    0823			 _L0638:
4  2709
2  2710
1  2711	    0823			 L0638:	 ; push	ARRAY OF CHAR as string
1  2712						 ; in:	 HL = source-address
1  2713						 ;	 B  = length, >	0
1  2714						 ; out:	 <length> pushed first (byte)
1  2715						 ;	 <data>	pushed next
1  2716	    0823  DD E1				 DB 0ddh,0e1h			 ; LIB
1  2717	    0825  EB				 DB 0ebh		 ; DE =	source-address
1  2718	    0826  78				 DB 78h
1  2719	    0827  2F				 DB 2fh
1  2720	    0828  6F				 DB 6fh			 ; HL =	-length
1  2721	    0829  26 FF				 DB 26h,0FFH
1  2722	    082B  39				 DB 039h	 ; HL =	SP - length
1  2723	    082C  F9				 DB 0f9h		 ; SP =	SP - length    make space in stack
1  2724	    082D  70				 DB 70h		 ; put length on top
1  2725	    082E  23				 DB 23h			 ; HL =	destination address of data
1  2726	    082F  48				 DB 48h			 ; BC =	length of data
1  2727	    0830  06 00				 DB 06h,0
1  2728	    0832  EB				 DB 0ebh		 ; HL =	source-address
1  2729									 ; DE =	destination address
1  2730	    0833  ED B0				 DB 0edh,0b0h
1  2731	    0835  DD E9				 DB 0ddh,0e9h
1  2732
1  2733						 GLOBALS L064C
2  2734
2  2735						  IRP NAME,<L064C>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 49
msx_asm\rtl_rtl.ASM



2  2736							   GLOBAL2 <NAME>
2  2737						  ENDM
3  2738							   GLOBAL2 <L064C>
4  2739						  GLOBAL L064C : NEAR
4  2740
4  2741						  GLOBAL _L064C	: NEAR
4  2742	    0837			 _L064C:
4  2743
2  2744
1  2745	    0837			 L064C:	 ; Index Check
1  2746	    0837  B7				 DB 0b7h		 ; if DE > HL then r.error 90H else RET
1  2747	    0838  ED 52				 DB 0EDH,052h
1  2748	    083A  19				 DB 019h
1  2749	    083B  D8				 DB 0d8h
1  2750	    083C  3E 90				 DB 3eh,090H		 ; r.error 90H:	Index out of range
1  2751	    083E  C3				 DB 0c3h
1  2752	    083F  2738r				 DW  L2027		 ; Run-Time error
1  2753
1  2754
1  2755
1  2756
1  2757						 GLOBALS L0656
2  2758
2  2759						  IRP NAME,<L0656>
2  2760							   GLOBAL2 <NAME>
2  2761						  ENDM
3  2762							   GLOBAL2 <L0656>
4  2763						  GLOBAL L0656 : NEAR
4  2764
4  2765						  GLOBAL _L0656	: NEAR
4  2766	    0841			 _L0656:
4  2767
2  2768
1  2769	    0841			 L0656:	  ; Subrange Check
1  2770						 ; in:	 HL = value to check if	its >= DE and <	DE+BC
1  2771						 ;	 DE = base
1  2772						 ;	 BC = length
1  2773						 ; out:	 HL,DE,BC unchanged
1  2774	    0841  B7				 DB 0b7h
1  2775	    0842  ED 52				 DB 0EDH,052h		 ; subtract base
1  2776	    0844  B7				 DB 0b7h
1  2777	    0845  ED 42				 DB 0EDH,042h		 ; subtract length
1  2778	    0847  30 03				 DB 30h,(L0661)-$-1		 ; jump	if result >= length
1  2779
1  2780	    0849  09				 DB 09h		 ; undo	subtracting
1  2781	    084A  19				 DB 019h
1  2782	    084B  C9				 DB 0c9h
1  2783
1  2784	    084C  3E 91			 L0661:	 DB 3eh,091H		 ; r.error 91H:	Scalar or subrange out of range
1  2785	    084E  C3				 DB 0c3h
1  2786	    084F  2738r				 DW  L2027		 ; Run-time error
1  2787
1  2788
1  2789
1  2790						  GLOBALS L_FOR_TO
2  2791
2  2792						  IRP NAME,<L_FOR_TO>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 50
msx_asm\rtl_rtl.ASM



2  2793							   GLOBAL2 <NAME>
2  2794						  ENDM
3  2795							   GLOBAL2 <L_FOR_TO>
4  2796						  GLOBAL L_FOR_TO : NEAR
4  2797
4  2798						  GLOBAL _L_FOR_TO : NEAR
4  2799	    0851			 _L_FOR_TO:
4  2800
2  2801
1  2802	    0851			 L_FOR_TO:
1  2803						  ; FOR	xx := start TO end
1  2804						  ; in:	   DE:HL = end
1  2805						  ;	   (sp+2):(sp) = start
1  2806						  ; out:   DE:HL = length
1  2807						  ;	   Carry set if	start >	end
1  2808						  ;POP IX		      ;	IX = return address
1  2809
1  2810
1  2811						  GLOBALS L_FOR_DOWNTO
2  2812
2  2813						  IRP NAME,<L_FOR_DOWNTO>
2  2814							   GLOBAL2 <NAME>
2  2815						  ENDM
3  2816							   GLOBAL2 <L_FOR_DOWNTO>
4  2817						  GLOBAL L_FOR_DOWNTO :	NEAR
4  2818
4  2819						  GLOBAL _L_FOR_DOWNTO : NEAR
4  2820	    0851			 _L_FOR_DOWNTO:
4  2821
2  2822
1  2823	    0851			 L_FOR_DOWNTO:
1  2824						  ; FOR	xx := start TO end
1  2825						  ; in:	   DE:HL = end
1  2826						  ;	   (sp+2):(sp) = start
1  2827						  ; out:   DE:HL = length
1  2828						  ;	   Carry set if	start >	end
1  2829
1  2830
1  2831						 GLOBALS L0666
2  2832
2  2833						  IRP NAME,<L0666>
2  2834							   GLOBAL2 <NAME>
2  2835						  ENDM
3  2836							   GLOBAL2 <L0666>
4  2837						  GLOBAL L0666 : NEAR
4  2838
4  2839						  GLOBAL _L0666	: NEAR
4  2840	    0851			 _L0666:
4  2841
2  2842
1  2843	    0851			 L0666:	  ; FOR	xx := start TO end
1  2844						 ; in:	 HL = end
1  2845						 ;	 DE = start
1  2846						  ; out:   DE =	length
1  2847	    0851  B7				 DB 0b7h		 ; LIB
1  2848	    0852  ED 52				  DB 0EDH,052h			; end -	start
1  2849	    0854  EB				  DB 0ebh		    ; DE = length
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 51
msx_asm\rtl_rtl.ASM



1  2850	    0855			 L066A:
1  2851
1  2852					 ;!	 pushf
1  2853	    0855  13				  DB 13h		     ; end - start + 1
1  2854					 ;!	 popf
1  2855	    0856  EA				 DB 0eah
1  2856	    0857  085Cr				 DW L0671
1  2857
1  2858	    0859  F0				 DB 0f0h
1  2859	    085A  18 01				 DB 18h,( L0672)-$-1
1  2860
1  2861	    085C  F8			 L0671:	 DB 0f8h
1  2862
1  2863	    085D  11			 L0672:	 DB 11h
1  2864	    085E  0000				 DW 0000
1  2865	    0860  C9				 DB 0c9h
1  2866
1  2867						 GLOBALS L0676
2  2868
2  2869						  IRP NAME,<L0676>
2  2870							   GLOBAL2 <NAME>
2  2871						  ENDM
3  2872							   GLOBAL2 <L0676>
4  2873						  GLOBAL L0676 : NEAR
4  2874
4  2875						  GLOBAL _L0676	: NEAR
4  2876	    0861			 _L0676:
4  2877
2  2878
1  2879	    0861			 L0676:	 ; FOR xx := start DOWNTO end
1  2880						 ; in:	 HL = end
1  2881						 ;	 DE = start
1  2882	    0861  D5				 DB 0d5h		 ; LIB
1  2883	    0862  EB				 DB 0ebh
1  2884	    0863  B7				 DB 0b7h
1  2885	    0864  ED 52				  DB 0EDH,052h			; start	- end
1  2886	    0866  EB				 DB 0ebh
1  2887	    0867  E1				 DB 0e1h
1  2888	    0868  18 EB				 DB 18h,( L066A)-$-1
1  2889
1  2890
1  2891
1  2892
1  2893						 GLOBALS L067F
2  2894
2  2895						  IRP NAME,<L067F>
2  2896							   GLOBAL2 <NAME>
2  2897						  ENDM
3  2898							   GLOBAL2 <L067F>
4  2899						  GLOBAL L067F : NEAR
4  2900
4  2901						  GLOBAL _L067F	: NEAR
4  2902	    086A			 _L067F:
4  2903
2  2904
1  2905	    086A			 L067F:	 ; X = Y ? : Integer, Byte, Boolean or Char
1  2906						 ; in:	 X = DE, Previous
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 52
msx_asm\rtl_rtl.ASM



1  2907						 ;	 Y = HL, Current
1  2908						 ; out:	 HL = 1, if true
1  2909						 ;	 HL = 0, if false
1  2910	    086A  B7				 DB 0b7h
1  2911	    086B  ED 52				 DB 0EDH,052h
1  2912
1  2913	    086D			 L0682:	 ; Equal
1  2914	    086D  21				 DB 21h
1  2915	    086E  0001				 DW 1
1  2916	    0870  C8				 DB 0c8h
1  2917	    0871  2B				 DB 2bh
1  2918	    0872  C9				 DB 0c9h
1  2919
1  2920						  GLOBALS L_PRED
2  2921
2  2922						  IRP NAME,<L_PRED>
2  2923							   GLOBAL2 <NAME>
2  2924						  ENDM
3  2925							   GLOBAL2 <L_PRED>
4  2926						  GLOBAL L_PRED	: NEAR
4  2927
4  2928						  GLOBAL _L_PRED : NEAR
4  2929	    0873			 _L_PRED:
4  2930
2  2931
1  2932	    0873			 L_PRED:  ; in:	   DE:HL
1  2933						  ; out:   DE:HL
1  2934						  ; changes: BC
1  2935
1  2936	    0873  01				  DB 01h
1  2937	    0874  0001				 DW 1
1  2938	    0876  B7				  DB 0b7h
1  2939	    0877  ED 42				  DB 0EDH,042h			; low-word - 1
1  2940	    0879  D0				  DB 0d0h		      ;	return if >= 0
1  2941
1  2942	    087A  1B				  DB 1bh		     ; high-word - 1
1  2943	    087B  C9				  DB 0c9h
1  2944
1  2945						  GLOBALS L_SUCC
2  2946
2  2947						  IRP NAME,<L_SUCC>
2  2948							   GLOBAL2 <NAME>
2  2949						  ENDM
3  2950							   GLOBAL2 <L_SUCC>
4  2951						  GLOBAL L_SUCC	: NEAR
4  2952
4  2953						  GLOBAL _L_SUCC : NEAR
4  2954	    087C			 _L_SUCC:
4  2955
2  2956
1  2957	    087C			 L_SUCC:  ; in:	   DE:HL
1  2958						  ; out:   DE:HL
1  2959						  ; changes: BC
1  2960
1  2961	    087C  01				  DB 01h
1  2962	    087D  0001				 DW 1
1  2963	    087F  09				  DB 09h		  ; low-word + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 53
msx_asm\rtl_rtl.ASM



1  2964	    0880  D0				  DB 0d0h		      ;	return if <= 0ffffh
1  2965
1  2966	    0881  13				  DB 13h		     ; high-word + 1
1  2967	    0882  C9				  DB 0c9h
1  2968
1  2969						 GLOBALS L_EQ
2  2970
2  2971						  IRP NAME,<L_EQ>
2  2972							   GLOBAL2 <NAME>
2  2973						  ENDM
3  2974							   GLOBAL2 <L_EQ>
4  2975						  GLOBAL L_EQ :	NEAR
4  2976
4  2977						  GLOBAL _L_EQ : NEAR
4  2978	    0883			 _L_EQ:
4  2979
2  2980
1  2981	    0883			 L_EQ:	 ; X = Y ? : Longint
1  2982						 ; in:	 X at stack, Previous
1  2983						 ;	 Y in DEHL, Current
1  2984						 ; out:	 HL = 1, if true
1  2985						 ;	 HL = 0, if false
1  2986	    0883  CD				 DB 0cdh
1  2987	    0884  09F4r				 DW  L_CMP		 ; Compare longints
1  2988	    0886  C3				  DB 0c3h
1  2989	    0887  086Dr				 DW  L0682
1  2990
1  2991						 GLOBALS L0688
2  2992
2  2993						  IRP NAME,<L0688>
2  2994							   GLOBAL2 <NAME>
2  2995						  ENDM
3  2996							   GLOBAL2 <L0688>
4  2997						  GLOBAL L0688 : NEAR
4  2998
4  2999						  GLOBAL _L0688	: NEAR
4  3000	    0889			 _L0688:
4  3001
2  3002
1  3003	    0889			 L0688:	 ; X = Y ? : Real
1  3004						 ; in:	 X = BCDEHL , Previous
1  3005						 ;	 Y = BCDEHL', Current
1  3006						 ; out:	 HL = 1, if true
1  3007						 ;	 HL = 0, if false
1  3008	    0889  CD				 DB 0cdh
1  3009	    088A  1153r				 DW  L0BDF		 ; Compare REALS
1  3010	    088C  C3				  DB 0c3h
1  3011	    088D  086Dr				 DW  L0682		     ; Equal
1  3012
1  3013						 GLOBALS L068D
2  3014
2  3015						  IRP NAME,<L068D>
2  3016							   GLOBAL2 <NAME>
2  3017						  ENDM
3  3018							   GLOBAL2 <L068D>
4  3019						  GLOBAL L068D : NEAR
4  3020
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 54
msx_asm\rtl_rtl.ASM



4  3021						  GLOBAL _L068D	: NEAR
4  3022	    088F			 _L068D:
4  3023
2  3024
1  3025	    088F			 L068D:	 ; X = Y ? : String
1  3026						 ; in:	 X = pushed first , Previous
1  3027						 ;	 Y = pushed second, Current
1  3028						 ; out:	 HL = 1, if true
1  3029						 ;	 HL = 0, if false
1  3030	    088F  CD				 DB 0cdh
1  3031	    0890  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3032	    0892  C3				  DB 0c3h
1  3033	    0893  086Dr				 DW  L0682		     ; Equal
1  3034
1  3035						 GLOBALS L0692
2  3036
2  3037						  IRP NAME,<L0692>
2  3038							   GLOBAL2 <NAME>
2  3039						  ENDM
3  3040							   GLOBAL2 <L0692>
4  3041						  GLOBAL L0692 : NEAR
4  3042
4  3043						  GLOBAL _L0692	: NEAR
4  3044	    0895			 _L0692:
4  3045
2  3046
1  3047	    0895			 L0692:	 ; X <>	Y ? : Integer, Byte, Boolean or	Char
1  3048						 ; in:	 X = DE, Previous
1  3049						 ;	 Y = HL, Current
1  3050						 ; out:	 HL = 1, if true
1  3051						 ;	 HL = 0, if false
1  3052	    0895  B7				 DB 0b7h
1  3053	    0896  ED 52				 DB 0EDH,052h
1  3054
1  3055	    0898			 L0695:	 ; Not Equal
1  3056	    0898  21				 DB 21h
1  3057	    0899  0001				 DW 1
1  3058	    089B  C0				 DB 0c0h
1  3059	    089C  2B				 DB 2bh
1  3060	    089D  C9				 DB 0c9h
1  3061
1  3062						 GLOBALS L_NEQ
2  3063
2  3064						  IRP NAME,<L_NEQ>
2  3065							   GLOBAL2 <NAME>
2  3066						  ENDM
3  3067							   GLOBAL2 <L_NEQ>
4  3068						  GLOBAL L_NEQ : NEAR
4  3069
4  3070						  GLOBAL _L_NEQ	: NEAR
4  3071	    089E			 _L_NEQ:
4  3072
2  3073
1  3074	    089E			 L_NEQ:	 ; X <>	Y ? : Longint
1  3075						 ; in:	 X at stack, Previous
1  3076						 ;	 Y in DEHL, Current
1  3077						 ; out:	 HL = 1, if true
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 55
msx_asm\rtl_rtl.ASM



1  3078						 ;	 HL = 0, if false
1  3079	    089E  CD				 DB 0cdh
1  3080	    089F  09F4r				 DW  L_CMP		 ; Compare longints
1  3081	    08A1  18 F5				 DB 18h,( L0695)-$-1		 ; Not Equal
1  3082
1  3083						 GLOBALS L069B
2  3084
2  3085						  IRP NAME,<L069B>
2  3086							   GLOBAL2 <NAME>
2  3087						  ENDM
3  3088							   GLOBAL2 <L069B>
4  3089						  GLOBAL L069B : NEAR
4  3090
4  3091						  GLOBAL _L069B	: NEAR
4  3092	    08A3			 _L069B:
4  3093
2  3094
1  3095	    08A3			 L069B:	 ; X <>	Y ? : Real
1  3096						 ; in:	 X = BCDEHL , Previous
1  3097						 ;	 Y = BCDEHL', Current
1  3098						 ; out:	 HL = 1, if true
1  3099						 ;	 HL = 0, if false
1  3100	    08A3  CD				 DB 0cdh
1  3101	    08A4  1153r				 DW  L0BDF		 ; Compare REALS
1  3102	    08A6  18 F0				 DB 18h,( L0695)-$-1		 ; Not Equal
1  3103
1  3104						 GLOBALS L06A0
2  3105
2  3106						  IRP NAME,<L06A0>
2  3107							   GLOBAL2 <NAME>
2  3108						  ENDM
3  3109							   GLOBAL2 <L06A0>
4  3110						  GLOBAL L06A0 : NEAR
4  3111
4  3112						  GLOBAL _L06A0	: NEAR
4  3113	    08A8			 _L06A0:
4  3114
2  3115
1  3116	    08A8			 L06A0:	 ; X <>	Y ? : String
1  3117						 ; in:	 X = pushed first , Previous
1  3118						 ;	 Y = pushed second, Current
1  3119						 ; out:	 HL = 1, if true
1  3120						 ;	 HL = 0, if false
1  3121	    08A8  CD				 DB 0cdh
1  3122	    08A9  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3123	    08AB  18 EB				 DB 18h,( L0695)-$-1		 ; Not Equal
1  3124
1  3125
1  3126						 GLOBALS L06A5
2  3127
2  3128						  IRP NAME,<L06A5>
2  3129							   GLOBAL2 <NAME>
2  3130						  ENDM
3  3131							   GLOBAL2 <L06A5>
4  3132						  GLOBAL L06A5 : NEAR
4  3133
4  3134						  GLOBAL _L06A5	: NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 56
msx_asm\rtl_rtl.ASM



4  3135	    08AD			 _L06A5:
4  3136
2  3137
1  3138	    08AD			 L06A5:	 ; X >=	Y ? : Integer, Byte, Boolean or	Char
1  3139						 ; in:	 X = DE, Previous
1  3140						 ;	 Y = HL, Current
1  3141						 ; out:	 HL = 1, if true
1  3142						 ;	 HL = 0, if false
1  3143	    08AD  CD				 DB 0cdh
1  3144	    08AE  09D4r				 DW  L0772		 ; Compare signed Integers
1  3145
1  3146	    08B0			 L06A8:	 ; Greater or Equal
1  3147	    08B0  21				 DB 21h
1  3148	    08B1  0001				 DW 1
1  3149	    08B3  D0				 DB 0d0h
1  3150	    08B4  2B				 DB 2bh
1  3151	    08B5  C9				 DB 0c9h
1  3152
1  3153						 GLOBALS L_GTE
2  3154
2  3155						  IRP NAME,<L_GTE>
2  3156							   GLOBAL2 <NAME>
2  3157						  ENDM
3  3158							   GLOBAL2 <L_GTE>
4  3159						  GLOBAL L_GTE : NEAR
4  3160
4  3161						  GLOBAL _L_GTE	: NEAR
4  3162	    08B6			 _L_GTE:
4  3163
2  3164
1  3165	    08B6			 L_GTE:	 ; X >=	Y ? : Longint
1  3166						 ; in:	 X at stack, Previous
1  3167						 ;	 Y in DEHL, Current
1  3168						 ; out:	 HL = 1, if true
1  3169						 ;	 HL = 0, if false
1  3170	    08B6  CD				 DB 0cdh
1  3171	    08B7  09F4r				 DW  L_CMP		 ; Compare longints
1  3172	    08B9  18 F5				 DB 18h,( L06A8)-$-1		 ; Greater or Equal
1  3173
1  3174						 GLOBALS L06AE
2  3175
2  3176						  IRP NAME,<L06AE>
2  3177							   GLOBAL2 <NAME>
2  3178						  ENDM
3  3179							   GLOBAL2 <L06AE>
4  3180						  GLOBAL L06AE : NEAR
4  3181
4  3182						  GLOBAL _L06AE	: NEAR
4  3183	    08BB			 _L06AE:
4  3184
2  3185
1  3186	    08BB			 L06AE:	 ; X >=	Y ? : Real
1  3187						 ; in:	 X = BCDEHL , Previous
1  3188						 ;	 Y = BCDEHL', Current
1  3189						 ; out:	 HL = 1, if true
1  3190						 ;	 HL = 0, if false
1  3191	    08BB  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 57
msx_asm\rtl_rtl.ASM



1  3192	    08BC  1153r				 DW  L0BDF		 ; Compare REALS
1  3193	    08BE  18 F0				 DB 18h,( L06A8)-$-1		 ; Greater or Equal
1  3194
1  3195						 GLOBALS L06B3
2  3196
2  3197						  IRP NAME,<L06B3>
2  3198							   GLOBAL2 <NAME>
2  3199						  ENDM
3  3200							   GLOBAL2 <L06B3>
4  3201						  GLOBAL L06B3 : NEAR
4  3202
4  3203						  GLOBAL _L06B3	: NEAR
4  3204	    08C0			 _L06B3:
4  3205
2  3206
1  3207	    08C0			 L06B3:	 ; X >=	Y ? : String
1  3208						 ; in:	 X = pushed first , Previous
1  3209						 ;	 Y = pushed second, Current
1  3210						 ; out:	 HL = 1, if true
1  3211						 ;	 HL = 0, if false
1  3212	    08C0  CD				 DB 0cdh
1  3213	    08C1  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3214	    08C3  18 EB				 DB 18h,( L06A8)-$-1		 ; Greater or Equal
1  3215
1  3216						 GLOBALS L06B8
2  3217
2  3218						  IRP NAME,<L06B8>
2  3219							   GLOBAL2 <NAME>
2  3220						  ENDM
3  3221							   GLOBAL2 <L06B8>
4  3222						  GLOBAL L06B8 : NEAR
4  3223
4  3224						  GLOBAL _L06B8	: NEAR
4  3225	    08C5			 _L06B8:
4  3226
2  3227
1  3228	    08C5			 L06B8:	 ; X <=	Y ? : Integer, Byte, Boolean or	Char
1  3229						 ; in:	 X = DE, Previous
1  3230						 ;	 Y = HL, Current
1  3231						 ; out:	 HL = 1, if true
1  3232						 ;	 HL = 0, if false
1  3233	    08C5  CD				 DB 0cdh
1  3234	    08C6  09D4r				 DW  L0772		 ; Compare signed Integers
1  3235
1  3236	    08C8			 L06BB:	 ; Less	or Equal
1  3237	    08C8  21				 DB 21h
1  3238	    08C9  0001				 DW 1
1  3239	    08CB  C8				 DB 0c8h
1  3240	    08CC  D8				 DB 0d8h
1  3241	    08CD  2B				 DB 2bh
1  3242	    08CE  C9				 DB 0c9h
1  3243
1  3244						 GLOBALS L_LSE
2  3245
2  3246						  IRP NAME,<L_LSE>
2  3247							   GLOBAL2 <NAME>
2  3248						  ENDM
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 58
msx_asm\rtl_rtl.ASM



3  3249							   GLOBAL2 <L_LSE>
4  3250						  GLOBAL L_LSE : NEAR
4  3251
4  3252						  GLOBAL _L_LSE	: NEAR
4  3253	    08CF			 _L_LSE:
4  3254
2  3255
1  3256	    08CF			 L_LSE:	  ; X <= Y ? : Longint
1  3257						 ; in:	 X at stack, Previous
1  3258						 ;	 Y in DEHL, Current
1  3259						 ; out:	 HL = 1, if true
1  3260						 ;	 HL = 0, if false
1  3261	    08CF  CD				 DB 0cdh
1  3262	    08D0  09F4r				 DW  L_CMP		 ; Compare longints
1  3263	    08D2  18 F4				 DB 18h,( L06BB)-$-1		 ; Less	or Equal
1  3264
1  3265						 GLOBALS L06C2
2  3266
2  3267						  IRP NAME,<L06C2>
2  3268							   GLOBAL2 <NAME>
2  3269						  ENDM
3  3270							   GLOBAL2 <L06C2>
4  3271						  GLOBAL L06C2 : NEAR
4  3272
4  3273						  GLOBAL _L06C2	: NEAR
4  3274	    08D4			 _L06C2:
4  3275
2  3276
1  3277	    08D4			 L06C2:	 ; X <=	Y ? : Real
1  3278						 ; in:	 X = BCDEHL , Previous
1  3279						 ;	 Y = BCDEHL', Current
1  3280						 ; out:	 HL = 1, if true
1  3281						 ;	 HL = 0, if false
1  3282	    08D4  CD				 DB 0cdh
1  3283	    08D5  1153r				 DW  L0BDF		 ; Compare REALS
1  3284	    08D7  18 EF				 DB 18h,( L06BB)-$-1		 ; Less	or Equal
1  3285
1  3286						 GLOBALS L06C7
2  3287
2  3288						  IRP NAME,<L06C7>
2  3289							   GLOBAL2 <NAME>
2  3290						  ENDM
3  3291							   GLOBAL2 <L06C7>
4  3292						  GLOBAL L06C7 : NEAR
4  3293
4  3294						  GLOBAL _L06C7	: NEAR
4  3295	    08D9			 _L06C7:
4  3296
2  3297
1  3298	    08D9			 L06C7:	 ; X <=	Y ? : String
1  3299						 ; in:	 X = pushed first , Previous
1  3300						 ;	 Y = pushed second, Current
1  3301						 ; out:	 HL = 1, if true
1  3302						 ;	 HL = 0, if false
1  3303	    08D9  CD				 DB 0cdh
1  3304	    08DA  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3305	    08DC  18 EA				 DB 18h,( L06BB)-$-1		 ; Less	or Equal
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 59
msx_asm\rtl_rtl.ASM



1  3306
1  3307
1  3308
1  3309
1  3310						 GLOBALS L06CC
2  3311
2  3312						  IRP NAME,<L06CC>
2  3313							   GLOBAL2 <NAME>
2  3314						  ENDM
3  3315							   GLOBAL2 <L06CC>
4  3316						  GLOBAL L06CC : NEAR
4  3317
4  3318						  GLOBAL _L06CC	: NEAR
4  3319	    08DE			 _L06CC:
4  3320
2  3321
1  3322	    08DE			 L06CC:	 ; X > Y ? : Integer, Byte, Boolean or Char
1  3323						 ; in:	 X = DE, Previous
1  3324						 ;	 Y = HL, Current
1  3325						 ; out:	 HL = 1, if true
1  3326						 ;	 HL = 0, if false
1  3327	    08DE  CD				 DB 0cdh
1  3328	    08DF  09D4r				 DW  L0772		 ; Compare signed Integers
1  3329
1  3330	    08E1			 L06CF:	 ; Greater
1  3331	    08E1  21				 DB 21h
1  3332	    08E2  0000				 DW 0
1  3333	    08E4  C8				 DB 0c8h
1  3334	    08E5  D8				 DB 0d8h
1  3335	    08E6  23				 DB 23h
1  3336	    08E7  C9				 DB 0c9h
1  3337
1  3338						 GLOBALS L_GT
2  3339
2  3340						  IRP NAME,<L_GT>
2  3341							   GLOBAL2 <NAME>
2  3342						  ENDM
3  3343							   GLOBAL2 <L_GT>
4  3344						  GLOBAL L_GT :	NEAR
4  3345
4  3346						  GLOBAL _L_GT : NEAR
4  3347	    08E8			 _L_GT:
4  3348
2  3349
1  3350	    08E8			 L_GT:	 ; X > Y ? : Longint
1  3351						 ; in:	 X at stack, Previous
1  3352						 ;	 Y in DEHL, Current
1  3353						 ; out:	 HL = 1, if true
1  3354						 ;	 HL = 0, if false
1  3355	    08E8  CD				 DB 0cdh
1  3356	    08E9  09F4r				 DW  L_CMP		 ; Compare longints
1  3357	    08EB  18 F4				 DB 18h,( L06CF)-$-1		 ; Greater
1  3358
1  3359						 GLOBALS L06D6
2  3360
2  3361						  IRP NAME,<L06D6>
2  3362							   GLOBAL2 <NAME>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 60
msx_asm\rtl_rtl.ASM



2  3363						  ENDM
3  3364							   GLOBAL2 <L06D6>
4  3365						  GLOBAL L06D6 : NEAR
4  3366
4  3367						  GLOBAL _L06D6	: NEAR
4  3368	    08ED			 _L06D6:
4  3369
2  3370
1  3371	    08ED			 L06D6:	 ; X > Y ? : Real
1  3372						 ; in:	 X = BCDEHL , Previous
1  3373						 ;	 Y = BCDEHL', Current
1  3374						 ; out:	 HL = 1, if true
1  3375						 ;	 HL = 0, if false
1  3376	    08ED  CD				 DB 0cdh
1  3377	    08EE  1153r				 DW  L0BDF		 ; Compare REALS
1  3378	    08F0  18 EF				 DB 18h,( L06CF)-$-1		 ; Greater
1  3379
1  3380						 GLOBALS L06DB
2  3381
2  3382						  IRP NAME,<L06DB>
2  3383							   GLOBAL2 <NAME>
2  3384						  ENDM
3  3385							   GLOBAL2 <L06DB>
4  3386						  GLOBAL L06DB : NEAR
4  3387
4  3388						  GLOBAL _L06DB	: NEAR
4  3389	    08F2			 _L06DB:
4  3390
2  3391
1  3392	    08F2			 L06DB:	 ; X > Y ? : String
1  3393						 ; in:	 X = pushed first , Previous
1  3394						 ;	 Y = pushed second, Current
1  3395						 ; out:	 HL = 1, if true
1  3396						 ;	 HL = 0, if false
1  3397	    08F2  CD				 DB 0cdh
1  3398	    08F3  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3399	    08F5  18 EA				 DB 18h,( L06CF)-$-1		 ; Greater
1  3400
1  3401						 GLOBALS L06E0
2  3402
2  3403						  IRP NAME,<L06E0>
2  3404							   GLOBAL2 <NAME>
2  3405						  ENDM
3  3406							   GLOBAL2 <L06E0>
4  3407						  GLOBAL L06E0 : NEAR
4  3408
4  3409						  GLOBAL _L06E0	: NEAR
4  3410	    08F7			 _L06E0:
4  3411
2  3412
1  3413	    08F7			 L06E0:	 ; X < Y ? : Integer, Byte, Boolean or Char
1  3414						 ; in:	 X = DE, Previous
1  3415						 ;	 Y = HL, Current
1  3416						 ; out:	 HL = 1, if true
1  3417						 ;	 HL = 0, if false
1  3418	    08F7  CD				  DB 0cdh
1  3419	    08F8  09D4r				 DW  L0772		   ; Compare Signed Integers
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 61
msx_asm\rtl_rtl.ASM



1  3420
1  3421	    08FA			 L06E3:	 ; Less
1  3422	    08FA  21				 DB 21h
1  3423	    08FB  0001				 DW 1
1  3424	    08FD  D8				 DB 0d8h
1  3425	    08FE  2B				 DB 2bh
1  3426	    08FF  C9				 DB 0c9h
1  3427
1  3428						 GLOBALS L_LS
2  3429
2  3430						  IRP NAME,<L_LS>
2  3431							   GLOBAL2 <NAME>
2  3432						  ENDM
3  3433							   GLOBAL2 <L_LS>
4  3434						  GLOBAL L_LS :	NEAR
4  3435
4  3436						  GLOBAL _L_LS : NEAR
4  3437	    0900			 _L_LS:
4  3438
2  3439
1  3440	    0900			 L_LS:	 ; X < Y ? : Longint
1  3441						 ; in:	 X at stack, Previous
1  3442						 ;	 Y in DEHL, Current
1  3443						 ; out:	 HL = 1, if true
1  3444						 ;	 HL = 0, if false
1  3445	    0900  CD				 DB 0cdh
1  3446	    0901  09F4r				 DW  L_CMP		 ; Compare longints
1  3447	    0903  18 F5				 DB 18h,( L06E3)-$-1		 ; Less
1  3448
1  3449						 GLOBALS L06E9
2  3450
2  3451						  IRP NAME,<L06E9>
2  3452							   GLOBAL2 <NAME>
2  3453						  ENDM
3  3454							   GLOBAL2 <L06E9>
4  3455						  GLOBAL L06E9 : NEAR
4  3456
4  3457						  GLOBAL _L06E9	: NEAR
4  3458	    0905			 _L06E9:
4  3459
2  3460
1  3461	    0905			 L06E9:	 ; X < Y ? : Real
1  3462						 ; in:	 X = BCDEHL , Previous
1  3463						 ;	 Y = BCDEHL', Current
1  3464						 ; out:	 HL = 1, if true
1  3465						 ;	 HL = 0, if false
1  3466	    0905  CD				 DB 0cdh
1  3467	    0906  1153r				 DW  L0BDF		 ; Compare REALS
1  3468	    0908  18 F0				 DB 18h,( L06E3)-$-1		 ; Less
1  3469
1  3470						 GLOBALS L06EE
2  3471
2  3472						  IRP NAME,<L06EE>
2  3473							   GLOBAL2 <NAME>
2  3474						  ENDM
3  3475							   GLOBAL2 <L06EE>
4  3476						  GLOBAL L06EE : NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 62
msx_asm\rtl_rtl.ASM



4  3477
4  3478						  GLOBAL _L06EE	: NEAR
4  3479	    090A			 _L06EE:
4  3480
2  3481
1  3482	    090A			 L06EE:	 ; X < Y ? : String
1  3483						 ; in:	 X = pushed first , Previous
1  3484						 ;	 Y = pushed second, Current
1  3485						 ; out:	 HL = 1, if true
1  3486						 ;	 HL = 0, if false
1  3487	    090A  CD				 DB 0cdh
1  3488	    090B  0ED9r				 DW  L09B0		 ; Compare STRINGS
1  3489	    090D  18 EB				 DB 18h,( L06E3)-$-1		 ; Less
1  3490
1  3491						 ; INTEGER-Arithmetic
1  3492
1  3493						 GLOBALS L06F3
2  3494
2  3495						  IRP NAME,<L06F3>
2  3496							   GLOBAL2 <NAME>
2  3497						  ENDM
3  3498							   GLOBAL2 <L06F3>
4  3499						  GLOBAL L06F3 : NEAR
4  3500
4  3501						  GLOBAL _L06F3	: NEAR
4  3502	    090F			 _L06F3:
4  3503
2  3504
1  3505	    090F			 L06F3:	 ; LIB
1  3506						 ; FUNCTION SQR(I: INTEGER): INTEGER;
1  3507						 ; in:	 HL = value to calcute square
1  3508						 ; out:	 HL = HL * HL
1  3509	    090F  54				 DB 54h			 ; DE =	HL
1  3510	    0910  5D				 DB 5dh
1  3511
1  3512
1  3513
1  3514						 GLOBALS L06F5
2  3515
2  3516						  IRP NAME,<L06F5>
2  3517							   GLOBAL2 <NAME>
2  3518						  ENDM
3  3519							   GLOBAL2 <L06F5>
4  3520						  GLOBAL L06F5 : NEAR
4  3521
4  3522						  GLOBAL _L06F5	: NEAR
4  3523	    0911			 _L06F5:
4  3524
2  3525
1  3526	    0911			 L06F5:	 ; X * Y : INTEGER
1  3527						 ; in:	 DE = X
1  3528						 ;	 HL = Y
1  3529						 ; out:	 HL = X	* Y
1  3530	    0911  4B				 DB 4bh			 ; BC =	X
1  3531	    0912  42				 DB 42h
1  3532	    0913  EB				 DB 0ebh
1  3533	    0914  21				 DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 63
msx_asm\rtl_rtl.ASM



1  3534	    0915  0000				 DW 0
1  3535	    0917  7A				 DB 7ah			 ; D non zero?
1  3536	    0918  B7				 DB 0b7h
1  3537	    0919  3E 10				 DB 3eh,16			 ; assume 16 bits
1  3538	    091B  20 03				 DB 20h,(L0704)-$-1		 ; yes,	continue
1  3539	    091D  53				 DB 53h			 ; no, shift E to D
1  3540	    091E  3E 08				 DB 3eh,8			 ; shift rest over 8 bits
1  3541	    0920  29			 L0704:	 DB 029h
1  3542	    0921  EB				 DB 0ebh
1  3543	    0922  29				 DB 029h
1  3544	    0923  EB				 DB 0ebh
1  3545	    0924  30 01				 DB 30h,(L070B)-$-1
1  3546	    0926  09				  DB 09h
1  3547	    0927  3D			 L070B:	 DB 3dh
1  3548	    0928  20 F6				 DB 20h,(L0704)-$-1
1  3549	    092A  C9				 DB 0c9h
1  3550
1  3551
1  3552
1  3553						 GLOBALS L070F
2  3554
2  3555						  IRP NAME,<L070F>
2  3556							   GLOBAL2 <NAME>
2  3557						  ENDM
3  3558							   GLOBAL2 <L070F>
4  3559						  GLOBAL L070F : NEAR
4  3560
4  3561						  GLOBAL _L070F	: NEAR
4  3562	    092B			 _L070F:
4  3563
2  3564
1  3565	    092B			 L070F:	 ; X div Y : INTEGER
1  3566						 ; in:	 DE = X
1  3567						 ;	 HL = Y
1  3568						 ; out:	 HL = X	div Y
1  3569						 ;	 DE = X	mod Y
1  3570	    092B  7C				 DB 7ch			 ; Y = 0 ?
1  3571	    092C  B5				 DB 0b5h
1  3572	    092D  CA				 DB 0cah
1  3573	    092E  0F2Cr				 DW L0A03		 ; jump	if Division by zero
1  3574
1  3575	    0930  CD				 DB 0cdh
1  3576	    0931  093Cr				 DW  I_DIV_0
1  3577
1  3578	    0933  2A				 DB 02ah
1  3579	    0934  093Ar				 DW I_DDAT
1  3580	    0936  F0				 DB 0f0h		 ; quit	if result = positive
1  3581
1  3582	    0937  C3				 DB 0c3h
1  3583	    0938  09E5r				 DW  L0783
1  3584
1  3585	    093A  0000			 I_DDAT: DW 0
1  3586	    093C			 I_DIV_0: ; X div Y : INTEGER
1  3587						 ; in:	 DE = X
1  3588						 ;	 HL = Y
1  3589						 ; out:	 C = number of bits processed
1  3590						 ;	 result	in I_DDAT
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 64
msx_asm\rtl_rtl.ASM



1  3591						 ;	 MOD = HL shr C
1  3592						 ;	 A = positive if result	is positive
1  3593						 ;	 A = negative if result	is negative
1  3594
1  3595						 ; HL =	INTEGER	A = Y
1  3596						 ; DE =	INTEGER	B = X
1  3597
1  3598	    093C  7C				 DB 7ch
1  3599	    093D  AA				 DB 0aah
1  3600	    093E  F5				 DB 0f5h		 ; save	resulting sign
1  3601									 ; P = positive, M = minus
1  3602
1  3603	    093F  CD				 DB 0cdh
1  3604	    0940  09E2r				 DW  L0780		 ; HL =	absolute HL
1  3605
1  3606	    0942  EB				 DB 0ebh
1  3607	    0943  CD				 DB 0cdh
1  3608	    0944  09E2r				 DW  L0780		 ; HL =	absolute HL
1  3609
1  3610						 ; HL =	X
1  3611						 ; DE =	Y
1  3612
1  3613	    0946  01				 DB 01h
1  3614	    0947  0000				 DW 0
1  3615	    0949  43ED 093Ar			 DW 43edh,I_DDAT
1  3616
1  3617	    094D  0E 01				 DB 0eh,1			 ; bits	= 1
1  3618
1  3619	    094F			 I_DIV1: ; save	old B and multiply b by	2
1  3620	    094F  D5				 DB 0d5h
1  3621	    0950  CB 23				 DB 0cbh,23h
1  3622	    0952  CB 12				 DB 0cbh,12h
1  3623
1  3624	    0954  E5				 DB 0e5h
1  3625	    0955  B7				 DB 0b7h
1  3626	    0956  ED 52				 DB 0EDH,052h
1  3627	    0958  E1				 DB 0e1h
1  3628	    0959  38 05				 DB 38h,(I_DIV_2)-$-1
1  3629
1  3630	    095B  0C				 DB 0ch
1  3631	    095C  F1				 DB 0f1h		 ; remove saved	INTEGER	B
1  3632	    095D  C3				 DB 0c3h
1  3633	    095E  094Fr				 DW  I_DIV1		 ; repeat loop
1  3634
1  3635	    0960  D1			 I_DIV_2: DB 0d1h			 ; restore INTEGER B
1  3636
1  3637	    0961  06 08				 DB 06h,8			 ; assume 8 bits, 0 rest
1  3638
1  3639	    0963  79				 DB 79h
1  3640	    0964  E6 07				 DB 0e6h, 7
1  3641	    0966  28 01				 DB 28h,(I_DIV_3)-$-1		 ; jump	if zero, means 8 bits
1  3642	    0968  47				 DB 47h
1  3643
1  3644	    0969  79			 I_DIV_3: DB 79h
1  3645	    096A  3D				 DB 3dh
1  3646	    096B  E6 18				 DB 0e6h, 18H
1  3647	    096D  0F				 DB 0fh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 65
msx_asm\rtl_rtl.ASM



1  3648	    096E  0F				 DB 0fh
1  3649	    096F  0F				 DB 0fh			 ; A = index to	byte to	start at
1  3650	    0970  D9				 DB 0d9h
1  3651	    0971  01				 DB 01h
1  3652	    0972  093Ar				 DW I_DDAT
1  3653	    0974  81				 DB 081h
1  3654	    0975  4F				 DB 4fh
1  3655	    0976  78				 DB 78h
1  3656	    0977  CE 00				 DB 0ceh,0
1  3657	    0979  47				 DB 47h
1  3658	    097A  D9				 DB 0d9h
1  3659
1  3660						 ; HL =	unsigned INTEGER A
1  3661						 ; DE =	unsigned INTEGER B * (2^(C - 1))
1  3662						 ;   B = initial number	of bits	after which the	first byte will
1  3663						 ;	 be stored
1  3664						 ;   C = number	of bits	to proces
1  3665						 ; BC' = address where to store	result
1  3666	    097B  AF				 DB 0afh		 ; init	first result byte
1  3667
1  3668	    097C  C5				 DB 0c5h		 ; save	number of bits to proces
1  3669
1  3670	    097D  87			 I_DIV_4: DB 087h			 ; result * 2
1  3671
1  3672	    097E  E5				 DB 0e5h		 ; save	INTEGER	A
1  3673	    097F  B7				 DB 0b7h
1  3674	    0980  ED 52				 DB 0EDH,052h
1  3675	    0982  38 05				 DB 38h,(I_DIV_5)-$-1		 ; jump	if A < B
1  3676
1  3677	    0984  33				 DB 33h			 ; remove saved	LONGINT	A
1  3678	    0985  33				 DB 33h
1  3679
1  3680	    0986  3C				 DB 3ch			 ; result:=result+1
1  3681	    0987  18 01				 DB 18h,( I_DIV_6)-$-1
1  3682
1  3683	    0989  E1			 I_DIV_5: DB 0e1h			 ; restore INTEGER A
1  3684
1  3685	    098A  29			 I_DIV_6: DB 029h		 ; LONGINT A * 2
1  3686
1  3687	    098B  10 06				 DB 10h,( I_DIV_7)-$-1		 ; result bits - 1
1  3688									     ; result =	full ?
1  3689									 ; jump	if not
1  3690	    098D  D9				 DB 0d9h
1  3691	    098E  02				 DB 02h		 ; save	result
1  3692	    098F  0B				 DB 0bh
1  3693	    0990  D9				 DB 0d9h
1  3694	    0991  06 08				 DB 06h,8			 ; start al over
1  3695
1  3696	    0993  0D			 I_DIV_7: DB 0dh
1  3697	    0994  20 E7				 DB 20h,(I_DIV_4)-$-1
1  3698
1  3699	    0996  C1				 DB 0c1h		 ; C = number of bits processes	(for MOD)
1  3700	    0997  F1				 DB 0f1h		 ; A = resulting sign
1  3701									 ; Sign	flag still set !
1  3702	    0998  C9				 DB 0c9h
1  3703
1  3704						 GLOBALS L073B
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 66
msx_asm\rtl_rtl.ASM



2  3705
2  3706						  IRP NAME,<L073B>
2  3707							   GLOBAL2 <NAME>
2  3708						  ENDM
3  3709							   GLOBAL2 <L073B>
4  3710						  GLOBAL L073B : NEAR
4  3711
4  3712						  GLOBAL _L073B	: NEAR
4  3713	    0999			 _L073B:
4  3714
2  3715
1  3716	    0999			 L073B:	 ; FUNCTION Random(Range: INTEGER): INTEGER;
1  3717	    0999  E5				 DB 0e5h
1  3718	    099A  CD				 DB 0cdh
1  3719	    099B  0C25r				 DW  L0792
1  3720	    099D  CB 3C				 DB 0cbh,3ch
1  3721	    099F  CB 1D				 DB 0cbh,1dh
1  3722	    09A1  D1				 DB 0d1h		 ; DE =	Range
1  3723	    09A2  EB				 DB 0ebh		 ; HL =	random value
1  3724
1  3725						 GLOBALS L0745
2  3726
2  3727						  IRP NAME,<L0745>
2  3728							   GLOBAL2 <NAME>
2  3729						  ENDM
3  3730							   GLOBAL2 <L0745>
4  3731						  GLOBAL L0745 : NEAR
4  3732
4  3733						  GLOBAL _L0745	: NEAR
4  3734	    09A3			 _L0745:
4  3735
2  3736
1  3737	    09A3			 L0745:	 ; X mod Y : INTEGER
1  3738						 ; in:	 DE = X
1  3739						 ;	 HL = Y
1  3740						 ; out:	 HL = X	mod Y
1  3741					 ;	   BIT 7,D		      ;	test for result	sign
1  3742					 ;	   PUSH	AF		      ;	save resulting sign
1  3743
1  3744	    09A3  CD				 DB 0cdh
1  3745	    09A4  093Cr				 DW  I_DIV_0
1  3746	    09A6  F5				  DB 0f5h		     ; 33f, save resulting sign
1  3747
1  3748						 ; HL =	RESULT SHL C
1  3749	    09A7  41				 DB 41h
1  3750	    09A8  CD				 DB 0cdh
1  3751	    09A9  09BCr				 DW  L075A
1  3752
1  3753	    09AB  F1				 DB 0f1h
1  3754	    09AC  F0				  DB 0f0h		       ; return	if sign	bit was	'0'
1  3755
1  3756	    09AD  C3				 DB 0c3h
1  3757	    09AE  09E5r				 DW  L0783		 ; X mod Y = negative
1  3758
1  3759						 GLOBALS L074E
2  3760
2  3761						  IRP NAME,<L074E>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 67
msx_asm\rtl_rtl.ASM



2  3762							   GLOBAL2 <NAME>
2  3763						  ENDM
3  3764							   GLOBAL2 <L074E>
4  3765						  GLOBAL L074E : NEAR
4  3766
4  3767						  GLOBAL _L074E	: NEAR
4  3768	    09B0			 _L074E:
4  3769
2  3770
1  3771	    09B0			 L074E:	 ; X shl Y : INTEGER
1  3772						 ; in:	 DE = X
1  3773						 ;	 HL = Y
1  3774						 ; out:	 HL = X	shl Y
1  3775	    09B0  CD				 DB 0cdh
1  3776	    09B1  09C3r				 DW  L0761		 ; Range16
1  3777	    09B3  C8				 DB 0c8h		 ; return if count = 0
1  3778
1  3779	    09B4  29			 L0752:	 DB 029h
1  3780	    09B5  10 FD				 DB 10h,( L0752)-$-1
1  3781	    09B7  C9				 DB 0c9h
1  3782
1  3783						 GLOBALS L0756
2  3784
2  3785						  IRP NAME,<L0756>
2  3786							   GLOBAL2 <NAME>
2  3787						  ENDM
3  3788							   GLOBAL2 <L0756>
4  3789						  GLOBAL L0756 : NEAR
4  3790
4  3791						  GLOBAL _L0756	: NEAR
4  3792	    09B8			 _L0756:
4  3793
2  3794
1  3795	    09B8			 L0756:	 ; X shr Y : INTEGER
1  3796						 ; in:	 DE = X
1  3797						 ;	 HL = Y
1  3798						 ; out:	 HL = X	shr Y
1  3799	    09B8  CD				 DB 0cdh
1  3800	    09B9  09C3r				 DW  L0761		 ; Range16
1  3801	    09BB  C8				 DB 0c8h		 ; return if count = 0
1  3802
1  3803	    09BC  CB 3C			 L075A:	 DB 0cbh,3ch
1  3804	    09BE  CB 1D				 DB 0cbh,1dh
1  3805	    09C0  10 FA				 DB 10h,( L075A)-$-1
1  3806	    09C2  C9				 DB 0c9h
1  3807
1  3808
1  3809
1  3810	    09C3			 L0761:	 ; Range16
1  3811	    09C3  EB				 DB 0ebh
1  3812	    09C4  7A				 DB 7ah
1  3813	    09C5  B7				 DB 0b7h
1  3814	    09C6  20 08				 DB 20h,(L076E)-$-1		 ; HL =	0
1  3815	    09C8  7B				 DB 7bh
1  3816	    09C9  FE 10				 DB 0feh, 16
1  3817	    09CB  30 03				 DB 30h,(L076E)-$-1		 ; HL =	0
1  3818	    09CD  47				 DB 47h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 68
msx_asm\rtl_rtl.ASM



1  3819	    09CE  B7				 DB 0b7h
1  3820	    09CF  C9				 DB 0c9h
1  3821
1  3822	    09D0			 L076E:	 ; HL =	0
1  3823	    09D0  AF				 DB 0afh
1  3824	    09D1  67				 DB 67h
1  3825	    09D2  6F				 DB 6fh
1  3826	    09D3  C9				 DB 0c9h
1  3827
1  3828	    09D4			 L0772:	 ; compare two signed integers
1  3829						 ; in:	 DE = X, Previous
1  3830						 ;	 HL = Y, Current
1  3831						 ; out:	 DE = Y
1  3832						 ;	 HL = X
1  3833						 ;	 Equal,		 if DE = HL,  Zero
1  3834						 ;	 Not Equal,	 if DE <> HL, NonZero
1  3835						 ;	 Greater or Equal, if DE >= HL,	NonCarry
1  3836						 ;	 Less or Equal,	 if DE <= HL, Zero or Carry
1  3837						 ;	 Greater than,	 if DE > HL,  NonZero and NonCarry
1  3838						 ;	 Less than,	 if DE < HL,  Carry
1  3839	    09D4  EB				 DB 0ebh
1  3840	    09D5  7C				 DB 7ch
1  3841	    09D6  AA				 DB 0aah
1  3842	    09D7  7C				 DB 7ch			 ; high	byte of	X
1  3843	    09D8  FA				 DB 0fah
1  3844	    09D9  09E0r				 DW L077E
1  3845	    09DB  BA				 DB 0bah
1  3846	    09DC  C0				 DB 0c0h
1  3847	    09DD  7D				 DB 7dh
1  3848	    09DE  BB				 DB 0bbh
1  3849	    09DF  C9				 DB 0c9h
1  3850
1  3851	    09E0  17			 L077E:	 DB 17h
1  3852	    09E1  C9				 DB 0c9h
1  3853
1  3854						 GLOBALS L0780
2  3855
2  3856						  IRP NAME,<L0780>
2  3857							   GLOBAL2 <NAME>
2  3858						  ENDM
3  3859							   GLOBAL2 <L0780>
4  3860						  GLOBAL L0780 : NEAR
4  3861
4  3862						  GLOBAL _L0780	: NEAR
4  3863	    09E2			 _L0780:
4  3864
2  3865
1  3866	    09E2			 L0780:	 ; Abs X : INTEGER
1  3867						 ; in:	 HL = X
1  3868						 ; out:	 HL = -X, if X < 0
1  3869						 ;	 HL = X, if X >= 0
1  3870	    09E2  CB 7C				 DB 0cbh,07ch			 ; LIB,	HL = negative ?
1  3871	    09E4  C8				 DB 0c8h		 ; return if positive
1  3872
1  3873						 GLOBALS L0783
2  3874
2  3875						  IRP NAME,<L0783>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 69
msx_asm\rtl_rtl.ASM



2  3876							   GLOBAL2 <NAME>
2  3877						  ENDM
3  3878							   GLOBAL2 <L0783>
4  3879						  GLOBAL L0783 : NEAR
4  3880
4  3881						  GLOBAL _L0783	: NEAR
4  3882	    09E5			 _L0783:
4  3883
2  3884
1  3885	    09E5			 L0783:	 ; X = -X : INTEGER
1  3886						 ; in:	 HL = X
1  3887						 ; out:	 HL = -X
1  3888	    09E5  7C				 DB 7ch			 ; negate HL
1  3889	    09E6  2F				 DB 2fh
1  3890	    09E7  67				 DB 67h
1  3891	    09E8  7D				 DB 7dh
1  3892	    09E9  2F				 DB 2fh
1  3893	    09EA  6F				 DB 6fh
1  3894	    09EB  23				 DB 23h
1  3895	    09EC  C9				 DB 0c9h
1  3896
1  3897
1  3898
1  3899						 GLOBALS L078B
2  3900
2  3901						  IRP NAME,<L078B>
2  3902							   GLOBAL2 <NAME>
2  3903						  ENDM
3  3904							   GLOBAL2 <L078B>
4  3905						  GLOBAL L078B : NEAR
4  3906
4  3907						  GLOBAL _L078B	: NEAR
4  3908	    09ED			 _L078B:
4  3909
2  3910
1  3911	    09ED			 L078B:	 ; convert integer HL to boolean HL
1  3912						 ; Odd X : INTEGER
1  3913						 ; in:	 HL = X
1  3914						 ; out:	 HL = 0, false if X = even
1  3915						 ;	 HL = 1, true  if X = odd
1  3916	    09ED  7D				 DB 7dh
1  3917	    09EE  E6 01				 DB 0e6h, 1
1  3918	    09F0  6F				 DB 6fh
1  3919	    09F1  26 00				 DB 26h,0
1  3920	    09F3  C9				 DB 0c9h
1  3921
1  3922
1  3923	    09F4			 L_CMP:	 ; compare two signed longints
1  3924						 ; in:	 X at stack, Previous
1  3925						 ;	 Y in DEHL, Current
1  3926						 ; out:	 HL'HL = X
1  3927						 ;	 DE'DE = Y
1  3928						 ;	 Equal,		 if DE = HL,  Zero
1  3929						 ;	 Not Equal,	 if DE <> HL, NonZero
1  3930						 ;	 Greater or Equal, if DE >= HL,	NonCarry
1  3931						 ;	 Less or Equal,	 if DE <= HL, Zero or Carry
1  3932						 ;	 Greater than,	 if DE > HL,  NonZero and NonCarry
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 70
msx_asm\rtl_rtl.ASM



1  3933						 ;	 Less than,	 if DE < HL,  Carry
1  3934	    09F4  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  3935	    09F6  C1				 DB 0c1h		 ; return address from previous	caller
1  3936
1  3937	    09F7  EB				 DB 0ebh		 ; remove X from stack
1  3938	    09F8  E3				 DB 0e3h
1  3939	    09F9  D9				 DB 0d9h
1  3940	    09FA  D1				 DB 0d1h
1  3941	    09FB  E1				 DB 0e1h
1  3942	    09FC  D9				 DB 0d9h
1  3943
1  3944	    09FD  C5				 DB 0c5h		 ; restore return address from previous	call
1  3945	    09FE  DD E5				 DB 0ddh,0e5h			 ; restore return address
1  3946
1  3947	    0A00			 L_CM0:	 ; in:	 X = HL'HL, Previous
1  3948						 ;	 Y = DE'DE, Current
1  3949						 ; out:	 X = HL'HL, Previous
1  3950						 ;	 Y = DE'DE, Current
1  3951	    0A00  D9				 DB 0d9h
1  3952	    0A01  7A				 DB 7ah
1  3953	    0A02  AC				 DB 0ach
1  3954	    0A03  7C				 DB 7ch			 ; high	byte of	X
1  3955	    0A04  FA				 DB 0fah
1  3956	    0A05  0A15r				 DW L_CMP1
1  3957	    0A07  BA				 DB 0bah
1  3958	    0A08  D9				 DB 0d9h
1  3959	    0A09  C0				 DB 0c0h
1  3960	    0A0A  D9				 DB 0d9h
1  3961	    0A0B  7D				 DB 7dh
1  3962	    0A0C  BB				 DB 0bbh
1  3963	    0A0D  D9				 DB 0d9h
1  3964	    0A0E  C0				 DB 0c0h
1  3965
1  3966	    0A0F			 L0A11:				     ; 33e
1  3967	    0A0F  7C				 DB 7ch
1  3968	    0A10  BA				 DB 0bah
1  3969	    0A11  C0				 DB 0c0h
1  3970
1  3971	    0A12  7D				 DB 7dh
1  3972	    0A13  BB				 DB 0bbh
1  3973	    0A14  C9				 DB 0c9h
1  3974
1  3975	    0A15  17			 L_CMP1: DB 17h
1  3976	    0A16  D9				 DB 0d9h
1  3977	    0A17  C9				 DB 0c9h
1  3978
1  3979					 ; 33e
1  3980	    0A18			 L0A1A:				     ; TODO: used ???
1  3981	    0A18  CD				  DB 0cdh
1  3982	    0A19  0A0Fr				 DW  L0A11
1  3983	    0A1B  D8				  DB 0d8h
1  3984	    0A1C  EB				  DB 0ebh
1  3985	    0A1D  C9				  DB 0c9h
1  3986					 ; 33e
1  3987
1  3988						 GLOBALS L_AND
2  3989
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 71
msx_asm\rtl_rtl.ASM



2  3990						  IRP NAME,<L_AND>
2  3991							   GLOBAL2 <NAME>
2  3992						  ENDM
3  3993							   GLOBAL2 <L_AND>
4  3994						  GLOBAL L_AND : NEAR
4  3995
4  3996						  GLOBAL _L_AND	: NEAR
4  3997	    0A1E			 _L_AND:
4  3998
2  3999
1  4000	    0A1E			 L_AND:	 ; X AND Y : LONG
1  4001						 ; in:	 X at stack
1  4002						 ;	 Y in DEHL
1  4003						 ; out:	 DEHL
1  4004						 ; changes: IX
1  4005	    0A1E  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  4006	    0A20  C1				 DB 0c1h		 ; X low-word
1  4007	    0A21  7D				 DB 7dh
1  4008	    0A22  A1				 DB 0a1h
1  4009	    0A23  6F				 DB 6fh
1  4010	    0A24  7C				 DB 7ch
1  4011	    0A25  A0				 DB 0a0h
1  4012	    0A26  67				 DB 67h
1  4013	    0A27  C1				 DB 0c1h		 ; X high-word
1  4014	    0A28  7B				 DB 7bh
1  4015	    0A29  A1				 DB 0a1h
1  4016	    0A2A  5F				 DB 5fh
1  4017	    0A2B  7A				 DB 7ah
1  4018	    0A2C  A0				 DB 0a0h
1  4019	    0A2D  57				 DB 57h
1  4020	    0A2E  DD E9				 DB 0ddh,0e9h
1  4021
1  4022						 GLOBALS L_OR
2  4023
2  4024						  IRP NAME,<L_OR>
2  4025							   GLOBAL2 <NAME>
2  4026						  ENDM
3  4027							   GLOBAL2 <L_OR>
4  4028						  GLOBAL L_OR :	NEAR
4  4029
4  4030						  GLOBAL _L_OR : NEAR
4  4031	    0A30			 _L_OR:
4  4032
2  4033
1  4034	    0A30			 L_OR:	 ; X OR	Y : LONG
1  4035						 ; in:	 X at stack
1  4036						 ;	 Y in DEHL
1  4037						 ; out:	 DEHL
1  4038						 ; changes: IX
1  4039	    0A30  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  4040	    0A32  C1				 DB 0c1h		 ; X low-word
1  4041	    0A33  7D				 DB 7dh
1  4042	    0A34  B1				 DB 0b1h
1  4043	    0A35  6F				 DB 6fh
1  4044	    0A36  7C				 DB 7ch
1  4045	    0A37  B0				 DB 0b0h
1  4046	    0A38  67				 DB 67h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 72
msx_asm\rtl_rtl.ASM



1  4047	    0A39  C1				 DB 0c1h		 ; X high-word
1  4048	    0A3A  7B				 DB 7bh
1  4049	    0A3B  B1				 DB 0b1h
1  4050	    0A3C  5F				 DB 5fh
1  4051	    0A3D  7A				 DB 7ah
1  4052	    0A3E  B0				 DB 0b0h
1  4053	    0A3F  57				 DB 57h
1  4054	    0A40  DD E9				 DB 0ddh,0e9h
1  4055
1  4056						 GLOBALS L_XOR
2  4057
2  4058						  IRP NAME,<L_XOR>
2  4059							   GLOBAL2 <NAME>
2  4060						  ENDM
3  4061							   GLOBAL2 <L_XOR>
4  4062						  GLOBAL L_XOR : NEAR
4  4063
4  4064						  GLOBAL _L_XOR	: NEAR
4  4065	    0A42			 _L_XOR:
4  4066
2  4067
1  4068	    0A42			 L_XOR:	 ; X XOR Y : LONG
1  4069						 ; in:	 X at stack
1  4070						 ;	 Y in DEHL
1  4071						 ; out:	 DEHL
1  4072						 ; changes: IX
1  4073	    0A42  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  4074	    0A44  C1				 DB 0c1h		 ; X low-word
1  4075	    0A45  7D				 DB 7dh
1  4076	    0A46  A9				 DB 0a9h
1  4077	    0A47  6F				 DB 6fh
1  4078	    0A48  7C				 DB 7ch
1  4079	    0A49  A8				 DB 0a8h
1  4080	    0A4A  67				 DB 67h
1  4081	    0A4B  C1				 DB 0c1h		 ; X high-word
1  4082	    0A4C  7B				 DB 7bh
1  4083	    0A4D  A9				 DB 0a9h
1  4084	    0A4E  5F				 DB 5fh
1  4085	    0A4F  7A				 DB 7ah
1  4086	    0A50  A8				 DB 0a8h
1  4087	    0A51  57				 DB 57h
1  4088	    0A52  DD E9				 DB 0ddh,0e9h
1  4089
1  4090						 GLOBALS L_NOT
2  4091
2  4092						  IRP NAME,<L_NOT>
2  4093							   GLOBAL2 <NAME>
2  4094						  ENDM
3  4095							   GLOBAL2 <L_NOT>
4  4096						  GLOBAL L_NOT : NEAR
4  4097
4  4098						  GLOBAL _L_NOT	: NEAR
4  4099	    0A54			 _L_NOT:
4  4100
2  4101
1  4102	    0A54			 L_NOT:	 ; X = NOT X : LONG
1  4103						 ; in:	 X in DEHL
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 73
msx_asm\rtl_rtl.ASM



1  4104						 ; out:	 DEHL
1  4105						 ; changes: IX
1  4106	    0A54  7D				 DB 7dh
1  4107	    0A55  2F				 DB 2fh
1  4108	    0A56  6F				 DB 6fh
1  4109	    0A57  7C				 DB 7ch
1  4110	    0A58  2F				 DB 2fh
1  4111	    0A59  67				 DB 67h
1  4112	    0A5A  7B				 DB 7bh
1  4113	    0A5B  2F				 DB 2fh
1  4114	    0A5C  5F				 DB 5fh
1  4115	    0A5D  7A				 DB 7ah
1  4116	    0A5E  2F				 DB 2fh
1  4117	    0A5F  57				 DB 57h
1  4118	    0A60  C9				 DB 0c9h
1  4119
1  4120						 GLOBALS L_ABS
2  4121
2  4122						  IRP NAME,<L_ABS>
2  4123							   GLOBAL2 <NAME>
2  4124						  ENDM
3  4125							   GLOBAL2 <L_ABS>
4  4126						  GLOBAL L_ABS : NEAR
4  4127
4  4128						  GLOBAL _L_ABS	: NEAR
4  4129	    0A61			 _L_ABS:
4  4130
2  4131
1  4132	    0A61			 L_ABS:	 ; Abs X : LONGINT
1  4133						 ; in:	 DEHL =	X
1  4134						 ; out:	 DEHL =	-X, if X < 0
1  4135						 ;	 DEHL =	 X, if X >= 0
1  4136	    0A61  CB 7A				 DB 0cbh,07ah			 ; LIB,	DEHL = negative	?
1  4137	    0A63  C8				 DB 0c8h		 ; return if positive
1  4138
1  4139						 GLOBALS L_NEG
2  4140
2  4141						  IRP NAME,<L_NEG>
2  4142							   GLOBAL2 <NAME>
2  4143						  ENDM
3  4144							   GLOBAL2 <L_NEG>
4  4145						  GLOBAL L_NEG : NEAR
4  4146
4  4147						  GLOBAL _L_NEG	: NEAR
4  4148	    0A64			 _L_NEG:
4  4149
2  4150
1  4151	    0A64			 L_NEG:	 ; X = -X : LONG
1  4152						 ; in:	 X in DEHL
1  4153						 ; out:	 DEHL
1  4154						 ; changes: BC,	A = 0
1  4155	    0A64  4D				 DB 4dh			 ; BC =	low-word
1  4156	    0A65  44				 DB 44h
1  4157	    0A66  AF				 DB 0afh		 ; Carry = 0
1  4158	    0A67  6F				 DB 6fh
1  4159	    0A68  67				 DB 67h
1  4160	    0A69  ED 42				 DB 0EDH,042h		 ; 0 - low-word
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 74
msx_asm\rtl_rtl.ASM



1  4161	    0A6B  EB				 DB 0ebh
1  4162	    0A6C  4D				 DB 4dh			 ; BC =	high-word
1  4163	    0A6D  44				 DB 44h
1  4164	    0A6E  6F				 DB 6fh
1  4165	    0A6F  67				 DB 67h
1  4166	    0A70  ED 42				 DB 0EDH,042h		 ; 0 - high-word - carry
1  4167	    0A72  EB				 DB 0ebh
1  4168	    0A73  C9				 DB 0c9h
1  4169
1  4170						 GLOBALS L_ADD
2  4171
2  4172						  IRP NAME,<L_ADD>
2  4173							   GLOBAL2 <NAME>
2  4174						  ENDM
3  4175							   GLOBAL2 <L_ADD>
4  4176						  GLOBAL L_ADD : NEAR
4  4177
4  4178						  GLOBAL _L_ADD	: NEAR
4  4179	    0A74			 _L_ADD:
4  4180
2  4181
1  4182	    0A74			 L_ADD:	 ; X + Y : LONG
1  4183						 ; in:	 X at stack
1  4184						 ;	 Y in DEHL
1  4185						 ; out:	 DEHL
1  4186						 ; changes: IX
1  4187	    0A74  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  4188	    0A76  C1				 DB 0c1h		 ; BC =	X low-word
1  4189	    0A77  09				 DB 09h		 ; X + Y, low
1  4190	    0A78  C1				 DB 0c1h		 ; BC =	Y high-word
1  4191	    0A79  EB				 DB 0ebh
1  4192	    0A7A  ED 4A				 DB 0EDH,04ah		 ; X + Y, high
1  4193	    0A7C  EB				 DB 0ebh
1  4194	    0A7D  DD E9				 DB 0ddh,0e9h
1  4195
1  4196						 GLOBALS L_SUB
2  4197
2  4198						  IRP NAME,<L_SUB>
2  4199							   GLOBAL2 <NAME>
2  4200						  ENDM
3  4201							   GLOBAL2 <L_SUB>
4  4202						  GLOBAL L_SUB : NEAR
4  4203
4  4204						  GLOBAL _L_SUB	: NEAR
4  4205	    0A7F			 _L_SUB:
4  4206
2  4207
1  4208	    0A7F			 L_SUB:	 ; X - Y : LONG
1  4209						 ; in:	 X at stack
1  4210						 ;	 Y in DEHL
1  4211						 ; out:	 DEHL
1  4212						 ; changes: IX
1  4213	    0A7F  DD E1				 DB 0ddh,0e1h			 ; save	return address
1  4214	    0A81  4D				 DB 4dh			 ; BC =	Y low-word
1  4215	    0A82  44				 DB 44h
1  4216	    0A83  E1				 DB 0e1h		 ; HL =	X low-word
1  4217	    0A84  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 75
msx_asm\rtl_rtl.ASM



1  4218	    0A85  ED 42				 DB 0EDH,042h		 ; X - Y, low
1  4219	    0A87  EB				 DB 0ebh
1  4220	    0A88  4D				 DB 4dh			 ; BC =	Y high-word
1  4221	    0A89  44				 DB 44h
1  4222	    0A8A  E1				 DB 0e1h		 ; HL =	X high-word
1  4223	    0A8B  ED 42				 DB 0EDH,042h		 ; X - Y, high
1  4224	    0A8D  EB				 DB 0ebh
1  4225	    0A8E  DD E9				 DB 0ddh,0e9h
1  4226
1  4227	    0A90  04*(00)		 L_MDAT: db 4 dup (0)
1  4228
1  4229						  GLOBALS L_SQR
2  4230
2  4231						  IRP NAME,<L_SQR>
2  4232							   GLOBAL2 <NAME>
2  4233						  ENDM
3  4234							   GLOBAL2 <L_SQR>
4  4235						  GLOBAL L_SQR : NEAR
4  4236
4  4237						  GLOBAL _L_SQR	: NEAR
4  4238	    0A94			 _L_SQR:
4  4239
2  4240
1  4241	    0A94			 L_SQR:	  ; LIB
1  4242						  ; FUNCTION SQR(L: LONGINT): LONGINT;
1  4243						  ; in:	   DE:HL = value to calcute square
1  4244						  ; out:   DE:HL = DE:HL * DE:HL
1  4245	    0A94  DD E1				  DB 0ddh,0e1h
1  4246
1  4247	    0A96  D5				  DB 0d5h
1  4248	    0A97  E5				  DB 0e5h
1  4249
1  4250	    0A98  DD E5				  DB 0ddh,0e5h
1  4251
1  4252						  GLOBALS L_MUL
2  4253
2  4254						  IRP NAME,<L_MUL>
2  4255							   GLOBAL2 <NAME>
2  4256						  ENDM
3  4257							   GLOBAL2 <L_MUL>
4  4258						  GLOBAL L_MUL : NEAR
4  4259
4  4260						  GLOBAL _L_MUL	: NEAR
4  4261	    0A9A			 _L_MUL:
4  4262
2  4263
1  4264	    0A9A			 L_MUL:	 ; X * Y : LONG
1  4265						 ; in:	 X at stack
1  4266						 ;	 Y in DEHL
1  4267						 ; out:	 DEHL
1  4268						 ; changes: IX
1  4269	    0A9A  DD E1				 DB 0ddh,0e1h
1  4270
1  4271	    0A9C  22				  DB 22h
1  4272	    0A9D  0A90r				 DW L_MDAT
1  4273	    0A9F  53ED 0A92r			 DW 53edh,L_MDAT+2
1  4274	    0AA3  21				 DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 76
msx_asm\rtl_rtl.ASM



1  4275	    0AA4  0000				 DW 0			 ; init	SUM low-word
1  4276	    0AA6  D1				 DB 0d1h		 ; DE =	X low-word
1  4277	    0AA7  D9				 DB 0d9h
1  4278	    0AA8  21				 DB 21h
1  4279	    0AA9  0000				 DW 0			 ; init	SUM high-word
1  4280	    0AAB  D1				 DB 0d1h		 ; DE' = X high-word
1  4281	    0AAC  D9				 DB 0d9h
1  4282	    0AAD  3A				 DB 3ah
1  4283	    0AAE  0A90r				 DW L_MDAT+0
1  4284	    0AB0  CD				 DB 0cdh
1  4285	    0AB1  0ACCr				 DW  L_MUL1
1  4286	    0AB3  3A				 DB 3ah
1  4287	    0AB4  0A91r				 DW L_MDAT+1
1  4288	    0AB6  CD				 DB 0cdh
1  4289	    0AB7  0ACCr				 DW  L_MUL1
1  4290	    0AB9  3A				 DB 3ah
1  4291	    0ABA  0A92r				 DW L_MDAT+2
1  4292	    0ABC  CD				 DB 0cdh
1  4293	    0ABD  0ACCr				 DW  L_MUL1
1  4294	    0ABF  3A				 DB 3ah
1  4295	    0AC0  0A93r				 DW L_MDAT+3
1  4296	    0AC2  B7				 DB 0b7h
1  4297	    0AC3  C4				 DB 0c4h
1  4298	    0AC4  0ACFr				 DW L_MUL11
1  4299
1  4300						 ; HL =	low-word SUM
1  4301	    0AC6  D9				 DB 0d9h
1  4302	    0AC7  E5				 DB 0e5h
1  4303	    0AC8  D9				 DB 0d9h
1  4304	    0AC9  D1				 DB 0d1h		 ; DE =	high-word SUM
1  4305	    0ACA  DD E9				 DB 0ddh,0e9h
1  4306
1  4307	    0ACC  B7			 L_MUL1: DB 0b7h
1  4308	    0ACD  28 17				 DB 28h,(L_MUL4)-$-1
1  4309
1  4310	    0ACF  06 08			 L_MUL11: DB 06h,8
1  4311
1  4312	    0AD1  0F			 L_MUL2: DB 0fh			 ; rotate byte from Y
1  4313	    0AD2  30 05				 DB 30h,(L_MUL3)-$-1
1  4314
1  4315	    0AD4  19				 DB 019h	 ; SUM += X
1  4316	    0AD5  D9				 DB 0d9h
1  4317	    0AD6  ED 5A				 DB 0EDH,05ah
1  4318	    0AD8  D9				 DB 0d9h
1  4319
1  4320	    0AD9			 L_MUL3:
1  4321	    0AD9  CB 23				 DB 0cbh,23h			 ; X * 2
1  4322	    0ADB  CB 12				 DB 0cbh,12h
1  4323	    0ADD  D9				 DB 0d9h
1  4324	    0ADE  CB 13				 DB 0cbh,13h
1  4325	    0AE0  CB 12				 DB 0cbh,12h
1  4326	    0AE2  D9				 DB 0d9h
1  4327
1  4328	    0AE3  10 EC				 DB 10h,( L_MUL2)-$-1
1  4329	    0AE5  C9				 DB 0c9h
1  4330
1  4331	    0AE6			 L_MUL4: ; in:	 DE'DE
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 77
msx_asm\rtl_rtl.ASM



1  4332						 ; out:	 DE'DE SHL 8
1  4333	    0AE6  7A				 DB 7ah
1  4334	    0AE7  53				 DB 53h
1  4335	    0AE8  1E 00				 DB 1eh,0
1  4336	    0AEA  D9				 DB 0d9h
1  4337	    0AEB  53				 DB 53h
1  4338	    0AEC  5F				 DB 5fh
1  4339	    0AED  D9				 DB 0d9h
1  4340	    0AEE  C9				 DB 0c9h
1  4341
1  4342	    0AEF			 L_DIV10: ; divides DE:HL by 10
1  4343						 ; in:	 DE:HL = long
1  4344						 ; out:	 DE:HL div 10, A = remainder
1  4345						 ; changes: BC
1  4346
1  4347	    0AEF  0E 00				 DB 0eh,0
1  4348	    0AF1  06 20				 DB 06h,32			 ; 32 bits
1  4349	    0AF3  AF				 DB 0afh		 ; carry 0
1  4350
1  4351	    0AF4			 L_DIV101:
1  4352	    0AF4  CB 15				 DB 0cbh,15h
1  4353	    0AF6  CB 14				 DB 0cbh,14h
1  4354	    0AF8  CB 13				 DB 0cbh,13h
1  4355	    0AFA  CB 12				 DB 0cbh,12h
1  4356	    0AFC  CB 11				 DB 0cbh,11h
1  4357	    0AFE  79				 DB 79h
1  4358	    0AFF  D6 0A				 DB 0d6h, 10
1  4359	    0B01  3F				 DB 3fh
1  4360	    0B02  D2				 DB 0d2h
1  4361	    0B03  0B06r				 DW L_DIV102
1  4362
1  4363	    0B05  4F				 DB 4fh
1  4364
1  4365	    0B06			 L_DIV102:
1  4366	    0B06  10 EC				 DB 10h,( L_DIV101)-$-1		 ; repeat for 32 bits
1  4367
1  4368	    0B08  CB 15				 DB 0cbh,15h			 ; DE:HL = 32 bit result
1  4369	    0B0A  CB 14				 DB 0cbh,14h
1  4370	    0B0C  CB 13				 DB 0cbh,13h
1  4371	    0B0E  CB 12				 DB 0cbh,12h
1  4372	    0B10  79				 DB 79h			 ; A = remainder
1  4373	    0B11  C9				 DB 0c9h
1  4374
1  4375	    0B12  04*(00)		 L_DDAT: db 4 dup (0)
1  4376
1  4377						 GLOBALS L_DIV
2  4378
2  4379						  IRP NAME,<L_DIV>
2  4380							   GLOBAL2 <NAME>
2  4381						  ENDM
3  4382							   GLOBAL2 <L_DIV>
4  4383						  GLOBAL L_DIV : NEAR
4  4384
4  4385						  GLOBAL _L_DIV	: NEAR
4  4386	    0B16			 _L_DIV:
4  4387
2  4388
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 78
msx_asm\rtl_rtl.ASM



1  4389	    0B16			 L_DIV:	 ; X / Y : LONG
1  4390						 ; in:	 X at stack
1  4391						 ;	 Y in DEHL
1  4392						 ; out:	 DEHL
1  4393						 ; changes:
1  4394
1  4395	    0B16  C1				 DB 0c1h
1  4396
1  4397	    0B17  EB				 DB 0ebh
1  4398	    0B18  E3				 DB 0e3h
1  4399	    0B19  D9				 DB 0d9h
1  4400	    0B1A  D1				 DB 0d1h
1  4401	    0B1B  E1				 DB 0e1h
1  4402	    0B1C  D9				 DB 0d9h
1  4403
1  4404	    0B1D  C5				 DB 0c5h		 ; restore return address
1  4405
1  4406	    0B1E  CD				 DB 0cdh
1  4407	    0B1F  0B45r				 DW  L_DIV_0
1  4408
1  4409	    0B21  2A				 DB 02ah
1  4410	    0B22  0B12r				 DW L_DDAT
1  4411	    0B24  ED 5B				 DB 0edh,5bh
1  4412	    0B26  0B14r				 DW L_DDAT+2
1  4413	    0B28  F0				 DB 0f0h
1  4414
1  4415	    0B29  C3				 DB 0c3h
1  4416	    0B2A  0A64r				 DW  L_NEG
1  4417
1  4418						 GLOBALS L_MOD
2  4419
2  4420						  IRP NAME,<L_MOD>
2  4421							   GLOBAL2 <NAME>
2  4422						  ENDM
3  4423							   GLOBAL2 <L_MOD>
4  4424						  GLOBAL L_MOD : NEAR
4  4425
4  4426						  GLOBAL _L_MOD	: NEAR
4  4427	    0B2C			 _L_MOD:
4  4428
2  4429
1  4430	    0B2C			 L_MOD:	 ; X mod Y : LONG
1  4431						 ; in:	 X at stack
1  4432						 ;	 Y in DEHL
1  4433						 ; out:	 DEHL
1  4434						 ; changes:
1  4435
1  4436	    0B2C  C1				 DB 0c1h		 ; save	return address
1  4437
1  4438	    0B2D  EB				 DB 0ebh
1  4439	    0B2E  E3				 DB 0e3h
1  4440	    0B2F  D9				 DB 0d9h
1  4441	    0B30  D1				 DB 0d1h
1  4442	    0B31  E1				 DB 0e1h
1  4443					 ; 33f	  BIT 7,H		     ; test for	result sign
1  4444	    0B32  D9				 DB 0d9h
1  4445
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 79
msx_asm\rtl_rtl.ASM



1  4446	    0B33  C5				 DB 0c5h		 ; restore return address
1  4447					 ; 33f	  PUSH AF		     ; save resulting sign
1  4448
1  4449	    0B34  CD				 DB 0cdh
1  4450	    0B35  0B45r				 DW  L_DIV_0
1  4451	    0B37  F5				  DB 0f5h		     ; 33f, save resulting sign
1  4452
1  4453	    0B38  D9				 DB 0d9h
1  4454	    0B39  E5				 DB 0e5h
1  4455	    0B3A  D9				 DB 0d9h
1  4456	    0B3B  D1				 DB 0d1h		 ; DE:HL = RESULT SHL C
1  4457
1  4458	    0B3C  79				 DB 79h
1  4459	    0B3D  CD				 DB 0cdh
1  4460	    0B3E  0BF6r				 DW  L_SHR_1
1  4461
1  4462	    0B40  F1				  DB 0f1h		      ;	restore	resulting sign
1  4463	    0B41  F0				 DB 0f0h
1  4464
1  4465	    0B42  C3				 DB 0c3h
1  4466	    0B43  0A64r				 DW  L_NEG
1  4467
1  4468	    0B45			 L_DIV_0: ; X DIV Y : LONG
1  4469						 ; in:	 X = HL'HL
1  4470						 ;	 Y = DE'DE
1  4471						 ; out:	 C = number of bits processed
1  4472						 ;	 result	in L_DDAT
1  4473						 ;	 MOD = HL'HL shr C
1  4474						 ;	 A = positive if result	is positive
1  4475						 ;	 A = negative if result	is negative
1  4476
1  4477						 ; HL'HL = LONGINT A
1  4478						 ; DE'DE = LONGINT B
1  4479
1  4480	    0B45  D9				 DB 0d9h
1  4481	    0B46  7C				 DB 7ch
1  4482	    0B47  AA				 DB 0aah
1  4483	    0B48  D9				 DB 0d9h
1  4484	    0B49  F5				 DB 0f5h		 ; save	resulting sign
1  4485									 ; P = positive, M = minus
1  4486
1  4487	    0B4A  CD				 DB 0cdh
1  4488	    0B4B  0C10r				 DW  L_ABS1		 ; HL'HL = ABS(	HL'HL )
1  4489
1  4490	    0B4D  D9				 DB 0d9h		 ; swap	HL'HL with DE'DE
1  4491	    0B4E  EB				 DB 0ebh
1  4492	    0B4F  7C				 DB 7ch
1  4493	    0B50  B5				 DB 0b5h
1  4494	    0B51  D9				 DB 0d9h
1  4495	    0B52  EB				 DB 0ebh
1  4496	    0B53  B4				 DB 0b4h
1  4497	    0B54  B5				 DB 0b5h		 ; B = 0 ?
1  4498	    0B55  CA				 DB 0cah
1  4499	    0B56  0F2Cr				 DW L0A03		 ; jump	if Division by zero
1  4500
1  4501	    0B58  CD				 DB 0cdh
1  4502	    0B59  0C10r				 DW  L_ABS1		 ; DE'DE = ABS(	DE'DE )
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 80
msx_asm\rtl_rtl.ASM



1  4503
1  4504	    0B5B  D9				 DB 0d9h		 ; swap	HL'HL with DE'DE
1  4505	    0B5C  EB				 DB 0ebh
1  4506	    0B5D  D9				 DB 0d9h
1  4507	    0B5E  EB				 DB 0ebh
1  4508
1  4509	    0B5F  01				 DB 01h
1  4510	    0B60  0000				 DW 0
1  4511	    0B62  43ED 0B12r			 DW 43edh,L_DDAT
1  4512	    0B66  43ED 0B14r			 DW 43edh,L_DDAT+2
1  4513
1  4514	    0B6A  0E 01				 DB 0eh,1			 ; bits	= 1
1  4515
1  4516	    0B6C			 L_DIV1: ; save	old B and multiply b by	2
1  4517	    0B6C  D5				 DB 0d5h
1  4518	    0B6D  CB 23				 DB 0cbh,23h
1  4519	    0B6F  CB 12				 DB 0cbh,12h
1  4520	    0B71  D9				 DB 0d9h
1  4521	    0B72  D5				 DB 0d5h
1  4522	    0B73  CB 13				 DB 0cbh,13h
1  4523	    0B75  CB 12				 DB 0cbh,12h
1  4524	    0B77  D9				 DB 0d9h
1  4525
1  4526	    0B78  E5				 DB 0e5h
1  4527	    0B79  B7				 DB 0b7h
1  4528	    0B7A  ED 52				 DB 0EDH,052h
1  4529	    0B7C  E1				 DB 0e1h
1  4530	    0B7D  D9				 DB 0d9h
1  4531	    0B7E  E5				 DB 0e5h
1  4532	    0B7F  ED 52				 DB 0EDH,052h
1  4533	    0B81  E1				 DB 0e1h
1  4534	    0B82  D9				 DB 0d9h
1  4535	    0B83  38 06				 DB 38h,(L_DIV_2)-$-1
1  4536
1  4537	    0B85  0C				 DB 0ch
1  4538	    0B86  F1				 DB 0f1h		 ; remove saved	LONGINT	B
1  4539	    0B87  F1				 DB 0f1h
1  4540	    0B88  C3				 DB 0c3h
1  4541	    0B89  0B6Cr				 DW  L_DIV1		 ; repeat loop
1  4542
1  4543	    0B8B  D9			 L_DIV_2: DB 0d9h
1  4544	    0B8C  D1				 DB 0d1h		 ; restore high-word LONGINT B
1  4545	    0B8D  D9				 DB 0d9h
1  4546	    0B8E  D1				 DB 0d1h		 ; restore low-word LONGINT B
1  4547
1  4548	    0B8F  06 08				 DB 06h,8			 ; assume 8 bits, 0 rest
1  4549
1  4550	    0B91  79				 DB 79h
1  4551	    0B92  E6 07				 DB 0e6h, 7
1  4552	    0B94  28 01				 DB 28h,(L_DIV_3)-$-1		 ; jump	if zero, means 8 bits
1  4553	    0B96  47				 DB 47h
1  4554
1  4555	    0B97  79			 L_DIV_3: DB 79h
1  4556	    0B98  3D				 DB 3dh
1  4557	    0B99  E6 18				 DB 0e6h, 18H
1  4558	    0B9B  0F				 DB 0fh
1  4559	    0B9C  0F				 DB 0fh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 81
msx_asm\rtl_rtl.ASM



1  4560	    0B9D  0F				 DB 0fh			 ; A = index to	byte to	start at
1  4561	    0B9E  D9				 DB 0d9h
1  4562	    0B9F  01				 DB 01h
1  4563	    0BA0  0B12r				 DW L_DDAT
1  4564	    0BA2  81				 DB 081h
1  4565	    0BA3  4F				 DB 4fh
1  4566	    0BA4  78				 DB 78h
1  4567	    0BA5  CE 00				 DB 0ceh,0
1  4568	    0BA7  47				 DB 47h
1  4569	    0BA8  D9				 DB 0d9h
1  4570
1  4571						 ; HL'HL = unsigned LONGINT A
1  4572						 ; DE'DE = unsigned LONGINT B *	(2^(C -	1))
1  4573						 ;   B = initial number	of bits	after which the	first byte will
1  4574						 ;	 be stored
1  4575						 ;   C = number	of bits	to proces
1  4576						 ; BC' = address where to store	result
1  4577	    0BA9  AF				 DB 0afh		 ; init	first result byte
1  4578
1  4579	    0BAA  C5				 DB 0c5h		 ; save	number of bits to proces
1  4580
1  4581	    0BAB  87			 L_DIV_4: DB 087h			 ; result * 2
1  4582
1  4583	    0BAC  E5				 DB 0e5h		 ; save	low-word LONGINT A
1  4584	    0BAD  B7				 DB 0b7h
1  4585	    0BAE  ED 52				 DB 0EDH,052h
1  4586	    0BB0  D9				 DB 0d9h
1  4587	    0BB1  E5				 DB 0e5h		 ; save	high-word LONGINT A
1  4588	    0BB2  ED 52				 DB 0EDH,052h
1  4589	    0BB4  D9				 DB 0d9h
1  4590	    0BB5  38 07				 DB 38h,(L_DIV_5)-$-1		 ; jump	if A < B
1  4591
1  4592	    0BB7  33				 DB 33h			 ; remove saved	LONGINT	A
1  4593	    0BB8  33				 DB 33h
1  4594	    0BB9  33				 DB 33h
1  4595	    0BBA  33				 DB 33h
1  4596
1  4597	    0BBB  3C				 DB 3ch			 ; result:=result+1
1  4598	    0BBC  18 04				 DB 18h,( L_DIV_6)-$-1
1  4599
1  4600	    0BBE			 L_DIV_5:
1  4601	    0BBE  D9				 DB 0d9h
1  4602	    0BBF  E1				 DB 0e1h		 ; restore high-word LONGINT A
1  4603	    0BC0  D9				 DB 0d9h
1  4604	    0BC1  E1				 DB 0e1h		 ; restore low-word LONGINT A
1  4605
1  4606	    0BC2  29			 L_DIV_6: DB 029h		 ; LONGINT A * 2
1  4607	    0BC3  D9				 DB 0d9h
1  4608	    0BC4  ED 6A				 DB 0EDH,06ah
1  4609	    0BC6  D9				 DB 0d9h
1  4610
1  4611	    0BC7  10 06				 DB 10h,( L_DIV_7)-$-1		 ; result bits - 1
1  4612									 ; result = full ?
1  4613									 ; jump	if not
1  4614	    0BC9  D9				 DB 0d9h
1  4615	    0BCA  02				 DB 02h		 ; save	result
1  4616	    0BCB  0B				 DB 0bh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 82
msx_asm\rtl_rtl.ASM



1  4617	    0BCC  D9				 DB 0d9h
1  4618	    0BCD  06 08				 DB 06h,8			 ; start al over
1  4619
1  4620	    0BCF  0D			 L_DIV_7: DB 0dh
1  4621	    0BD0  20 D9				 DB 20h,(L_DIV_4)-$-1
1  4622
1  4623	    0BD2  C1				 DB 0c1h		 ; C = number of bits processes	(for MOD)
1  4624	    0BD3  F1				 DB 0f1h		 ; A = resulting sign
1  4625									 ; Sign	flag still set !
1  4626	    0BD4  C9				 DB 0c9h
1  4627
1  4628						 GLOBALS L_SHL
2  4629
2  4630						  IRP NAME,<L_SHL>
2  4631							   GLOBAL2 <NAME>
2  4632						  ENDM
3  4633							   GLOBAL2 <L_SHL>
4  4634						  GLOBAL L_SHL : NEAR
4  4635
4  4636						  GLOBAL _L_SHL	: NEAR
4  4637	    0BD5			 _L_SHL:
4  4638
2  4639
1  4640	    0BD5			 L_SHL:	 ; X shl Y : LONGINT
1  4641						 ; in:	 X at stack
1  4642						 ;	 HL = count
1  4643						 ; out:	 DEHL shl count
1  4644						 ; changes: AF,BC,DE,HL
1  4645
1  4646	    0BD5  C1				 DB 0c1h		 ; save	return address
1  4647	    0BD6  7D				 DB 7dh			 ; A = count
1  4648	    0BD7  E1				 DB 0e1h		 ; DE:HL = X
1  4649	    0BD8  D1				 DB 0d1h
1  4650	    0BD9  C5				 DB 0c5h		 ; restore stack
1  4651
1  4652	    0BDA  D6 08			 L_SHL_1: DB 0d6h, 8
1  4653	    0BDC  38 07				 DB 38h,(L_SHL_2)-$-1
1  4654	    0BDE  53				 DB 53h
1  4655	    0BDF  5C				 DB 5ch
1  4656	    0BE0  65				 DB 65h
1  4657	    0BE1  2E 00				 DB 2eh,0
1  4658	    0BE3  18 F5				 DB 18h,( L_SHL_1)-$-1
1  4659
1  4660	    0BE5  C6 08			 L_SHL_2: DB 0c6h,8
1  4661	    0BE7  C8				 DB 0c8h
1  4662	    0BE8  47				 DB 47h
1  4663
1  4664	    0BE9  29			 L_SHL_3: DB 029h
1  4665	    0BEA  EB				 DB 0ebh
1  4666	    0BEB  ED 6A				 DB 0EDH,06ah
1  4667	    0BED  EB				 DB 0ebh
1  4668	    0BEE  10 F9				 DB 10h,( L_SHL_3)-$-1
1  4669	    0BF0  C9				 DB 0c9h
1  4670
1  4671						 GLOBALS L_SHR
2  4672
2  4673						  IRP NAME,<L_SHR>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 83
msx_asm\rtl_rtl.ASM



2  4674							   GLOBAL2 <NAME>
2  4675						  ENDM
3  4676							   GLOBAL2 <L_SHR>
4  4677						  GLOBAL L_SHR : NEAR
4  4678
4  4679						  GLOBAL _L_SHR	: NEAR
4  4680	    0BF1			 _L_SHR:
4  4681
2  4682
1  4683	    0BF1			 L_SHR:	 ; X shr Y : LONGINT
1  4684						 ; in:	 X at stack
1  4685						 ;	 HL = count
1  4686						 ; out:	 DEHL shr count
1  4687						 ; changes: AF,BC,DE,HL
1  4688
1  4689	    0BF1  C1				 DB 0c1h		 ; save	return address
1  4690	    0BF2  7D				 DB 7dh			 ; A = count
1  4691	    0BF3  E1				 DB 0e1h		 ; DE:HL = X
1  4692	    0BF4  D1				 DB 0d1h
1  4693	    0BF5  C5				 DB 0c5h		 ; restore stack
1  4694
1  4695	    0BF6  D6 08			 L_SHR_1: DB 0d6h, 8
1  4696	    0BF8  38 07				 DB 38h,(L_SHR_2)-$-1
1  4697	    0BFA  6C				 DB 6ch
1  4698	    0BFB  63				 DB 63h
1  4699	    0BFC  5A				 DB 5ah
1  4700	    0BFD  16 00				 DB 16h,0
1  4701	    0BFF  18 F5				 DB 18h,( L_SHR_1)-$-1
1  4702
1  4703	    0C01  C6 08			 L_SHR_2: DB 0c6h,8
1  4704	    0C03  C8				 DB 0c8h
1  4705	    0C04  47				 DB 47h
1  4706
1  4707	    0C05  CB 3A			 L_SHR_3: DB 0cbh,3ah
1  4708	    0C07  CB 1B				 DB 0cbh,1bh
1  4709	    0C09  CB 1C				 DB 0cbh,1ch
1  4710	    0C0B  CB 1D				 DB 0cbh,1dh
1  4711	    0C0D  10 F6				 DB 10h,( L_SHR_3)-$-1
1  4712	    0C0F  C9				 DB 0c9h
1  4713
1  4714	    0C10			 L_ABS1: ; in:	 HL'HL = LONGINT
1  4715						 ; out:	 -HL'HL	if HL'HL < 0
1  4716						 ;	 HL'HL if HL'HL	>= 0
1  4717	    0C10  D9				 DB 0d9h
1  4718	    0C11  CB 7C				 DB 0cbh,07ch
1  4719	    0C13  D9				 DB 0d9h
1  4720	    0C14  C8				 DB 0c8h		 ; quit	if positive
1  4721
1  4722	    0C15  4D				 DB 4dh			 ; BC =	low-word
1  4723	    0C16  44				 DB 44h
1  4724	    0C17  AF				 DB 0afh		 ; Carry = 0
1  4725	    0C18  6F				 DB 6fh
1  4726	    0C19  67				 DB 67h
1  4727	    0C1A  ED 42				 DB 0EDH,042h		 ; 0 - low-word
1  4728	    0C1C  D9				 DB 0d9h
1  4729	    0C1D  4D				 DB 4dh			 ; BC =	high-word
1  4730	    0C1E  44				 DB 44h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 84
msx_asm\rtl_rtl.ASM



1  4731	    0C1F  6F				 DB 6fh
1  4732	    0C20  67				 DB 67h
1  4733	    0C21  ED 42				 DB 0EDH,042h		 ; 0 - high-word - carry
1  4734	    0C23  D9				 DB 0d9h
1  4735	    0C24  C9				 DB 0c9h
1  4736
1  4737	    0C25			 L0792:	 ; in:	 -
1  4738						 ; out:	 Seed := Seed +	(Seed shl 7) + 361962E9h
1  4739						 ;	 equals
1  4740						 ;	 Seed := (Seed * 129) +	907,633,385d
1  4741						 ;	 BCDE =	Seed
1  4742	    0C25  ED 4B				 DB 0edh,4bh
1  4743	    0C27  0198r				 DW L00C8+2
1  4744	    0C29  ED 5B				 DB 0edh,5bh
1  4745	    0C2B  0196r				 DW L00C8
1  4746	    0C2D  C5				 DB 0c5h
1  4747	    0C2E  D5				 DB 0d5h
1  4748	    0C2F  78				 DB 78h			 ; shl 8
1  4749	    0C30  41				 DB 41h
1  4750	    0C31  4A				 DB 4ah
1  4751	    0C32  53				 DB 53h
1  4752	    0C33  1E 00				 DB 1eh,0
1  4753
1  4754	    0C35  1F				 DB 1fh			 ; shr 1
1  4755	    0C36  CB 18				 DB 0cbh,18h
1  4756	    0C38  CB 19				 DB 0cbh,19h
1  4757	    0C3A  CB 1A				 DB 0cbh,1ah
1  4758	    0C3C  CB 1B				 DB 0cbh,1bh
1  4759
1  4760	    0C3E  E1				 DB 0e1h		 ; Seed	:= Seed	+ (Seed	shl 7)
1  4761	    0C3F  19				 DB 019h
1  4762	    0C40  EB				 DB 0ebh
1  4763	    0C41  E1				 DB 0e1h
1  4764	    0C42  ED 4A				 DB 0EDH,04ah
1  4765	    0C44  44				 DB 44h
1  4766	    0C45  4D				 DB 4dh
1  4767
1  4768	    0C46  21				 DB 21h
1  4769	    0C47  62E9				 DW 62E9H		 ; Seed	:= Seed	+ 361962E9h
1  4770	    0C49  19				 DB 019h
1  4771	    0C4A  22				 DB 22h
1  4772	    0C4B  0196r				 DW L00C8
1  4773	    0C4D  EB				 DB 0ebh
1  4774	    0C4E  21				 DB 21h
1  4775	    0C4F  3619				 DW 3619H
1  4776	    0C51  ED 4A				 DB 0EDH,04ah
1  4777	    0C53  22				 DB 22h
1  4778	    0C54  0198r				 DW L00C8+2
1  4779	    0C56  44				 DB 44h
1  4780	    0C57  4D				 DB 4dh
1  4781	    0C58  C9				 DB 0c9h
1  4782
1  4783	    0C59			 L07C6:	  ; unsigned Integer to	ASCII
1  4784						 ; in:	 HL = unsigned INTEGER
1  4785						 ;	 IX = destination address of ASCII result
1  4786						 ; out:	 IX = address after ASCII result
1  4787	    0C59  06 00				 DB 06h,0			 ; Flag	= 0, no	leading	zero
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 85
msx_asm\rtl_rtl.ASM



1  4788	    0C5B  11				 DB 11h
1  4789	    0C5C  2710				 DW 10000
1  4790	    0C5E  CD				 DB 0cdh
1  4791	    0C5F  0C75r				 DW  L07E2
1  4792	    0C61  11				 DB 11h
1  4793	    0C62  03E8				 DW 1000
1  4794	    0C64  CD				 DB 0cdh
1  4795	    0C65  0C75r				 DW  L07E2
1  4796	    0C67  11				 DB 11h
1  4797	    0C68  0064				 DW 100
1  4798	    0C6A  CD				 DB 0cdh
1  4799	    0C6B  0C75r				 DW  L07E2
1  4800	    0C6D  1E 0A				 DB 1eh,10
1  4801	    0C6F  CD				 DB 0cdh
1  4802	    0C70  0C75r				 DW  L07E2
1  4803	    0C72  7D				 DB 7dh
1  4804	    0C73  18 0D				 DB 18h,( L07EF)-$-1
1  4805
1  4806	    0C75  AF			 L07E2:	 DB 0afh
1  4807	    0C76  3C			 L07E3:	 DB 3ch
1  4808	    0C77  ED 52				 DB 0EDH,052h
1  4809	    0C79  30 FB				 DB 30h,(L07E3)-$-1
1  4810	    0C7B  19				 DB 019h
1  4811	    0C7C  04				 DB 04h			 ; increase, assume NonZero
1  4812	    0C7D  3D				 DB 3dh
1  4813	    0C7E  20 02				 DB 20h,(L07EF)-$-1		 ; jump	if digit > 0
1  4814
1  4815	    0C80  05				 DB 05h			 ; Flag	= 0 ?, suppress	leading	zero's
1  4816	    0C81  C8				 DB 0c8h
1  4817
1  4818	    0C82  C6 30			 L07EF:	 DB 0c6h,'0'
1  4819	    0C84  DD 77	00			 DB 0ddh,77h,+0
1  4820	    0C87  DD 23				 DB 0ddh,23h
1  4821	    0C89  C9				 DB 0c9h
1  4822
1  4823	    0C8A			 L07F7:	 ; ASCII hexadecimal or	decimal	to Integer
1  4824						 ; converts ascii hexadecimal or decimal number	at IX to
1  4825						 ; a value in HL
1  4826						 ; in:	 IX = address of ascii digit sequence
1  4827						 ; out:	 carry set if value out	of range
1  4828						 ;	 carry reset, HL = value
1  4829	    0C8A  DD 7E	00			 DB 0ddh,7eh,+0
1  4830	    0C8D  D6 24				 DB 0d6h, '$'
1  4831	    0C8F  4F				 DB 4fh
1  4832	    0C90  21				 DB 21h
1  4833	    0C91  0000				 DW 0
1  4834	    0C93  20 02				 DB 20h,(L0804)-$-1		 ; NonZero, do not skip	'$' character
1  4835
1  4836	    0C95  DD 23			 L0802:	 DB 0ddh,23h
1  4837
1  4838	    0C97  DD 7E	00		 L0804:	 DB 0ddh,7eh,+0
1  4839	    0C9A  CD				 DB 0cdh
1  4840	    0C9B  0691r				 DW  L04A6		 ; upcase
1  4841	    0C9D  D6 30				 DB 0d6h, '0'			 ; < '0' ?
1  4842	    0C9F  38 29				 DB 38h,(L0837)-$-1		 ; yes,	quit
1  4843	    0CA1  FE 0A				 DB 0feh, 10			 ; < 10	?
1  4844	    0CA3  38 0E				 DB 38h,(L0820)-$-1		 ; yes,	continue
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 86
msx_asm\rtl_rtl.ASM



1  4845
1  4846						 ; A..F	?
1  4847	    0CA5  0C				 DB 0ch			 ; started with	'$' ?
1  4848	    0CA6  0D				 DB 0dh
1  4849	    0CA7  20 21				 DB 20h,(L0837)-$-1		 ; no, quit
1  4850	    0CA9  D6 07				 DB 0d6h, 7			 ; 'A' --> 10, 'B' --> 11
1  4851	    0CAB  FE 0A				 DB 0feh, 10			 ; < 10	?
1  4852	    0CAD  38 1B				 DB 38h,(L0837)-$-1		 ; yes,	quit
1  4853	    0CAF  FE 10				 DB 0feh, 16			 ; >= 16 ?
1  4854	    0CB1  30 17				 DB 30h,(L0837)-$-1		 ; yes,	quit
1  4855	    0CB3  54			 L0820:	 DB 54h			 ; save	old HL
1  4856	    0CB4  5D				 DB 5dh
1  4857	    0CB5  29				 DB 029h	 ; * 2
1  4858	    0CB6  D8				 DB 0d8h		 ; quit	if carry, overflow
1  4859	    0CB7  29				 DB 029h	 ; * 4
1  4860	    0CB8  D8				 DB 0d8h		 ; quit	if error
1  4861	    0CB9  0C				 DB 0ch			 ; hexadecimal ?
1  4862	    0CBA  0D				 DB 0dh
1  4863	    0CBB  20 02				 DB 20h,(L082C)-$-1
1  4864	    0CBD  54				 DB 54h			 ; yes,	hexadecimal (perform * 16)
1  4865	    0CBE  5D				 DB 5dh
1  4866	    0CBF  19			 L082C:	 DB 019h	 ; * 5 if decimal
1  4867									 ; * 8 if hexadecimal
1  4868	    0CC0  D8				 DB 0d8h		 ; quit	if error
1  4869	    0CC1  29				 DB 029h	 ; * 10	if decimal
1  4870									 ; * 16	if hexadecimal
1  4871	    0CC2  D8				 DB 0d8h		 ; quit	if error
1  4872	    0CC3  5F				 DB 5fh
1  4873	    0CC4  16 00				 DB 16h,0
1  4874	    0CC6  19				 DB 019h	 ; * 10	+ digit	if decimal
1  4875									 ; * 16	+ digit	if hexadecimal
1  4876	    0CC7  D8				 DB 0d8h		 ; quit	if error
1  4877	    0CC8  18 CB				 DB 18h,( L0802)-$-1		 ; go for the next digit
1  4878
1  4879	    0CCA  B7			 L0837:	 DB 0b7h
1  4880						 ;RET Z			 ; quit	if carry reset if hexadecimal
1  4881									 ; allow hexadecimals that are negative
1  4882									 ; decimals
1  4883						 ;LD A,H
1  4884						 ;ADD A,A
1  4885	    0CCB  C9				 DB 0c9h		 ; quit	with carry set if HL > 32767?
1  4886
1  4887	    0CCC			 L2A:	  ; unsigned long to ASCII
1  4888						 ; in:	 DE:HL = unsigned long
1  4889						 ;	 IX = destination address of ASCII result
1  4890						 ; out:	 IX = address after ASCII result
1  4891
1  4892	    0CCC  AF				 DB 0afh
1  4893	    0CCD  F5				 DB 0f5h		 ; set end of digits
1  4894
1  4895	    0CCE			 L2A_1:
1  4896	    0CCE  CD				 DB 0cdh
1  4897	    0CCF  0AEFr				 DW  L_DIV10		 ; divide by 10
1  4898
1  4899	    0CD1  3C				 DB 3ch
1  4900	    0CD2  F5				 DB 0f5h		 ; save	remainder, 1..10
1  4901
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 87
msx_asm\rtl_rtl.ASM



1  4902	    0CD3  7C				 DB 7ch
1  4903	    0CD4  B5				 DB 0b5h
1  4904	    0CD5  B2				 DB 0b2h
1  4905	    0CD6  B3				 DB 0b3h
1  4906	    0CD7  20 F5				 DB 20h,(L2A_1)-$-1		 ; repeat while	long > 0
1  4907
1  4908	    0CD9			 L2A_2:
1  4909	    0CD9  F1				 DB 0f1h		 ; take	digit
1  4910	    0CDA  3D				 DB 3dh
1  4911	    0CDB  F8				 DB 0f8h		 ; quit	if end of digits
1  4912
1  4913	    0CDC  C6 30				  DB 0c6h,'0'
1  4914	    0CDE  DD 77	00			 DB 0ddh,77h,+0		 ; store in result
1  4915	    0CE1  DD 23				 DB 0ddh,23h
1  4916	    0CE3  18 F4				 DB 18h,( L2A_2)-$-1
1  4917
1  4918	    0CE5  00			 A2L_FLAG:DB 0			 ; hexadecimal flag
1  4919									 ; 0 = convert as hexadecimal
1  4920									 ; NonZero = convert as	decimal
1  4921	    0CE6			 A2L:	 ; ASCII hexadecimal or	decimal	to LONGINT
1  4922						 ; converts ascii hexadecimal or decimal number	at IX to
1  4923						 ; an unsigned value in	DE:HL
1  4924						 ; in:	 IX = address of ascii digit sequence
1  4925						 ; out:	 carry set if value out	of range
1  4926						 ;	 carry reset, DE:HL = unsigned value
1  4927						 ;	 A = 0,	if hexadecimal constant	parsed
1  4928	    0CE6  DD 7E	00			 DB 0ddh,7eh,+0
1  4929	    0CE9  D6 24				 DB 0d6h, '$'
1  4930	    0CEB  32				 DB 32h
1  4931	    0CEC  0CE5r				 DW A2L_FLAG
1  4932	    0CEE  21				 DB 21h
1  4933	    0CEF  0000				 DW 0			 ; DE:HL = 0
1  4934	    0CF1  11				 DB 11h
1  4935	    0CF2  0000				 DW 0
1  4936	    0CF4  20 02				 DB 20h,(A2L04)-$-1		 ; NonZero, do not skip	'$' character
1  4937
1  4938	    0CF6  DD 23			 A2L02:	 DB 0ddh,23h
1  4939
1  4940	    0CF8  3A			 A2L04:	 DB 3ah
1  4941	    0CF9  0CE5r				 DW A2L_FLAG
1  4942	    0CFB  4F				 DB 4fh
1  4943	    0CFC  DD 7E	00			 DB 0ddh,7eh,+0
1  4944	    0CFF  CD				 DB 0cdh
1  4945	    0D00  0691r				 DW  L04A6		 ; upcase
1  4946	    0D02  D6 30				 DB 0d6h, '0'			 ; < '0' ?
1  4947	    0D04  38 53				 DB 38h,(A2L37)-$-1		 ; yes,	quit --> error
1  4948	    0D06  FE 0A				 DB 0feh, 10			 ; < 10	?
1  4949	    0D08  38 0E				 DB 38h,(A2L20)-$-1		 ; yes,	continue
1  4950
1  4951						 ; A..F	?
1  4952	    0D0A  0C				 DB 0ch			 ; started with	'$' ?
1  4953	    0D0B  0D				 DB 0dh
1  4954	    0D0C  20 4B				 DB 20h,(A2L37)-$-1		 ; no, quit -->	error
1  4955
1  4956						 ; hexadecimal
1  4957	    0D0E  D6 07				 DB 0d6h, 7			 ; 'A' --> 10, 'B' --> 11
1  4958	    0D10  FE 0A				 DB 0feh, 10			 ; < 10	?
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 88
msx_asm\rtl_rtl.ASM



1  4959	    0D12  38 45				 DB 38h,(A2L37)-$-1		 ; yes,	quit --> error
1  4960	    0D14  FE 10				 DB 0feh, 16			 ; >= 16 ?
1  4961	    0D16  30 41				 DB 30h,(A2L37)-$-1		 ; yes,	quit --> error
1  4962
1  4963	    0D18  F5			 A2L20:	 DB 0f5h
1  4964	    0D19  3A				 DB 3ah
1  4965	    0D1A  0CE5r				 DW A2L_FLAG
1  4966	    0D1C  B7				 DB 0b7h		 ; hexadecimal or decimal ?
1  4967	    0D1D  28 1C				 DB 28h,(A2L_HEX)-$-1		 ; jump	if hexadecimal
1  4968
1  4969						 ; multiply DE:HL by 10	with overflow detection
1  4970	    0D1F  D5				 DB 0d5h		 ; save	old DE:HL * 1
1  4971	    0D20  E5				 DB 0e5h
1  4972	    0D21  CD				 DB 0cdh
1  4973	    0D22  0D60r				 DW  L_M2		 ; DE:HL * 2
1  4974	    0D24  38 36				 DB 38h,(A2L38)-$-1		 ; quit	if carry, overflow
1  4975
1  4976	    0D26  CD				 DB 0cdh
1  4977	    0D27  0D60r				 DW  L_M2		 ; DE:HL * 4
1  4978	    0D29  38 31				 DB 38h,(A2L38)-$-1		 ; quit	if carry, overflow
1  4979
1  4980	    0D2B  C1				 DB 0c1h		 ; DE:HL * 4 + DE:HL * 1
1  4981	    0D2C  09				 DB 09h
1  4982	    0D2D  EB				 DB 0ebh
1  4983	    0D2E  C1				 DB 0c1h
1  4984	    0D2F  ED 4A				 DB 0EDH,04ah
1  4985	    0D31  EB				 DB 0ebh
1  4986	    0D32  C1				 DB 0c1h
1  4987	    0D33  78				 DB 78h			 ; A = digit to	add
1  4988	    0D34  D8				 DB 0d8h		 ; quit	if carry, overflow
1  4989
1  4990	    0D35  CD				 DB 0cdh
1  4991	    0D36  0D60r				 DW  L_M2		 ; DE:HL * 2
1  4992	    0D38  D8				 DB 0d8h
1  4993	    0D39  18 11				 DB 18h,( A2L36)-$-1		 ; add the current digit
1  4994
1  4995	    0D3B  F1			 A2L_HEX: DB 0f1h
1  4996	    0D3C  CD				 DB 0cdh
1  4997	    0D3D  0D60r				 DW  L_M2		 ; DE:HL * 2
1  4998	    0D3F  D8				 DB 0d8h		 ; quit	if carry, overflow
1  4999	    0D40  CD				 DB 0cdh
1  5000	    0D41  0D60r				 DW  L_M2		 ; DE:HL * 4
1  5001	    0D43  D8				 DB 0d8h		 ; quit	if carry, overflow
1  5002	    0D44  CD				 DB 0cdh
1  5003	    0D45  0D60r				 DW  L_M2		 ; DE:HL * 8
1  5004	    0D47  D8				 DB 0d8h		 ; quit	if carry, overflow
1  5005	    0D48  CD				 DB 0cdh
1  5006	    0D49  0D60r				 DW  L_M2		 ; DE:HL * 16
1  5007	    0D4B  D8				 DB 0d8h		 ; quit	if carry, overflow
1  5008
1  5009	    0D4C			 A2L36:	 ; add the new digit and repeat
1  5010	    0D4C  4F				 DB 4fh
1  5011	    0D4D  06 00				 DB 06h,0
1  5012	    0D4F  09				 DB 09h
1  5013	    0D50  EB				 DB 0ebh
1  5014	    0D51  01				 DB 01h
1  5015	    0D52  0000				 DW 0
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 89
msx_asm\rtl_rtl.ASM



1  5016	    0D54  ED 4A				 DB 0EDH,04ah
1  5017	    0D56  EB				 DB 0ebh
1  5018	    0D57  18 9D				 DB 18h,( A2L02)-$-1		 ; go for the next digit
1  5019
1  5020	    0D59  79			 A2L37:	 DB 79h
1  5021	    0D5A  B7				 DB 0b7h
1  5022	    0D5B  C9				 DB 0c9h
1  5023
1  5024	    0D5C  E1			 A2L38:	 DB 0e1h
1  5025	    0D5D  E1				 DB 0e1h
1  5026	    0D5E  D1				 DB 0d1h
1  5027	    0D5F  C9				 DB 0c9h
1  5028
1  5029	    0D60			 L_M2:	 ; in:	 DE:HL
1  5030						 ; out:	 DE:HL * 2
1  5031						 ;	 Carry if overflow
1  5032	    0D60  29				 DB 029h
1  5033	    0D61  EB				 DB 0ebh
1  5034	    0D62  ED 6A				 DB 0EDH,06ah
1  5035	    0D64  EB				 DB 0ebh
1  5036	    0D65  C9				 DB 0c9h
1  5037
1  5038
1  5039						 GLOBALS L083D
2  5040
2  5041						  IRP NAME,<L083D>
2  5042							   GLOBAL2 <NAME>
2  5043						  ENDM
3  5044							   GLOBAL2 <L083D>
4  5045						  GLOBAL L083D : NEAR
4  5046
4  5047						  GLOBAL _L083D	: NEAR
4  5048	    0D66			 _L083D:
4  5049
2  5050
1  5051	    0D66			 L083D:	 ; STRING + STRING
1  5052	    0D66  DD E1				 DB 0ddh,0e1h			 ; LIB
1  5053	    0D68  E1				 DB 0e1h
1  5054	    0D69  E5				 DB 0e5h
1  5055	    0D6A  7D				 DB 7dh
1  5056	    0D6B  26 00				 DB 26h,0
1  5057	    0D6D  23				 DB 23h
1  5058	    0D6E  39				 DB 039h
1  5059	    0D6F  4E				 DB 4eh
1  5060	    0D70  81				 DB 081h
1  5061	    0D71  38 1C				 DB 38h,(L0866)-$-1		 ; jump	if String Length Error
1  5062	    0D73  77				 DB 77h
1  5063	    0D74  EB				 DB 0ebh
1  5064	    0D75  21				 DB 21h
1  5065	    0D76  0000				 DW 0
1  5066	    0D78  44				 DB 44h
1  5067	    0D79  ED 42				 DB 0EDH,042h
1  5068	    0D7B  39				 DB 039h
1  5069	    0D7C  F9				 DB 0f9h
1  5070	    0D7D  EB				 DB 0ebh
1  5071	    0D7E  E5				 DB 0e5h
1  5072	    0D7F  03				 DB 03h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 90
msx_asm\rtl_rtl.ASM



1  5073	    0D80  ED B0				 DB 0edh,0b0h
1  5074	    0D82  EB				 DB 0ebh
1  5075	    0D83  E1				 DB 0e1h
1  5076	    0D84  2B				 DB 2bh
1  5077	    0D85  1B				 DB 1bh
1  5078	    0D86  4F				 DB 4fh
1  5079	    0D87  03				 DB 03h
1  5080	    0D88  ED B8				 DB 0edh,0b8h
1  5081	    0D8A  EB				 DB 0ebh
1  5082	    0D8B  23				 DB 23h
1  5083	    0D8C  F9				 DB 0f9h
1  5084	    0D8D  DD E9				 DB 0ddh,0e9h
1  5085
1  5086	    0D8F  3E 10			 L0866:	 DB 3eh,10H		 ; r.error 10H:	String length error
1  5087	    0D91  C3				 DB 0c3h
1  5088	    0D92  273Ar				 DW  L2029
1  5089
1  5090						 GLOBALS L086B
2  5091
2  5092						  IRP NAME,<L086B>
2  5093							   GLOBAL2 <NAME>
2  5094						  ENDM
3  5095							   GLOBAL2 <L086B>
4  5096						  GLOBAL L086B : NEAR
4  5097
4  5098						  GLOBAL _L086B	: NEAR
4  5099	    0D94			 _L086B:
4  5100
2  5101
1  5102	    0D94  DD E1			 L086B:	 DB 0ddh,0e1h			 ; LIB
1  5103	    0D96  CD				 DB 0cdh
1  5104	    0D97  06B5r				 DW  L04C8		 ; int HL to byte A
1  5105	    0D99  57				 DB 57h
1  5106	    0D9A  E1				 DB 0e1h
1  5107	    0D9B  CD				 DB 0cdh
1  5108	    0D9C  0F06r				 DW  L09DD
1  5109	    0D9E  5F				 DB 5fh
1  5110	    0D9F  E1				 DB 0e1h
1  5111	    0DA0  E5				 DB 0e5h
1  5112	    0DA1  7D				 DB 7dh
1  5113	    0DA2  93				 DB 093h
1  5114	    0DA3  38 1A				 DB 38h,(L0896)-$-1
1  5115	    0DA5  14				 DB 14h
1  5116	    0DA6  15				 DB 15h
1  5117	    0DA7  28 16				 DB 28h,(L0896)-$-1
1  5118	    0DA9  BA				 DB 0bah
1  5119	    0DAA  38 16				 DB 38h,(L0899)-$-1
1  5120	    0DAC  4A				 DB 4ah
1  5121	    0DAD  06 00				 DB 06h,0
1  5122	    0DAF  60				 DB 60h
1  5123	    0DB0  39				 DB 039h
1  5124	    0DB1  7B				 DB 7bh
1  5125	    0DB2  82				 DB 082h
1  5126	    0DB3  54				 DB 54h
1  5127	    0DB4  5D				 DB 5dh
1  5128	    0DB5  3D				 DB 3dh
1  5129	    0DB6  6F				 DB 6fh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 91
msx_asm\rtl_rtl.ASM



1  5130	    0DB7  60				 DB 60h
1  5131	    0DB8  39				 DB 039h
1  5132	    0DB9  79				 DB 79h
1  5133	    0DBA  ED B8				 DB 0edh,0b8h
1  5134	    0DBC  EB				 DB 0ebh
1  5135	    0DBD  18 09				 DB 18h,( L089F)-$-1
1  5136
1  5137	    0DBF  AF			 L0896:	 DB 0afh
1  5138	    0DC0  18 03				 DB 18h,( L089C)-$-1
1  5139
1  5140	    0DC2  3C			 L0899:	 DB 3ch
1  5141	    0DC3  6B				 DB 6bh
1  5142	    0DC4  2D				 DB 2dh
1  5143
1  5144	    0DC5  26 00			 L089C:	 DB 26h,0
1  5145	    0DC7  39				 DB 039h
1  5146
1  5147	    0DC8  77			 L089F:	 DB 77h
1  5148	    0DC9  F9				 DB 0f9h
1  5149	    0DCA  DD E9				 DB 0ddh,0e9h
1  5150
1  5151						 GLOBALS L08A3
2  5152
2  5153						  IRP NAME,<L08A3>
2  5154							   GLOBAL2 <NAME>
2  5155						  ENDM
3  5156							   GLOBAL2 <L08A3>
4  5157						  GLOBAL L08A3 : NEAR
4  5158
4  5159						  GLOBAL _L08A3	: NEAR
4  5160	    0DCC			 _L08A3:
4  5161
2  5162
1  5163	    0DCC			 L08A3:	 ; LIB
1  5164	    0DCC  DD E1				 DB 0ddh,0e1h
1  5165	    0DCE  E1				 DB 0e1h
1  5166	    0DCF  E5				 DB 0e5h
1  5167	    0DD0  7D				 DB 7dh
1  5168	    0DD1  26 00				 DB 26h,0
1  5169	    0DD3  23				 DB 23h
1  5170	    0DD4  39				 DB 039h
1  5171	    0DD5  F9				 DB 0f9h
1  5172	    0DD6  6F				 DB 6fh
1  5173	    0DD7  26 00				 DB 26h,0
1  5174	    0DD9  DD E9				 DB 0ddh,0e9h
1  5175
1  5176						 GLOBALS L08B2
2  5177
2  5178						  IRP NAME,<L08B2>
2  5179							   GLOBAL2 <NAME>
2  5180						  ENDM
3  5181							   GLOBAL2 <L08B2>
4  5182						  GLOBAL L08B2 : NEAR
4  5183
4  5184						  GLOBAL _L08B2	: NEAR
4  5185	    0DDB			 _L08B2:
4  5186
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 92
msx_asm\rtl_rtl.ASM



2  5187
1  5188	    0DDB			 L08B2:	 ; LIB
1  5189	    0DDB  DD E1				 DB 0ddh,0e1h
1  5190	    0DDD  21				 DB 21h
1  5191	    0DDE  0000				 DW 0
1  5192	    0DE0  54				 DB 54h
1  5193	    0DE1  39				 DB 039h
1  5194	    0DE2  5E				 DB 5eh
1  5195	    0DE3  4B				 DB 4bh
1  5196	    0DE4  23				 DB 23h
1  5197	    0DE5  E5				 DB 0e5h
1  5198	    0DE6  19				 DB 019h
1  5199	    0DE7  5E				 DB 5eh
1  5200	    0DE8  43				 DB 43h
1  5201	    0DE9  23				 DB 23h
1  5202	    0DEA  E5				 DB 0e5h
1  5203	    0DEB  19				 DB 019h
1  5204	    0DEC  E5				 DB 0e5h
1  5205	    0DED  FD E1				 DB 0fdh,0e1h
1  5206	    0DEF  D1				 DB 0d1h
1  5207	    0DF0  E1				 DB 0e1h
1  5208	    0DF1  79				 DB 79h
1  5209	    0DF2  90				 DB 090h
1  5210	    0DF3  38 10				 DB 38h,(L08DC)-$-1
1  5211	    0DF5  3C				 DB 3ch
1  5212	    0DF6  4F				 DB 4fh
1  5213
1  5214	    0DF7  C5			 L08CE:	 DB 0c5h
1  5215	    0DF8  D5				 DB 0d5h
1  5216	    0DF9  E5				 DB 0e5h
1  5217
1  5218	    0DFA  1A			 L08D1:	 DB 1ah
1  5219	    0DFB  BE				 DB 0beh
1  5220	    0DFC  28 0C				 DB 28h,(L08E1)-$-1
1  5221	    0DFE  E1				 DB 0e1h
1  5222	    0DFF  D1				 DB 0d1h
1  5223	    0E00  C1				 DB 0c1h
1  5224	    0E01  23				 DB 23h
1  5225	    0E02  0D				 DB 0dh
1  5226	    0E03  20 F2				 DB 20h,(L08CE)-$-1
1  5227
1  5228	    0E05  21			 L08DC:	 DB 21h
1  5229	    0E06  0000				 DW 0
1  5230	    0E08  18 0E				 DB 18h,( L08EF)-$-1
1  5231
1  5232	    0E0A  23			 L08E1:	 DB 23h
1  5233	    0E0B  13				 DB 13h
1  5234	    0E0C  10 EC				 DB 10h,( L08D1)-$-1
1  5235	    0E0E  D1				 DB 0d1h
1  5236	    0E0F  E1				 DB 0e1h
1  5237	    0E10  C1				 DB 0c1h
1  5238	    0E11  21				 DB 21h
1  5239	    0E12  0000				 DW 0
1  5240	    0E14  39				 DB 039h
1  5241	    0E15  EB				 DB 0ebh
1  5242	    0E16  ED 52				 DB 0EDH,052h
1  5243	    0E18  FD F9			 L08EF:	 DB 0fdh,0f9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 93
msx_asm\rtl_rtl.ASM



1  5244	    0E1A  DD E9				 DB 0ddh,0e9h
1  5245
1  5246
1  5247
1  5248
1  5249						 GLOBALS L08F3
2  5250
2  5251						  IRP NAME,<L08F3>
2  5252							   GLOBAL2 <NAME>
2  5253						  ENDM
3  5254							   GLOBAL2 <L08F3>
4  5255						  GLOBAL L08F3 : NEAR
4  5256
4  5257						  GLOBAL _L08F3	: NEAR
4  5258	    0E1C			 _L08F3:
4  5259
2  5260
1  5261	    0E1C			 L08F3:	 ; PROCEDURE Delete(VAR	S: STRING; Pos,	Len: INTEGER);
1  5262						 ; in:	 S pushed first
1  5263						 ;	 Pos pushed second
1  5264						 ;	 HL = len
1  5265	    0E1C  DD E1				 DB 0ddh,0e1h
1  5266	    0E1E  CD				 DB 0cdh
1  5267	    0E1F  06B5r				 DW  L04C8		 ; int HL to byte A
1  5268	    0E21  4F				 DB 4fh			 ; C = Len
1  5269	    0E22  E1				 DB 0e1h
1  5270	    0E23  CD				 DB 0cdh
1  5271	    0E24  0F06r				 DW  L09DD
1  5272	    0E26  5F				 DB 5fh
1  5273	    0E27  E1				 DB 0e1h
1  5274	    0E28  7E				 DB 7eh
1  5275	    0E29  93				 DB 093h
1  5276	    0E2A  38 1B				 DB 38h,(L091E)-$-1
1  5277	    0E2C  0C				 DB 0ch
1  5278	    0E2D  0D				 DB 0dh
1  5279	    0E2E  28 17				 DB 28h,(L091E)-$-1
1  5280	    0E30  91				 DB 091h
1  5281	    0E31  38 12				 DB 38h,(L091C)-$-1
1  5282	    0E33  F5				 DB 0f5h
1  5283	    0E34  7E				 DB 7eh
1  5284	    0E35  91				 DB 091h
1  5285	    0E36  77				 DB 77h
1  5286	    0E37  06 00				 DB 06h,0
1  5287	    0E39  50				 DB 50h
1  5288	    0E3A  19				 DB 019h
1  5289	    0E3B  54				 DB 54h
1  5290	    0E3C  5D				 DB 5dh
1  5291	    0E3D  09				 DB 09h
1  5292	    0E3E  F1				 DB 0f1h
1  5293	    0E3F  3C				 DB 3ch
1  5294	    0E40  4F				 DB 4fh
1  5295	    0E41  ED B0				 DB 0edh,0b0h
1  5296	    0E43  18 02				 DB 18h,( L091E)-$-1
1  5297
1  5298	    0E45  1D			 L091C:	 DB 1dh
1  5299	    0E46  73				 DB 73h
1  5300	    0E47  DD E9			 L091E:	 DB 0ddh,0e9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 94
msx_asm\rtl_rtl.ASM



1  5301
1  5302
1  5303						 GLOBALS L0920
2  5304
2  5305						  IRP NAME,<L0920>
2  5306							   GLOBAL2 <NAME>
2  5307						  ENDM
3  5308							   GLOBAL2 <L0920>
4  5309						  GLOBAL L0920 : NEAR
4  5310
4  5311						  GLOBAL _L0920	: NEAR
4  5312	    0E49			 _L0920:
4  5313
2  5314
1  5315	    0E49			 L0920:	 ; LIB
1  5316	    0E49  DD E1				 DB 0ddh,0e1h
1  5317	    0E4B  CD				 DB 0cdh
1  5318	    0E4C  0F06r				 DW  L09DD
1  5319	    0E4E  4F				 DB 4fh
1  5320	    0E4F  D1				 DB 0d1h
1  5321	    0E50  53ED 01B2r			 DW 53edh,L00E8
1  5322	    0E54  21				 DB 21h
1  5323	    0E55  0000				 DW 0
1  5324	    0E57  39				 DB 039h
1  5325	    0E58  1A				 DB 1ah
1  5326	    0E59  F5				 DB 0f5h
1  5327	    0E5A  86				 DB 086h
1  5328	    0E5B  38 03				 DB 38h,(L0937)-$-1
1  5329	    0E5D  B8				 DB 0b8h
1  5330	    0E5E  38 01				 DB 38h,(L0938)-$-1
1  5331	    0E60  78			 L0937:	 DB 78h
1  5332	    0E61  12			 L0938:	 DB 12h
1  5333	    0E62  F1				 DB 0f1h
1  5334	    0E63  57				 DB 57h
1  5335	    0E64  5E				 DB 5eh
1  5336	    0E65  91				 DB 091h
1  5337	    0E66  38 2F				 DB 38h,(L096E)-$-1
1  5338	    0E68  3C				 DB 3ch
1  5339	    0E69  6F				 DB 6fh
1  5340	    0E6A  7A				 DB 7ah
1  5341	    0E6B  83				 DB 083h
1  5342	    0E6C  38 04				 DB 38h,(L0949)-$-1
1  5343	    0E6E  B8				 DB 0b8h
1  5344	    0E6F  7D				 DB 7dh
1  5345	    0E70  38 08				 DB 38h,(L0951)-$-1
1  5346	    0E72  78			 L0949:	 DB 78h
1  5347	    0E73  93				 DB 093h
1  5348	    0E74  38 26				 DB 38h,(L0973)-$-1
1  5349	    0E76  91				 DB 091h
1  5350	    0E77  38 23				 DB 38h,(L0973)-$-1
1  5351	    0E79  3C				 DB 3ch
1  5352	    0E7A  B7			 L0951:	 DB 0b7h
1  5353	    0E7B  28 1F				 DB 28h,(L0973)-$-1
1  5354	    0E7D  C5				 DB 0c5h
1  5355	    0E7E  D5				 DB 0d5h
1  5356	    0E7F  2A				 DB 02ah
1  5357	    0E80  01B2r				 DW L00E8
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 95
msx_asm\rtl_rtl.ASM



1  5358	    0E82  5F				 DB 5fh
1  5359	    0E83  1D				 DB 1dh
1  5360	    0E84  16 00				 DB 16h,0
1  5361	    0E86  42				 DB 42h
1  5362	    0E87  19				 DB 019h
1  5363	    0E88  09				 DB 09h
1  5364	    0E89  D1				 DB 0d1h
1  5365	    0E8A  D5				 DB 0d5h
1  5366	    0E8B  E5				 DB 0e5h
1  5367	    0E8C  50				 DB 50h
1  5368	    0E8D  19				 DB 019h
1  5369	    0E8E  EB				 DB 0ebh
1  5370	    0E8F  E1				 DB 0e1h
1  5371	    0E90  4F				 DB 4fh
1  5372	    0E91  ED B8				 DB 0edh,0b8h
1  5373	    0E93  D1				 DB 0d1h
1  5374	    0E94  C1				 DB 0c1h
1  5375	    0E95  18 05				 DB 18h,( L0973)-$-1
1  5376	    0E97  7A			 L096E:	 DB 7ah
1  5377	    0E98  3C				 DB 3ch
1  5378	    0E99  28 19				 DB 28h,(L098B)-$-1
1  5379	    0E9B  4F				 DB 4fh
1  5380	    0E9C  78			 L0973:	 DB 78h
1  5381	    0E9D  91				 DB 091h
1  5382	    0E9E  3C				 DB 3ch
1  5383	    0E9F  BB				 DB 0bbh
1  5384	    0EA0  38 01				 DB 38h,(L097A)-$-1
1  5385	    0EA2  7B				 DB 7bh
1  5386	    0EA3  B7			 L097A:	 DB 0b7h
1  5387	    0EA4  28 0E				 DB 28h,(L098B)-$-1
1  5388	    0EA6  2A				 DB 02ah
1  5389	    0EA7  01B2r				 DW L00E8
1  5390	    0EA9  06 00				 DB 06h,0
1  5391	    0EAB  09				 DB 09h
1  5392	    0EAC  EB				 DB 0ebh
1  5393	    0EAD  21				 DB 21h
1  5394	    0EAE  0001				 DW 1
1  5395	    0EB0  39				 DB 039h
1  5396	    0EB1  4F				 DB 4fh
1  5397	    0EB2  ED B0				 DB 0edh,0b0h
1  5398	    0EB4  21			 L098B:	 DB 21h
1  5399	    0EB5  0000				 DW 0
1  5400	    0EB7  54				 DB 54h
1  5401	    0EB8  39				 DB 039h
1  5402	    0EB9  5E				 DB 5eh
1  5403	    0EBA  13				 DB 13h
1  5404	    0EBB  19				 DB 019h
1  5405	    0EBC  F9				 DB 0f9h
1  5406	    0EBD  DD E9				 DB 0ddh,0e9h
1  5407
1  5408
1  5409
1  5410						 GLOBALS L0996
2  5411
2  5412						  IRP NAME,<L0996>
2  5413							   GLOBAL2 <NAME>
2  5414						  ENDM
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 96
msx_asm\rtl_rtl.ASM



3  5415							   GLOBAL2 <L0996>
4  5416						  GLOBAL L0996 : NEAR
4  5417
4  5418						  GLOBAL _L0996	: NEAR
4  5419	    0EBF			 _L0996:
4  5420
2  5421
1  5422	    0EBF  DD E1			 L0996:	 DB 0ddh,0e1h			 ; LIB,	convert	string to character
1  5423	    0EC1  E1				 DB 0e1h
1  5424	    0EC2  2D				 DB 2dh			 ; original length > 1
1  5425	    0EC3  C2				 DB 0c2h
1  5426	    0EC4  0D8Fr				 DW L0866		 ; jump	if String Length Error
1  5427	    0EC6  6C				 DB 6ch
1  5428	    0EC7  26 00				 DB 26h,0
1  5429	    0EC9  DD E9				 DB 0ddh,0e9h
1  5430
1  5431						 GLOBALS L09A2
2  5432
2  5433						  IRP NAME,<L09A2>
2  5434							   GLOBAL2 <NAME>
2  5435						  ENDM
3  5436							   GLOBAL2 <L09A2>
4  5437						  GLOBAL L09A2 : NEAR
4  5438
4  5439						  GLOBAL _L09A2	: NEAR
4  5440	    0ECB			 _L09A2:
4  5441
2  5442
1  5443	    0ECB			 L09A2:	 ; LIB
1  5444						 ; this	routine	converts the second parameter that is on the stack
1  5445						 ; to a	string,	the first parameter is a string
1  5446						 ; in:	 <return address>
1  5447						 ;	 <string>
1  5448						 ;	 <character value>
1  5449						 ; out:	 <return address>
1  5450						 ;	 <string>
1  5451						 ;	 <string>
1  5452	    0ECB  21				 DB 21h
1  5453	    0ECC  0002				 DW 2
1  5454	    0ECE  54				 DB 54h			 ; D = 0
1  5455	    0ECF  39				 DB 039h
1  5456	    0ED0  5E				 DB 5eh		 ; DE =	string length
1  5457	    0ED1  13				 DB 13h
1  5458	    0ED2  19				 DB 019h
1  5459	    0ED3  7E				 DB 7eh
1  5460	    0ED4  36 01				 DB 36h,1
1  5461	    0ED6  23				 DB 23h
1  5462	    0ED7  77				 DB 77h
1  5463	    0ED8  C9				 DB 0c9h
1  5464
1  5465
1  5466
1  5467	    0ED9			 L09B0:	 ; Compare STRINGS
1  5468	    0ED9  21				 DB 21h
1  5469	    0EDA  0004				 DW 4
1  5470	    0EDC  54				 DB 54h
1  5471	    0EDD  39				 DB 039h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 97
msx_asm\rtl_rtl.ASM



1  5472	    0EDE  5E				 DB 5eh
1  5473	    0EDF  4B				 DB 4bh
1  5474	    0EE0  23				 DB 23h
1  5475	    0EE1  E5				 DB 0e5h
1  5476	    0EE2  19				 DB 019h
1  5477	    0EE3  5E				 DB 5eh
1  5478	    0EE4  43				 DB 43h
1  5479	    0EE5  23				 DB 23h
1  5480	    0EE6  E5				 DB 0e5h
1  5481	    0EE7  19				 DB 019h
1  5482	    0EE8  E5				 DB 0e5h
1  5483	    0EE9  FD E1				 DB 0fdh,0e1h
1  5484	    0EEB  D1				 DB 0d1h
1  5485	    0EEC  E1				 DB 0e1h
1  5486	    0EED  AF			 L09C4:	 DB 0afh
1  5487	    0EEE  B8				 DB 0b8h
1  5488	    0EEF  28 04				 DB 28h,(L09CC)-$-1
1  5489	    0EF1  B9				 DB 0b9h
1  5490	    0EF2  20 08				 DB 20h,(L09D3)-$-1
1  5491	    0EF4  78				 DB 78h
1  5492	    0EF5  B9			 L09CC:	 DB 0b9h
1  5493	    0EF6  E1			 L09CD:	 DB 0e1h
1  5494	    0EF7  D1				 DB 0d1h
1  5495	    0EF8  FD F9				 DB 0fdh,0f9h
1  5496	    0EFA  D5				 DB 0d5h
1  5497	    0EFB  E9				 DB 0e9h
1  5498	    0EFC  1A			 L09D3:	 DB 1ah
1  5499	    0EFD  BE				 DB 0beh
1  5500	    0EFE  20 F6				 DB 20h,(L09CD)-$-1
1  5501	    0F00  23				 DB 23h
1  5502	    0F01  13				 DB 13h
1  5503	    0F02  05				 DB 05h
1  5504	    0F03  0D				 DB 0dh
1  5505	    0F04  18 E7				 DB 18h,( L09C4)-$-1
1  5506	    0F06  7C			 L09DD:	 DB 7ch
1  5507	    0F07  B7				 DB 0b7h
1  5508	    0F08  20 03				 DB 20h,(L09E4)-$-1
1  5509	    0F0A  7D				 DB 7dh
1  5510	    0F0B  B7				 DB 0b7h
1  5511	    0F0C  C0				 DB 0c0h
1  5512	    0F0D  3E 11			 L09E4:	 DB 3eh,11H		 ; r.error 11H:	Invalid	string index
1  5513	    0F0F  C3				 DB 0c3h
1  5514	    0F10  273Ar				 DW  L2029
1  5515
1  5516						 GLOBALS L09E9
2  5517
2  5518						  IRP NAME,<L09E9>
2  5519							   GLOBAL2 <NAME>
2  5520						  ENDM
3  5521							   GLOBAL2 <L09E9>
4  5522						  GLOBAL L09E9 : NEAR
4  5523
4  5524						  GLOBAL _L09E9	: NEAR
4  5525	    0F12			 _L09E9:
4  5526
2  5527
1  5528	    0F12  CD			 L09E9:	 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 98
msx_asm\rtl_rtl.ASM



1  5529	    0F13  0F36r				 DW  L0A0D		 ; LIB
1  5530
1  5531	    0F15  D0			 L09EC:	 DB 0d0h
1  5532	    0F16  3E 01				 DB 3eh,1			 ; r.error 1: Floating point overflow
1  5533	    0F18  C3				 DB 0c3h
1  5534	    0F19  2738r				 DW  L2027		 ; Run-time error
1  5535
1  5536
1  5537
1  5538						 GLOBALS L09F2
2  5539
2  5540						  IRP NAME,<L09F2>
2  5541							   GLOBAL2 <NAME>
2  5542						  ENDM
3  5543							   GLOBAL2 <L09F2>
4  5544						  GLOBAL L09F2 : NEAR
4  5545
4  5546						  GLOBAL _L09F2	: NEAR
4  5547	    0F1B			 _L09F2:
4  5548
2  5549
1  5550	    0F1B  CD			 L09F2:	 DB 0cdh
1  5551	    0F1C  0FAAr				 DW  L0A81		 ; LIB
1  5552	    0F1E  18 F5				 DB 18h,( L09EC)-$-1
1  5553
1  5554						 GLOBALS L09F7
2  5555
2  5556						  IRP NAME,<L09F7>
2  5557							   GLOBAL2 <NAME>
2  5558						  ENDM
3  5559							   GLOBAL2 <L09F7>
4  5560						  GLOBAL L09F7 : NEAR
4  5561
4  5562						  GLOBAL _L09F7	: NEAR
4  5563	    0F20			 _L09F7:
4  5564
2  5565
1  5566	    0F20			 L09F7:	 ; FUNCTION Sqr(R: REAL): REAL;
1  5567	    0F20  CD				 DB 0cdh
1  5568	    0F21  1520r				 DW  L0FAC		 ; LIB
1  5569
1  5570						 GLOBALS L09FA
2  5571
2  5572						  IRP NAME,<L09FA>
2  5573							   GLOBAL2 <NAME>
2  5574						  ENDM
3  5575							   GLOBAL2 <L09FA>
4  5576						  GLOBAL L09FA : NEAR
4  5577
4  5578						  GLOBAL _L09FA	: NEAR
4  5579	    0F23			 _L09FA:
4  5580
2  5581
1  5582	    0F23  CD			 L09FA:	 DB 0cdh
1  5583	    0F24  0FC0r				 DW  L0A97		 ; LIB
1  5584	    0F26  18 ED				 DB 18h,( L09EC)-$-1
1  5585
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 99
msx_asm\rtl_rtl.ASM



1  5586						 GLOBALS L09FF
2  5587
2  5588						  IRP NAME,<L09FF>
2  5589							   GLOBAL2 <NAME>
2  5590						  ENDM
3  5591							   GLOBAL2 <L09FF>
4  5592						  GLOBAL L09FF : NEAR
4  5593
4  5594						  GLOBAL _L09FF	: NEAR
4  5595	    0F28			 _L09FF:
4  5596
2  5597
1  5598	    0F28			 L09FF:	 ; Divide two REALS
1  5599	    0F28  D9				 DB 0d9h		 ; LIB
1  5600	    0F29  7D				 DB 7dh
1  5601	    0F2A  B7				 DB 0b7h
1  5602	    0F2B  D9				 DB 0d9h
1  5603
1  5604
1  5605	    0F2C  3E 02			 L0A03:	 DB 3eh,2			 ; r.error 2: Division by zero attempted
1  5606	    0F2E  CA				 DB 0cah
1  5607	    0F2F  2738r				 DW L2027		 ; Run-time error
1  5608	    0F31  CD				 DB 0cdh
1  5609	    0F32  1037r				 DW  L0AF5
1  5610	    0F34  18 DF				 DB 18h,( L09EC)-$-1
1  5611
1  5612	    0F36  D9			 L0A0D:	 DB 0d9h
1  5613	    0F37  CB 78				 DB 0cbh,078h
1  5614	    0F39  D9				 DB 0d9h
1  5615	    0F3A  C2				 DB 0c2h
1  5616	    0F3B  0FB1r				 DW L0A88
1  5617	    0F3D  D9			 L0A14:	 DB 0d9h
1  5618	    0F3E  7D				 DB 7dh
1  5619	    0F3F  B7				 DB 0b7h
1  5620	    0F40  D9				 DB 0d9h
1  5621	    0F41  C8				 DB 0c8h
1  5622	    0F42  D9				 DB 0d9h
1  5623	    0F43  C5				 DB 0c5h
1  5624	    0F44  D5				 DB 0d5h
1  5625	    0F45  E5				 DB 0e5h
1  5626	    0F46  D9				 DB 0d9h
1  5627	    0F47  7D				 DB 7dh
1  5628	    0F48  B7				 DB 0b7h
1  5629	    0F49  20 05				 DB 20h,(L0A27)-$-1
1  5630	    0F4B  D9				 DB 0d9h
1  5631	    0F4C  CB B8				 DB 0cbh,0b8h
1  5632	    0F4E  18 54				 DB 18h,( L0A7B)-$-1
1  5633	    0F50  C5			 L0A27:	 DB 0c5h
1  5634	    0F51  CB F8				 DB 0cbh,0f8h
1  5635	    0F53  AF				 DB 0afh
1  5636	    0F54  08				 DB 08h
1  5637	    0F55  D9				 DB 0d9h
1  5638	    0F56  CB F8				 DB 0cbh,0f8h
1  5639	    0F58  7D				 DB 7dh
1  5640	    0F59  D9				 DB 0d9h
1  5641	    0F5A  95				 DB 095h
1  5642	    0F5B  28 13				 DB 28h,(L0A47)-$-1
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 100
msx_asm\rtl_rtl.ASM



1  5643	    0F5D  30 06				 DB 30h,(L0A3C)-$-1
1  5644	    0F5F  ED 44				 DB 0edh,44h
1  5645	    0F61  08				 DB 08h
1  5646	    0F62  3D				 DB 3dh
1  5647	    0F63  08				 DB 08h
1  5648	    0F64  D9				 DB 0d9h
1  5649	    0F65  CD			 L0A3C:	 DB 0cdh
1  5650	    0F66  10EEr				 DW  L0B7A
1  5651	    0F68  2C				 DB 2ch
1  5652	    0F69  3D				 DB 3dh
1  5653	    0F6A  20 F9				 DB 20h,(L0A3C)-$-1
1  5654	    0F6C  08				 DB 08h
1  5655	    0F6D  28 01				 DB 28h,(L0A47)-$-1
1  5656	    0F6F  D9				 DB 0d9h
1  5657	    0F70  F1			 L0A47:	 DB 0f1h
1  5658	    0F71  E6 80				 DB 0e6h, 80H
1  5659	    0F73  20 0F				 DB 20h,(L0A5B)-$-1
1  5660	    0F75  CD				 DB 0cdh
1  5661	    0F76  1106r				 DW  L0B92
1  5662	    0F78  30 25				 DB 30h,(L0A76)-$-1
1  5663	    0F7A  CD				 DB 0cdh
1  5664	    0F7B  10EFr				 DW  L0B7B
1  5665	    0F7D  B7				 DB 0b7h
1  5666	    0F7E  2C				 DB 2ch
1  5667	    0F7F  20 1E				 DB 20h,(L0A76)-$-1
1  5668	    0F81  37				 DB 37h
1  5669	    0F82  18 20				 DB 18h,( L0A7B)-$-1
1  5670
1  5671	    0F84  CD			 L0A5B:	  DB 0cdh
1  5672	    0F85  113Ar				 DW  L0BC6
1  5673	    0F87  3F				 DB 3fh
1  5674	    0F88  F5				 DB 0f5h
1  5675	    0F89  28 10				 DB 28h,(L0A72)-$-1
1  5676
1  5677	    0F8B  38 01				 DB 38h,(L0A65)-$-1
1  5678	    0F8D  D9				 DB 0d9h
1  5679	    0F8E  CD			 L0A65:	 DB 0cdh
1  5680	    0F8F  1120r				 DW  L0BAC
1  5681	    0F91  CB 78			 L0A68:	 DB 0cbh,078h
1  5682	    0F93  20 09				 DB 20h,(L0A75)-$-1
1  5683	    0F95  CD				 DB 0cdh
1  5684	    0F96  10FAr				 DW  L0B86
1  5685	    0F98  2D				 DB 2dh
1  5686	    0F99  20 F6				 DB 20h,(L0A68)-$-1
1  5687
1  5688	    0F9B  CD			 L0A72:	 DB 0cdh
1  5689	    0F9C  10E6r				 DW  L0B72		 ; HLDEBC = 0.0
1  5690
1  5691	    0F9E  F1			 L0A75:	 DB 0f1h
1  5692	    0F9F  38 02			 L0A76:	 DB 38h,(L0A7A)-$-1
1  5693	    0FA1  CB B8				 DB 0cbh,0b8h
1  5694	    0FA3  B7			 L0A7A:	 DB 0b7h
1  5695	    0FA4  D9			 L0A7B:	 DB 0d9h
1  5696	    0FA5  E1				 DB 0e1h
1  5697	    0FA6  D1				 DB 0d1h
1  5698	    0FA7  C1				 DB 0c1h
1  5699	    0FA8  D9				 DB 0d9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 101
msx_asm\rtl_rtl.ASM



1  5700	    0FA9  C9				 DB 0c9h
1  5701	    0FAA  D9			 L0A81:	 DB 0d9h
1  5702	    0FAB  CB 78				 DB 0cbh,078h
1  5703	    0FAD  D9				 DB 0d9h
1  5704	    0FAE  C2				 DB 0c2h
1  5705	    0FAF  0F3Dr				 DW L0A14
1  5706	    0FB1  CD			 L0A88:	 DB 0cdh
1  5707	    0FB2  0FB8r				 DW  L0A8F
1  5708	    0FB4  CD				 DB 0cdh
1  5709	    0FB5  0F3Dr				 DW  L0A14
1  5710	    0FB7  D8				 DB 0d8h
1  5711	    0FB8  2C			 L0A8F:	 DB 2ch
1  5712	    0FB9  2D				 DB 2dh
1  5713	    0FBA  C8				 DB 0c8h
1  5714	    0FBB  78				 DB 78h
1  5715	    0FBC  EE 80				 DB 0eeh, 80H
1  5716	    0FBE  47				 DB 47h
1  5717	    0FBF  C9				 DB 0c9h
1  5718	    0FC0  D9			 L0A97:	 DB 0d9h
1  5719	    0FC1  7D				 DB 7dh
1  5720	    0FC2  B7				 DB 0b7h
1  5721	    0FC3  D9				 DB 0d9h
1  5722	    0FC4  CA				 DB 0cah
1  5723	    0FC5  10E6r				 DW L0B72		 ; Zero	--> HLDEBC = 0.0
1  5724
1  5725	    0FC7  7D				 DB 7dh
1  5726	    0FC8  B7				 DB 0b7h
1  5727	    0FC9  C8				 DB 0c8h
1  5728	    0FCA  D9				 DB 0d9h
1  5729	    0FCB  85				 DB 085h
1  5730	    0FCC  D9				 DB 0d9h
1  5731	    0FCD  CD				 DB 0cdh
1  5732	    0FCE  10C0r				 DW  L0B4D
1  5733	    0FD0  C5				 DB 0c5h
1  5734	    0FD1  D5				 DB 0d5h
1  5735	    0FD2  E5				 DB 0e5h
1  5736	    0FD3  DD 39				 DB 0ddh,039h
1  5737
1  5738
1  5739	    0FD5  D9				 DB 0d9h
1  5740	    0FD6  C5				 DB 0c5h
1  5741	    0FD7  4C				 DB 4ch
1  5742	    0FD8  D9				 DB 0d9h
1  5743	    0FD9  D1				 DB 0d1h		 ; BCDEHL' --> DED'E'C'
1  5744
1  5745	    0FDA  AF				 DB 0afh		 ; HLH'L'A = 0
1  5746	    0FDB  6F				 DB 6fh
1  5747	    0FDC  67				 DB 67h
1  5748	    0FDD  D9				 DB 0d9h
1  5749	    0FDE  6F				 DB 6fh
1  5750	    0FDF  67				 DB 67h
1  5751	    0FE0  06 05				 DB 06h,5			 ; B' =	byte count
1  5752	    0FE2  D9				 DB 0d9h
1  5753
1  5754	    0FE3			 MULTREAL1:
1  5755	    0FE3  06 08				 DB 06h,8			 ; B = bit count
1  5756	    0FE5  DD 23				 DB 0ddh,23h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 102
msx_asm\rtl_rtl.ASM



1  5757					 ;	  LD C,(IX+0)
1  5758	    0FE7  DD 4E	00			 DB 0ddh,4eh,+0
1  5759
1  5760	    0FEA			 MULTREAL2:
1  5761	    0FEA  CB 19				 DB 0cbh,19h
1  5762	    0FEC  30 07				 DB 30h,(MULTREAL3)-$-1
1  5763	    0FEE  D9				 DB 0d9h
1  5764	    0FEF  81				 DB 081h
1  5765	    0FF0  ED 5A				 DB 0EDH,05ah
1  5766	    0FF2  D9				 DB 0d9h
1  5767	    0FF3  ED 5A				 DB 0EDH,05ah
1  5768
1  5769	    0FF5			 MULTREAL3:
1  5770	    0FF5  CB 1C				 DB 0cbh,1ch
1  5771	    0FF7  CB 1D				 DB 0cbh,1dh
1  5772	    0FF9  D9				 DB 0d9h
1  5773	    0FFA  CB 1C				 DB 0cbh,1ch
1  5774	    0FFC  CB 1D				 DB 0cbh,1dh
1  5775	    0FFE  D9				 DB 0d9h
1  5776	    0FFF  1F				 DB 1fh
1  5777
1  5778	    1000  10 E8				 DB 10h,( MULTREAL2)-$-1
1  5779
1  5780	    1002  D9				 DB 0d9h
1  5781	    1003  05				 DB 05h
1  5782	    1004  D9				 DB 0d9h
1  5783	    1005  20 DC				 DB 20h,(MULTREAL1)-$-1
1  5784
1  5785						 ; BCDEH = HLH'L'A
1  5786	    1007  44				 DB 44h
1  5787	    1008  4D				 DB 4dh
1  5788	    1009  67				 DB 67h
1  5789	    100A  D9				 DB 0d9h
1  5790	    100B  E5				 DB 0e5h
1  5791	    100C  D9				 DB 0d9h
1  5792	    100D  D1				 DB 0d1h
1  5793
1  5794	    100E  08				 DB 08h			 ; save	Carry from RRA
1  5795
1  5796
1  5797	    100F  DD 6E	FB			 DB 0ddh,6eh,-5
1  5798	    1012  CB 78				 DB 0cbh,078h
1  5799	    1014  20 09				 DB 20h,(L0ADE)-$-1
1  5800	    1016  08				 DB 08h
1  5801	    1017  CD				 DB 0cdh
1  5802	    1018  10FBr				 DW  L0B87
1  5803	    101A  2C				 DB 2ch
1  5804	    101B  2D				 DB 2dh
1  5805	    101C  28 01				 DB 28h,(L0ADE)-$-1
1  5806	    101E  2D				 DB 2dh
1  5807	    101F  F1			 L0ADE:	 DB 0f1h
1  5808	    1020  F1				 DB 0f1h
1  5809	    1021  F1				 DB 0f1h
1  5810
1  5811	    1022  B7			 L0AE1:	 DB 0b7h
1  5812
1  5813	    1023  08			 L0AE2:	 DB 08h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 103
msx_asm\rtl_rtl.ASM



1  5814	    1024  F1				 DB 0f1h
1  5815	    1025  D9				 DB 0d9h
1  5816	    1026  C1				 DB 0c1h
1  5817	    1027  D1				 DB 0d1h		 ; FastReal
1  5818	    1028  E1				 DB 0e1h
1  5819	    1029  D9				 DB 0d9h
1  5820	    102A  DD E1				 DB 0ddh,0e1h
1  5821	    102C  CB B8				 DB 0cbh,0b8h
1  5822	    102E  B0				 DB 0b0h
1  5823	    102F  47				 DB 47h
1  5824	    1030  2C				 DB 2ch
1  5825	    1031  2D				 DB 2dh
1  5826	    1032  CC				 DB 0cch
1  5827	    1033  10E6r				 DW L0B72		 ; Zero	--> HLDEBC = 0.0
1  5828
1  5829	    1035  08				 DB 08h
1  5830	    1036  C9				 DB 0c9h
1  5831
1  5832	    1037  7D			 L0AF5:	  DB 7dh
1  5833	    1038  B7				 DB 0b7h
1  5834	    1039  C8				 DB 0c8h
1  5835	    103A  D9				 DB 0d9h
1  5836	    103B  95				 DB 095h
1  5837	    103C  D9				 DB 0d9h
1  5838	    103D  3F				 DB 3fh
1  5839	    103E  CD				 DB 0cdh
1  5840	    103F  10C0r				 DW  L0B4D
1  5841	    1041  E5				 DB 0e5h
1  5842	    1042  E5			 L0B00:	 DB 0e5h
1  5843	    1043  E5				 DB 0e5h
1  5844	    1044  DD 39				 DB 0ddh,039h
1  5845
1  5846
1  5847	    1046  7C				 DB 7ch
1  5848	    1047  08				 DB 08h
1  5849	    1048  60				 DB 60h
1  5850	    1049  69				 DB 69h
1  5851	    104A  D5				 DB 0d5h
1  5852	    104B  D9				 DB 0d9h
1  5853	    104C  7C				 DB 7ch
1  5854	    104D  E1				 DB 0e1h
1  5855	    104E  C5				 DB 0c5h
1  5856	    104F  4F				 DB 4fh
1  5857	    1050  06 05				 DB 06h,5			 ; B' =	byte count
1  5858	    1052  D9				 DB 0d9h
1  5859	    1053  D1				 DB 0d1h
1  5860	    1054  08				 DB 08h
1  5861
1  5862	    1055  06 08				 DB 06h,8			 ; B = bit count
1  5863
1  5864	    1057  CD			 DIVREAL1:DB 0cdh
1  5865	    1058  10A4r				 DW  COMPMANTISSE
1  5866	    105A  38 07				 DB 38h,(DIVREAL2)-$-1
1  5867
1  5868						 ; SubMantisse
1  5869	    105C  D9				 DB 0d9h
1  5870	    105D  91				 DB 091h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 104
msx_asm\rtl_rtl.ASM



1  5871	    105E  ED 52				 DB 0EDH,052h
1  5872	    1060  D9				 DB 0d9h
1  5873	    1061  ED 52				 DB 0EDH,052h
1  5874
1  5875	    1063  3F			 DIVREAL2:DB 3fh
1  5876	    1064  CB 11				 DB 0cbh,11h
1  5877
1  5878	    1066  10 0C				 DB 10h,( DIVREAL3)-$-1
1  5879
1  5880					 ;	  LD (IX+5),C
1  5881	    1068  DD 71	05			 DB 0ddh,71h,+5
1  5882	    106B  DD 2B				 DB 0ddh,2bh
1  5883
1  5884	    106D  D9				 DB 0d9h
1  5885	    106E  05				 DB 05h
1  5886	    106F  D9				 DB 0d9h
1  5887	    1070  28 17				 DB 28h,(DIVREAL4)-$-1
1  5888
1  5889	    1072  06 08				 DB 06h,8			 ; B = bit count
1  5890
1  5891	    1074			 DIVREAL3:; SLAMantisse
1  5892	    1074  B7				 DB 0b7h
1  5893	    1075  17				 DB 17h
1  5894	    1076  D9				 DB 0d9h
1  5895	    1077  ED 6A				 DB 0EDH,06ah
1  5896	    1079  D9				 DB 0d9h
1  5897	    107A  ED 6A				 DB 0EDH,06ah
1  5898	    107C  30 D9				 DB 30h,(DIVREAL1)-$-1
1  5899
1  5900						 ; SubMantisse
1  5901	    107E  D9				 DB 0d9h
1  5902	    107F  91				 DB 091h
1  5903	    1080  ED 52				 DB 0EDH,052h
1  5904	    1082  D9				 DB 0d9h
1  5905	    1083  ED 52				 DB 0EDH,052h
1  5906	    1085  B7				 DB 0b7h
1  5907	    1086  C3				 DB 0c3h
1  5908	    1087  1063r				 DW  DIVREAL2
1  5909
1  5910	    1089			 DIVREAL4:; SLAMantisse
1  5911	    1089  B7				 DB 0b7h
1  5912	    108A  17				 DB 17h
1  5913	    108B  D9				 DB 0d9h
1  5914	    108C  ED 6A				 DB 0EDH,06ah
1  5915	    108E  D9				 DB 0d9h
1  5916	    108F  ED 6A				 DB 0EDH,06ah
1  5917	    1091  38 04				 DB 38h,(DIVREAL5)-$-1
1  5918
1  5919	    1093  CD				 DB 0cdh
1  5920	    1094  10A4r				 DW  COMPMANTISSE
1  5921	    1096  3F				 DB 3fh
1  5922
1  5923	    1097			 DIVREAL5:
1  5924
1  5925
1  5926	    1097  E1			 L0B3B:	 DB 0e1h
1  5927	    1098  D1				 DB 0d1h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 105
msx_asm\rtl_rtl.ASM



1  5928	    1099  C1				 DB 0c1h
1  5929					 ;!	  lahf			     ; store carry in ah
1  5930
1  5931	    109A  CB 78				  DB 0cbh,078h
1  5932	    109C  20 1A				 DB 20h,(L0B47)-$-1
1  5933
1  5934					 ;!	  sahf			     ; restore carry
1  5935	    109E  CD				  DB 0cdh
1  5936	    109F  10FBr				 DW  L0B87
1  5937	    10A1  C3				 DB 0c3h
1  5938	    10A2  1022r				 DW  L0AE1
1  5939
1  5940	    10A4			 COMPMANTISSE:
1  5941	    10A4  B7				 DB 0b7h
1  5942	    10A5  ED 52				 DB 0EDH,052h
1  5943	    10A7  F5				 DB 0f5h
1  5944	    10A8  19				 DB 019h
1  5945	    10A9  F1				 DB 0f1h
1  5946	    10AA  C0				 DB 0c0h
1  5947
1  5948	    10AB  D9				 DB 0d9h
1  5949	    10AC  B7				 DB 0b7h
1  5950	    10AD  ED 52				 DB 0EDH,052h
1  5951	    10AF  F5				 DB 0f5h
1  5952	    10B0  19				 DB 019h
1  5953	    10B1  F1				 DB 0f1h
1  5954	    10B2  D9				 DB 0d9h
1  5955	    10B3  C0				 DB 0c0h
1  5956
1  5957	    10B4  D9				 DB 0d9h
1  5958	    10B5  B9				 DB 0b9h
1  5959	    10B6  D9				 DB 0d9h
1  5960	    10B7  C9				 DB 0c9h
1  5961
1  5962
1  5963	    10B8  2C			 L0B47:	 DB 2ch
1  5964	    10B9  C2				 DB 0c2h
1  5965	    10BA  1022r				 DW L0AE1
1  5966	    10BC  37				 DB 37h
1  5967	    10BD  C3				 DB 0c3h
1  5968	    10BE  1023r				 DW  L0AE2
1  5969
1  5970	    10C0  38 06			 L0B4D:	 DB 38h,(L0B55)-$-1
1  5971	    10C2  C6 80				 DB 0c6h,80H
1  5972	    10C4  38 06				 DB 38h,(L0B59)-$-1
1  5973	    10C6  18 1C				 DB 18h,( L0B70)-$-1
1  5974	    10C8  C6 80			 L0B55:	 DB 0c6h,80H
1  5975	    10CA  38 18				 DB 38h,(L0B70)-$-1
1  5976	    10CC  6F			 L0B59:	 DB 6fh
1  5977	    10CD  DD E3				 DB 0ddh,0e3h
1  5978	    10CF  D9				 DB 0d9h
1  5979	    10D0  E5				 DB 0e5h
1  5980	    10D1  D5				 DB 0d5h
1  5981	    10D2  C5				 DB 0c5h
1  5982	    10D3  78				 DB 78h
1  5983	    10D4  CB F8				 DB 0cbh,0f8h
1  5984	    10D6  D9				 DB 0d9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 106
msx_asm\rtl_rtl.ASM



1  5985	    10D7  A8				 DB 0a8h
1  5986	    10D8  E6 80				 DB 0e6h, 80H
1  5987	    10DA  F5				 DB 0f5h
1  5988	    10DB  CB F8				 DB 0cbh,0f8h
1  5989	    10DD  DD E5				 DB 0ddh,0e5h
1  5990	    10DF  DD 21				 DB 0ddh,21h
1  5991	    10E1  0000				 DW 0
1  5992	    10E3  C9				 DB 0c9h
1  5993	    10E4  E1			 L0B70:	 DB 0e1h
1  5994	    10E5  D8				 DB 0d8h
1  5995
1  5996	    10E6			 L0B72:	 ; create a REAL HLDEBC	with 0.0 as value
1  5997						 ; in:	 -
1  5998						 ; out:	 REAL HLDEBC filled with zeroes
1  5999	    10E6  AF				 DB 0afh
1  6000	    10E7  6F				 DB 6fh
1  6001	    10E8  47				 DB 47h
1  6002	    10E9  4F				 DB 4fh
1  6003	    10EA  57				 DB 57h
1  6004	    10EB  5F				 DB 5fh
1  6005	    10EC  67				 DB 67h
1  6006	    10ED  C9				 DB 0c9h
1  6007
1  6008	    10EE  B7			 L0B7A:	 DB 0b7h
1  6009	    10EF  CB 18			 L0B7B:	 DB 0cbh,18h
1  6010	    10F1  CB 19				 DB 0cbh,19h
1  6011	    10F3  CB 1A				 DB 0cbh,1ah
1  6012	    10F5  CB 1B				 DB 0cbh,1bh
1  6013	    10F7  CB 1C				 DB 0cbh,1ch
1  6014	    10F9  C9				 DB 0c9h
1  6015	    10FA  B7			 L0B86:	 DB 0b7h
1  6016	    10FB  CB 14			 L0B87:	 DB 0cbh,14h
1  6017	    10FD  CB 13				 DB 0cbh,13h
1  6018	    10FF  CB 12				 DB 0cbh,12h
1  6019	    1101  CB 11				 DB 0cbh,11h
1  6020	    1103  CB 10				 DB 0cbh,10h
1  6021	    1105  C9				 DB 0c9h
1  6022	    1106  7C			 L0B92:	 DB 7ch
1  6023	    1107  D9				 DB 0d9h
1  6024	    1108  84				 DB 084h
1  6025	    1109  D9				 DB 0d9h
1  6026	    110A  67				 DB 67h
1  6027	    110B  7B				 DB 7bh
1  6028	    110C  D9				 DB 0d9h
1  6029	    110D  8B				 DB 08bh
1  6030	    110E  D9				 DB 0d9h
1  6031	    110F  5F				 DB 5fh
1  6032	    1110  7A				 DB 7ah
1  6033	    1111  D9				 DB 0d9h
1  6034	    1112  8A				 DB 08ah
1  6035	    1113  D9				 DB 0d9h
1  6036	    1114  57				 DB 57h
1  6037	    1115  79				 DB 79h
1  6038	    1116  D9				 DB 0d9h
1  6039	    1117  89				 DB 089h
1  6040	    1118  D9				 DB 0d9h
1  6041	    1119  4F				 DB 4fh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 107
msx_asm\rtl_rtl.ASM



1  6042	    111A  78				 DB 78h
1  6043	    111B  D9				 DB 0d9h
1  6044	    111C  88				 DB 088h
1  6045	    111D  D9				 DB 0d9h
1  6046	    111E  47				 DB 47h
1  6047	    111F  C9				 DB 0c9h
1  6048	    1120  7C			 L0BAC:	 DB 7ch
1  6049	    1121  D9				 DB 0d9h
1  6050	    1122  94				 DB 094h
1  6051	    1123  D9				 DB 0d9h
1  6052	    1124  67				 DB 67h
1  6053	    1125  7B				 DB 7bh
1  6054	    1126  D9				 DB 0d9h
1  6055	    1127  9B				 DB 09bh
1  6056	    1128  D9				 DB 0d9h
1  6057	    1129  5F				 DB 5fh
1  6058	    112A  7A				 DB 7ah
1  6059	    112B  D9				 DB 0d9h
1  6060	    112C  9A				 DB 09ah
1  6061	    112D  D9				 DB 0d9h
1  6062	    112E  57				 DB 57h
1  6063	    112F  79				 DB 79h
1  6064	    1130  D9				 DB 0d9h
1  6065	    1131  99				 DB 099h
1  6066	    1132  D9				 DB 0d9h
1  6067	    1133  4F				 DB 4fh
1  6068	    1134  78				 DB 78h
1  6069	    1135  D9				 DB 0d9h
1  6070	    1136  98				 DB 098h
1  6071	    1137  D9				 DB 0d9h
1  6072	    1138  47				 DB 47h
1  6073	    1139  C9				 DB 0c9h
1  6074
1  6075	    113A  78			 L0BC6:	 DB 78h
1  6076	    113B  D9				 DB 0d9h
1  6077	    113C  B8				 DB 0b8h
1  6078	    113D  D9				 DB 0d9h
1  6079	    113E  C0				 DB 0c0h
1  6080	    113F  79				 DB 79h
1  6081	    1140  D9				 DB 0d9h
1  6082	    1141  B9				 DB 0b9h
1  6083	    1142  D9				 DB 0d9h
1  6084	    1143  C0				 DB 0c0h
1  6085	    1144  7A				 DB 7ah
1  6086	    1145  D9				 DB 0d9h
1  6087	    1146  BA				 DB 0bah
1  6088	    1147  D9				 DB 0d9h
1  6089	    1148  C0				 DB 0c0h
1  6090	    1149  7B				 DB 7bh
1  6091	    114A  D9				 DB 0d9h
1  6092	    114B  BB				 DB 0bbh
1  6093	    114C  D9				 DB 0d9h
1  6094	    114D  C0				 DB 0c0h
1  6095	    114E  7C				 DB 7ch
1  6096	    114F  D9				 DB 0d9h
1  6097	    1150  BC				 DB 0bch
1  6098	    1151  D9				 DB 0d9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 108
msx_asm\rtl_rtl.ASM



1  6099	    1152  C9				 DB 0c9h
1  6100
1  6101	    1153			 L0BDF:	 ; Compare REALS
1  6102	    1153  D9				 DB 0d9h
1  6103	    1154  78				 DB 78h
1  6104	    1155  D9				 DB 0d9h
1  6105	    1156  A8				 DB 0a8h
1  6106	    1157  F2				 DB 0f2h
1  6107	    1158  115Dr				 DW L0BE9
1  6108	    115A  78				 DB 78h
1  6109	    115B  17				 DB 17h
1  6110	    115C  C9				 DB 0c9h
1  6111	    115D  CB 78			 L0BE9:	 DB 0cbh,078h
1  6112	    115F  28 06				 DB 28h,(L0BF3)-$-1
1  6113	    1161  CD				 DB 0cdh
1  6114	    1162  1167r				 DW  L0BF3
1  6115	    1164  C8				 DB 0c8h
1  6116	    1165  3F				 DB 3fh
1  6117	    1166  C9				 DB 0c9h
1  6118	    1167  7D			 L0BF3:	 DB 7dh
1  6119	    1168  D9				 DB 0d9h
1  6120	    1169  BD				 DB 0bdh
1  6121	    116A  D9				 DB 0d9h
1  6122	    116B  C0				 DB 0c0h
1  6123	    116C  B7				 DB 0b7h
1  6124	    116D  C8				 DB 0c8h
1  6125	    116E  C3				 DB 0c3h
1  6126	    116F  113Ar				 DW  L0BC6
1  6127
1  6128
1  6129
1  6130						 GLOBALS L0BFD
2  6131
2  6132						  IRP NAME,<L0BFD>
2  6133							   GLOBAL2 <NAME>
2  6134						  ENDM
3  6135							   GLOBAL2 <L0BFD>
4  6136						  GLOBAL L0BFD : NEAR
4  6137
4  6138						  GLOBAL _L0BFD	: NEAR
4  6139	    1171			 _L0BFD:
4  6140
2  6141
1  6142	    1171			 L0BFD:	 ; FUNCTION Int(R: REAL): REAL;
1  6143	    1171  7D				 DB 7dh			 ; LIB
1  6144	    1172  D6 81				 DB 0d6h, 81H
1  6145	    1174  DA				 DB 0dah
1  6146	    1175  10E6r				 DW L0B72		 ; Carry --> HLDEBC = 0.0
1  6147
1  6148	    1177  3C				 DB 3ch
1  6149	    1178  FE 28				 DB 0feh, 28H
1  6150	    117A  D0				 DB 0d0h
1  6151	    117B  D9				 DB 0d9h
1  6152	    117C  C5				 DB 0c5h
1  6153	    117D  D5				 DB 0d5h
1  6154	    117E  E5				 DB 0e5h
1  6155	    117F  08				 DB 08h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 109
msx_asm\rtl_rtl.ASM



1  6156	    1180  CD				 DB 0cdh
1  6157	    1181  10E6r				 DW  L0B72		 ; HLDEBC = 0.0
1  6158	    1183  08				 DB 08h
1  6159	    1184  37			 L0C10:	 DB 37h
1  6160	    1185  CD				 DB 0cdh
1  6161	    1186  10EFr				 DW  L0B7B
1  6162	    1188  3D				 DB 3dh
1  6163	    1189  20 F9				 DB 20h,(L0C10)-$-1
1  6164	    118B  D9				 DB 0d9h
1  6165	    118C  7C				 DB 7ch
1  6166	    118D  D9				 DB 0d9h
1  6167	    118E  A4				 DB 0a4h
1  6168	    118F  D9				 DB 0d9h
1  6169	    1190  67				 DB 67h
1  6170	    1191  7B				 DB 7bh
1  6171	    1192  D9				 DB 0d9h
1  6172	    1193  A3				 DB 0a3h
1  6173	    1194  D9				 DB 0d9h
1  6174	    1195  5F				 DB 5fh
1  6175	    1196  7A				 DB 7ah
1  6176	    1197  D9				 DB 0d9h
1  6177	    1198  A2				 DB 0a2h
1  6178	    1199  D9				 DB 0d9h
1  6179	    119A  57				 DB 57h
1  6180	    119B  79				 DB 79h
1  6181	    119C  D9				 DB 0d9h
1  6182	    119D  A1				 DB 0a1h
1  6183	    119E  D9				 DB 0d9h
1  6184	    119F  4F				 DB 4fh
1  6185	    11A0  78				 DB 78h
1  6186	    11A1  D9				 DB 0d9h
1  6187	    11A2  A0				 DB 0a0h
1  6188	    11A3  D9				 DB 0d9h
1  6189	    11A4  47				 DB 47h
1  6190	    11A5  C3			 L0C31:	 DB 0c3h
1  6191	    11A6  0FA4r				 DW  L0A7B
1  6192
1  6193
1  6194
1  6195
1  6196						 GLOBALS L0C34
2  6197
2  6198						  IRP NAME,<L0C34>
2  6199							   GLOBAL2 <NAME>
2  6200						  ENDM
3  6201							   GLOBAL2 <L0C34>
4  6202						  GLOBAL L0C34 : NEAR
4  6203
4  6204						  GLOBAL _L0C34	: NEAR
4  6205	    11A8			 _L0C34:
4  6206
2  6207
1  6208	    11A8			 L0C34:	 ; FUNCTION Frac(R: REAL): REAL;
1  6209	    11A8  D9				 DB 0d9h		 ; LIB
1  6210	    11A9  C5				 DB 0c5h
1  6211	    11AA  D5				 DB 0d5h
1  6212	    11AB  E5				 DB 0e5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 110
msx_asm\rtl_rtl.ASM



1  6213	    11AC  D9				 DB 0d9h
1  6214	    11AD  CD				 DB 0cdh
1  6215	    11AE  1520r				 DW  L0FAC
1  6216	    11B0  D9				 DB 0d9h
1  6217	    11B1  CD				 DB 0cdh
1  6218	    11B2  1171r				 DW  L0BFD		 ; FUNCTION Int(R: REAL): REAL;
1  6219	    11B4  D9				 DB 0d9h
1  6220	    11B5  CD				 DB 0cdh
1  6221	    11B6  0FAAr				 DW  L0A81
1  6222	    11B8  18 EB				 DB 18h,( L0C31)-$-1
1  6223
1  6224						 GLOBALS L0C46
2  6225
2  6226						  IRP NAME,<L0C46>
2  6227							   GLOBAL2 <NAME>
2  6228						  ENDM
3  6229							   GLOBAL2 <L0C46>
4  6230						  GLOBAL L0C46 : NEAR
4  6231
4  6232						  GLOBAL _L0C46	: NEAR
4  6233	    11BA			 _L0C46:
4  6234
2  6235
1  6236	    11BA			 L0C46:	 ; FUNCTION Sqrt(R: REAL): REAL;
1  6237	    11BA  7D				 DB 7dh			 ; LIB
1  6238	    11BB  B7				 DB 0b7h
1  6239	    11BC  C8				 DB 0c8h
1  6240	    11BD  CB 78				 DB 0cbh,078h
1  6241	    11BF  3E 03				 DB 3eh,3			 ; r.error 3: Sqrt argument error
1  6242	    11C1  C2				 DB 0c2h
1  6243	    11C2  2738r				 DW L2027		 ; Run-time error
1  6244	    11C4  CD				 DB 0cdh
1  6245	    11C5  1520r				 DW  L0FAC
1  6246	    11C7  7D				 DB 7dh
1  6247	    11C8  C6 80				 DB 0c6h,80H
1  6248	    11CA  CB 2F				 DB 0cbh,2fh
1  6249	    11CC  C6 80				 DB 0c6h,80H
1  6250	    11CE  6F				 DB 6fh
1  6251	    11CF  D6 14				 DB 0d6h, 14H
1  6252	    11D1  F5				 DB 0f5h
1  6253	    11D2  D9				 DB 0d9h
1  6254	    11D3  C5			 L0C5F:	 DB 0c5h
1  6255	    11D4  D5				 DB 0d5h
1  6256	    11D5  E5				 DB 0e5h
1  6257	    11D6  CD				 DB 0cdh
1  6258	    11D7  1037r				 DW  L0AF5
1  6259	    11D9  CD				 DB 0cdh
1  6260	    11DA  0F36r				 DW  L0A0D
1  6261	    11DC  2D				 DB 2dh
1  6262	    11DD  C5				 DB 0c5h
1  6263	    11DE  D5				 DB 0d5h
1  6264	    11DF  E5				 DB 0e5h
1  6265	    11E0  CD				 DB 0cdh
1  6266	    11E1  0FAAr				 DW  L0A81
1  6267	    11E3  7D				 DB 7dh
1  6268	    11E4  E1				 DB 0e1h
1  6269	    11E5  D1				 DB 0d1h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 111
msx_asm\rtl_rtl.ASM



1  6270	    11E6  C1				 DB 0c1h
1  6271	    11E7  D9				 DB 0d9h
1  6272	    11E8  E1				 DB 0e1h
1  6273	    11E9  D1				 DB 0d1h
1  6274	    11EA  C1				 DB 0c1h
1  6275	    11EB  E3				 DB 0e3h
1  6276	    11EC  BC				 DB 0bch
1  6277	    11ED  E3				 DB 0e3h
1  6278	    11EE  30 E3				 DB 30h,(L0C5F)-$-1
1  6279	    11F0  F1				 DB 0f1h
1  6280	    11F1  D9				 DB 0d9h
1  6281	    11F2  C9				 DB 0c9h
1  6282
1  6283
1  6284
1  6285
1  6286						 GLOBALS L0C7F
2  6287
2  6288						  IRP NAME,<L0C7F>
2  6289							   GLOBAL2 <NAME>
2  6290						  ENDM
3  6291							   GLOBAL2 <L0C7F>
4  6292						  GLOBAL L0C7F : NEAR
4  6293
4  6294						  GLOBAL _L0C7F	: NEAR
4  6295	    11F3			 _L0C7F:
4  6296
2  6297
1  6298	    11F3			 L0C7F:	 ; FUNCTION Cos(R: REAL): REAL;
1  6299	    11F3  D9				 DB 0d9h		 ; LIB
1  6300	    11F4  CD				 DB 0cdh
1  6301	    11F5  1502r				 DW  L0F8E		 ; get REAL PI
1  6302	    11F7  2D				 DB 2dh
1  6303	    11F8  CD				 DB 0cdh
1  6304	    11F9  0FAAr				 DW  L0A81
1  6305
1  6306						 GLOBALS L0C87
2  6307
2  6308						  IRP NAME,<L0C87>
2  6309							   GLOBAL2 <NAME>
2  6310						  ENDM
3  6311							   GLOBAL2 <L0C87>
4  6312						  GLOBAL L0C87 : NEAR
4  6313
4  6314						  GLOBAL _L0C87	: NEAR
4  6315	    11FB			 _L0C87:
4  6316
2  6317
1  6318	    11FB			 L0C87:	 ; FUNCTION Sin(R: REAL): REAL;
1  6319	    11FB  D9				 DB 0d9h		 ; LIB
1  6320	    11FC  CD				 DB 0cdh
1  6321	    11FD  1502r				 DW  L0F8E		 ; get REAL PI
1  6322	    11FF  2C				 DB 2ch
1  6323	    1200  D9				 DB 0d9h
1  6324	    1201  7D				 DB 7dh
1  6325	    1202  FE 6C				 DB 0feh, 6CH
1  6326	    1204  D8				 DB 0d8h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 112
msx_asm\rtl_rtl.ASM



1  6327	    1205  C5				 DB 0c5h
1  6328	    1206  CB B8				 DB 0cbh,0b8h
1  6329	    1208  CD				 DB 0cdh
1  6330	    1209  1153r				 DW  L0BDF		 ; Compare REALS
1  6331	    120B  C1				 DB 0c1h
1  6332	    120C  38 09				 DB 38h,(L0CA3)-$-1
1  6333
1  6334	    120E  CD				 DB 0cdh
1  6335	    120F  1037r				 DW  L0AF5
1  6336	    1211  CD				 DB 0cdh
1  6337	    1212  11A8r				 DW  L0C34		 ; FUNCTION Frac(R: REAL): REAL;
1  6338	    1214  CD				 DB 0cdh
1  6339	    1215  0FC0r				 DW  L0A97
1  6340
1  6341	    1217  CB 78			 L0CA3:	 DB 0cbh,078h
1  6342	    1219  28 03				 DB 28h,(L0CAA)-$-1
1  6343	    121B  CD				 DB 0cdh
1  6344	    121C  0F36r				 DW  L0A0D
1  6345
1  6346	    121E  D9			 L0CAA:	 DB 0d9h
1  6347	    121F  2D				 DB 2dh
1  6348	    1220  D9				 DB 0d9h
1  6349	    1221  CD				 DB 0cdh
1  6350	    1222  1153r				 DW  L0BDF		 ; Compare REALS
1  6351	    1224  F5				 DB 0f5h
1  6352	    1225  38 03				 DB 38h,(L0CB6)-$-1
1  6353	    1227  CD				 DB 0cdh
1  6354	    1228  0FAAr				 DW  L0A81
1  6355
1  6356	    122A  D9			 L0CB6:	 DB 0d9h
1  6357	    122B  2D				 DB 2dh
1  6358	    122C  D9				 DB 0d9h
1  6359	    122D  CD				 DB 0cdh
1  6360	    122E  1153r				 DW  L0BDF		 ; Compare REALS
1  6361	    1230  38 05				 DB 38h,(L0CC3)-$-1
1  6362	    1232  D9				 DB 0d9h
1  6363	    1233  2C				 DB 2ch
1  6364	    1234  CD				 DB 0cdh
1  6365	    1235  0FAAr				 DW  L0A81
1  6366
1  6367	    1237  7D			 L0CC3:	 DB 7dh
1  6368	    1238  FE 6C				 DB 0feh, 6CH
1  6369	    123A  38 3B				 DB 38h,(L0D03)-$-1
1  6370	    123C  D9				 DB 0d9h
1  6371
1  6372	    123D  01				 DB 01h
1  6373	    123E  2AAA				 DW 2AAAH		 ; 3.3333333333E-01
1  6374	    1240  11				 DB 11h
1  6375	    1241  AAAA				 DW 0AAAAH
1  6376	    1243  21				 DB 21h
1  6377	    1244  AA7F				 DW 0AA7FH
1  6378
1  6379	    1246  CD				 DB 0cdh
1  6380	    1247  0FC0r				 DW  L0A97
1  6381	    1249  DD E5				 DB 0ddh,0e5h
1  6382	    124B  DD 21				 DB 0ddh,21h
1  6383	    124D  127Br				 DW L0D0D-6
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 113
msx_asm\rtl_rtl.ASM



1  6384	    124F  3E 05				 DB 3eh,5
1  6385	    1251  CD				 DB 0cdh
1  6386	    1252  14A8r				 DW  L0F34
1  6387	    1254  DD E1				 DB 0ddh,0e1h
1  6388	    1256  CD				 DB 0cdh
1  6389	    1257  1520r				 DW  L0FAC
1  6390	    1259  CD				 DB 0cdh
1  6391	    125A  0FC0r				 DW  L0A97
1  6392	    125C  CD				 DB 0cdh
1  6393	    125D  0FC0r				 DW  L0A97
1  6394	    125F  C5				 DB 0c5h
1  6395	    1260  D5				 DB 0d5h
1  6396	    1261  E5				 DB 0e5h
1  6397	    1262  D9				 DB 0d9h
1  6398	    1263  CD				 DB 0cdh
1  6399	    1264  1520r				 DW  L0FAC
1  6400	    1266  2D				 DB 2dh
1  6401	    1267  2D				 DB 2dh
1  6402	    1268  D9				 DB 0d9h
1  6403	    1269  2D				 DB 2dh
1  6404	    126A  CD				 DB 0cdh
1  6405	    126B  0F36r				 DW  L0A0D
1  6406	    126D  D9				 DB 0d9h
1  6407	    126E  E1				 DB 0e1h
1  6408	    126F  D1				 DB 0d1h
1  6409	    1270  C1				 DB 0c1h
1  6410	    1271  D9				 DB 0d9h
1  6411	    1272  CD				 DB 0cdh
1  6412	    1273  0FAAr				 DW  L0A81
1  6413	    1275  2C				 DB 2ch
1  6414	    1276  2C				 DB 2ch
1  6415	    1277  F1			 L0D03:	 DB 0f1h
1  6416	    1278  2C				 DB 2ch
1  6417	    1279  2D				 DB 2dh
1  6418	    127A  C8				 DB 0c8h
1  6419	    127B  D8				 DB 0d8h
1  6420	    127C  78				 DB 78h
1  6421	    127D  EE 80				 DB 0eeh, 80H
1  6422	    127F  47				 DB 47h
1  6423	    1280  C9				 DB 0c9h
1  6424
1  6425	    1281			 L0D0D:
1  6426						 ; arctan
1  6427	    1281  67 AA	3F 2B 32 D7		 DB 67H,0AAH, 3FH, 2BH,	32H,0D7H	 ; -1 /	11!
1  6428	    1287  6E B6	2A 1D EF 38		 DB 6EH,0B6H,02AH, 1DH,0EFH, 38H	 ;  1 /	9!
1  6429	    128D  74 0D	D0 00 0D D0		 DB 74H, 0DH,0D0H,  0,	0DH,0D0H	 ; -1 /	7!
1  6430	    1293  7A 88	88 88 88 08		 DB 7AH, 88H, 88H, 88H,	88H,  8		 ;  1 /	5!
1  6431	    1299  7E AB	AA AA AA AA		 DB 7EH,0ABH,0AAH,0AAH,0AAH,0AAH	 ; -1 /	3!
1  6432
1  6433						 GLOBALS L0D2B
2  6434
2  6435						  IRP NAME,<L0D2B>
2  6436							   GLOBAL2 <NAME>
2  6437						  ENDM
3  6438							   GLOBAL2 <L0D2B>
4  6439						  GLOBAL L0D2B : NEAR
4  6440
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 114
msx_asm\rtl_rtl.ASM



4  6441						  GLOBAL _L0D2B	: NEAR
4  6442	    129F			 _L0D2B:
4  6443
2  6444
1  6445	    129F			 L0D2B:	 ; FUNCTION Ln(R: REAL): REAL;
1  6446						 ; calculates ln(REAL HLDEBC) ;	LIB
1  6447	    129F  2C				 DB 2ch
1  6448	    12A0  2D				 DB 2dh
1  6449	    12A1  3E 04				 DB 3eh,4			 ; r.error 4: Ln argument error
1  6450	    12A3  CA				 DB 0cah
1  6451	    12A4  2738r				 DW L2027		 ; error if zero
1  6452	    12A6  CB 78				 DB 0cbh,078h
1  6453	    12A8  C2				 DB 0c2h
1  6454	    12A9  2738r				 DW L2027		 ; error if negative
1  6455	    12AB  D9				 DB 0d9h
1  6456	    12AC  CD				 DB 0cdh
1  6457	    12AD  150Cr				 DW  L0F98		 ; get REAL sqrt(2)
1  6458	    12AF  D9				 DB 0d9h
1  6459	    12B0  7D				 DB 7dh
1  6460	    12B1  2E 81				 DB 2eh,81H
1  6461	    12B3  95				 DB 095h
1  6462	    12B4  F5				 DB 0f5h
1  6463	    12B5  CD				 DB 0cdh
1  6464	    12B6  1037r				 DW  L0AF5
1  6465	    12B8  D9				 DB 0d9h
1  6466	    12B9  CD				 DB 0cdh
1  6467	    12BA  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6468	    12BC  D9				 DB 0d9h
1  6469	    12BD  CD				 DB 0cdh
1  6470	    12BE  0FAAr				 DW  L0A81
1  6471	    12C0  C5				 DB 0c5h
1  6472	    12C1  D5				 DB 0d5h
1  6473	    12C2  E5				 DB 0e5h
1  6474	    12C3  D9				 DB 0d9h
1  6475	    12C4  2C				 DB 2ch
1  6476	    12C5  CD				 DB 0cdh
1  6477	    12C6  0F36r				 DW  L0A0D
1  6478	    12C8  D9				 DB 0d9h
1  6479	    12C9  E1				 DB 0e1h
1  6480	    12CA  D1				 DB 0d1h
1  6481	    12CB  C1				 DB 0c1h
1  6482	    12CC  CD				 DB 0cdh
1  6483	    12CD  1037r				 DW  L0AF5
1  6484	    12CF  DD E5				 DB 0ddh,0e5h
1  6485	    12D1  DD 21				 DB 0ddh,21h
1  6486	    12D3  1300r				 DW L0DF2-6
1  6487	    12D5  3E 06				 DB 3eh,6
1  6488	    12D7  CD				 DB 0cdh
1  6489	    12D8  14A8r				 DW  L0F34
1  6490	    12DA  DD E1				 DB 0ddh,0e1h
1  6491	    12DC  2C				 DB 2ch
1  6492	    12DD  D9				 DB 0d9h
1  6493	    12DE  CD				 DB 0cdh
1  6494	    12DF  1516r				 DW  L0FA2		 ; get REAL ln(2)
1  6495	    12E1  2D				 DB 2dh
1  6496	    12E2  D9				 DB 0d9h
1  6497	    12E3  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 115
msx_asm\rtl_rtl.ASM



1  6498	    12E4  0F36r				 DW  L0A0D
1  6499	    12E6  F1				 DB 0f1h
1  6500	    12E7  C5				 DB 0c5h
1  6501	    12E8  D5				 DB 0d5h
1  6502	    12E9  E5				 DB 0e5h
1  6503	    12EA  6F				 DB 6fh
1  6504	    12EB  26 00				 DB 26h,0
1  6505	    12ED  30 01				 DB 30h,(L0D7C)-$-1
1  6506	    12EF  25				 DB 25h
1  6507
1  6508	    12F0  CD			 L0D7C:	 DB 0cdh
1  6509	    12F1  1581r				 DW  L1008		 ; convert integer HL to REAL HLDEBC
1  6510	    12F3  D9				 DB 0d9h
1  6511	    12F4  2C				 DB 2ch
1  6512	    12F5  CD				 DB 0cdh
1  6513	    12F6  0FC0r				 DW  L0A97
1  6514	    12F8  D9				 DB 0d9h
1  6515	    12F9  E1				 DB 0e1h
1  6516	    12FA  D1				 DB 0d1h
1  6517	    12FB  C1				 DB 0c1h
1  6518	    12FC  CD				 DB 0cdh
1  6519	    12FD  0F36r				 DW  L0A0D
1  6520	    12FF  7D				 DB 7dh
1  6521	    1300  FE 67				 DB 0feh, 67H
1  6522	    1302  DA				 DB 0dah
1  6523	    1303  10E6r				 DW L0B72		 ; Carry --> HLDEBC = 0.0
1  6524	    1305  C9				 DB 0c9h
1  6525
1  6526	    1306			 L0DF2:
1  6527	    1306  7D 8A	9D D8 89 1D		 DB 7DH, 8AH, 9DH,0D8H,	89H,1DH	 ; 1 / 13.0
1  6528	    130C  7D E9	A2 8B 2E 3A		 DB 7DH,0E9H,0A2H, 8BH,	2EH,3AH	 ; 1 / 11.0
1  6529	    1312  7D 8E	E3 38 8E 63		 DB 7DH, 8EH,0E3H, 38H,	8EH,63H	 ; 1 /	9.0
1  6530	    1318  7E 49	92 24 49 12		 DB 7EH, 49H, 92H, 24H,	49H,12H	 ; 1 /	7.0
1  6531	    131E  7E CD	CC CC CC 4C		 DB 7EH,0CDH,0CCH,0CCH,0CCH,4CH	 ; 1 /	5.0
1  6532	    1324  7F AB	AA AA AA 2A		 DB 7FH,0ABH,0AAH,0AAH,0AAH,2AH	 ; 1 /	3.0
1  6533
1  6534
1  6535
1  6536
1  6537						 GLOBALS L0DB6
2  6538
2  6539						  IRP NAME,<L0DB6>
2  6540							   GLOBAL2 <NAME>
2  6541						  ENDM
3  6542							   GLOBAL2 <L0DB6>
4  6543						  GLOBAL L0DB6 : NEAR
4  6544
4  6545						  GLOBAL _L0DB6	: NEAR
4  6546	    132A			 _L0DB6:
4  6547
2  6548
1  6549	    132A			 L0DB6:	 ; FUNCTION Exp(R: REAL): REAL;
1  6550	    132A  D9				 DB 0d9h		 ; LIB
1  6551	    132B  CD				 DB 0cdh
1  6552	    132C  1516r				 DW  L0FA2		 ; get REAL ln(2)
1  6553	    132E  D9				 DB 0d9h
1  6554	    132F  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 116
msx_asm\rtl_rtl.ASM



1  6555	    1330  CB 78				 DB 0cbh,078h
1  6556	    1332  F5				 DB 0f5h
1  6557	    1333  CB B8				 DB 0cbh,0b8h
1  6558	    1335  CD				 DB 0cdh
1  6559	    1336  1037r				 DW  L0AF5
1  6560	    1338  7D				 DB 7dh
1  6561	    1339  FE 88				 DB 0feh, 88H
1  6562	    133B  30 47				 DB 30h,(L0E10)-$-1
1  6563	    133D  C5				 DB 0c5h
1  6564	    133E  D5				 DB 0d5h
1  6565	    133F  E5				 DB 0e5h
1  6566	    1340  2C				 DB 2ch
1  6567	    1341  CD				 DB 0cdh
1  6568	    1342  1544r				 DW  L0FD0
1  6569	    1344  E5				 DB 0e5h
1  6570	    1345  CB 3C				 DB 0cbh,3ch
1  6571	    1347  CB 1D				 DB 0cbh,1dh
1  6572	    1349  7D				 DB 7dh
1  6573	    134A  E1				 DB 0e1h
1  6574	    134B  F5				 DB 0f5h
1  6575	    134C  CD				 DB 0cdh
1  6576	    134D  1581r				 DW  L1008		 ; convert integer HL to REAL HLDEBC
1  6577	    134F  2C				 DB 2ch
1  6578	    1350  2D				 DB 2dh
1  6579	    1351  28 01				 DB 28h,(L0DE0)-$-1
1  6580	    1353  2D				 DB 2dh
1  6581
1  6582	    1354  D9			 L0DE0:	 DB 0d9h
1  6583	    1355  F1				 DB 0f1h
1  6584	    1356  E1				 DB 0e1h
1  6585	    1357  D1				 DB 0d1h
1  6586	    1358  C1				 DB 0c1h
1  6587	    1359  F5				 DB 0f5h
1  6588	    135A  CD				 DB 0cdh
1  6589	    135B  0FAAr				 DW  L0A81
1  6590	    135D  DD E5				 DB 0ddh,0e5h
1  6591	    135F  DD 21				 DB 0ddh,21h
1  6592	    1361  1384r				 DW L0E16-6
1  6593	    1363  3E 08				 DB 3eh,8
1  6594	    1365  CD				 DB 0cdh
1  6595	    1366  14BDr				 DW  L0F49
1  6596	    1368  DD E1				 DB 0ddh,0e1h
1  6597	    136A  F1				 DB 0f1h
1  6598	    136B  30 0A				 DB 30h,(L0E03)-$-1
1  6599	    136D  F5				 DB 0f5h
1  6600	    136E  D9				 DB 0d9h
1  6601	    136F  CD				 DB 0cdh
1  6602	    1370  150Cr				 DW  L0F98		 ; get REAL sqrt(2)
1  6603	    1372  D9				 DB 0d9h
1  6604	    1373  CD				 DB 0cdh
1  6605	    1374  0FC0r				 DW  L0A97
1  6606	    1376  F1				 DB 0f1h
1  6607
1  6608	    1377  85			 L0E03:	 DB 085h
1  6609	    1378  6F				 DB 6fh
1  6610	    1379  38 09				 DB 38h,(L0E10)-$-1
1  6611
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 117
msx_asm\rtl_rtl.ASM



1  6612	    137B  F1				 DB 0f1h
1  6613	    137C  C8				 DB 0c8h
1  6614	    137D  D9				 DB 0d9h
1  6615	    137E  CD				 DB 0cdh
1  6616	    137F  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6617	    1381  C3				 DB 0c3h
1  6618	    1382  1037r				 DW  L0AF5
1  6619
1  6620	    1384  E1			 L0E10:	 DB 0e1h
1  6621	    1385  3E 01				 DB 3eh,1			 ; r.error 1: Floating point overflow
1  6622	    1387  C3				 DB 0c3h
1  6623	    1388  2738r				 DW  L2027		 ; Run-time error
1  6624
1  6625	    138A  6D 2E	1D 11 60 31	 L0E16:	 DB 6DH,2EH,1DH,11H,60H,31H	 ; 1.3215486790E-06
1  6626	    1390  70 46	2C FE E5 7F		 DB 70H,46H,2CH,0FEH,0E5H,7FH	 ; 1.5252733804E-05
1  6627	    1396  74 36	7C 89 84 21		 DB 74H,36H,7CH,89H,84H,21H	 ; 1.5403530393E-04
1  6628	    139C  77 53	3C FF C3 2E		 DB 77H,53H,3CH,0FFH,0C3H,2EH	 ; 1.3333558146E-03
1  6629	    13A2  7A D2	7D 5B 95 1D		 DB 7AH,0D2H,7DH,5BH,95H,1DH	 ; 9.6181291076E-03
1  6630	    13A8  7C 25	B8 46 58 63		 DB 7CH,25H,0B8H,46H,58H,63H	 ; 5.5504108665E-02
1  6631	    13AE  7E 16	FC EF FD 75		 DB 7EH,16H,0FCH,0EFH,0FDH,75H	 ; 2.4022650696E-01
1  6632	    13B4  80 D2	F7 17 72 31		 DB 80H,0D2H,0F7H,17H,72H,31H	 ; 6.9314718056E-01
1  6633
1  6634
1  6635
1  6636
1  6637						 GLOBALS L0E46
2  6638
2  6639						  IRP NAME,<L0E46>
2  6640							   GLOBAL2 <NAME>
2  6641						  ENDM
3  6642							   GLOBAL2 <L0E46>
4  6643						  GLOBAL L0E46 : NEAR
4  6644
4  6645						  GLOBAL _L0E46	: NEAR
4  6646	    13BA			 _L0E46:
4  6647
2  6648
1  6649	    13BA			 L0E46:	 ; FUNCTION ArcTan(R: REAL): REAL;
1  6650	    13BA  7D				 DB 7dh			 ; LIB
1  6651	    13BB  B7				 DB 0b7h
1  6652	    13BC  C8				 DB 0c8h
1  6653	    13BD  DD E5				 DB 0ddh,0e5h
1  6654	    13BF  D9				 DB 0d9h
1  6655	    13C0  CD				 DB 0cdh
1  6656	    13C1  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6657	    13C3  D9				 DB 0d9h
1  6658	    13C4  AF				 DB 0afh
1  6659	    13C5  CB 78				 DB 0cbh,078h
1  6660	    13C7  28 03				 DB 28h,(L0E58)-$-1
1  6661	    13C9  3C				 DB 3ch
1  6662	    13CA  CB B8				 DB 0cbh,0b8h
1  6663
1  6664	    13CC  F5			 L0E58:	 DB 0f5h
1  6665	    13CD  CD				 DB 0cdh
1  6666	    13CE  1153r				 DW  L0BDF		 ; Compare REALS
1  6667	    13D0  38 08				 DB 38h,(L0E66)-$-1
1  6668	    13D2  D9				 DB 0d9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 118
msx_asm\rtl_rtl.ASM



1  6669	    13D3  CD				 DB 0cdh
1  6670	    13D4  1037r				 DW  L0AF5
1  6671	    13D6  F1				 DB 0f1h
1  6672	    13D7  CB FF				 DB 0cbh,0ffh
1  6673	    13D9  F5				 DB 0f5h
1  6674
1  6675	    13DA  D9			 L0E66:	 DB 0d9h
1  6676	    13DB  01				 DB 01h
1  6677	    13DC  06CF				 DW   6CFH		 ; 1.3165249759E-01
1  6678	    13DE  11				 DB 11h
1  6679	    13DF  E98E				 DW 0E98EH
1  6680	    13E1  21				 DB 21h
1  6681	    13E2  4A7E				 DW  4A7EH
1  6682	    13E4  D9				 DB 0d9h
1  6683	    13E5  CD				 DB 0cdh
1  6684	    13E6  1153r				 DW  L0BDF		 ; Compare REALS
1  6685	    13E8  30 05				 DB 30h,(L0E7B)-$-1
1  6686
1  6687	    13EA  CD				 DB 0cdh
1  6688	    13EB  14A2r				 DW  L0F2E
1  6689	    13ED  18 4F				 DB 18h,( L0ECA)-$-1
1  6690
1  6691	    13EF  DD 21			 L0E7B:	 DB 0ddh,21h
1  6692	    13F1  1442r				 DW L0EE0-18
1  6693	    13F3  3E 02				 DB 3eh,2
1  6694	    13F5  08			 L0E81:	 DB 08h
1  6695	    13F6  D9				 DB 0d9h
1  6696	    13F7  11				 DB 11h
1  6697	    13F8  0012				 DW 18
1  6698	    13FA  DD 19				 DB 0ddh,019h
1  6699	    13FC  CD				 DB 0cdh
1  6700	    13FD  14E7r				 DW  L0F73		 ; get REAL at address IX
1  6701	    13FF  D9				 DB 0d9h
1  6702	    1400  CD				 DB 0cdh
1  6703	    1401  1153r				 DW  L0BDF		 ; Compare REALS
1  6704	    1403  38 0B				 DB 38h,(L0E9C)-$-1
1  6705	    1405  08				 DB 08h
1  6706	    1406  3D				 DB 3dh
1  6707	    1407  20 EC				 DB 20h,(L0E81)-$-1
1  6708	    1409  D9				 DB 0d9h
1  6709	    140A  11				 DB 11h
1  6710	    140B  000C				 DW 12
1  6711	    140D  DD 19				 DB 0ddh,019h
1  6712	    140F  D9				 DB 0d9h
1  6713
1  6714	    1410  D9			 L0E9C:	 DB 0d9h
1  6715	    1411  CD				 DB 0cdh
1  6716	    1412  14E2r				 DW  L0F6E		 ; get REAL at address IX+6
1  6717	    1414  CB F8				 DB 0cbh,0f8h
1  6718	    1416  CD				 DB 0cdh
1  6719	    1417  0F36r				 DW  L0A0D
1  6720	    1419  C5				 DB 0c5h
1  6721	    141A  D5				 DB 0d5h
1  6722	    141B  E5				 DB 0e5h
1  6723	    141C  CD				 DB 0cdh
1  6724	    141D  14E7r				 DW  L0F73		 ; get REAL at address IX
1  6725	    141F  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 119
msx_asm\rtl_rtl.ASM



1  6726	    1420  0FC0r				 DW  L0A97
1  6727	    1422  D9				 DB 0d9h
1  6728	    1423  CD				 DB 0cdh
1  6729	    1424  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6730	    1426  CD				 DB 0cdh
1  6731	    1427  0F36r				 DW  L0A0D
1  6732	    1429  D9				 DB 0d9h
1  6733	    142A  E1				 DB 0e1h
1  6734	    142B  D1				 DB 0d1h
1  6735	    142C  C1				 DB 0c1h
1  6736	    142D  CD				 DB 0cdh
1  6737	    142E  1037r				 DW  L0AF5
1  6738	    1430  DD E5				 DB 0ddh,0e5h
1  6739	    1432  CD				 DB 0cdh
1  6740	    1433  14A2r				 DW  L0F2E
1  6741	    1435  DD E1				 DB 0ddh,0e1h
1  6742	    1437  D9				 DB 0d9h
1  6743	    1438  CD				 DB 0cdh
1  6744	    1439  14E2r				 DW  L0F6E		 ; get REAL at address IX+6
1  6745	    143B  CD				 DB 0cdh
1  6746	    143C  0F36r				 DW  L0A0D
1  6747
1  6748	    143E  F1			 L0ECA:	 DB 0f1h
1  6749	    143F  17				 DB 17h
1  6750	    1440  30 0A				 DB 30h,(L0ED8)-$-1
1  6751
1  6752	    1442  F5			 L0ECE:	 DB 0f5h
1  6753	    1443  D9				 DB 0d9h
1  6754	    1444  CD				 DB 0cdh
1  6755	    1445  1502r				 DW  L0F8E		 ; get REAL PI
1  6756	    1447  2D				 DB 2dh
1  6757	    1448  CD				 DB 0cdh
1  6758	    1449  0FAAr				 DW  L0A81
1  6759	    144B  F1				 DB 0f1h
1  6760
1  6761	    144C  DD E1			 L0ED8:	 DB 0ddh,0e1h
1  6762	    144E  CB 4F				 DB 0cbh,04fh
1  6763	    1450  C8				 DB 0c8h
1  6764	    1451  CB F8				 DB 0cbh,0f8h
1  6765	    1453  C9				 DB 0c9h
1  6766
1  6767
1  6768
1  6769	    1454  7F E7	CF CC 13 54	 L0EE0:	 DB 7FH,0E7H,0CFH,0CCH,	13H, 54H ; 2.4142135624E+00
1  6770	    145A  7F F6	F4 A2 30 09		 DB 7FH,0F6H,0F4H,0A2H,	30H,  9	 ; TAN(PI/12)
1  6771	    1460  7F 6A	C1 91 0A 06		 DB 7FH, 6AH,0C1H, 91H,	0AH,  6	 ; 3.8197186342E+00
1  6772	    1466  80 B5	9E 8A 6F 44		 DB 80H,0B5H, 9EH, 8AH,	6FH, 44H ; 1.3032253728E+00
1  6773	    146C  80 82	2C 3A CD 13		 DB 80H, 82H, 2CH, 3AH,0CDH, 13H ; TAN(PI/6)
1  6774	    1472  80 6A	C1 91 0A 06		 DB 80H, 6AH,0C1H, 91H,	0AH,  6	 ; PI/6
1  6775	    1478  81 00	00 00 00 00		 DB 81H, 0,   0,  0,   0,   0	 ; 1.0
1  6776
1  6777	    147E  80 21	A2 DA 0F 49	 L0F0A:	 DB 80H, 21H,0A2H,0DAH,	0FH, 49H ; PI/4
1  6778
1  6779	    1484  7D E8	A2 8B 2E BA	 L0F10:	 DB 7DH,0E8H,0A2H, 8BH,	2EH,0BAH ; -1 /	11.0
1  6780	    148A  7D 8E	E3 38 8E 63		 DB 7DH, 8EH,0E3H, 38H,	8EH, 63H ;  1 /	 9.0
1  6781	    1490  7E 49	92 24 49 92		 DB 7EH, 49H, 92H, 24H,	49H, 92H ; -1 /	 7.0
1  6782	    1496  7E CD	CC CC CC 4C		 DB 7EH,0CDH,0CCH,0CCH,0CCH, 4CH ;  1 /	 5.0
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 120
msx_asm\rtl_rtl.ASM



1  6783	    149C  7F AB	AA AA AA AA		 DB 7FH,0ABH,0AAH,0AAH,0AAH,0AAH ; -1 /	 3.0
1  6784
1  6785	    14A2  DD 21			 L0F2E:	 DB 0ddh,21h
1  6786	    14A4  147Er				 DW L0F10-6
1  6787
1  6788	    14A6  3E 05				 DB 3eh,5			 ; 5 iteration for a accurate result
1  6789	    14A8  C5			 L0F34:	 DB 0c5h
1  6790	    14A9  D5				 DB 0d5h
1  6791	    14AA  E5				 DB 0e5h
1  6792	    14AB  F5				 DB 0f5h
1  6793	    14AC  CD				 DB 0cdh
1  6794	    14AD  1520r				 DW  L0FAC
1  6795	    14AF  CD				 DB 0cdh
1  6796	    14B0  0FC0r				 DW  L0A97
1  6797	    14B2  F1				 DB 0f1h
1  6798	    14B3  CD				 DB 0cdh
1  6799	    14B4  14BDr				 DW  L0F49
1  6800	    14B6  D9				 DB 0d9h
1  6801	    14B7  E1				 DB 0e1h
1  6802	    14B8  D1				 DB 0d1h
1  6803	    14B9  C1				 DB 0c1h
1  6804	    14BA  C3				 DB 0c3h
1  6805	    14BB  0FC0r				 DW  L0A97
1  6806
1  6807	    14BD  F5			 L0F49:	 DB 0f5h
1  6808	    14BE  D9				 DB 0d9h
1  6809	    14BF  CD				 DB 0cdh
1  6810	    14C0  14E2r				 DW  L0F6E		 ; get REAL at address IX+6
1  6811	    14C2  18 10				 DB 18h,( L0F60)-$-1
1  6812
1  6813	    14C4  F5			 L0F50:	 DB 0f5h
1  6814	    14C5  D9				 DB 0d9h
1  6815	    14C6  C5				 DB 0c5h
1  6816	    14C7  D5				 DB 0d5h
1  6817	    14C8  E5				 DB 0e5h
1  6818	    14C9  CD				 DB 0cdh
1  6819	    14CA  14E2r				 DW  L0F6E		 ; get REAL at address IX+6
1  6820	    14CC  CD				 DB 0cdh
1  6821	    14CD  0F36r				 DW  L0A0D
1  6822	    14CF  D9				 DB 0d9h
1  6823	    14D0  E1				 DB 0e1h
1  6824	    14D1  D1				 DB 0d1h
1  6825	    14D2  C1				 DB 0c1h
1  6826	    14D3  D9				 DB 0d9h
1  6827	    14D4  CD			 L0F60:	 DB 0cdh
1  6828	    14D5  0FC0r				 DW  L0A97
1  6829	    14D7  F1				 DB 0f1h
1  6830	    14D8  3D				 DB 3dh
1  6831	    14D9  20 E9				 DB 20h,(L0F50)-$-1
1  6832	    14DB  D9				 DB 0d9h
1  6833	    14DC  CD				 DB 0cdh
1  6834	    14DD  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6835	    14DF  C3				 DB 0c3h
1  6836	    14E0  0F36r				 DW  L0A0D
1  6837
1  6838	    14E2			 L0F6E:	 ; get REAL at address IX+6
1  6839	    14E2  11				 DB 11h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 121
msx_asm\rtl_rtl.ASM



1  6840	    14E3  0006				 DW 6
1  6841	    14E5  DD 19				 DB 0ddh,019h
1  6842
1  6843	    14E7			 L0F73:	 ; in:	 IX = address of REAL
1  6844						 ; out:	 HLDEBC	= REAL located at address IX
1  6845						 ;	 IX unchanged
1  6846	    14E7  DD 6E	00			 DB 0ddh,6eh,+0
1  6847	    14EA  DD 66	01			 DB 0ddh,66h,+1
1  6848	    14ED  DD 5E	02			 DB 0ddh,5eh,+2
1  6849	    14F0  DD 56	03			 DB 0ddh,56h,+3
1  6850	    14F3  DD 4E	04			 DB 0ddh,4eh,+4
1  6851	    14F6  DD 46	05			 DB 0ddh,46h,+5
1  6852	    14F9  C9				 DB 0c9h
1  6853
1  6854	    14FA  21			 L0F86:	 DB 21h
1  6855	    14FB  0081				 DW 81H		 ; 1.0
1  6856	    14FD  44				 DB 44h
1  6857	    14FE  4C				 DB 4ch
1  6858	    14FF  54				 DB 54h
1  6859	    1500  5C				 DB 5ch
1  6860	    1501  C9				 DB 0c9h
1  6861
1  6862	    1502  01			 L0F8E:	 DB 01h
1  6863	    1503  490F				 DW  490FH		 ; PI
1  6864	    1505  11				 DB 11h
1  6865	    1506  DAA2				 DW 0DAA2H
1  6866	    1508  21				 DB 21h
1  6867	    1509  2182				 DW  2182H
1  6868	    150B  C9				 DB 0c9h
1  6869
1  6870	    150C  01			 L0F98:	 DB 01h
1  6871	    150D  3504				 DW  3504H		 ; sqrt(2)
1  6872	    150F  11				 DB 11h
1  6873	    1510  F333				 DW 0F333H
1  6874	    1512  21				 DB 21h
1  6875	    1513  FA81				 DW 0FA81H
1  6876	    1515  C9				 DB 0c9h
1  6877
1  6878	    1516  01			 L0FA2:	 DB 01h
1  6879	    1517  3172				 DW  3172H		 ; ln(2)
1  6880	    1519  11				 DB 11h
1  6881	    151A  17F7				 DW  17F7H
1  6882	    151C  21				 DB 21h
1  6883	    151D  D280				 DW 0D280H
1  6884	    151F  C9				 DB 0c9h
1  6885
1  6886	    1520  C5			 L0FAC:	 DB 0c5h
1  6887	    1521  D5				 DB 0d5h
1  6888	    1522  E5				 DB 0e5h
1  6889	    1523  D9				 DB 0d9h
1  6890	    1524  E1				 DB 0e1h
1  6891	    1525  D1				 DB 0d1h
1  6892	    1526  C1				 DB 0c1h
1  6893	    1527  C9				 DB 0c9h
1  6894
1  6895
1  6896
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 122
msx_asm\rtl_rtl.ASM



1  6897						 GLOBALS L0FB4
2  6898
2  6899						  IRP NAME,<L0FB4>
2  6900							   GLOBAL2 <NAME>
2  6901						  ENDM
3  6902							   GLOBAL2 <L0FB4>
4  6903						  GLOBAL L0FB4 : NEAR
4  6904
4  6905						  GLOBAL _L0FB4	: NEAR
4  6906	    1528			 _L0FB4:
4  6907
2  6908
1  6909	    1528			 L0FB4:	 ; FUNCTION Random: REAL;
1  6910	    1528  CD				 DB 0cdh
1  6911	    1529  0C25r				 DW  L0792		 ; LIB
1  6912	    152B  21				 DB 21h
1  6913	    152C  0080				 DW 80H
1  6914	    152E  3E 20				 DB 3eh,20H
1  6915	    1530  CB 78			 L0FBC:	 DB 0cbh,078h
1  6916	    1532  20 0D				 DB 20h,(L0FCD)-$-1
1  6917	    1534  CB 23				 DB 0cbh,23h
1  6918	    1536  CB 12				 DB 0cbh,12h
1  6919	    1538  CB 11				 DB 0cbh,11h
1  6920	    153A  CB 10				 DB 0cbh,10h
1  6921	    153C  2D				 DB 2dh
1  6922	    153D  3D				 DB 3dh
1  6923	    153E  20 F0				 DB 20h,(L0FBC)-$-1
1  6924	    1540  6F				 DB 6fh
1  6925
1  6926	    1541  CB B8			 L0FCD:	 DB 0cbh,0b8h
1  6927	    1543  C9				 DB 0c9h
1  6928
1  6929						 GLOBALS L0FD0
2  6930
2  6931						  IRP NAME,<L0FD0>
2  6932							   GLOBAL2 <NAME>
2  6933						  ENDM
3  6934							   GLOBAL2 <L0FD0>
4  6935						  GLOBAL L0FD0 : NEAR
4  6936
4  6937						  GLOBAL _L0FD0	: NEAR
4  6938	    1544			 _L0FD0:
4  6939
2  6940
1  6941	    1544  CB 78			 L0FD0:	 DB 0cbh,078h			 ; LIB
1  6942	    1546  D9				 DB 0d9h
1  6943	    1547  CD				 DB 0cdh
1  6944	    1548  14FAr				 DW  L0F86		 ; get REAL 1.0
1  6945	    154A  28 02				 DB 28h,(L0FDA)-$-1
1  6946	    154C  CB F8				 DB 0cbh,0f8h
1  6947	    154E  2D			 L0FDA:	 DB 2dh
1  6948	    154F  CD				 DB 0cdh
1  6949	    1550  0F36r				 DW  L0A0D
1  6950
1  6951						 GLOBALS L0FDE
2  6952
2  6953						  IRP NAME,<L0FDE>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 123
msx_asm\rtl_rtl.ASM



2  6954							   GLOBAL2 <NAME>
2  6955						  ENDM
3  6956							   GLOBAL2 <L0FDE>
4  6957						  GLOBAL L0FDE : NEAR
4  6958
4  6959						  GLOBAL _L0FDE	: NEAR
4  6960	    1552			 _L0FDE:
4  6961
2  6962
1  6963	    1552  B7			 L0FDE:	 DB 0b7h		 ; LIB,	convert	REAL HLDEBC to int HL
1  6964	    1553  CB 7D				 DB 0cbh,07dh
1  6965	    1555  28 1C				 DB 28h,(L0FFF)-$-1		 ; return HL = 0 if REAL = 0.0
1  6966
1  6967	    1557  CB 78				 DB 0cbh,078h
1  6968	    1559  08				 DB 08h
1  6969	    155A  CB F8				 DB 0cbh,0f8h
1  6970	    155C  3E 8F			 L0FE8:	 DB 3eh,8FH
1  6971	    155E  BD				 DB 0bdh
1  6972	    155F  38 16				 DB 38h,(L1003)-$-1
1  6973	    1561  28 06				 DB 28h,(L0FF5)-$-1
1  6974	    1563  CD				 DB 0cdh
1  6975	    1564  10EEr				 DW  L0B7A
1  6976	    1566  2C				 DB 2ch
1  6977	    1567  18 F3				 DB 18h,( L0FE8)-$-1
1  6978
1  6979	    1569  CD			 L0FF5:	 DB 0cdh
1  6980	    156A  10EEr				 DW  L0B7A
1  6981	    156C  08				 DB 08h
1  6982	    156D  60				 DB 60h
1  6983	    156E  69				 DB 69h
1  6984	    156F  C8				 DB 0c8h
1  6985	    1570  C3				 DB 0c3h
1  6986	    1571  09E5r				 DW  L0783		 ; negate HL
1  6987
1  6988	    1573  21			 L0FFF:	 DB 21h
1  6989	    1574  0000				 DW 0
1  6990	    1576  C9				 DB 0c9h
1  6991
1  6992	    1577  3E 92			 L1003:	 DB 3eh,92H		 ; r.error 92H:	Out of INTEGER range
1  6993	    1579  C3				 DB 0c3h
1  6994	    157A  2738r				 DW  L2027		 ; Run-time error
1  6995
1  6996
1  6997	    157C  3E 93			 L10031: DB 3eh,93H		 ; r.error 93H:	Out of LONGINT range
1  6998	    157E  C3				 DB 0c3h
1  6999	    157F  2738r				 DW  L2027
1  7000
1  7001						 GLOBALS L1008
2  7002
2  7003						  IRP NAME,<L1008>
2  7004							   GLOBAL2 <NAME>
2  7005						  ENDM
3  7006							   GLOBAL2 <L1008>
4  7007						  GLOBAL L1008 : NEAR
4  7008
4  7009						  GLOBAL _L1008	: NEAR
4  7010	    1581			 _L1008:
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 124
msx_asm\rtl_rtl.ASM



4  7011
2  7012
1  7013	    1581  7C			 L1008:	 DB 7ch			 ; LIB,	convert	integer	HL to REAL HLDEBC
1  7014	    1582  B5				 DB 0b5h
1  7015	    1583  CA				 DB 0cah
1  7016	    1584  10E6r				 DW L0B72		 ; return 0.0 REAL if HL = 0
1  7017
1  7018	    1586  CB 7C				 DB 0cbh,07ch
1  7019	    1588  08				 DB 08h			 ; save	NZ for negative
1  7020
1  7021	    1589  CD				 DB 0cdh
1  7022	    158A  09E2r				 DW  L0780		 ; absolute HL
1  7023
1  7024	    158C  3E 90				 DB 3eh,90H
1  7025
1  7026						 ; shift, normalization
1  7027	    158E  29			 L1015:	 DB 029h
1  7028	    158F  3D				 DB 3dh
1  7029	    1590  CB 7C				 DB 0cbh,07ch
1  7030	    1592  28 FA				 DB 28h,(L1015)-$-1
1  7031
1  7032	    1594  44				 DB 44h			 ; BC =	integer, bit 7 of B always '1'
1  7033	    1595  4D				 DB 4dh
1  7034	    1596  11				 DB 11h
1  7035	    1597  0000				 DW 0			 ; D = E = 0
1  7036	    1599  62				 DB 62h			 ; H = 0
1  7037	    159A  6F				 DB 6fh
1  7038
1  7039	    159B  08				 DB 08h
1  7040	    159C  C0				 DB 0c0h		 ; keep	bit 7 of B '1' if negative
1  7041
1  7042	    159D  CB B8				 DB 0cbh,0b8h			 ; no, make if positive
1  7043	    159F  C9				 DB 0c9h
1  7044
1  7045						 GLOBALS L_R
2  7046
2  7047						  IRP NAME,<L_R>
2  7048							   GLOBAL2 <NAME>
2  7049						  ENDM
3  7050							   GLOBAL2 <L_R>
4  7051						  GLOBAL L_R : NEAR
4  7052
4  7053						  GLOBAL _L_R :	NEAR
4  7054	    15A0			 _L_R:
4  7055
2  7056
1  7057	    15A0			 L_R:	 ; convert LONGINT DEHL	to REAL	HLDEBC
1  7058						 ; in:	 DEHL =	signed LONGINT
1  7059						 ; out:	 HLDEBC	= REAL
1  7060	    15A0  7C				 DB 7ch
1  7061	    15A1  B5				 DB 0b5h
1  7062	    15A2  B2				 DB 0b2h
1  7063	    15A3  B3				 DB 0b3h
1  7064	    15A4  CA				 DB 0cah
1  7065	    15A5  10E6r				 DW L0B72		 ; jump	if long	is zero
1  7066
1  7067	    15A7  CB 7A				 DB 0cbh,07ah			 ; is this long	negative ?
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 125
msx_asm\rtl_rtl.ASM



1  7068	    15A9  F5				 DB 0f5h		 ; rember this
1  7069	    15AA  C4				 DB 0c4h
1  7070	    15AB  0A64r				 DW L_NEG		 ; make	positive if long is negative
1  7071	    15AD  3E A0				 DB 3eh,0A0H
1  7072
1  7073						 ; perform normalization
1  7074	    15AF  29			 L_R_SH: DB 029h
1  7075	    15B0  EB				 DB 0ebh
1  7076	    15B1  ED 6A				 DB 0EDH,06ah
1  7077	    15B3  EB				 DB 0ebh
1  7078	    15B4  3D				 DB 3dh
1  7079	    15B5  CB 7A				 DB 0cbh,07ah
1  7080	    15B7  28 F6				 DB 28h,(L_R_SH)-$-1		 ; shift until bit 31 =	'1'
1  7081
1  7082	    15B9  EB				 DB 0ebh		 ; HL:DE = normalized mantissa
1  7083	    15BA  44				 DB 44h
1  7084	    15BB  4D				 DB 4dh
1  7085	    15BC  26 00				 DB 26h,0
1  7086	    15BE  6F				 DB 6fh			 ; exponent + 81H in A
1  7087	    15BF  F1				 DB 0f1h		 ; ZeroFlag = 0	if long	was negative
1  7088	    15C0  C0				 DB 0c0h		 ; if negative then leave bit 7	of B '1'
1  7089
1  7090	    15C1  CB B8				 DB 0cbh,0b8h
1  7091	    15C3  C9				 DB 0c9h
1  7092
1  7093						 GLOBALS R_L
2  7094
2  7095						  IRP NAME,<R_L>
2  7096							   GLOBAL2 <NAME>
2  7097						  ENDM
3  7098							   GLOBAL2 <R_L>
4  7099						  GLOBAL R_L : NEAR
4  7100
4  7101						  GLOBAL _R_L :	NEAR
4  7102	    15C4			 _R_L:
4  7103
2  7104
1  7105	    15C4			 R_L:	 ; convert LONGINT DEHL	to REAL	HLDEBC
1  7106						 ; in:	 HLDEBC	= REAL
1  7107						 ; out:	 DEHL =	signed LONGINT
1  7108	    15C4  CB 7D				 DB 0cbh,07dh			 ; exponent < 80H then float = 0.0
1  7109									 ; in other words float	< 1.0
1  7110	    15C6  CA				 DB 0cah
1  7111	    15C7  10E6r				 DW L0B72		 ; return DEHL = 0 if REAL < 1.0
1  7112
1  7113	    15C9  CB 78				 DB 0cbh,078h			 ; ZeroFlag = 0	if REAL	is negative
1  7114	    15CB  F5				 DB 0f5h		 ; save	sign of	REAL
1  7115
1  7116	    15CC  CB F8				 DB 0cbh,0f8h			 ; restore hidden bit
1  7117
1  7118	    15CE  3E 9F			 R_L_SH: DB 3eh,9FH
1  7119	    15D0  BD				 DB 0bdh		 ; more	than 31	bits before the	comma
1  7120	    15D1  38 A9				 DB 38h,(L10031)-$-1		 ; r.error 93H:	Out of LONGINT range
1  7121
1  7122	    15D3  28 0D				 DB 28h,(R_L_READY)-$-1		 ; jump	if no more shifts
1  7123	    15D5  CB 38				 DB 0cbh,38h
1  7124	    15D7  CB 19				 DB 0cbh,19h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 126
msx_asm\rtl_rtl.ASM



1  7125	    15D9  CB 1A				 DB 0cbh,1ah
1  7126	    15DB  CB 1B				 DB 0cbh,1bh
1  7127	    15DD  CB 1C				 DB 0cbh,1ch
1  7128	    15DF  2C				 DB 2ch
1  7129	    15E0  18 EC				 DB 18h,( R_L_SH)-$-1		 ; go for next possible	shift
1  7130
1  7131	    15E2			 R_L_READY:
1  7132	    15E2  CB 38				 DB 0cbh,38h
1  7133	    15E4  CB 19				 DB 0cbh,19h
1  7134	    15E6  CB 1A				 DB 0cbh,1ah
1  7135	    15E8  CB 1B				 DB 0cbh,1bh
1  7136	    15EA  CB 1C				 DB 0cbh,1ch
1  7137	    15EC  F1				 DB 0f1h		 ; restore sign	of REAL
1  7138	    15ED  60				 DB 60h
1  7139	    15EE  69				 DB 69h			 ; long	HLDE complete, if positive
1  7140	    15EF  EB				 DB 0ebh		 ; deliver in format DE:HL
1  7141
1  7142	    15F0  C8				 DB 0c8h		 ; return if float was positive
1  7143
1  7144	    15F1  C3				 DB 0c3h
1  7145	    15F2  0A64r				 DW  L_NEG		 ; make	long negative if REAL was negative
1  7146
1  7147	    15F4			 L1027:	 ; in:	 BCDEHL' = REAL	to convert to ASCII
1  7148						 ;	 HL = number of	digits after decimal point
1  7149	    15F4  CD				 DB 0cdh
1  7150	    15F5  06B5r				 DW  L04C8		 ; int to byte
1  7151	    15F7  EB				 DB 0ebh
1  7152	    15F8  1E 00				 DB 1eh,0
1  7153	    15FA  38 04				 DB 38h,(L1033)-$-1
1  7154	    15FC  FE 19				 DB 0feh, 19H
1  7155	    15FE  38 18				 DB 38h,(L104B)-$-1
1  7156
1  7157	    1600  1D			 L1033:	 DB 1dh
1  7158	    1601  CD				 DB 0cdh
1  7159	    1602  06B5r				 DW  L04C8		 ; int to byte
1  7160	    1604  D9				 DB 0d9h
1  7161	    1605  CB 78				 DB 0cbh,078h			 ; NonZero if REAL HLDEBC is negative
1  7162	    1607  D9				 DB 0d9h
1  7163	    1608  16 07				 DB 16h,7			 ; 7 digits if positive
1  7164	    160A  28 01				 DB 28h,(L1040)-$-1
1  7165
1  7166	    160C  14				 DB 14h			 ; no, 8 digits, sign included
1  7167
1  7168	    160D  92			 L1040:	 DB 092h		 ; subtract from total bytes of	space
1  7169	    160E  30 01				 DB 30h,(L1044)-$-1		 ; jump	if enough room
1  7170	    1610  AF				 DB 0afh
1  7171	    1611  FE 09			 L1044:	 DB 0feh, 9			 ; less	than 9 digits of space left ?
1  7172	    1613  38 02				 DB 38h,(L104A)-$-1		 ; yes,	jump
1  7173
1  7174	    1615  3E 09				 DB 3eh,9			 ; no, make it 9 digits	at the most
1  7175
1  7176	    1617  3C			 L104A:	 DB 3ch
1  7177
1  7178	    1618  57			 L104B:	 DB 57h
1  7179	    1619  D5				 DB 0d5h
1  7180	    161A  D9				 DB 0d9h
1  7181	    161B  FD 21				 DB 0fdh,21h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 127
msx_asm\rtl_rtl.ASM



1  7182	    161D  0129r				 DW L005D		 ; destination for ascii-float
1  7183	    161F  DD E5				 DB 0ddh,0e5h
1  7184	    1621  CD				 DB 0cdh
1  7185	    1622  16B8r				 DW  L10EB		 ; convert HLDEBC to ascii at IY
1  7186	    1624  DD E1				 DB 0ddh,0e1h
1  7187	    1626  D1				 DB 0d1h
1  7188	    1627  4F				 DB 4fh
1  7189	    1628  7A				 DB 7ah
1  7190	    1629  3C				 DB 3ch
1  7191	    162A  CB 7B				 DB 0cbh,07bh
1  7192	    162C  20 10				 DB 20h,(L1071)-$-1
1  7193	    162E  81				 DB 081h
1  7194	    162F  F2				 DB 0f2h
1  7195	    1630  1638r				 DW L106B
1  7196
1  7197	    1632  FD 36	00 00			 DB 0fdh,36h,+0,0
1  7198	    1636  18 0B				 DB 18h,( L1076)-$-1
1  7199
1  7200	    1638  FE 0C			 L106B:	 DB 0feh, 0CH
1  7201	    163A  38 02				 DB 38h,(L1071)-$-1
1  7202
1  7203	    163C  3E 0B				 DB 3eh,0BH
1  7204
1  7205	    163E  D5			 L1071:	 DB 0d5h
1  7206	    163F  CD				 DB 0cdh
1  7207	    1640  174Dr				 DW  L1180
1  7208	    1642  D1				 DB 0d1h
1  7209	    1643  CB 78			 L1076:	 DB 0cbh,078h
1  7210	    1645  28 05				 DB 28h,(L107F)-$-1
1  7211
1  7212	    1647  3E 2D				 DB 3eh,'-'
1  7213	    1649  CD				 DB 0cdh
1  7214	    164A  16B2r				 DW  L10E5		 ; add '-' at (IX+0)
1  7215
1  7216	    164C  CB 7B			 L107F:	 DB 0cbh,07bh
1  7217	    164E  28 03				 DB 28h,(L1086)-$-1
1  7218	    1650  61				 DB 61h
1  7219	    1651  0E 00				 DB 0eh,0
1  7220	    1653  CB 79			 L1086:	 DB 0cbh,079h
1  7221	    1655  28 05				 DB 28h,(L108F)-$-1
1  7222
1  7223	    1657  CD				 DB 0cdh
1  7224	    1658  16B0r				 DW  L10E3		 ; add '0' at (IX+0)
1  7225	    165A  18 07				 DB 18h,( L1096)-$-1
1  7226
1  7227	    165C  CD			 L108F:	 DB 0cdh
1  7228	    165D  16A6r				 DW  L10D9
1  7229	    165F  0D				 DB 0dh
1  7230	    1660  F2				 DB 0f2h
1  7231	    1661  165Cr				 DW L108F
1  7232
1  7233	    1663  7A			 L1096:	 DB 7ah
1  7234	    1664  B7				 DB 0b7h
1  7235	    1665  28 17				 DB 28h,(L10B1)-$-1
1  7236
1  7237	    1667  3E 2E				 DB 3eh,'.'
1  7238	    1669  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 128
msx_asm\rtl_rtl.ASM



1  7239	    166A  16B2r				 DW  L10E5		 ; add '.' at (IX+0)
1  7240
1  7241	    166C  0C			 L109F:	 DB 0ch
1  7242	    166D  28 06				 DB 28h,(L10A8)-$-1
1  7243
1  7244	    166F  CD				 DB 0cdh
1  7245	    1670  16B0r				 DW  L10E3		 ; add '0' at (IX+0)
1  7246	    1672  15				 DB 15h
1  7247	    1673  20 F7				 DB 20h,(L109F)-$-1
1  7248	    1675  15			 L10A8:	 DB 15h
1  7249	    1676  FA				 DB 0fah
1  7250	    1677  167Er				 DW L10B1
1  7251	    1679  CD				 DB 0cdh
1  7252	    167A  16A6r				 DW  L10D9
1  7253	    167C  18 F7				 DB 18h,( L10A8)-$-1
1  7254
1  7255	    167E  CB 7B			 L10B1:	 DB 0cbh,07bh
1  7256	    1680  C8				 DB 0c8h
1  7257
1  7258	    1681  3E 45				 DB 3eh,'E'
1  7259	    1683  CD				 DB 0cdh
1  7260	    1684  16B2r				 DW  L10E5		 ; add 'E' at (IX+0)
1  7261
1  7262	    1686  3E 2B				 DB 3eh,'+'		      ;	add '+'
1  7263	    1688  CB 7C				 DB 0cbh,07ch
1  7264	    168A  28 06				 DB 28h,(L10C5)-$-1
1  7265	    168C  7C				 DB 7ch
1  7266	    168D  ED 44				 DB 0edh,44h
1  7267	    168F  67				 DB 67h
1  7268
1  7269	    1690  3E 2D				 DB 3eh,'-'
1  7270	    1692  CD			 L10C5:	 DB 0cdh
1  7271	    1693  16B2r				 DW  L10E5		 ; add '+' or '-' at (IX+0)
1  7272	    1695  7C				 DB 7ch
1  7273	    1696  06 2F				 DB 06h,'0'-1
1  7274
1  7275	    1698  04			 L10CB:	 DB 04h
1  7276	    1699  D6 0A				 DB 0d6h, 10
1  7277	    169B  30 FB				 DB 30h,(L10CB)-$-1
1  7278
1  7279	    169D  C6 3A				 DB 0c6h,'0'+10
1  7280	    169F  DD 70	00			 DB 0ddh,70h,+0
1  7281	    16A2  DD 23				 DB 0ddh,23h
1  7282	    16A4  18 0C				 DB 18h,( L10E5)-$-1
1  7283
1  7284	    16A6  FD 7E	00		 L10D9:	 DB 0fdh,7eh,+0
1  7285	    16A9  FD 23				 DB 0fdh,23h
1  7286	    16AB  B7				 DB 0b7h
1  7287	    16AC  20 04				 DB 20h,(L10E5)-$-1
1  7288
1  7289	    16AE  FD 2B				 DB 0fdh,2bh
1  7290
1  7291	    16B0  3E 30			 L10E3:	 DB 3eh,'0'
1  7292	    16B2  DD 77	00		 L10E5:	 DB 0ddh,77h,+0
1  7293	    16B5  DD 23				 DB 0ddh,23h
1  7294	    16B7  C9				 DB 0c9h
1  7295
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 129
msx_asm\rtl_rtl.ASM



1  7296	    16B8			 L10EB:	 ; in:	 IY = destination address for REAL in ASCII format
1  7297						 ;	 HLDEBC	= REAL
1  7298	    16B8  FD E5				 DB 0fdh,0e5h
1  7299	    16BA  2C				 DB 2ch			 ; REAL	represents zero?
1  7300	    16BB  2D				 DB 2dh
1  7301	    16BC  20 0E				 DB 20h,(L10FF)-$-1		 ; no, continue
1  7302
1  7303						 ; fill	destination address at IY with 12 '0' characters
1  7304	    16BE  06 0C				 DB 06h,12
1  7305	    16C0  FD 36	00 30		 L10F3:	 DB 0fdh,36h,+0,'0'
1  7306	    16C4  FD 23				 DB 0fdh,23h
1  7307	    16C6  10 F8				 DB 10h,( L10F3)-$-1
1  7308	    16C8  AF				 DB 0afh
1  7309	    16C9  C3				 DB 0c3h
1  7310	    16CA  174Ar				 DW  L117D		 ; jump	POP IY and RET
1  7311
1  7312	    16CC  C5			 L10FF:	 DB 0c5h
1  7313	    16CD  CB B8				 DB 0cbh,0b8h
1  7314	    16CF  7D				 DB 7dh
1  7315	    16D0  D9				 DB 0d9h
1  7316	    16D1  D6 80				 DB 0d6h, 80H
1  7317	    16D3  6F				 DB 6fh
1  7318	    16D4  9F				 DB 09fh		 ; A = 255, if L was < 80H, otherwise A	= 0
1  7319	    16D5  67				 DB 67h			 ; HL =	signed L - 80H = exponend
1  7320	    16D6  11				 DB 11h
1  7321	    16D7  004D				 DW 4DH
1  7322	    16D9  CD				 DB 0cdh
1  7323	    16DA  0911r				 DW  L06F5		 ; LIB
1  7324	    16DC  11				 DB 11h
1  7325	    16DD  0005				 DW 5
1  7326	    16DF  19				 DB 019h
1  7327	    16E0  7C				 DB 7ch
1  7328	    16E1  FE D9				 DB 0feh, 0D9H
1  7329	    16E3  20 01				 DB 20h,(L1119)-$-1
1  7330	    16E5  3C				 DB 3ch
1  7331	    16E6  FD 77	00		 L1119:	 DB 0fdh,77h,+0
1  7332	    16E9  ED 44				 DB 0edh,44h
1  7333	    16EB  CD				 DB 0cdh
1  7334	    16EC  180Dr				 DW  L1240
1  7335	    16EE  7D				 DB 7dh
1  7336	    16EF  FE 81				 DB 0feh, 81H
1  7337	    16F1  30 06				 DB 30h,(L112C)-$-1
1  7338	    16F3  CD				 DB 0cdh
1  7339	    16F4  1880r				 DW  L12B3
1  7340	    16F6  FD 35	00			 DB 0fdh,035h,+0
1  7341	    16F9  CB F8			 L112C:	 DB 0cbh,0f8h
1  7342	    16FB  3E 84				 DB 3eh,84H
1  7343	    16FD  95				 DB 095h
1  7344	    16FE  2E 00				 DB 2eh,0
1  7345	    1700  28 08				 DB 28h,(L113D)-$-1
1  7346	    1702  CD			 L1135:	 DB 0cdh
1  7347	    1703  10EEr				 DW  L0B7A
1  7348	    1705  CB 1D				 DB 0cbh,1dh
1  7349	    1707  3D				 DB 3dh
1  7350	    1708  20 F8				 DB 20h,(L1135)-$-1
1  7351	    170A  FD 7E	00		 L113D:	 DB 0fdh,7eh,+0
1  7352	    170D  F5				 DB 0f5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 130
msx_asm\rtl_rtl.ASM



1  7353	    170E  3E 0C				 DB 3eh,0CH
1  7354	    1710  08			 L1143:	 DB 08h
1  7355	    1711  78				 DB 78h
1  7356	    1712  1F				 DB 1fh
1  7357	    1713  1F				 DB 1fh
1  7358	    1714  1F				 DB 1fh
1  7359	    1715  1F				 DB 1fh
1  7360	    1716  E6 0F				 DB 0e6h, 0FH
1  7361	    1718  C6 30				 DB 0c6h,30H
1  7362	    171A  FD 77	00			 DB 0fdh,77h,+0
1  7363	    171D  FD 23				 DB 0fdh,23h
1  7364	    171F  78				 DB 78h
1  7365	    1720  E6 0F				 DB 0e6h, 0FH
1  7366	    1722  47				 DB 47h
1  7367	    1723  C5				 DB 0c5h
1  7368	    1724  D5				 DB 0d5h
1  7369	    1725  E5				 DB 0e5h
1  7370	    1726  CB 25				 DB 0cbh,25h
1  7371	    1728  CD				 DB 0cdh
1  7372	    1729  10FBr				 DW  L0B87
1  7373	    172B  CB 25				 DB 0cbh,25h
1  7374	    172D  CD				 DB 0cdh
1  7375	    172E  10FBr				 DW  L0B87
1  7376	    1730  EB				 DB 0ebh
1  7377	    1731  E3				 DB 0e3h
1  7378	    1732  19				 DB 019h
1  7379	    1733  D1				 DB 0d1h
1  7380	    1734  E3				 DB 0e3h
1  7381	    1735  ED 5A				 DB 0EDH,05ah
1  7382	    1737  EB				 DB 0ebh
1  7383	    1738  E1				 DB 0e1h
1  7384	    1739  E3				 DB 0e3h
1  7385	    173A  ED 4A				 DB 0EDH,04ah
1  7386	    173C  44				 DB 44h
1  7387	    173D  4D				 DB 4dh
1  7388	    173E  E1				 DB 0e1h
1  7389	    173F  CB 25				 DB 0cbh,25h
1  7390	    1741  CD				 DB 0cdh
1  7391	    1742  10FBr				 DW  L0B87
1  7392	    1744  08				 DB 08h
1  7393	    1745  3D				 DB 3dh
1  7394	    1746  20 C8				 DB 20h,(L1143)-$-1		 ; repeat until	ready with conversion
1  7395	    1748  F1				 DB 0f1h
1  7396	    1749  C1				 DB 0c1h
1  7397	    174A  FD E1			 L117D:	 DB 0fdh,0e1h
1  7398	    174C  C9				 DB 0c9h
1  7399
1  7400
1  7401						 ; ----------
1  7402						 ; subroutine
1  7403						 ; ----------
1  7404	    174D  FD E5			 L1180:	 DB 0fdh,0e5h
1  7405	    174F  E1				 DB 0e1h
1  7406	    1750  5F				 DB 5fh
1  7407	    1751  16 00				 DB 16h,0
1  7408	    1753  19				 DB 019h
1  7409	    1754  7E				 DB 7eh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 131
msx_asm\rtl_rtl.ASM



1  7410	    1755  36 00				 DB 36h,0
1  7411	    1757  FE 35				 DB 0feh, 35H
1  7412	    1759  D8				 DB 0d8h
1  7413
1  7414	    175A  1D			 L118D:	 DB 1dh
1  7415	    175B  FA				 DB 0fah
1  7416	    175C  1769r				 DW L119C
1  7417	    175E  2B				 DB 2bh
1  7418	    175F  7E				 DB 7eh
1  7419	    1760  3C				 DB 3ch
1  7420	    1761  77				 DB 77h
1  7421	    1762  FE 3A				 DB 0feh, 3AH
1  7422	    1764  D8				 DB 0d8h
1  7423	    1765  36 00				 DB 36h,0
1  7424	    1767  18 F1				 DB 18h,( L118D)-$-1
1  7425
1  7426	    1769  36 31			 L119C:	 DB 36h,31H
1  7427	    176B  23				 DB 23h
1  7428	    176C  36 00				 DB 36h,0
1  7429	    176E  0C				 DB 0ch
1  7430	    176F  C9				 DB 0c9h
1  7431						 ; ----------
1  7432
1  7433	    1770			 L11A3:	 ; converts ascii REAL at IX to	binary REAL in HLDEBC
1  7434						 ; in:	 IX = address of ascii REAL
1  7435						 ; out:	 carry set if conversion did not succeed
1  7436	    1770  D9				 DB 0d9h
1  7437	    1771  01				 DB 01h
1  7438	    1772  0000				 DW 0
1  7439	    1774  D9				 DB 0d9h
1  7440	    1775  CD				 DB 0cdh
1  7441	    1776  10E6r				 DW  L0B72		 ; HLDEBC = 0.0
1  7442
1  7443	    1778  DD 7E	00		 L11AB:	 DB 0ddh,7eh,+0
1  7444	    177B  CD				 DB 0cdh
1  7445	    177C  0691r				 DW  L04A6		 ; upcase
1  7446	    177E  FE 2E				 DB 0feh, '.'
1  7447	    1780  20 0C				 DB 20h,(L11C1)-$-1
1  7448
1  7449	    1782  D9				 DB 0d9h
1  7450	    1783  CB 70				 DB 0cbh,070h
1  7451	    1785  37				 DB 37h
1  7452	    1786  C0				 DB 0c0h
1  7453
1  7454	    1787  CB F0				 DB 0cbh,0f0h
1  7455	    1789  D9				 DB 0d9h
1  7456	    178A  DD 23			 L11BD:	 DB 0ddh,23h
1  7457	    178C  18 EA				 DB 18h,( L11AB)-$-1
1  7458
1  7459	    178E  FE 45			 L11C1:	 DB 0feh, 'E'
1  7460	    1790  28 21				 DB 28h,(L11E6)-$-1
1  7461
1  7462	    1792  CD				  DB 0cdh
1  7463	    1793  1806r				 DW  L1239
1  7464	    1795  30 54				 DB 30h,(L121E)-$-1
1  7465
1  7466	    1797  08				  DB 08h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 132
msx_asm\rtl_rtl.ASM



1  7467	    1798  CD				 DB 0cdh
1  7468	    1799  1880r				 DW  L12B3
1  7469	    179B  D8				 DB 0d8h
1  7470
1  7471	    179C  08				  DB 08h
1  7472	    179D  D9				 DB 0d9h
1  7473	    179E  C5				 DB 0c5h
1  7474
1  7475	    179F  6F				  DB 6fh
1  7476	    17A0  26 00				 DB 26h,0
1  7477	    17A2  CD				 DB 0cdh
1  7478	    17A3  1581r				 DW  L1008		 ; convert integer HL to REAL HLDEBC
1  7479	    17A5  CD				 DB 0cdh
1  7480	    17A6  0F12r				 DW  L09E9
1  7481
1  7482	    17A8  D9				 DB 0d9h
1  7483	    17A9  C1				 DB 0c1h
1  7484
1  7485	    17AA  D8				  DB 0d8h
1  7486
1  7487	    17AB  CB 70				  DB 0cbh,070h
1  7488	    17AD  28 01				 DB 28h,(L11E3)-$-1
1  7489
1  7490	    17AF  0D				 DB 0dh
1  7491
1  7492	    17B0  D9			 L11E3:	 DB 0d9h
1  7493	    17B1  18 D7				 DB 18h,( L11BD)-$-1
1  7494
1  7495	    17B3  CD			 L11E6:	 DB 0cdh
1  7496	    17B4  17EBr				 DW  L121E
1  7497	    17B6  D8				 DB 0d8h
1  7498
1  7499	    17B7  D9				 DB 0d9h
1  7500	    17B8  CB E0				 DB 0cbh,0e0h
1  7501	    17BA  DD 23				 DB 0ddh,23h
1  7502
1  7503	    17BC  DD 7E	00			 DB 0ddh,7eh,+0
1  7504
1  7505	    17BF  FE 2B				 DB 0feh, '+'
1  7506	    17C1  28 06				 DB 28h,(L11FC)-$-1		 ; jump	if '+',	ignore it
1  7507
1  7508	    17C3  FE 2D				 DB 0feh, '-'
1  7509	    17C5  20 04				 DB 20h,(L11FE)-$-1
1  7510
1  7511	    17C7  CB E8				 DB 0cbh,0e8h			 ; set bit 5 for negative
1  7512
1  7513	    17C9  DD 23			 L11FC:	 DB 0ddh,23h
1  7514	    17CB  CD			 L11FE:	 DB 0cdh
1  7515	    17CC  1803r				 DW  L1236		 ; check digit at (IX+0)
1  7516	    17CE  3F				 DB 3fh
1  7517	    17CF  D8				 DB 0d8h
1  7518
1  7519	    17D0  4F				 DB 4fh
1  7520	    17D1  DD 23				 DB 0ddh,23h
1  7521
1  7522	    17D3  CD				  DB 0cdh
1  7523	    17D4  1803r				 DW  L1236		   ; check digit at (IX+0)
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 133
msx_asm\rtl_rtl.ASM



1  7524	    17D6  30 0A				 DB 30h,(L1215)-$-1
1  7525
1  7526	    17D8  DD 23				 DB 0ddh,23h
1  7527	    17DA  57				 DB 57h
1  7528	    17DB  79				 DB 79h
1  7529	    17DC  87				 DB 087h
1  7530	    17DD  87				 DB 087h
1  7531	    17DE  81				 DB 081h
1  7532	    17DF  87				 DB 087h
1  7533	    17E0  82				 DB 082h
1  7534	    17E1  4F				 DB 4fh
1  7535
1  7536	    17E2  CB 68			 L1215:	 DB 0cbh,068h
1  7537	    17E4  28 04				 DB 28h,(L121D)-$-1
1  7538	    17E6  79				 DB 79h
1  7539	    17E7  ED 44				 DB 0edh,44h
1  7540	    17E9  4F				 DB 4fh
1  7541	    17EA  D9			 L121D:	 DB 0d9h
1  7542
1  7543	    17EB  D9			 L121E:	 DB 0d9h
1  7544	    17EC  79				 DB 79h
1  7545	    17ED  C6 80				 DB 0c6h,80H
1  7546	    17EF  FE 5A				 DB 0feh, 5AH
1  7547	    17F1  D8				 DB 0d8h
1  7548
1  7549	    17F2  FE A6				  DB 0feh, 0A6H
1  7550	    17F4  3F				 DB 3fh
1  7551	    17F5  D8				 DB 0d8h
1  7552
1  7553	    17F6  C5				  DB 0c5h
1  7554	    17F7  DD E5				 DB 0ddh,0e5h
1  7555
1  7556	    17F9  79				  DB 79h
1  7557	    17FA  CD				 DB 0cdh
1  7558	    17FB  180Dr				 DW  L1240
1  7559
1  7560	    17FD  DD E1				  DB 0ddh,0e1h
1  7561	    17FF  D9				 DB 0d9h
1  7562	    1800  C1				 DB 0c1h
1  7563	    1801  D9				 DB 0d9h
1  7564	    1802  C9				 DB 0c9h
1  7565
1  7566	    1803			 L1236:	 ; checks if byte at (IX+0)
1  7567
1  7568	    1803  DD 7E	00			 DB 0ddh,7eh,+0
1  7569
1  7570	    1806			 L1239:	 ; in:	 A = byte to check
1  7571						 ; out:	 A = 0 .. 9
1  7572						 ;	 C-flag	set if A is a correct digit
1  7573	    1806  D6 30				 DB 0d6h, '0'
1  7574	    1808  3F				 DB 3fh
1  7575	    1809  D0				 DB 0d0h
1  7576	    180A  FE 0A				 DB 0feh, 10
1  7577	    180C  C9				 DB 0c9h
1  7578
1  7579	    180D  F5			 L1240:	 DB 0f5h
1  7580	    180E  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 134
msx_asm\rtl_rtl.ASM



1  7581	    180F  F2				 DB 0f2h
1  7582	    1810  1814r				 DW L1247
1  7583	    1812  ED 44				 DB 0edh,44h
1  7584
1  7585	    1814  F5			 L1247:	 DB 0f5h
1  7586	    1815  CB 3F				 DB 0cbh,3fh
1  7587	    1817  CB 3F				 DB 0cbh,3fh
1  7588	    1819  3C				 DB 3ch
1  7589	    181A  21				 DB 21h
1  7590	    181B  FFFA				 DW -6
1  7591	    181D  11				 DB 11h
1  7592	    181E  0006				 DW 6
1  7593
1  7594	    1820  19			 L1253:	 DB 019h
1  7595	    1821  3D				 DB 3dh
1  7596	    1822  20 FC				 DB 20h,(L1253)-$-1
1  7597
1  7598	    1824  EB				  DB 0ebh
1  7599	    1825  DD 21				 DB 0ddh,21h
1  7600	    1827  1844r				 DW L1277
1  7601	    1829  DD 19				 DB 0ddh,019h
1  7602
1  7603	    182B  CD				  DB 0cdh
1  7604	    182C  14E7r				 DW  L0F73		   ; get REAL at address IX
1  7605
1  7606	    182E  F1				  DB 0f1h
1  7607	    182F  E6 03				 DB 0e6h, 3
1  7608	    1831  28 08				 DB 28h,(L126E)-$-1
1  7609
1  7610	    1833  F5			 L1266:	 DB 0f5h
1  7611	    1834  CD				 DB 0cdh
1  7612	    1835  1880r				 DW  L12B3
1  7613	    1837  F1				 DB 0f1h
1  7614	    1838  3D				 DB 3dh
1  7615	    1839  20 F8				 DB 20h,(L1266)-$-1
1  7616
1  7617	    183B  F1			 L126E:	 DB 0f1h
1  7618	    183C  B7				 DB 0b7h
1  7619	    183D  F2				 DB 0f2h
1  7620	    183E  0FC0r				 DW L0A97
1  7621	    1840  D9				 DB 0d9h
1  7622	    1841  C3				 DB 0c3h
1  7623	    1842  1037r				 DW  L0AF5
1  7624
1  7625	    1844  81 00	00 00 00 00	 L1277:	 DB  81H,  0 ,	0 ,  0 ,  0 ,  0 ; 1.0E+00
1  7626	    184A  8E 00	00 00 40 1C		 DB  8EH,  0 ,	0 ,  0 , 40H, 1CH	 ; 1.0E+04
1  7627	    1850  9B 00	00 20 BC 3E		 DB  9BH,  0 ,	0 , 20H,0BCH, 3EH	 ; 1.0E+08
1  7628	    1856  A8 00	10 A5 D4 68		 DB 0A8H,  0 , 10H,0A5H,0D4H, 68H	 ; 1.0E+12
1  7629	    185C  B6 04	BF C9 1B 0E		 DB 0B6H,  4 ,0BFH,0C9H, 1BH, 0EH	 ; 1.0E+16
1  7630	    1862  C3 AC	C5 EB 78 2D		 DB 0C3H,0ACH,0C5H,0EBH, 78H, 2DH	 ; 1.0E+20
1  7631	    1868  D0 CD	CE 1B C2 53		 DB 0D0H,0CDH,0CEH, 1BH,0C2H, 53H	 ; 1.0E+24
1  7632	    186E  DE F9	78 39 3F 01		 DB 0DEH,0F9H, 78H, 39H, 3FH,  1 ; 1.0E+28
1  7633	    1874  EB 2B	A8 AD C5 1D		 DB 0EBH, 2BH,0A8H,0ADH,0C5H, 1DH	 ; 1.0E+32
1  7634	    187A  F8 C9	7B CE 97 40		 DB 0F8H,0C9H, 7BH,0CEH, 97H, 40H	 ; 1.0E+36
1  7635
1  7636	    1880  7D			 L12B3:	 DB 7dh
1  7637	    1881  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 135
msx_asm\rtl_rtl.ASM



1  7638	    1882  C8				 DB 0c8h
1  7639
1  7640	    1883  CB F8				 DB 0cbh,0f8h
1  7641	    1885  C5				 DB 0c5h
1  7642	    1886  D5				 DB 0d5h
1  7643	    1887  7C				 DB 7ch
1  7644
1  7645	    1888  CD				 DB 0cdh
1  7646	    1889  10EEr				 DW  L0B7A
1  7647	    188B  CD				 DB 0cdh
1  7648	    188C  10EEr				 DW  L0B7A
1  7649
1  7650	    188E  84				 DB 084h
1  7651	    188F  67				 DB 67h
1  7652	    1890  E3				 DB 0e3h
1  7653	    1891  ED 5A				 DB 0EDH,05ah
1  7654	    1893  EB				 DB 0ebh
1  7655	    1894  E1				 DB 0e1h
1  7656	    1895  E3				 DB 0e3h
1  7657	    1896  ED 4A				 DB 0EDH,04ah
1  7658	    1898  44				 DB 44h
1  7659	    1899  4D				 DB 4dh
1  7660	    189A  E1				 DB 0e1h
1  7661	    189B  30 06				 DB 30h,(L12D6)-$-1
1  7662
1  7663	    189D  CD				 DB 0cdh
1  7664	    189E  10EFr				 DW  L0B7B
1  7665	    18A0  2C				 DB 2ch
1  7666	    18A1  37				 DB 37h
1  7667	    18A2  C8				 DB 0c8h
1  7668
1  7669	    18A3  7D			 L12D6:	 DB 7dh
1  7670	    18A4  C6 03				 DB 0c6h,3
1  7671	    18A6  6F				 DB 6fh
1  7672	    18A7  CB B8				 DB 0cbh,0b8h
1  7673	    18A9  C9				 DB 0c9h
1  7674
1  7675
1  7676
1  7677						 GLOBALS L12DD
2  7678
2  7679						  IRP NAME,<L12DD>
2  7680							   GLOBAL2 <NAME>
2  7681						  ENDM
3  7682							   GLOBAL2 <L12DD>
4  7683						  GLOBAL L12DD : NEAR
4  7684
4  7685						  GLOBAL _L12DD	: NEAR
4  7686	    18AA			 _L12DD:
4  7687
2  7688
1  7689	    18AA			 L12DD:	 ; SET <> SET ?
1  7690						 ; HL =	1, if true
1  7691						 ; HL =	0, if false
1  7692	    18AA  0E 01				 DB 0eh,1			 ; LIB
1  7693	    18AC  18 02				 DB 18h,( L12E3)-$-1
1  7694
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 136
msx_asm\rtl_rtl.ASM



1  7695						 GLOBALS L12E1
2  7696
2  7697						  IRP NAME,<L12E1>
2  7698							   GLOBAL2 <NAME>
2  7699						  ENDM
3  7700							   GLOBAL2 <L12E1>
4  7701						  GLOBAL L12E1 : NEAR
4  7702
4  7703						  GLOBAL _L12E1	: NEAR
4  7704	    18AE			 _L12E1:
4  7705
2  7706
1  7707	    18AE			 L12E1:	 ; SET = SET ?
1  7708						 ; HL =	1, if true
1  7709						 ; HL =	0, if false
1  7710	    18AE  0E 00				 DB 0eh,0			 ; LIB
1  7711
1  7712	    18B0  CD			 L12E3:	 DB 0cdh
1  7713	    18B1  190Cr				 DW  L133F
1  7714	    18B3  1A			 L12E6:	 DB 1ah
1  7715	    18B4  BE				 DB 0beh
1  7716	    18B5  20 08				 DB 20h,(L12F2)-$-1
1  7717
1  7718	    18B7  23				 DB 23h
1  7719	    18B8  13				 DB 13h
1  7720	    18B9  10 F8				 DB 10h,( L12E6)-$-1
1  7721
1  7722	    18BB  79				 DB 79h
1  7723	    18BC  EE 01				 DB 0eeh, 1
1  7724	    18BE  4F				 DB 4fh
1  7725
1  7726	    18BF			 L12F2:	 ; removes the two sets	from the stack
1  7727						 ; in:	 IX = return address
1  7728						 ;	 C = boolean value to return
1  7729						 ; out:	 HL = C
1  7730	    18BF  21				 DB 21h
1  7731	    18C0  0040				 DW 40H
1  7732	    18C2  39				 DB 039h
1  7733	    18C3  F9				 DB 0f9h		 ; remove the two sets from the	stack
1  7734	    18C4  69				 DB 69h			 ; 0 = false, 1	= true
1  7735	    18C5  26 00				 DB 26h,0
1  7736	    18C7  DD E9				 DB 0ddh,0e9h
1  7737
1  7738
1  7739
1  7740
1  7741						 GLOBALS L12FC
2  7742
2  7743						  IRP NAME,<L12FC>
2  7744							   GLOBAL2 <NAME>
2  7745						  ENDM
3  7746							   GLOBAL2 <L12FC>
4  7747						  GLOBAL L12FC : NEAR
4  7748
4  7749						  GLOBAL _L12FC	: NEAR
4  7750	    18C9			 _L12FC:
4  7751
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 137
msx_asm\rtl_rtl.ASM



2  7752
1  7753	    18C9			 L12FC:	 ; SET <= SET ?
1  7754						 ; HL =	1, if true
1  7755						 ; HL =	0, if false
1  7756	    18C9  0E 01				 DB 0eh,1			 ; LIB
1  7757	    18CB  18 02				 DB 18h,( L1302)-$-1
1  7758
1  7759						 GLOBALS L1300
2  7760
2  7761						  IRP NAME,<L1300>
2  7762							   GLOBAL2 <NAME>
2  7763						  ENDM
3  7764							   GLOBAL2 <L1300>
4  7765						  GLOBAL L1300 : NEAR
4  7766
4  7767						  GLOBAL _L1300	: NEAR
4  7768	    18CD			 _L1300:
4  7769
2  7770
1  7771	    18CD			 L1300:	 ; SET >= SET ?
1  7772						 ; HL =	1, if true
1  7773						 ; HL =	0, if false
1  7774	    18CD  0E 00				 DB 0eh,0			 ; LIB
1  7775
1  7776
1  7777
1  7778	    18CF  CD			 L1302:	 DB 0cdh
1  7779	    18D0  190Cr				 DW  L133F
1  7780	    18D2  0D				 DB 0dh
1  7781	    18D3  20 01				 DB 20h,(L1309)-$-1
1  7782	    18D5  EB				 DB 0ebh
1  7783
1  7784	    18D6  0E 00			 L1309:	 DB 0eh,0
1  7785
1  7786	    18D8  1A			 L130B:	 DB 1ah
1  7787	    18D9  B6				 DB 0b6h
1  7788	    18DA  BE				 DB 0beh
1  7789	    18DB  20 E2				 DB 20h,(L12F2)-$-1
1  7790	    18DD  23				 DB 23h
1  7791	    18DE  13				 DB 13h
1  7792	    18DF  10 F7				 DB 10h,( L130B)-$-1
1  7793	    18E1  0E 01				 DB 0eh,1
1  7794	    18E3  18 DA				 DB 18h,( L12F2)-$-1
1  7795
1  7796
1  7797
1  7798						 GLOBALS L1318
2  7799
2  7800						  IRP NAME,<L1318>
2  7801							   GLOBAL2 <NAME>
2  7802						  ENDM
3  7803							   GLOBAL2 <L1318>
4  7804						  GLOBAL L1318 : NEAR
4  7805
4  7806						  GLOBAL _L1318	: NEAR
4  7807	    18E5			 _L1318:
4  7808
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 138
msx_asm\rtl_rtl.ASM



2  7809
1  7810	    18E5			 L1318:	 ; LIB
1  7811	    18E5  CD				 DB 0cdh
1  7812	    18E6  190Cr				 DW  L133F		 ; LIB
1  7813
1  7814	    18E8  1A			 L131B:	 DB 1ah
1  7815	    18E9  B6				 DB 0b6h
1  7816	    18EA  77				 DB 77h
1  7817	    18EB  23				 DB 23h
1  7818	    18EC  13				 DB 13h
1  7819	    18ED  10 F9				 DB 10h,( L131B)-$-1
1  7820
1  7821
1  7822
1  7823	    18EF  EB			 L1322:	 DB 0ebh
1  7824	    18F0  F9				 DB 0f9h
1  7825	    18F1  DD E9				 DB 0ddh,0e9h
1  7826
1  7827
1  7828
1  7829						 GLOBALS L1326
2  7830
2  7831						  IRP NAME,<L1326>
2  7832							   GLOBAL2 <NAME>
2  7833						  ENDM
3  7834							   GLOBAL2 <L1326>
4  7835						  GLOBAL L1326 : NEAR
4  7836
4  7837						  GLOBAL _L1326	: NEAR
4  7838	    18F3			 _L1326:
4  7839
2  7840
1  7841	    18F3			 L1326:	 ; LIB
1  7842	    18F3  CD				 DB 0cdh
1  7843	    18F4  190Cr				 DW  L133F		 ; LIB
1  7844
1  7845	    18F6  1A			 L1329:	 DB 1ah
1  7846	    18F7  2F				 DB 2fh
1  7847	    18F8  A6				 DB 0a6h
1  7848	    18F9  77				 DB 77h
1  7849	    18FA  23				 DB 23h
1  7850	    18FB  13				 DB 13h
1  7851	    18FC  10 F8				 DB 10h,( L1329)-$-1
1  7852	    18FE  18 EF				 DB 18h,( L1322)-$-1
1  7853
1  7854						 GLOBALS L1333
2  7855
2  7856						  IRP NAME,<L1333>
2  7857							   GLOBAL2 <NAME>
2  7858						  ENDM
3  7859							   GLOBAL2 <L1333>
4  7860						  GLOBAL L1333 : NEAR
4  7861
4  7862						  GLOBAL _L1333	: NEAR
4  7863	    1900			 _L1333:
4  7864
2  7865
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 139
msx_asm\rtl_rtl.ASM



1  7866	    1900			 L1333:	 ; X * Y : SET
1  7867	    1900  CD				 DB 0cdh
1  7868	    1901  190Cr				 DW  L133F		 ; LIB
1  7869
1  7870	    1903  1A			 L1336:	 DB 1ah
1  7871	    1904  A6				 DB 0a6h
1  7872	    1905  77				 DB 77h
1  7873	    1906  23				 DB 23h
1  7874	    1907  13				 DB 13h
1  7875	    1908  10 F9				 DB 10h,( L1336)-$-1
1  7876	    190A  18 E3				 DB 18h,( L1322)-$-1
1  7877
1  7878
1  7879
1  7880	    190C			 L133F:	 ; in:	 2 sets	pushed at the stack
1  7881						 ; out:	 DE = address of second	pushed set
1  7882						 ;	 HL = address of first pushed set
1  7883						 ;	 IX = return address from routine that called this routine
1  7884	    190C  FD E1				 DB 0fdh,0e1h			 ; pop return address
1  7885	    190E  DD E1				 DB 0ddh,0e1h			 ; IX =	return address of main call !!!
1  7886	    1910  21				 DB 21h
1  7887	    1911  0000				 DW 0
1  7888	    1913  39				 DB 039h
1  7889	    1914  EB				 DB 0ebh		 ; DE =	address	of second pushed set
1  7890
1  7891	    1915  21				 DB 21h
1  7892	    1916  0020				 DW 20H		 ; HL =	length of set
1  7893	    1918  45				 DB 45h
1  7894	    1919  39				 DB 039h	 ; HL =	address	of first pushed	set
1  7895
1  7896	    191A  FD E9				 DB 0fdh,0e9h			 ; jump	to return address
1  7897
1  7898
1  7899
1  7900						 GLOBALS L134F
2  7901
2  7902						  IRP NAME,<L134F>
2  7903							   GLOBAL2 <NAME>
2  7904						  ENDM
3  7905							   GLOBAL2 <L134F>
4  7906						  GLOBAL L134F : NEAR
4  7907
4  7908						  GLOBAL _L134F	: NEAR
4  7909	    191C			 _L134F:
4  7910
2  7911
1  7912	    191C  DD E1			 L134F:	 DB 0ddh,0e1h			 ; LIB
1  7913	    191E  21				 DB 21h
1  7914	    191F  0021				 DW 21H
1  7915	    1921  39				 DB 039h
1  7916	    1922  7E				 DB 7eh
1  7917	    1923  B7				 DB 0b7h
1  7918	    1924  28 03				 DB 28h,(L135C)-$-1
1  7919	    1926  AF				 DB 0afh
1  7920	    1927  18 06				 DB 18h,( L1362)-$-1
1  7921
1  7922	    1929  2B			 L135C:	 DB 2bh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 140
msx_asm\rtl_rtl.ASM



1  7923	    192A  46				 DB 46h
1  7924	    192B  CD				 DB 0cdh
1  7925	    192C  07A5r				 DW  L05BA
1  7926	    192E  A6				 DB 0a6h
1  7927	    192F			 L1362:
1  7928					 ;!	 pushf
1  7929	    192F  21				 DB 21h
1  7930	    1930  0022				 DW 22H
1  7931	    1932  39				 DB 039h
1  7932	    1933  F9				 DB 0f9h
1  7933	    1934  21				 DB 21h
1  7934	    1935  0000				 DW 0
1  7935					 ;!	 popf
1  7936	    1937  28 01				 DB 28h,(L136D)-$-1
1  7937	    1939  23				 DB 23h
1  7938	    193A  DD E9			 L136D:	 DB 0ddh,0e9h
1  7939
1  7940						 GLOBALS L136F
2  7941
2  7942						  IRP NAME,<L136F>
2  7943							   GLOBAL2 <NAME>
2  7944						  ENDM
3  7945							   GLOBAL2 <L136F>
4  7946						  GLOBAL L136F : NEAR
4  7947
4  7948						  GLOBAL _L136F	: NEAR
4  7949	    193C			 _L136F:
4  7950
2  7951
1  7952	    193C			 L136F:	 ; assign (text	file, filename);
1  7953	    193C  3E				  DB 3Eh
1  7954					 ;	   LD A,0AFH		      ;	LIB, text file
1  7955					 ;	   JR L1371
1  7956
1  7957						 GLOBALS L1370
2  7958
2  7959						  IRP NAME,<L1370>
2  7960							   GLOBAL2 <NAME>
2  7961						  ENDM
3  7962							   GLOBAL2 <L1370>
4  7963						  GLOBAL L1370 : NEAR
4  7964
4  7965						  GLOBAL _L1370	: NEAR
4  7966	    193D			 _L1370:
4  7967
2  7968
1  7969	    193D			 L1370:	 ; assign (untyped/typed file, filename);
1  7970	    193D  AF				  DB 0afh		       ; LIB, untyped or typed file
1  7971					 ;L1371:
1  7972	    193E  32				  DB 32h
1  7973	    193F  01B2r				 DW L00E8
1  7974	    1941  FD E1				 DB 0fdh,0e1h			 ; save	return address
1  7975
1  7976	    1943  2A				  DB 02ah
1  7977	    1944  01A1r				 DW L00D2	       ; HL = destination address of string
1  7978					 ;	   LD B,10H		      ;	maximum	length of 16
1  7979	    1946  06 3F				  DB 06h,63		       ; maximum length	of 63
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 141
msx_asm\rtl_rtl.ASM



1  7980	    1948  CD				 DB 0cdh
1  7981	    1949  07CDr				 DW  L05E2		 ; LIB,	pop string from	stack
1  7982	    194B  AF				 DB 0afh
1  7983	    194C  12				 DB 12h		 ; fill	byte after string with 0
1  7984
1  7985	    194D  E1				 DB 0e1h
1  7986	    194E  22				  DB 22h
1  7987	    194F  01ACr				 DW L00E2	       ; save address of FIB
1  7988
1  7989	    1951  FD E5				 DB 0fdh,0e5h			 ; restore return address
1  7990
1  7991	    1953  7C				  DB 7ch		     ; std file	if address < 400h
1  7992	    1954  FE 04				  DB 0feh, 4			   ; HL	< 400h ?
1  7993	    1956  30 0B				  DB 30h,(L1390)-$-1		    ; jump if >= 400h
1  7994
1  7995	    1958  3E 22				 DB 3eh,22H
1  7996	    195A  32				 DB 32h
1  7997	    195B  01A0r				 DW L00D0		 ; IORESULT = 22H = Assign to std files
1  7998									 ; not allowed
1  7999
1  8000	    195D			 SETUSERERROR62:
1  8001	    195D  3E 3E				  DB 3eh,62
1  8002	    195F  32				  DB 32h
1  8003	    1960  0000e				 DW ERRORNUMBER		; set user error 62
1  8004	    1962  C9				  DB 0c9h
1  8005
1  8006	    1963			 L1390:
1  8007						  ; HL = address of FIB
1  8008	    1963  3A				  DB 3ah
1  8009	    1964  01B2r				 DW L00E8
1  8010	    1966  B7				  DB 0b7h			; text or untyped/typed	?
1  8011	    1967  28 0A				  DB 28h,(L13A0)-$-1		     ; jump if untyped/typed file
1  8012
1  8013						  ; text file
1  8014	    1969  CD				  DB 0cdh
1  8015	    196A  198Er				 DW  L13B6		   ; search for	device name at L00D2
1  8016	    196C  20 05				 DB 20h,(L13A0)-$-1		 ; jump	if not found, normal file name
1  8017
1  8018						  ; A =	read/write flags for this device
1  8019
1  8020	    196E  2A				 DB 02ah
1  8021	    196F  01ACr				 DW L00E2
1  8022	    1971  77				 DB 77h		 ; save	read/write flag	of device name in FIB
1  8023	    1972  C9				 DB 0c9h
1  8024
1  8025	    1973			 L13A0:
1  8026	    1973  2A				  DB 02ah
1  8027	    1974  01ACr				 DW L00E2	       ; HL = FIB address
1  8028						  OFF_HL 0 DOS_FCB	     ; offset to handle/FCB
2  8029		  =0010			 ??0000	     EQU (DOS_FCB)-(0)
2  8030
2  8031	    1976  D5					 DB 0D5H ; PUSH	DE
2  8032	    1977  11					 DB 11H
2  8033	    1978  0010					 DW ??0000
2  8034	    197A  19					 DB 19H	 ; ADD HL,DE
2  8035	    197B  D1					 DB 0D1H ; POP DE
2  8036
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 142
msx_asm\rtl_rtl.ASM



1  8037	    197C  EB				  DB 0ebh
1  8038	    197D  2A				  DB 02ah
1  8039	    197E  01A1r				 DW L00D2
1  8040	    1980  23				  DB 23h		     ; skip length of string
1  8041	    1981  3E 20				  DB 3eh,' '
1  8042	    1983  47				  DB 47h
1  8043	    1984  4F				  DB 4fh
1  8044	    1985  CD				  DB 0cdh
1  8045	    1986  0000e				 DW  PARSENAME
1  8046
1  8047					 ;	   CALL	L03F2		      ;	parse filename at address in L00D2 without
1  8048					 ;				      ;	wildcards to FCB at L005C
1  8049
1  8050	    1988  2A				 DB 02ah
1  8051	    1989  01ACr				 DW L00E2		 ; HL =	FIB, byte 0
1  8052	    198B  36 00				 DB 36h,0		 ; reset flags byte
1  8053
1  8054					 ;	   OFF_HL 0 FIB_FCB
1  8055					 ;	  LD DE,FIB_FCB		  ; offset to FCB
1  8056					 ;	  ADD HL,DE		  ; HL = first byte of FCB
1  8057
1  8058					 ;	   EX DE,HL
1  8059					 ;	   LD HL,L005C
1  8060					 ;	   LD BC,FCB_LEN	      ;	length of FCB
1  8061					 ;	   LDIR			      ;	fill FIB with FCB data of address L005CH
1  8062
1  8063	    198D  C9				  DB 0c9h
1  8064
1  8065	    198E			 L13B6:	 ; searches for	a device name 'KBD:' or	'CON:' etc..
1  8066						 ; in:	 L00D2 contains	address	to string that may start with
1  8067						 ;	 a device name
1  8068						 ; out:	 Z-flag	set if a device	name was found
1  8069						 ;	 and A = read/write flags for this device
1  8070						 ; changes: BC,DE,HL
1  8071	    198E  06 06				 DB 06h,6			 ; B = 6 entries in table
1  8072	    1990  21				 DB 21h
1  8073	    1991  19BEr				 DW L13E6		 ; HL =	table address
1  8074	    1993  C5			 L13BB:	 DB 0c5h
1  8075	    1994  E5				 DB 0e5h
1  8076
1  8077	    1995  06 03				 DB 06h,3			 ; compare 3 characters
1  8078	    1997  ED 5B				 DB 0edh,5bh
1  8079	    1999  01A1r				 DW L00D2
1  8080	    199B  13			 L13C3:	 DB 13h
1  8081	    199C  1A				 DB 1ah
1  8082	    199D  FE 20				 DB 0feh, ' '
1  8083	    199F  28 FA				 DB 28h,(L13C3)-$-1		 ; skip	spaces
1  8084
1  8085	    19A1  1A			 L13C9:	 DB 1ah
1  8086	    19A2  CD				 DB 0cdh
1  8087	    19A3  0691r				 DW  L04A6		 ; upcase
1  8088	    19A5  96				 DB 096h
1  8089	    19A6  28 0A				 DB 28h,(L13DA)-$-1		 ; compare next	letter if equal
1  8090
1  8091	    19A8  E1				 DB 0e1h
1  8092	    19A9  C1				 DB 0c1h
1  8093	    19AA  11				 DB 11h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 143
msx_asm\rtl_rtl.ASM



1  8094	    19AB  0004				 DW 4
1  8095	    19AD  19				 DB 019h	 ; HL =	address	of next
1  8096	    19AE  10 E3				 DB 10h,( L13BB)-$-1
1  8097	    19B0  B7				 DB 0b7h		 ; return A <> 0 and Z-flag reset if not found
1  8098	    19B1  C9				 DB 0c9h
1  8099
1  8100	    19B2  23			 L13DA:	 DB 23h
1  8101	    19B3  13				 DB 13h
1  8102	    19B4  10 EB				 DB 10h,( L13C9)-$-1
1  8103
1  8104						 ; device name found
1  8105	    19B6  C1				 DB 0c1h		 ; clean stack
1  8106	    19B7  C1				 DB 0c1h
1  8107
1  8108	    19B8  1A				 DB 1ah
1  8109	    19B9  FE 3A				 DB 0feh, ':'
1  8110	    19BB  C0				 DB 0c0h		 ; return with next character after three
1  8111									 ; characters and Z-flag reset for not found
1  8112
1  8113	    19BC  7E				 DB 7eh		 ; return A = read/write flags and Z-flag set
1  8114									 ; if device name correct ended	with a ':'
1  8115	    19BD  C9				 DB 0c9h
1  8116
1  8117	    19BE  43 4F	4E C1		 L13E6:	 DB 'CON',0C1H		    ; device 1 = input/output
1  8118	    19C2  54 52	4D C1			 DB 'TRM',0C1H		    ; device 1 = input/output
1  8119	    19C6  4B 42	44 82			 DB 'KBD',82H  ;0C1H	    ; device 2 = input only
1  8120	    19CA  4C 53	54 43			 DB 'LST',43H  ;0C1H	    ; device 3 = output	only and read semaphore
1  8121	    19CE  41 55	58 C4			 DB 'AUX',0C4H ;0C1H	    ; device 4 = input/output
1  8122	    19D2  55 53	52 C5			 DB 'USR',0C5H		    ; device 5 = input/output
1  8123
1  8124						 GLOBALS L13FE
2  8125
2  8126						  IRP NAME,<L13FE>
2  8127							   GLOBAL2 <NAME>
2  8128						  ENDM
3  8129							   GLOBAL2 <L13FE>
4  8130						  GLOBAL L13FE : NEAR
4  8131
4  8132						  GLOBAL _L13FE	: NEAR
4  8133	    19D6			 _L13FE:
4  8134
2  8135
1  8136	    19D6			 L13FE:	  ; rewrite (text file);
1  8137						  ; HL = file pointer
1  8138	    19D6  3E				  DB 3Eh
1  8139					 ;	   LD A,0AFH		      ;	LIB, write
1  8140					 ;	   JP L1400
1  8141
1  8142						 GLOBALS L13FF
2  8143
2  8144						  IRP NAME,<L13FF>
2  8145							   GLOBAL2 <NAME>
2  8146						  ENDM
3  8147							   GLOBAL2 <L13FF>
4  8148						  GLOBAL L13FF : NEAR
4  8149
4  8150						  GLOBAL _L13FF	: NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 144
msx_asm\rtl_rtl.ASM



4  8151	    19D7			 _L13FF:
4  8152
2  8153
1  8154	    19D7			 L13FF:	  ; reset (text	file);
1  8155						  ; HL = file pointer
1  8156	    19D7  AF				  DB 0afh		       ; LIB, read
1  8157
1  8158					 ;L1400:
1  8159	    19D8  32				  DB 32h
1  8160	    19D9  01B2r				 DW L00E8		; 0 = reset, NZ	= rewrite
1  8161
1  8162	    19DB  CD				  DB 0cdh
1  8163	    19DC  1A45r				 DW  L1469		   ; close a text file
1  8164	    19DE  3A				 DB 3ah
1  8165	    19DF  01A0r				 DW L00D0		 ; read	IORESULT
1  8166	    19E1  B7				 DB 0b7h
1  8167	    19E2  C0				 DB 0c0h		 ; quit	if an error occurred
1  8168	    19E3  2A				 DB 02ah
1  8169	    19E4  01ACr				 DW L00E2		 ; HL =	FIB, byte 0
1  8170	    19E6  CB AE				 DB 0cbh,0aeh		 ; reset write semaphore bit
1  8171	    19E8  7E				 DB 7eh
1  8172	    19E9  E6 0F				 DB 0e6h, 0FH
1  8173	    19EB  C0				 DB 0c0h		 ; return if not a disk	file type
1  8174	    19EC  CD				 DB 0cdh
1  8175	    19ED  1A17r				 DW  L1430		 ; open	or create file
1  8176	    19EF  3A				 DB 3ah
1  8177	    19F0  01A0r				 DW L00D0		 ; read	IORESULT
1  8178	    19F2  B7				 DB 0b7h
1  8179	    19F3  C0				 DB 0c0h		 ; quit	if an error occurred
1  8180
1  8181	    19F4  2A				 DB 02ah
1  8182	    19F5  01ACr				 DW L00E2		 ; HL =	FIB, byte 0
1  8183
1  8184	    19F7  3A				 DB 3ah
1  8185	    19F8  01B2r				 DW L00E8
1  8186	    19FA  B7				 DB 0b7h
1  8187	    19FB  01				 DB 01h
1  8188	    19FC  8080				 DW 8080H		 ; buffer pointer at 128 and read only
1  8189	    19FE  28 03				 DB 28h,(L142B)-$-1
1  8190
1  8191	    1A00  01				 DB 01h
1  8192	    1A01  0040				 DW 0040H		 ; buffer pointer at 0 and write only
1  8193
1  8194	    1A03  71			 L142B:	 DB 71h		 ; set flags byte
1  8195						  OFF_HL 0 DOS_PTR
2  8196		  =0002			 ??0001	     EQU (DOS_PTR)-(0)
2  8197
2  8198	    1A04  23				    DB 23h; INC	HL
2  8199	    1A05  23				    DB 23h; INC	HL
2  8200
1  8201					 ;	  INC HL
1  8202					 ;	  INC HL		  ; FIB_PTR
1  8203	    1A06  70				 DB 70h		 ; set sector buffer pointer
1  8204	    1A07  23				  DB 23h
1  8205	    1A08  36 00				  DB 36h,0		    ; high byte	is 0
1  8206
1  8207	    1A0A  01				  DB 01h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 145
msx_asm\rtl_rtl.ASM



1  8208	    1A0B  0080				 DW 0080H
1  8209						  OFF_HL DOS_PTR+1 DOS_REC
2  8210		  =0007			 ??0002	     EQU (DOS_REC)-(DOS_PTR+1)
2  8211
2  8212	    1A0D  D5					 DB 0D5H ; PUSH	DE
2  8213	    1A0E  11					 DB 11H
2  8214	    1A0F  0007					 DW ??0002
2  8215	    1A11  19					 DB 19H	 ; ADD HL,DE
2  8216	    1A12  D1					 DB 0D1H ; POP DE
2  8217
1  8218	    1A13  71				  DB 71h
1  8219	    1A14  23				  DB 23h
1  8220	    1A15  70				  DB 70h
1  8221	    1A16  C9				 DB 0c9h
1  8222
1  8223	    1A17			 L1430:	  ; 33e	CALL L145A		   ; clear FCB first
1  8224	    1A17  2A				 DB 02ah
1  8225	    1A18  01ACr				 DW L00E2
1  8226						  OFF_HL 0 DOS_FCB
2  8227		  =0010			 ??0003	     EQU (DOS_FCB)-(0)
2  8228
2  8229	    1A1A  D5					 DB 0D5H ; PUSH	DE
2  8230	    1A1B  11					 DB 11H
2  8231	    1A1C  0010					 DW ??0003
2  8232	    1A1E  19					 DB 19H	 ; ADD HL,DE
2  8233	    1A1F  D1					 DB 0D1H ; POP DE
2  8234
1  8235					 ;	  LD DE,FIB_FCB		  ; offset to FCB
1  8236					 ;	  ADD HL,DE
1  8237					 ;	   EX DE,HL
1  8238					 ;	   LD A,(L00E8)		      ;	reset or rewrite ?
1  8239					 ;	   OR A
1  8240					 ;	   LD BC,010FH		      ;	C = file open (0FH), B = error 1
1  8241					 ;	   JR Z,L144E		      ;	jump if	reset
1  8242
1  8243					 ;	   PUSH	DE
1  8244					 ;	   LD C,13H		      ;	C = file delete
1  8245					 ;	   CALL	MSXDOS
1  8246					 ;	   POP DE
1  8247					 ;	   LD BC,0F116H		      ;	C = file create	(16H), B = error F1
1  8248					 ;L144E:   PUSH	BC
1  8249					 ;	   CALL	MSXDOS
1  8250					 ;	   POP BC
1  8251					 ;	   INC A
1  8252					 ;	   RET NZ		      ;	quit if	no error, A = 0
1  8253					 ;	   LD A,B
1  8254					 ;	   LD (L00D0),A		      ;	IORESULT = 001H	= File does not	exist
1  8255									 ; IORESULT = 0F1H = Directory is full
1  8256
1  8257					 ;	   RET
1  8258
1  8259					 ;L145A:   ; resets the	FCB
1  8260					 ;	   LD HL,(L00E2)
1  8261					 ;	   OFF_HL 0 DOS_FCB
1  8262					 ;	  LD DE,FIB_FCB+12	  ; offset to first byte after name in FCB
1  8263					 ;	  ADD HL,DE
1  8264
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 146
msx_asm\rtl_rtl.ASM



1  8265					 ;	   LD B,FCB_LEN-12	      ;	clear rest of FCB
1  8266					 ;L1463:   LD (HL),0
1  8267					 ;	   INC HL
1  8268					 ;	   DJNZ	L1463
1  8269					 ;	   RET
1  8270
1  8271					 ; 33e
1  8272	    1A20  54				  DB 54h
1  8273	    1A21  5D				  DB 5dh
1  8274	    1A22  23				  DB 23h
1  8275	    1A23  3A				  DB 3ah
1  8276	    1A24  01B2r				 DW L00E8
1  8277	    1A26  B7				  DB 0b7h
1  8278	    1A27  20 0E				  DB 20h,(L1A3B)-$-1		    ; jump if rewrite
1  8279
1  8280	    1A29  3E 20				  DB 3eh,' '
1  8281	    1A2B  47				  DB 47h
1  8282	    1A2C  4F				  DB 4fh
1  8283	    1A2D  CD				  DB 0cdh
1  8284	    1A2E  0000e				 DW  OPENFILE		   ; 33e, TODO OpenFile
1  8285	    1A30  C8				  DB 0c8h
1  8286	    1A31  3E 01				  DB 3eh,1
1  8287	    1A33  32				  DB 32h
1  8288	    1A34  01A0r				 DW L00D0		; IORESULT = 1
1  8289	    1A36  C9				  DB 0c9h
1  8290
1  8291	    1A37			 L1A3B:
1  8292	    1A37  3E 20				  DB 3eh,' '
1  8293	    1A39  47				  DB 47h
1  8294	    1A3A  4F				  DB 4fh
1  8295	    1A3B  CD				  DB 0cdh
1  8296	    1A3C  0000e				 DW  CREATEFILE	; L2C4A		    ; 33e, TODO	CreateFile
1  8297	    1A3E  C8				  DB 0c8h
1  8298	    1A3F  3E F1				  DB 3eh,0F1H
1  8299	    1A41  32				  DB 32h
1  8300	    1A42  01A0r				 DW L00D0		; IORESULT = 0F1H
1  8301	    1A44  C9				  DB 0c9h
1  8302					 ; 33e
1  8303
1  8304						 GLOBALS L1469
2  8305
2  8306						  IRP NAME,<L1469>
2  8307							   GLOBAL2 <NAME>
2  8308						  ENDM
3  8309							   GLOBAL2 <L1469>
4  8310						  GLOBAL L1469 : NEAR
4  8311
4  8312						  GLOBAL _L1469	: NEAR
4  8313	    1A45			 _L1469:
4  8314
2  8315
1  8316	    1A45			 L1469:	 ; LIB
1  8317						 ; PROCEDURE Close(VAR F: FILE);
1  8318						 ; closes a text file
1  8319						  ; in:	   HL =	FIB address
1  8320
1  8321	    1A45  22				 DB 22h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 147
msx_asm\rtl_rtl.ASM



1  8322	    1A46  01ACr				 DW L00E2		 ; save	FIB address
1  8323	    1A48  7E				 DB 7eh
1  8324	    1A49  E6 0F				 DB 0e6h, 0FH
1  8325	    1A4B  C0				 DB 0c0h		 ; quit	if it is a device
1  8326
1  8327	    1A4C  CB 76				 DB 0cbh,076h
1  8328	    1A4E  28 0A				 DB 28h,(L147E)-$-1		 ; jump	if no output allowed
1  8329
1  8330	    1A50  3E 1A				 DB 3eh,1AH
1  8331	    1A52  CD				 DB 0cdh
1  8332	    1A53  1D12r				 DW  L16C6		 ; write a ^Z to end the text file
1  8333	    1A55  CD				  DB 0cdh
1  8334	    1A56  1D58r				 DW  L170C		   ; flush buffer
1  8335	    1A58  18 03				 DB 18h,( L1481)-$-1		 ; close file
1  8336
1  8337	    1A5A  CB 7E			 L147E:	 DB 0cbh,07eh
1  8338	    1A5C  C8				 DB 0c8h		 ; return if no	input allowed
1  8339
1  8340	    1A5D			 L1481:	 ; closes a file
1  8341	    1A5D  2A				 DB 02ah
1  8342	    1A5E  01ACr				 DW L00E2
1  8343	    1A60  E5				 DB 0e5h
1  8344						  OFF_HL 0 DOS_FCB
2  8345		  =0010			 ??0004	     EQU (DOS_FCB)-(0)
2  8346
2  8347	    1A61  D5					 DB 0D5H ; PUSH	DE
2  8348	    1A62  11					 DB 11H
2  8349	    1A63  0010					 DW ??0004
2  8350	    1A65  19					 DB 19H	 ; ADD HL,DE
2  8351	    1A66  D1					 DB 0D1H ; POP DE
2  8352
1  8353					 ;	  LD DE,FIB_FCB		  ; offset to FCB
1  8354					 ;	  ADD HL,DE
1  8355
1  8356	    1A67  44				  DB 44h
1  8357	    1A68  4D				  DB 4dh
1  8358	    1A69  CD				  DB 0cdh
1  8359	    1A6A  0000e				 DW  CLOSEFILE		    ; 33e, L2DB4, CloseFile
1  8360					 ;	   EX DE,HL		      ;	DE = FCB address
1  8361					 ;	   LD C,10H		      ;	file close
1  8362					 ;	   CALL	MSXDOS
1  8363	    1A6C  E1				 DB 0e1h
1  8364					 ;	   INC A
1  8365	    1A6D  28 05				  DB 28h,(L1498)-$-1		     ; jump if file closed normally
1  8366
1  8367	    1A6F  3E FF				 DB 3eh,0FFH
1  8368	    1A71  32				 DB 32h
1  8369	    1A72  01A0r				 DW L00D0		 ; IORESULT = 0FFH, File disappeared
1  8370
1  8371	    1A74  36 00			 L1498:	 DB 36h,0		 ; always resets the FIB
1  8372	    1A76  C9				 DB 0c9h
1  8373
1  8374
1  8375						 GLOBALS L149B
2  8376
2  8377						  IRP NAME,<L149B>
2  8378							   GLOBAL2 <NAME>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 148
msx_asm\rtl_rtl.ASM



2  8379						  ENDM
3  8380							   GLOBAL2 <L149B>
4  8381						  GLOBAL L149B : NEAR
4  8382
4  8383						  GLOBAL _L149B	: NEAR
4  8384	    1A77			 _L149B:
4  8385
2  8386
1  8387	    1A77			 L149B:	 ; LIB
1  8388						 ; sets	current	FIB address to standard	output (OUTPUT)
1  8389						 ; in:	 HL = FIB address
1  8390						 ; out:	 -
1  8391	    1A77  E3				 DB 0e3h	 ; LIB,	for search ???
1  8392	    1A78  22				  DB 22h
1  8393	    1A79  01AEr				 DW L00E4	       ; save return address
1  8394	    1A7B  E3				 DB 0e3h
1  8395	    1A7C  E5				 DB 0e5h
1  8396	    1A7D  21				  DB 21h
1  8397	    1A7E  018Ar				 DW OUTPUT
1  8398	    1A80  22				 DB 22h
1  8399	    1A81  01ACr				 DW L00E2
1  8400	    1A83  E1				 DB 0e1h
1  8401	    1A84  C9				 DB 0c9h
1  8402
1  8403						 GLOBALS L14A9
2  8404
2  8405						  IRP NAME,<L14A9>
2  8406							   GLOBAL2 <NAME>
2  8407						  ENDM
3  8408							   GLOBAL2 <L14A9>
4  8409						  GLOBAL L14A9 : NEAR
4  8410
4  8411						  GLOBAL _L14A9	: NEAR
4  8412	    1A85			 _L14A9:
4  8413
2  8414
1  8415	    1A85			 L14A9:	 ; LIB
1  8416						 ; sets	current	FIB address and	checks if it is	open for input
1  8417						 ; in:	 HL = FIB address
1  8418	    1A85  E3				 DB 0e3h
1  8419	    1A86  22				 DB 22h
1  8420	    1A87  01AEr				 DW L00E4
1  8421	    1A89  E3				 DB 0e3h
1  8422	    1A8A  22				 DB 22h
1  8423	    1A8B  01ACr				 DW L00E2		 ; save	FIB address
1  8424
1  8425	    1A8D  CB 7E				 DB 0cbh,07eh		 ; open	for input ?
1  8426	    1A8F  C0				 DB 0c0h		 ; yes,	quit
1  8427
1  8428	    1A90  3E 02				  DB 3eh,2
1  8429	    1A92  32				 DB 32h
1  8430	    1A93  01A0r				 DW L00D0		 ; IORESULT = 2, File not open for input
1  8431	    1A95  C9				 DB 0c9h
1  8432
1  8433						 GLOBALS L14BA
2  8434
2  8435						  IRP NAME,<L14BA>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 149
msx_asm\rtl_rtl.ASM



2  8436							   GLOBAL2 <NAME>
2  8437						  ENDM
3  8438							   GLOBAL2 <L14BA>
4  8439						  GLOBAL L14BA : NEAR
4  8440
4  8441						  GLOBAL _L14BA	: NEAR
4  8442	    1A96			 _L14BA:
4  8443
2  8444
1  8445	    1A96			 L14BA:	 ; LIB
1  8446						 ; sets	current	FIB address and	checks if it is	open for output
1  8447						 ; in:	 HL = FIB address
1  8448						 ; out:	 -
1  8449	    1A96  E3				 DB 0e3h
1  8450	    1A97  22				 DB 22h
1  8451	    1A98  01AEr				 DW L00E4
1  8452	    1A9A  E3				 DB 0e3h
1  8453	    1A9B  22				 DB 22h
1  8454	    1A9C  01ACr				 DW L00E2		 ; save	FIB address
1  8455	    1A9E  CB 76				 DB 0cbh,076h		 ; open	for output ?
1  8456	    1AA0  C0				 DB 0c0h		 ; yes,	quit
1  8457	    1AA1  3E 03				 DB 3eh,3
1  8458	    1AA3  32				 DB 32h
1  8459	    1AA4  01A0r				 DW L00D0		 ; IORESULT = 3, File not open for output
1  8460	    1AA6  C9				 DB 0c9h
1  8461
1  8462
1  8463
1  8464						 GLOBALS L14CB
2  8465
2  8466						  IRP NAME,<L14CB>
2  8467							   GLOBAL2 <NAME>
2  8468						  ENDM
3  8469							   GLOBAL2 <L14CB>
4  8470						  GLOBAL L14CB : NEAR
4  8471
4  8472						  GLOBAL _L14CB	: NEAR
4  8473	    1AA7			 _L14CB:
4  8474
2  8475
1  8476	    1AA7			 L14CB:	  ; LIB, readln	from console
1  8477	    1AA7  3E AF				  DB 3eh,0AFH
1  8478
1  8479	    1AA9  18 01				  DB 18h,( L14CD)-$-1
1  8480
1  8481						 GLOBALS L14CC
2  8482
2  8483						  IRP NAME,<L14CC>
2  8484							   GLOBAL2 <NAME>
2  8485						  ENDM
3  8486							   GLOBAL2 <L14CC>
4  8487						  GLOBAL L14CC : NEAR
4  8488
4  8489						  GLOBAL _L14CC	: NEAR
4  8490	    1AAB			 _L14CC:
4  8491
2  8492
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 150
msx_asm\rtl_rtl.ASM



1  8493	    1AAB			 L14CC:	  ; LIB, read from console
1  8494	    1AAB  AF				  DB 0afh
1  8495
1  8496	    1AAC  E3			 L14CD:	  DB 0e3h
1  8497	    1AAD  22				 DB 22h
1  8498	    1AAE  01AEr				 DW L00E4
1  8499	    1AB0  E3				 DB 0e3h
1  8500	    1AB1  E5				 DB 0e5h
1  8501	    1AB2  21				  DB 21h
1  8502	    1AB3  018Ar				 DW OUTPUT
1  8503	    1AB5  22				 DB 22h
1  8504	    1AB6  01ACr				 DW L00E2
1  8505	    1AB8  CB AE				 DB 0cbh,0aeh
1  8506	    1ABA  F5				 DB 0f5h
1  8507
1  8508	    1ABB  3A				  DB 3ah
1  8509	    1ABC  046Cr				 DW REDIRECTIONFLAG
1  8510	    1ABE  47				  DB 47h
1  8511	    1ABF  CD				  DB 0cdh
1  8512	    1AC0  1AD1r				 DW  L14EA		   ; do	real read
1  8513
1  8514	    1AC2  F1				  DB 0f1h
1  8515	    1AC3  B7				 DB 0b7h
1  8516	    1AC4  28 07				 DB 28h,(L14E6)-$-1		 ; jump	if not readln
1  8517
1  8518	    1AC6  3A				  DB 3ah
1  8519	    1AC7  046Cr				 DW REDIRECTIONFLAG
1  8520	    1AC9  B7				  DB 0b7h
1  8521	    1ACA  CC				  DB 0cch
1  8522	    1ACB  0291r				 DW L01E1		; print	CR, LF if no input redirection
1  8523
1  8524	    1ACD  E1			 L14E6:	 DB 0e1h
1  8525	    1ACE  C9				 DB 0c9h
1  8526
1  8527
1  8528
1  8529	    1ACF  06 00			 L14E8:	  DB 06h,0		       ; ^Z is ignored when typed in
1  8530
1  8531	    1AD1  21			 L14EA:	  DB 21h
1  8532	    1AD2  018Cr				 DW BUFLEN
1  8533	    1AD4  7E				 DB 7eh
1  8534	    1AD5  FE 7F				 DB 0feh, 7FH			 ; < 127
1  8535	    1AD7  38 02				 DB 38h,(L14F4)-$-1		 ; jump	if < 127
1  8536
1  8537	    1AD9  3E 7E				 DB 3eh,7EH		 ; trunc to a length of	126 characters
1  8538	    1ADB  4F			 L14F4:	 DB 4fh
1  8539	    1ADC  36 7E				  DB 36h,7EH
1  8540
1  8541	    1ADE  2A				  DB 02ah
1  8542	    1ADF  01A1r				 DW L00D2
1  8543	    1AE1  22				 DB 22h
1  8544	    1AE2  01A3r				 DW L00D4
1  8545
1  8546	    1AE4  16 00			 L14FD:	  DB 16h,0
1  8547
1  8548	    1AE6  CD			 L14FF:	 DB 0cdh
1  8549	    1AE7  05CCr				 DW  L03E1		 ; A = character from console
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 151
msx_asm\rtl_rtl.ASM



1  8550	    1AE9  77				 DB 77h
1  8551
1  8552	    1AEA  1E 01				 DB 1eh,1
1  8553	    1AEC  FE 08				 DB 0feh, 8			 ; backspace ?
1  8554	    1AEE  28 3A				  DB 28h,(L153F)-$-1
1  8555	    1AF0  FE 7F				  DB 0feh, 7FH			   ; delete ?
1  8556	    1AF2  28 36				 DB 28h,(L153F)-$-1
1  8557
1  8558	    1AF4  1D				 DB 1dh			 ; E = 0
1  8559	    1AF5  FE 18				 DB 0feh, 18H			 ; insert ?
1  8560	    1AF7  28 31				 DB 28h,(L153F)-$-1
1  8561	    1AF9  FE 1B				 DB 0feh, 1BH			 ; escape ?
1  8562	    1AFB  28 2D				 DB 28h,(L153F)-$-1
1  8563
1  8564	    1AFD  FE 1A				 DB 0feh, 1AH			 ; ctrl-z ?
1  8565	    1AFF  28 3A				 DB 28h,(L1550)-$-1		 ; jump	to quit	with ^Z
1  8566
1  8567	    1B01  FE 0D				 DB 0feh, 0DH			 ; return ?
1  8568	    1B03  28 3C				 DB 28h,(L1556)-$-1
1  8569
1  8570	    1B05  FE 20				 DB 0feh, ' '			  ; space ?
1  8571	    1B07  30 11				 DB 30h,(L1533)-$-1
1  8572	    1B09  FE 03				 DB 0feh, 3			 ; ctrl-break ?
1  8573	    1B0B  20 D9				 DB 20h,(L14FF)-$-1
1  8574	    1B0D  3A				 DB 3ah
1  8575	    1B0E  0190r				 DW CBREAK
1  8576	    1B10  B7				 DB 0b7h
1  8577	    1B11  28 D3				 DB 28h,(L14FF)-$-1		 ; ignore character if no CBREAK handler
1  8578	    1B13  DD 2A				 DB 0ddh,02ah
1  8579	    1B15  01AEr				 DW L00E4		 ; IX =	return address
1  8580	    1B17  C3				 DB 0c3h
1  8581	    1B18  2725r				 DW  L2016		 ; force userbreak
1  8582
1  8583	    1B1A  79			 L1533:	 DB 79h
1  8584	    1B1B  BA				 DB 0bah
1  8585	    1B1C  28 C8				 DB 28h,(L14FF)-$-1
1  8586
1  8587	    1B1E  14				  DB 14h
1  8588
1  8589	    1B1F  3A				  DB 3ah
1  8590	    1B20  046Cr				 DW REDIRECTIONFLAG
1  8591	    1B22  B7				  DB 0b7h			; Zero if no input redirection
1  8592
1  8593	    1B23  7E				  DB 7eh
1  8594	    1B24  23				 DB 23h
1  8595
1  8596	    1B25  CC				  DB 0cch
1  8597	    1B26  05B4r				 DW L03C9		; print	character, if no input redirection
1  8598	    1B28  18 BC				 DB 18h,( L14FF)-$-1
1  8599
1  8600	    1B2A			 L153F:	  ; E =	1 if backspace or delete
1  8601						  ; E =	0 if insert or escape
1  8602	    1B2A  15				  DB 15h
1  8603	    1B2B  FA				 DB 0fah
1  8604	    1B2C  1AE4r				 DW L14FD
1  8605	    1B2E  2B				 DB 2bh
1  8606
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 152
msx_asm\rtl_rtl.ASM



1  8607	    1B2F  CD				  DB 0cdh
1  8608	    1B30  02B0r				 DW  L0200
1  8609	    1B32  08 20	08 00			 DB 8,'	',8,0		    ; backspace, space,	backspace
1  8610	    1B36  1D				 DB 1dh
1  8611	    1B37  28 AD				 DB 28h,(L14FF)-$-1
1  8612
1  8613	    1B39  18 EF				  DB 18h,( L153F)-$-1
1  8614
1  8615	    1B3B			 L1550:	  ; ^Z typed in
1  8616	    1B3B  04				  DB 04h
1  8617	    1B3C  05				 DB 05h
1  8618	    1B3D  28 A7				  DB 28h,(L14FF)-$-1		     ; ignore ^Z if B =	0
1  8619
1  8620	    1B3F  18 04				  DB 18h,( L155A)-$-1			; quit with ^Z
1  8621
1  8622	    1B41  04			 L1556:	 DB 04h
1  8623	    1B42  05				 DB 05h
1  8624	    1B43  20 04				 DB 20h,(L155E)-$-1		 ; jump	if quit	with 0DH,0Ah
1  8625
1  8626	    1B45			 L155A:	 ; quit	with ^Z
1  8627	    1B45  36 1A				 DB 36h,1AH
1  8628	    1B47  18 08				 DB 18h,( L1566)-$-1		 ; quit
1  8629
1  8630	    1B49  CD			 L155E:	 DB 0cdh
1  8631	    1B4A  0291r				 DW  L01E1		 ; print CR, LF
1  8632	    1B4C  36 0D				 DB 36h,0DH
1  8633	    1B4E  23				 DB 23h
1  8634	    1B4F  36 0A				 DB 36h,0AH
1  8635	    1B51  23			 L1566:	 DB 23h
1  8636	    1B52  22				  DB 22h
1  8637	    1B53  01A5r				 DW L00D6	       ; save end address
1  8638	    1B55  C9				 DB 0c9h
1  8639
1  8640	    1B56			 L156B:	  ; read character from	current	file or	device
1  8641						 ; out:	 A = character read
1  8642	    1B56  2A				 DB 02ah
1  8643	    1B57  01ACr				 DW L00E2
1  8644	    1B59  3A				 DB 3ah
1  8645	    1B5A  01A0r				 DW L00D0		 ; read	IORESULT
1  8646	    1B5C  B7				 DB 0b7h
1  8647	    1B5D  20 AF				 DB 20h,(L15ED)-$-1		 ; jump	if error occurred, return EOF
1  8648
1  8649	    1B5F  7E				 DB 7eh
1  8650	    1B60  CB 6F				 DB 0cbh,06fh
1  8651	    1B62  C2				  DB 0c2h
1  8652	    1B63  1C0Ar				 DW L15E9		 ; jump	if pre-read character present
1  8653
1  8654	    1B65  E6 0F				 DB 0e6h, 0FH
1  8655	    1B67  C2				  DB 0c2h
1  8656	    1B68  1BCCr				 DW L15AB		 ; jump	if device
1  8657
1  8658						 ; read	character from text file
1  8659						  OFF_HL 0 DOS_PTR
2  8660		  =0002			 ??0005	     EQU (DOS_PTR)-(0)
2  8661
2  8662	    1B6A  23				    DB 23h; INC	HL
2  8663	    1B6B  23				    DB 23h; INC	HL
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 153
msx_asm\rtl_rtl.ASM



2  8664
1  8665					 ;	  INC HL
1  8666					 ;	  INC HL
1  8667	    1B6C  7E				  DB 7eh		  ; A =	DOS_PTR
1  8668	    1B6D  B7				 DB 0b7h
1  8669	    1B6E  F2				 DB 0f2h
1  8670	    1B6F  1BB6r				 DW L1597		 ; < 128 ?
1  8671
1  8672					 ; 33e
1  8673	    1B71  E5				  DB 0e5h
1  8674
1  8675						  OFF_HL DOS_PTR DOS_REC
2  8676		  =0008			 ??0006	     EQU (DOS_REC)-(DOS_PTR)
2  8677
2  8678	    1B72  D5					 DB 0D5H ; PUSH	DE
2  8679	    1B73  11					 DB 11H
2  8680	    1B74  0008					 DW ??0006
2  8681	    1B76  19					 DB 19H	 ; ADD HL,DE
2  8682	    1B77  D1					 DB 0D1H ; POP DE
2  8683
1  8684	    1B78  5E				  DB 5eh
1  8685	    1B79  23				  DB 23h
1  8686	    1B7A  56				  DB 56h
1  8687	    1B7B  D5				  DB 0d5h		     ; save record length
1  8688
1  8689						  OFF_HL DOS_REC+1 DOS_FCB   ; HL = handle/FCB address
2  8690		  =0005			 ??0007	     EQU (DOS_FCB)-(DOS_REC+1)
2  8691
2  8692	    1B7C  D5					 DB 0D5H ; PUSH	DE
2  8693	    1B7D  11					 DB 11H
2  8694	    1B7E  0005					 DW ??0007
2  8695	    1B80  19					 DB 19H	 ; ADD HL,DE
2  8696	    1B81  D1					 DB 0D1H ; POP DE
2  8697
1  8698
1  8699	    1B82  E5				  DB 0e5h		     ; save HL
1  8700
1  8701						  OFF_HL DOS_FCB DOS_BUF     ; HL = address of buffer
2  8702		  =0041			 ??0008	     EQU (DOS_BUF)-(DOS_FCB)
2  8703
2  8704	    1B83  D5					 DB 0D5H ; PUSH	DE
2  8705	    1B84  11					 DB 11H
2  8706	    1B85  0041					 DW ??0008
2  8707	    1B87  19					 DB 19H	 ; ADD HL,DE
2  8708	    1B88  D1					 DB 0D1H ; POP DE
2  8709
1  8710	    1B89  54				  DB 54h
1  8711	    1B8A  5D				  DB 5dh
1  8712
1  8713	    1B8B  C1				  DB 0c1h		      ;	BC = handle/FCB	address
1  8714	    1B8C  E1				  DB 0e1h		      ;	HL = number of bytes to	read
1  8715
1  8716	    1B8D  CD				  DB 0cdh
1  8717	    1B8E  0000e				 DW  READFILE		   ; 33e, TODO ReadFile
1  8718	    1B90  44				  DB 44h		     ; BC = number of bytes read
1  8719	    1B91  4D				  DB 4dh
1  8720
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 154
msx_asm\rtl_rtl.ASM



1  8721	    1B92  E1				  DB 0e1h		      ;	HL = DOS_PTR
1  8722	    1B93  28 0C				  DB 28h,(L1594)-$-1
1  8723
1  8724	    1B95  E5				   DB 0e5h		      ;	save HL	= DOS_PTR
1  8725					 ;	   OFF_HL DOS_PTR DOS_BUF
1  8726					 ;	   LD (HL),26
1  8727
1  8728					 ; 33e
1  8729					 ;	   ; read next FIB_BUF
1  8730					 ;	   LD C,14H		      ;	sequential read
1  8731					 ;	   PUSH	HL
1  8732					 ;	   CALL	L19BA		      ;	sequential read	from current position
1  8733					 ;				      ;	to FIB_BUF
1  8734					 ;	   POP HL
1  8735					 ;	   JR Z,L1594		      ;	jump if	no error
1  8736
1  8737						 ; error occurred, fill	first byte of FIB_BUF with ^Z (end of file)
1  8738
1  8739						  OFF_HL DOS_PTR DOS_BUF
2  8740		  =004F			 ??0009	     EQU (DOS_BUF)-(DOS_PTR)
2  8741
2  8742	    1B96  D5					 DB 0D5H ; PUSH	DE
2  8743	    1B97  11					 DB 11H
2  8744	    1B98  004F					 DW ??0009
2  8745	    1B9A  19					 DB 19H	 ; ADD HL,DE
2  8746	    1B9B  D1					 DB 0D1H ; POP DE
2  8747
1  8748					 ;	  LD DE,2EH
1  8749					 ;	  ADD HL,DE
1  8750	    1B9C			 L1590:
1  8751	    1B9C  36 1A				 DB 36h,1AH
1  8752	    1B9E  E1				  DB 0e1h		      ;	restore	to FIB_PTR
1  8753	    1B9F  18 13				  DB 18h,( L1596)-$-1			; 33e, TODO L1BB8
1  8754
1  8755	    1BA1			 L1594:
1  8756	    1BA1  11				  DB 11h
1  8757	    1BA2  0080				 DW 128
1  8758	    1BA4  7A				  DB 7ah
1  8759	    1BA5  B8				  DB 0b8h
1  8760	    1BA6  20 04				  DB 20h,(L1595)-$-1
1  8761	    1BA8  7B				  DB 7bh
1  8762	    1BA9  B9				  DB 0b9h
1  8763	    1BAA  28 08				  DB 28h,(L1596)-$-1
1  8764
1  8765	    1BAC			 L1595:
1  8766	    1BAC  E5				  DB 0e5h
1  8767	    1BAD  09				  DB 09h		  ; HL += number of bytes read
1  8768	    1BAE  01				  DB 01h
1  8769	    1BAF  004F				 DW DOS_BUF - DOS_PTR
1  8770	    1BB1  09				  DB 09h
1  8771	    1BB2  18 E8				  DB 18h,( L1590)-$-1
1  8772
1  8773	    1BB4			 L1596:
1  8774	    1BB4  AF				  DB 0afh
1  8775	    1BB5  77				 DB 77h		 ; FIB_PTR = 0
1  8776
1  8777	    1BB6  34			 L1597:	 DB 034h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 155
msx_asm\rtl_rtl.ASM



1  8778	    1BB7  C6 4F				  DB 0c6h,DOS_BUF - DOS_PTR    ; 33e, 4F ; 2EH
1  8779	    1BB9  5F				 DB 5fh
1  8780	    1BBA  16 00				 DB 16h,0
1  8781	    1BBC  19				 DB 019h
1  8782	    1BBD  7E				 DB 7eh
1  8783	    1BBE  FE 1A				 DB 0feh, 1AH			 ; first character = ^Z	(eof)
1  8784	    1BC0  C2				  DB 0c2h
1  8785	    1BC1  1C01r				 DW L15E0
1  8786
1  8787	    1BC3  2A				 DB 02ah
1  8788	    1BC4  01ACr				 DW L00E2
1  8789						  OFF_HL 0 DOS_PTR
2  8790		  =0002			 ??000A	     EQU (DOS_PTR)-(0)
2  8791
2  8792	    1BC6  23				    DB 23h; INC	HL
2  8793	    1BC7  23				    DB 23h; INC	HL
2  8794
1  8795					 ;	  INC HL
1  8796					 ;	  INC HL
1  8797	    1BC8  35				 DB 035h		 ; FIB_PTR does	not move beyond	^Z
1  8798	    1BC9  C3				  DB 0c3h
1  8799	    1BCA  1C01r				 DW  L15E0
1  8800
1  8801	    1BCC  3D			 L15AB:	 DB 3dh			 ; device = 1, 'CON:' ?
1  8802	    1BCD  20 1B				 DB 20h,(L15C9)-$-1		 ; jump	if not 'CON:'
1  8803
1  8804	    1BCF  2A				  DB 02ah
1  8805	    1BD0  01A3r				 DW L00D4	       ; start address of buffer
1  8806	    1BD2  ED 5B				  DB 0edh,5bh
1  8807	    1BD4  01A5r				 DW L00D6	       ; end address of	buffer
1  8808	    1BD6  B7				 DB 0b7h
1  8809	    1BD7  ED 52				 DB 0EDH,052h
1  8810	    1BD9  38 05				 DB 38h,(L15BF)-$-1		 ; read	from buffer until current = end	address
1  8811
1  8812	    1BDB  06 FF				  DB 06h,0FFH		       ; do not	ignore ^Z
1  8813	    1BDD  CD				 DB 0cdh
1  8814	    1BDE  1AD1r				 DW  L14EA
1  8815
1  8816	    1BE0  2A			 L15BF:	 DB 02ah
1  8817	    1BE1  01A3r				 DW L00D4		 ; HL =	data pointer
1  8818	    1BE3  7E				 DB 7eh		 ; A = data byte
1  8819	    1BE4  23				 DB 23h
1  8820	    1BE5  22				 DB 22h
1  8821	    1BE6  01A3r				 DW L00D4		 ; save	new data pointer
1  8822	    1BE8  18 17				 DB 18h,( L15E0)-$-1		 ; put character in FIB_CHR
1  8823
1  8824	    1BEA  3D			 L15C9:	 DB 3dh			 ; device = 2, 'KBD:' ?
1  8825	    1BEB  20 06				 DB 20h,(L15D2)-$-1		 ; jump	if not 'KBD:'
1  8826
1  8827	    1BED  CD				 DB 0cdh
1  8828	    1BEE  016Br				 DW  CONINPTR
1  8829	    1BF0  7D				 DB 7dh
1  8830	    1BF1  18 0E				 DB 18h,( L15E0)-$-1		 ; put character in FIB_CHR
1  8831
1  8832	    1BF3  3D			 L15D2:	 DB 3dh			 ; skip	'LST:' (output device)
1  8833	    1BF4  3D				 DB 3dh			 ; device = 4, 'AUX:' ?
1  8834	    1BF5  20 06				 DB 20h,(L15DC)-$-1		 ; jump	if not 'AUX:', then device = 'USR:'
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 156
msx_asm\rtl_rtl.ASM



1  8835
1  8836	    1BF7  CD				 DB 0cdh
1  8837	    1BF8  0177r				 DW  AUXINPTR
1  8838	    1BFA  7D				 DB 7dh
1  8839	    1BFB  18 04				 DB 18h,( L15E0)-$-1		 ; put character in FIB_CHR
1  8840
1  8841	    1BFD  CD			 L15DC:	 DB 0cdh
1  8842	    1BFE  017Dr				 DW  USRINPTR
1  8843	    1C00  7D				 DB 7dh
1  8844
1  8845	    1C01  2A			 L15E0:	 DB 02ah
1  8846	    1C02  01ACr				 DW L00E2		 ; HL =	address	of FIB
1  8847	    1C04  CB EE				 DB 0cbh,0eeh		 ; set write semaphore
1  8848									 ; pre-read character ready
1  8849						 OFF_HL	0 FIB_CHR
2  8850		  =0001			 ??000B	     EQU (FIB_CHR)-(0)
2  8851
2  8852	    1C06  23				   DB 23h; INC HL
2  8853
1  8854					 ;	  INC HL
1  8855	    1C07  77				 DB 77h		 ; put character in character buffer
1  8856						 OFF_HL	FIB_CHR	0
2  8857		  =-0001		 ??000C	     EQU (0)-(FIB_CHR)
2  8858
2  8859	    1C08  2B				      DB 2bh; DEC HL
2  8860
1  8861					 ;	  DEC HL
1  8862	    1C09  C9				 DB 0c9h
1  8863
1  8864	    1C0A			 L15E9:	 OFF_HL	0 FIB_CHR
2  8865		  =0001			 ??000D	     EQU (FIB_CHR)-(0)
2  8866
2  8867	    1C0A  23				   DB 23h; INC HL
2  8868
1  8869					 ;	  INC HL
1  8870	    1C0B  7E				 DB 7eh		 ; read	pre-read from character	buffer
1  8871						 OFF_HL	FIB_CHR	0
2  8872		  =-0001		 ??000E	     EQU (0)-(FIB_CHR)
2  8873
2  8874	    1C0C  2B				      DB 2bh; DEC HL
2  8875
1  8876					 ;	  DEC HL
1  8877	    1C0D  C9				 DB 0c9h
1  8878
1  8879	    1C0E  3E 1A			 L15ED:	 DB 3eh,1AH
1  8880	    1C10  C9				 DB 0c9h
1  8881
1  8882	    1C11  E5			 L15F0:	 DB 0e5h
1  8883	    1C12  2A				 DB 02ah
1  8884	    1C13  01ACr				 DW L00E2		 ; HL =	address	of FIB
1  8885	    1C15  7E				 DB 7eh		 ; A = flags byte
1  8886	    1C16  E6 0F				 DB 0e6h, 0FH
1  8887
1  8888	    1C18  FE 06				 DB 0feh, 6			 ; device 6 = used for 'val'
1  8889	    1C1A  28 27				 DB 28h,(L1622)-$-1		 ; quit	immediately is device =	6
1  8890
1  8891	    1C1C  CD			 L15FB:	 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 157
msx_asm\rtl_rtl.ASM



1  8892	    1C1D  1B56r				 DW  L156B		 ; read	character from file or device
1  8893	    1C1F  FE 21				 DB 0feh, 21H
1  8894	    1C21  30 08				 DB 30h,(L160A)-$-1
1  8895	    1C23  FE 1A				 DB 0feh, 1AH
1  8896	    1C25  28 04				 DB 28h,(L160A)-$-1
1  8897	    1C27  CB AE				 DB 0cbh,0aeh
1  8898	    1C29  18 F1				 DB 18h,( L15FB)-$-1
1  8899
1  8900	    1C2B  11			 L160A:	 DB 11h
1  8901	    1C2C  0129r				 DW L005D
1  8902	    1C2E  06 1E				 DB 06h,1EH
1  8903	    1C30  C5			 L160F:	 DB 0c5h
1  8904	    1C31  D5				 DB 0d5h
1  8905	    1C32  CD				 DB 0cdh
1  8906	    1C33  1B56r				 DW  L156B		 ; read	character from file or device
1  8907	    1C35  D1				 DB 0d1h
1  8908	    1C36  C1				 DB 0c1h
1  8909	    1C37  FE 21				 DB 0feh, 21H
1  8910	    1C39  38 06				 DB 38h,(L1620)-$-1
1  8911	    1C3B  CB AE				 DB 0cbh,0aeh
1  8912	    1C3D  12				 DB 12h
1  8913	    1C3E  13				 DB 13h
1  8914	    1C3F  10 EF				 DB 10h,( L160F)-$-1
1  8915	    1C41  AF			 L1620:	 DB 0afh
1  8916	    1C42  12				 DB 12h
1  8917	    1C43  E1			 L1622:	 DB 0e1h
1  8918	    1C44  C9				 DB 0c9h
1  8919
1  8920	    1C45			 L1624:	 ; in:	 -
1  8921						 ; out:	 B = 0 and IX =	L005D --> no '-' found
1  8922						 ;	 B = 1 and IX =	L005E --> a '-'	found
1  8923						 ;	 Zero --> end of string	reached
1  8924	    1C45  DD 21				 DB 0ddh,21h
1  8925	    1C47  0129r				 DW L005D
1  8926	    1C49  DD 7E	00			 DB 0ddh,7eh,+0
1  8927	    1C4C  B7				 DB 0b7h
1  8928	    1C4D  C8				 DB 0c8h		 ; quit	if zero
1  8929
1  8930	    1C4E  06 00				 DB 06h,0			 ; assume positive
1  8931	    1C50  FE 2D				 DB 0feh, '-'			  ; minus sign ?
1  8932	    1C52  C0				 DB 0c0h		 ; quit	with NonZero of	something else
1  8933
1  8934	    1C53  04				 DB 04h			 ; no, negative	number
1  8935	    1C54  DD 23				 DB 0ddh,23h			 ; next	character
1  8936						 ; quit	with NonZero (INC B)
1  8937	    1C56  C9				 DB 0c9h
1  8938
1  8939	    1C57			 L1636:	 ; checks a correct termination	of the parsed string
1  8940						 ; in:	 IX = position of character after parsed string
1  8941						 ;	 Carry flag -->	IORESULT = 10H
1  8942						 ; out:	 NonCarry if '\0' found	at (IX), A not changed
1  8943						 ;	 Carry if no '\0' found	at (IX), A changed
1  8944						 ; changes: AF,	IORESULT
1  8945
1  8946	    1C57  38 07				 DB 38h,(L163D)-$-1
1  8947
1  8948	    1C59  DD 34	00			 DB 0ddh,034h,+0	 ; string correct ended	?
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 158
msx_asm\rtl_rtl.ASM



1  8949	    1C5C  DD 35	00			 DB 0ddh,035h,+0
1  8950	    1C5F  C8				 DB 0c8h		 ; yes,	quit
1  8951
1  8952	    1C60  3E 10			 L163D:	 DB 3eh,10H
1  8953	    1C62  32				 DB 32h
1  8954	    1C63  01A0r				 DW L00D0		 ; IORESULT = 10H, Error in numeric format
1  8955	    1C65  37				 DB 37h
1  8956	    1C66  C9				 DB 0c9h
1  8957
1  8958
1  8959
1  8960						 GLOBALS L1644
2  8961
2  8962						  IRP NAME,<L1644>
2  8963							   GLOBAL2 <NAME>
2  8964						  ENDM
3  8965							   GLOBAL2 <L1644>
4  8966						  GLOBAL L1644 : NEAR
4  8967
4  8968						  GLOBAL _L1644	: NEAR
4  8969	    1C67			 _L1644:
4  8970
2  8971
1  8972	    1C67			 L1644:	  ; READ (VAR F: TEXT; VAR C: CHAR);
1  8973	    1C67  E5				  DB 0e5h		     ; LIB
1  8974	    1C68  CD				 DB 0cdh
1  8975	    1C69  1B56r				 DW  L156B		 ; read	character from file or device
1  8976	    1C6B  CB AE				 DB 0cbh,0aeh
1  8977	    1C6D  E1				 DB 0e1h
1  8978	    1C6E  77				 DB 77h
1  8979	    1C6F  C9				 DB 0c9h
1  8980
1  8981						 GLOBALS L164D
2  8982
2  8983						  IRP NAME,<L164D>
2  8984							   GLOBAL2 <NAME>
2  8985						  ENDM
3  8986							   GLOBAL2 <L164D>
4  8987						  GLOBAL L164D : NEAR
4  8988
4  8989						  GLOBAL _L164D	: NEAR
4  8990	    1C70			 _L164D:
4  8991
2  8992
1  8993	    1C70			 L164D:	  ; READ (VAR F: TEXT; VAR B: BYTE);
1  8994						  ; store as BYTE
1  8995	    1C70  3E 01				 DB 3eh,1			 ; store as BYTE
1  8996	    1C72  18 01				 DB 18h,( L164F)-$-1
1  8997
1  8998
1  8999
1  9000						 GLOBALS L164E
2  9001
2  9002						  IRP NAME,<L164E>
2  9003							   GLOBAL2 <NAME>
2  9004						  ENDM
3  9005							   GLOBAL2 <L164E>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 159
msx_asm\rtl_rtl.ASM



4  9006						  GLOBAL L164E : NEAR
4  9007
4  9008						  GLOBAL _L164E	: NEAR
4  9009	    1C74			 _L164E:
4  9010
2  9011
1  9012	    1C74			 L164E:	  ; READ (VAR F: TEXT; VAR I: INTEGER);
1  9013						  ; store as INTEGER
1  9014	    1C74  AF				 DB 0afh		 ; store as INTEGER
1  9015
1  9016	    1C75			 L164F:	 ; in:	 HL = destination address for INTEGER value
1  9017						 ;	 IX = address of first ASCII character
1  9018						 ;	 C = 0,	store as INTEGER
1  9019						 ;	 C = > 0, store	as BYTE
1  9020						 ; out:	 HL = INTEGER value
1  9021						 ;	 DE = destination address + 1
1  9022	    1C75  4F				 DB 4fh
1  9023	    1C76  C5				 DB 0c5h
1  9024	    1C77  CD				 DB 0cdh
1  9025	    1C78  1C11r				 DW  L15F0
1  9026	    1C7A  C1				 DB 0c1h
1  9027	    1C7B  CD				 DB 0cdh
1  9028	    1C7C  1C45r				 DW  L1624		 ; read	an optional sign
1  9029	    1C7E  C8				 DB 0c8h		 ; quit	if end of ASCII-text
1  9030
1  9031						 ; B = 0, no sign
1  9032						 ; B = 1, a sign
1  9033	    1C7F  C5				 DB 0c5h
1  9034	    1C80  E5				 DB 0e5h		 ; save	destination address
1  9035
1  9036	    1C81  CD				 DB 0cdh
1  9037	    1C82  0C8Ar				 DW  L07F7		 ; convert hexadecimal or decimal to HL
1  9038
1  9039	    1C84  D1				 DB 0d1h		 ; DE =	destination address
1  9040	    1C85  C1				 DB 0c1h		 ; B = sign flag
1  9041						 ; Carry if error at conversion
1  9042
1  9043	    1C86  CD				 DB 0cdh
1  9044	    1C87  1C57r				 DW  L1636		 ; conversion ended correct ?
1  9045	    1C89  D8				 DB 0d8h		 ; quit	if error
1  9046
1  9047	    1C8A  05				 DB 05h			 ; B = 1 ?, a sign read	?
1  9048	    1C8B  CC				 DB 0cch
1  9049	    1C8C  09E5r				 DW L0783		 ; Zero	--> negate HL
1  9050
1  9051	    1C8E  EB				 DB 0ebh		 ; HL =	destination address
1  9052									 ; DE =	INTEGER	value
1  9053	    1C8F  73				 DB 73h		 ; store low-byte
1  9054
1  9055	    1C90  0C				 DB 0ch			 ; byte	?
1  9056	    1C91  0D				 DB 0dh
1  9057	    1C92  20 02				 DB 20h,(L1670)-$-1		 ; yes,	only low-byte stored
1  9058
1  9059	    1C94  23				 DB 23h
1  9060	    1C95  72				 DB 72h		 ; store high-byte
1  9061
1  9062	    1C96  EB			 L1670:	 DB 0ebh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 160
msx_asm\rtl_rtl.ASM



1  9063	    1C97  C9				 DB 0c9h
1  9064
1  9065						 GLOBALS L1671
2  9066
2  9067						  IRP NAME,<L1671>
2  9068							   GLOBAL2 <NAME>
2  9069						  ENDM
3  9070							   GLOBAL2 <L1671>
4  9071						  GLOBAL L1671 : NEAR
4  9072
4  9073						  GLOBAL _L1671	: NEAR
4  9074	    1C98			 _L1671:
4  9075
2  9076
1  9077	    1C98			 L1671:	  ; READ (VAR F: TEXT; VAR L: LONGINT);
1  9078						  ; LIB
1  9079						 ; in:	 HL = destination address for LONGINT value
1  9080						 ;	 IX = address of first ASCII character
1  9081						 ; out:	 DE:HL = LONGINT value
1  9082	    1C98  CD				 DB 0cdh
1  9083	    1C99  1C11r				 DW  L15F0
1  9084
1  9085	    1C9B  CD				 DB 0cdh
1  9086	    1C9C  1C45r				 DW  L1624		 ; read	an optional sign
1  9087	    1C9E  C8				 DB 0c8h
1  9088
1  9089						 ; B = 0, no sign
1  9090						 ; B = 1, a sign
1  9091	    1C9F  E5				 DB 0e5h		 ; save	destination address
1  9092	    1CA0  C5				 DB 0c5h		 ; save	sign flag
1  9093
1  9094	    1CA1  CD				 DB 0cdh
1  9095	    1CA2  0CE6r				 DW  A2L		 ; convert hexadecimal or decimal to DE:HL
1  9096
1  9097	    1CA4  C1				 DB 0c1h		 ; B = sign flag
1  9098
1  9099	    1CA5  F5				 DB 0f5h
1  9100	    1CA6  05				 DB 05h
1  9101	    1CA7  CC				 DB 0cch
1  9102	    1CA8  0A64r				 DW L_NEG		 ; Zero	--> negate LONGINT DE:HL
1  9103	    1CAA  F1				 DB 0f1h
1  9104
1  9105	    1CAB  C1				 DB 0c1h		 ; BC =	destination address
1  9106						 ; Carry if error at conversion
1  9107
1  9108	    1CAC  CD				 DB 0cdh
1  9109	    1CAD  1C57r				 DW  L1636		 ; conversion ended correct ?
1  9110	    1CAF  D8				 DB 0d8h		 ; quit	if error
1  9111
1  9112	    1CB0  C5				 DB 0c5h		 ; save	destination address
1  9113	    1CB1  44				 DB 44h			 ; BC =	low-word
1  9114	    1CB2  4D				 DB 4dh
1  9115	    1CB3  E1				 DB 0e1h		 ; HL =	destination address
1  9116
1  9117	    1CB4  71				 DB 71h		 ; store low-word
1  9118	    1CB5  23				 DB 23h
1  9119	    1CB6  70				 DB 70h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 161
msx_asm\rtl_rtl.ASM



1  9120	    1CB7  23				 DB 23h
1  9121
1  9122	    1CB8  73				 DB 73h		 ; store high-word
1  9123	    1CB9  23				 DB 23h
1  9124	    1CBA  72				 DB 72h
1  9125	    1CBB  60				 DB 60h			 ; restore low-word
1  9126	    1CBC  69				 DB 69h
1  9127						 ; return DE:HL
1  9128	    1CBD  C9				 DB 0c9h
1  9129
1  9130
1  9131						 GLOBALS L1672
2  9132
2  9133						  IRP NAME,<L1672>
2  9134							   GLOBAL2 <NAME>
2  9135						  ENDM
3  9136							   GLOBAL2 <L1672>
4  9137						  GLOBAL L1672 : NEAR
4  9138
4  9139						  GLOBAL _L1672	: NEAR
4  9140	    1CBE			 _L1672:
4  9141
2  9142
1  9143	    1CBE			 L1672:	  ; READ (VAR F: TEXT; VAR R: REAL);
1  9144	    1CBE  CD				  DB 0cdh
1  9145	    1CBF  1C11r				 DW  L15F0		   ; LIB
1  9146	    1CC1  CD				 DB 0cdh
1  9147	    1CC2  1C45r				 DW  L1624
1  9148	    1CC4  C8				 DB 0c8h
1  9149
1  9150	    1CC5  C5				  DB 0c5h
1  9151	    1CC6  E5				 DB 0e5h
1  9152
1  9153	    1CC7  CD				  DB 0cdh
1  9154	    1CC8  1770r				 DW  L11A3		   ; convert ascii to HLDEBC
1  9155
1  9156	    1CCA  D9				  DB 0d9h
1  9157	    1CCB  E1				 DB 0e1h
1  9158	    1CCC  C1				 DB 0c1h
1  9159
1  9160	    1CCD  CD				  DB 0cdh
1  9161	    1CCE  1C57r				 DW  L1636
1  9162	    1CD0  D8				 DB 0d8h
1  9163
1  9164	    1CD1  05				  DB 05h
1  9165
1  9166	    1CD2  D9				  DB 0d9h
1  9167	    1CD3  CC				 DB 0cch
1  9168	    1CD4  0FB8r				 DW L0A8F
1  9169	    1CD6  D9				 DB 0d9h
1  9170	    1CD7  C3				 DB 0c3h
1  9171	    1CD8  07BCr				 DW  L05D1		 ; PUTFLT
1  9172
1  9173						 GLOBALS L168E
2  9174
2  9175						  IRP NAME,<L168E>
2  9176							   GLOBAL2 <NAME>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 162
msx_asm\rtl_rtl.ASM



2  9177						  ENDM
3  9178							   GLOBAL2 <L168E>
4  9179						  GLOBAL L168E : NEAR
4  9180
4  9181						  GLOBAL _L168E	: NEAR
4  9182	    1CDA			 _L168E:
4  9183
2  9184
1  9185	    1CDA			 L168E:	  ; READ (VAR F: TEXT; VAR S: STRING);
1  9186	    1CDA  E5				  DB 0e5h		     ; LIB
1  9187	    1CDB  EB				 DB 0ebh
1  9188	    1CDC  0E 00				 DB 0eh,0
1  9189	    1CDE  C5			 L1692:	 DB 0c5h
1  9190	    1CDF  D5				 DB 0d5h
1  9191	    1CE0  CD				 DB 0cdh
1  9192	    1CE1  1B56r				 DW  L156B		 ; read	character from file or device
1  9193	    1CE3  D1				 DB 0d1h
1  9194	    1CE4  C1				 DB 0c1h
1  9195	    1CE5  FE 0D				 DB 0feh, 0DH
1  9196	    1CE7  28 0B				 DB 28h,(L16A8)-$-1
1  9197	    1CE9  FE 1A				 DB 0feh, 1AH
1  9198	    1CEB  28 07				 DB 28h,(L16A8)-$-1
1  9199	    1CED  CB AE				 DB 0cbh,0aeh
1  9200	    1CEF  0C				 DB 0ch
1  9201	    1CF0  13				 DB 13h
1  9202	    1CF1  12				 DB 12h
1  9203	    1CF2  10 EA				 DB 10h,( L1692)-$-1
1  9204	    1CF4  E1			 L16A8:	 DB 0e1h
1  9205	    1CF5  71				 DB 71h
1  9206	    1CF6  C9				 DB 0c9h
1  9207
1  9208						 GLOBALS L16AB
2  9209
2  9210						  IRP NAME,<L16AB>
2  9211							   GLOBAL2 <NAME>
2  9212						  ENDM
3  9213							   GLOBAL2 <L16AB>
4  9214						  GLOBAL L16AB : NEAR
4  9215
4  9216						  GLOBAL _L16AB	: NEAR
4  9217	    1CF7			 _L16AB:
4  9218
2  9219
1  9220	    1CF7			 L16AB:	  ; READLN (VAR	F: TEXT);
1  9221						  ; LIB
1  9222	    1CF7  CD				 DB 0cdh
1  9223	    1CF8  1B56r				 DW  L156B		 ; read	character from file or device
1  9224	    1CFA  FE 1A				 DB 0feh, 1AH
1  9225	    1CFC  28 13				 DB 28h,(L16C5)-$-1		 ; quit	if ^Z
1  9226
1  9227	    1CFE  CB AE				  DB 0cbh,0aeh		       ; no pre-read character
1  9228
1  9229	    1D00  FE 0A				 DB 0feh, 0AH
1  9230	    1D02  28 0D				  DB 28h,(L16C5)-$-1		     ; quit if linefeed
1  9231
1  9232	    1D04  FE 0D				 DB 0feh, 0DH
1  9233	    1D06  20 EF				 DB 20h,(L16AB)-$-1		 ; repeat while	not return
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 163
msx_asm\rtl_rtl.ASM



1  9234
1  9235
1  9236	    1D08  CD				 DB 0cdh
1  9237	    1D09  1B56r				 DW  L156B		 ; read	character from file or device
1  9238	    1D0B  FE 0A				 DB 0feh, 0AH
1  9239	    1D0D  20 02				  DB 20h,(L16C5)-$-1		    ; jump if not linefeed
1  9240									     ; this character will be read the next time
1  9241
1  9242						  ; 0Dh, 0Ah found, carriage return and	linefeed found
1  9243
1  9244	    1D0F  CB AE				  DB 0cbh,0aeh		       ; no pre-read character
1  9245
1  9246	    1D11  C9			 L16C5:	  DB 0c9h
1  9247
1  9248
1  9249
1  9250	    1D12			 L16C6:	 ; in:	 A = character
1  9251						 ; out:	 character printed to a	device or a file
1  9252	    1D12  2A				 DB 02ah
1  9253	    1D13  01ACr				 DW L00E2		 ; HL =	FIB address
1  9254	    1D15  4F				 DB 4fh			 ; C = character data
1  9255
1  9256	    1D16  3A				 DB 3ah
1  9257	    1D17  01A0r				 DW L00D0		 ; read	IORESULT
1  9258	    1D19  B7				 DB 0b7h
1  9259	    1D1A  C0				 DB 0c0h		 ; quit	if an error occurred
1  9260	    1D1B  7E				 DB 7eh
1  9261	    1D1C  E6 0F				 DB 0e6h, 0FH
1  9262	    1D1E  20 10				 DB 20h,(L16E4)-$-1		 ; jump	if device
1  9263
1  9264						  OFF_HL 0 DOS_PTR
2  9265		  =0002			 ??000F	     EQU (DOS_PTR)-(0)
2  9266
2  9267	    1D20  23				    DB 23h; INC	HL
2  9268	    1D21  23				    DB 23h; INC	HL
2  9269
1  9270					 ;	  INC HL
1  9271					 ;	  INC HL		  ; offset to FIB_PTR
1  9272	    1D22  E5				 DB 0e5h
1  9273	    1D23  7E				 DB 7eh		 ; A = low byte	of FIB_PTR
1  9274	    1D24  C6 4F				  DB 0c6h,DOS_BUF-DOS_PTR      ; 2EH, distance between FIB_PTR and FIB_BUF
1  9275	    1D26  5F				 DB 5fh
1  9276	    1D27  16 00				 DB 16h,0
1  9277	    1D29  19				 DB 019h
1  9278	    1D2A  71				 DB 71h		 ; write character
1  9279	    1D2B  E1				 DB 0e1h
1  9280	    1D2C  34				 DB 034h		 ; increase FIB_PTR
1  9281	    1D2D  F0				 DB 0f0h		 ; quit	if < 128
1  9282	    1D2E  18 28				 DB 18h,( L170C)-$-1		 ; write buffer	if FIB_PTR = 128
1  9283									 ; why not directly to 'LD (HL),0' ???
1  9284
1  9285	    1D30  FE 06			 L16E4:	 DB 0feh, 6
1  9286	    1D32  28 15				 DB 28h,(L16FD)-$-1		 ; what	kind of	a device is this ????
1  9287
1  9288	    1D34  E1				 DB 0e1h		 ; pop return address
1  9289	    1D35  06 00				 DB 06h,0
1  9290	    1D37  C5				 DB 0c5h		 ; push	BC = character data
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 164
msx_asm\rtl_rtl.ASM



1  9291	    1D38  E5				 DB 0e5h		 ; push	return address
1  9292
1  9293	    1D39  3D				 DB 3dh			 ; 1: device = 'CON:' ?
1  9294	    1D3A  CA				 DB 0cah
1  9295	    1D3B  016Er				 DW CONOUTPTR
1  9296	    1D3D  3D				 DB 3dh
1  9297	    1D3E  3D				 DB 3dh			 ; 3: device = 'LST:' ?
1  9298	    1D3F  CA				 DB 0cah
1  9299	    1D40  0171r				 DW LSTOUTPTR
1  9300	    1D42  3D				 DB 3dh			 ; 4: device = 'AUX:' ?
1  9301	    1D43  CA				 DB 0cah
1  9302	    1D44  0174r				 DW AUXOUTPTR
1  9303	    1D46  C3				 DB 0c3h
1  9304	    1D47  017Ar				 DW  USROUTPTR		 ; 5: device = 'USR:' ?
1  9305
1  9306	    1D49  2A			 L16FD:	 DB 02ah
1  9307	    1D4A  01B2r				 DW L00E8
1  9308	    1D4C  3A				 DB 3ah
1  9309	    1D4D  01B4r				 DW L00EA
1  9310	    1D4F  BE				 DB 0beh
1  9311	    1D50  C8				 DB 0c8h
1  9312	    1D51  34				 DB 034h
1  9313	    1D52  5E				 DB 5eh		 ; DE =	index
1  9314	    1D53  16 00				 DB 16h,0
1  9315	    1D55  19				 DB 019h
1  9316	    1D56  71				 DB 71h		 ; write character in buffer
1  9317	    1D57  C9				 DB 0c9h
1  9318
1  9319	    1D58			 L170C:	 ; flushes the buffer to disk if it is not empty
1  9320	    1D58  2A				 DB 02ah
1  9321	    1D59  01ACr				 DW L00E2
1  9322						  OFF_HL 0 DOS_PTR
2  9323		  =0002			 ??0010	     EQU (DOS_PTR)-(0)
2  9324
2  9325	    1D5B  23				    DB 23h; INC	HL
2  9326	    1D5C  23				    DB 23h; INC	HL
2  9327
1  9328					 ;	  INC HL
1  9329					 ;	  INC HL
1  9330	    1D5D  7E				  DB 7eh		  ; A =	low byte of DOS_PTR
1  9331	    1D5E  B7				 DB 0b7h
1  9332	    1D5F  C8				 DB 0c8h		 ; quit	if nothing written
1  9333	    1D60  36 00				  DB 36h,0		    ; reset to start of	DOS_BUF
1  9334
1  9335	    1D62  5F				  DB 5fh		     ; DE = number of bytes in buffer
1  9336	    1D63  16 00				  DB 16h,0
1  9337	    1D65  D5				  DB 0d5h		     ; save DE
1  9338
1  9339						  OFF_HL DOS_PTR DOS_FCB     ; HL = handle/FCB address
2  9340		  =000E			 ??0011	     EQU (DOS_FCB)-(DOS_PTR)
2  9341
2  9342	    1D66  D5					 DB 0D5H ; PUSH	DE
2  9343	    1D67  11					 DB 11H
2  9344	    1D68  000E					 DW ??0011
2  9345	    1D6A  19					 DB 19H	 ; ADD HL,DE
2  9346	    1D6B  D1					 DB 0D1H ; POP DE
2  9347
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 165
msx_asm\rtl_rtl.ASM



1  9348
1  9349	    1D6C  E5				  DB 0e5h		     ; save HL
1  9350
1  9351						  OFF_HL DOS_FCB DOS_BUF     ; HL = address of buffer
2  9352		  =0041			 ??0012	     EQU (DOS_BUF)-(DOS_FCB)
2  9353
2  9354	    1D6D  D5					 DB 0D5H ; PUSH	DE
2  9355	    1D6E  11					 DB 11H
2  9356	    1D6F  0041					 DW ??0012
2  9357	    1D71  19					 DB 19H	 ; ADD HL,DE
2  9358	    1D72  D1					 DB 0D1H ; POP DE
2  9359
1  9360	    1D73  54				  DB 54h		     ; DE = address of buffer
1  9361	    1D74  5D				  DB 5dh
1  9362	    1D75  C1				  DB 0c1h		      ;	BC = handle/FCB	address
1  9363	    1D76  E1				  DB 0e1h		      ;	HL = number of bytes to	write
1  9364	    1D77  CD				  DB 0cdh
1  9365	    1D78  0000e				 DW  WRITEFILE		   ; 33e, L2D8E	WriteFile
1  9366
1  9367	    1D7A  44				  DB 44h		     ; BC = number of bytes read
1  9368	    1D7B  4D				  DB 4dh
1  9369
1  9370					 ;	   LD C,15H		      ;	sequential write 128 bytes
1  9371					 ;	   CALL	L19BA		      ;	write FIB_BUF to current position
1  9372	    1D7C  C8				 DB 0c8h		 ; quit	if no error
1  9373	    1D7D  3E F0				 DB 3eh,0F0H
1  9374	    1D7F  32				 DB 32h
1  9375	    1D80  01A0r				 DW L00D0		 ; IORESULT = 0F0H, Disk write error
1  9376	    1D82  C9				 DB 0c9h
1  9377
1  9378
1  9379
1  9380						 GLOBALS L1722
2  9381
2  9382						  IRP NAME,<L1722>
2  9383							   GLOBAL2 <NAME>
2  9384						  ENDM
3  9385							   GLOBAL2 <L1722>
4  9386						  GLOBAL L1722 : NEAR
4  9387
4  9388						  GLOBAL _L1722	: NEAR
4  9389	    1D83			 _L1722:
4  9390
2  9391
1  9392	    1D83			 L1722:	  ; WRITE (VAR F: TEXT;	C: CHAR);
1  9393	    1D83  7D				  DB 7dh		     ; LIB
1  9394	    1D84  C3				 DB 0c3h
1  9395	    1D85  1D12r				 DW  L16C6
1  9396
1  9397
1  9398						 GLOBALS L1726
2  9399
2  9400						  IRP NAME,<L1726>
2  9401							   GLOBAL2 <NAME>
2  9402						  ENDM
3  9403							   GLOBAL2 <L1726>
4  9404						  GLOBAL L1726 : NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 166
msx_asm\rtl_rtl.ASM



4  9405
4  9406						  GLOBAL _L1726	: NEAR
4  9407	    1D87			 _L1726:
4  9408
2  9409
1  9410	    1D87			 L1726:	  ; WRITE (VAR F: TEXT;	I: INTEGER);
1  9411						  ; LIB, print INTEGER
1  9412						 ; in:	 value to print	is pushed on stack
1  9413						 ;	 HL = size in characters
1  9414						 ;	 (L00D2) destination address for ASCII result
1  9415						 ; out:	 -
1  9416	    1D87  C1				 DB 0c1h		 ; LIB
1  9417	    1D88  D1				 DB 0d1h
1  9418	    1D89  C5				 DB 0c5h
1  9419	    1D8A  DD 2A				 DB 0ddh,02ah
1  9420	    1D8C  01A1r				 DW L00D2
1  9421	    1D8E  CB 7C				 DB 0cbh,07ch
1  9422	    1D90  28 06				 DB 28h,(L1737)-$-1		 ; jump	if size	= positive
1  9423
1  9424						 ; print INTEGER as unsigned
1  9425	    1D92  CD				 DB 0cdh
1  9426	    1D93  09E5r				 DW  L0783		 ; negate HL (size)
1  9427	    1D95  EB				 DB 0ebh		 ; HL =	value, DE = size
1  9428	    1D96  18 0E				 DB 18h,( L1745)-$-1
1  9429
1  9430	    1D98  EB			 L1737:	 DB 0ebh		 ; HL =	value, DE = size
1  9431	    1D99  CB 7C				 DB 0cbh,07ch
1  9432	    1D9B  28 09				 DB 28h,(L1745)-$-1		 ; jump	if value = positive
1  9433
1  9434	    1D9D  CD				 DB 0cdh
1  9435	    1D9E  09E5r				 DW  L0783		 ; negate HL
1  9436	    1DA0  DD 36	00 2D			 DB 0ddh,36h,+0,'-'		 ; print minus sign
1  9437	    1DA4  DD 23				 DB 0ddh,23h
1  9438
1  9439	    1DA6  D5			 L1745:	 DB 0d5h		 ; push	size
1  9440
1  9441	    1DA7  CD				 DB 0cdh
1  9442	    1DA8  0C59r				 DW  L07C6		 ; unsigned INTEGER to ASCII
1  9443
1  9444	    1DAA			 L1749:	 ; print string	from character buffer (L00D2) with leading spaces if
1  9445						 ; pushed size > characters written in buffer
1  9446						 ; in:	 total size wanted is pushed
1  9447	    1DAA  E1				 DB 0e1h		 ; size, ( WRITELN(int : size) )
1  9448
1  9449	    1DAB  CD				 DB 0cdh
1  9450	    1DAC  06B5r				 DW  L04C8		 ; int to byte
1  9451						 ; A = size
1  9452
1  9453	    1DAE  ED 5B				 DB 0edh,5bh
1  9454	    1DB0  01A1r				 DW L00D2		 ; DE =	start of ASCII buffer
1  9455	    1DB2  DD E5				 DB 0ddh,0e5h
1  9456	    1DB4  E1				 DB 0e1h
1  9457	    1DB5  B7				 DB 0b7h
1  9458	    1DB6  ED 52				 DB 0EDH,052h
1  9459	    1DB8  4D				 DB 4dh			 ; C = characters written in buffer
1  9460
1  9461	    1DB9  EB				 DB 0ebh		 ; HL =	start of ASCII buffer
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 167
msx_asm\rtl_rtl.ASM



1  9462
1  9463	    1DBA			 L1759:	 ; in:	 HL = start of ASCII buffer
1  9464						 ;	 C = characters	written	in buffer
1  9465	    1DBA  91				 DB 091h		 ; size	- characters written
1  9466	    1DBB  38 0E				 DB 38h,(L176A)-$-1		 ; jump	if size	is less, no spaces first
1  9467	    1DBD  28 0C				 DB 28h,(L176A)-$-1		 ; jump	if size	is equal, no spaces first
1  9468
1  9469	    1DBF  47				 DB 47h			 ; B = number of spaces	to add
1  9470	    1DC0  E5				 DB 0e5h		 ; save	start of ASCII buffer
1  9471
1  9472	    1DC1  3E 20			 L1760:	 DB 3eh,' '
1  9473	    1DC3  C5				 DB 0c5h
1  9474	    1DC4  CD				 DB 0cdh
1  9475	    1DC5  1D12r				 DW  L16C6		 ; write space character
1  9476	    1DC7  C1				 DB 0c1h
1  9477	    1DC8  10 F7				 DB 10h,( L1760)-$-1		 ; repeat
1  9478
1  9479	    1DCA  E1				 DB 0e1h		 ; HL =	start of ASCII buffer
1  9480
1  9481	    1DCB  41			 L176A:	 DB 41h			 ; B = characters in ASCII buffer
1  9482	    1DCC  04				 DB 04h
1  9483
1  9484	    1DCD  05			 L176C:	 DB 05h
1  9485	    1DCE  C8				 DB 0c8h		 ; quit	if all printed (or empty)
1  9486
1  9487	    1DCF  7E				 DB 7eh		 ; A = chacacter to print
1  9488	    1DD0  C5				 DB 0c5h
1  9489	    1DD1  E5				 DB 0e5h
1  9490	    1DD2  CD				 DB 0cdh
1  9491	    1DD3  1D12r				 DW  L16C6		 ; print character
1  9492	    1DD5  E1				 DB 0e1h
1  9493	    1DD6  C1				 DB 0c1h
1  9494	    1DD7  23				 DB 23h			 ; next	one
1  9495	    1DD8  18 F3				 DB 18h,( L176C)-$-1
1  9496
1  9497						 GLOBALS L1779
2  9498
2  9499						  IRP NAME,<L1779>
2  9500							   GLOBAL2 <NAME>
2  9501						  ENDM
3  9502							   GLOBAL2 <L1779>
4  9503						  GLOBAL L1779 : NEAR
4  9504
4  9505						  GLOBAL _L1779	: NEAR
4  9506	    1DDA			 _L1779:
4  9507
2  9508
1  9509	    1DDA			 L1779:	  ; WRITE (VAR F: TEXT;	R: REAL);
1  9510						  ; LIB, print REAL
1  9511						 ; in:	 push REAL
1  9512						 ;	 push size
1  9513						 ;	 HL = number of	digits after decimal point
1  9514	    1DDA  C1				 DB 0c1h		 ; return address
1  9515
1  9516	    1DDB  D1				 DB 0d1h		 ; DE =	size of	real
1  9517
1  9518	    1DDC  D9				 DB 0d9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 168
msx_asm\rtl_rtl.ASM



1  9519	    1DDD  E1				 DB 0e1h		 ; HLDEBC = REAL to be printed
1  9520	    1DDE  D1				 DB 0d1h
1  9521	    1DDF  C1				 DB 0c1h
1  9522	    1DE0  D9				 DB 0d9h
1  9523
1  9524	    1DE1  C5				 DB 0c5h		 ; return address
1  9525
1  9526	    1DE2  DD 2A				 DB 0ddh,02ah
1  9527	    1DE4  01A1r				 DW L00D2		 ; IX =	destination address for	ASCII
1  9528	    1DE6  D5				 DB 0d5h		 ; push	size
1  9529
1  9530	    1DE7  CD				 DB 0cdh
1  9531	    1DE8  15F4r				 DW  L1027		 ; convert REAL	to ASCII
1  9532
1  9533	    1DEA  18 BE				 DB 18h,( L1749)-$-1
1  9534
1  9535						 GLOBALS PRT_LONG
2  9536
2  9537						  IRP NAME,<PRT_LONG>
2  9538							   GLOBAL2 <NAME>
2  9539						  ENDM
3  9540							   GLOBAL2 <PRT_LONG>
4  9541						  GLOBAL PRT_LONG : NEAR
4  9542
4  9543						  GLOBAL _PRT_LONG : NEAR
4  9544	    1DEC			 _PRT_LONG:
4  9545
2  9546
1  9547	    1DEC			 PRT_LONG:
1  9548						  ; WRITE (VAR F: TEXT;	L: LONGINT);
1  9549						 ; LIB,	print LONG
1  9550						 ; in:	 value to print	is pushed on stack
1  9551						 ;	 HL = size in characters
1  9552						 ;	 (L00D2) destination address for ASCII result
1  9553						 ; out:	 -
1  9554	    1DEC  DD E1				 DB 0ddh,0e1h			 ; LIB
1  9555	    1DEE  C1				 DB 0c1h		 ; BC =	low-word
1  9556	    1DEF  D1				 DB 0d1h		 ; DE =	high-word
1  9557	    1DF0  DD E5				 DB 0ddh,0e5h
1  9558
1  9559	    1DF2  DD 2A				 DB 0ddh,02ah
1  9560	    1DF4  01A1r				 DW L00D2
1  9561	    1DF6  CB 7C				 DB 0cbh,07ch
1  9562	    1DF8  28 05				 DB 28h,(PRT_LONG1)-$-1		 ; jump	if size	= positive
1  9563
1  9564						 ; print LONG as unsigned
1  9565	    1DFA  CD				 DB 0cdh
1  9566	    1DFB  09E5r				 DW  L0783		 ; negate HL (size)
1  9567	    1DFD  18 11				 DB 18h,( PRT_LONG2)-$-1
1  9568
1  9569	    1DFF			 PRT_LONG1:
1  9570						 ; print LONG as signed
1  9571	    1DFF  C5				 DB 0c5h
1  9572	    1E00  E3				 DB 0e3h	 ; HL =	low-word, (SP) = size
1  9573
1  9574						  ; DE:HL = value
1  9575	    1E01  CB 7A				  DB 0cbh,07ah
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 169
msx_asm\rtl_rtl.ASM



1  9576	    1E03  28 09				 DB 28h,(PRT_LONG11)-$-1	 ; jump	if value = positive
1  9577
1  9578	    1E05  CD				 DB 0cdh
1  9579	    1E06  0A64r				 DW  L_NEG		 ; negate DE:HL
1  9580	    1E08  DD 36	00 2D			 DB 0ddh,36h,+0,'-'		 ; print minus sign
1  9581	    1E0C  DD 23				 DB 0ddh,23h
1  9582
1  9583	    1E0E			 PRT_LONG11:
1  9584	    1E0E  E3				 DB 0e3h	 ; HL =	size, (SP) = low-word
1  9585	    1E0F  C1				 DB 0c1h		 ; BC =	low-word
1  9586
1  9587	    1E10			 PRT_LONG2:
1  9588
1  9589						 ; DE:BC = LONG
1  9590						 ;    HL = size
1  9591	    1E10  E5				 DB 0e5h		 ; push	size
1  9592
1  9593	    1E11  60				  DB 60h
1  9594	    1E12  69				  DB 69h
1  9595	    1E13  CD				 DB 0cdh
1  9596	    1E14  0CCCr				 DW  L2A		 ; unsigned LONG to ASCII
1  9597
1  9598	    1E16  18 92				 DB 18h,( L1749)-$-1
1  9599
1  9600
1  9601						 GLOBALS L178B
2  9602
2  9603						  IRP NAME,<L178B>
2  9604							   GLOBAL2 <NAME>
2  9605						  ENDM
3  9606							   GLOBAL2 <L178B>
4  9607						  GLOBAL L178B : NEAR
4  9608
4  9609						  GLOBAL _L178B	: NEAR
4  9610	    1E18			 _L178B:
4  9611
2  9612
1  9613	    1E18			 L178B:	  ; WRITE (VAR F: TEXT;	B: BOOLEAN);
1  9614						  ; LIB, print BOOLEAN
1  9615	    1E18  C1				 DB 0c1h		 ; LIB
1  9616	    1E19  D1				 DB 0d1h
1  9617	    1E1A  C5				 DB 0c5h
1  9618	    1E1B  CD				 DB 0cdh
1  9619	    1E1C  06B5r				 DW  L04C8		 ; int to byte
1  9620	    1E1E  CB 43				 DB 0cbh,043h
1  9621	    1E20  21				 DB 21h
1  9622	    1E21  1E2Er				 DW L17A1		 ; HL =	'TRUE' text
1  9623	    1E23  0E 04				 DB 0eh,4			 ;  C =	4 characters
1  9624	    1E25  20 93				 DB 20h,(L1759)-$-1
1  9625	    1E27  21				 DB 21h
1  9626	    1E28  1E32r				 DW L17A5		 ; HL =	'FALSE'	test
1  9627	    1E2A  0E 05				 DB 0eh,5			 ;  C =	5 characters
1  9628	    1E2C  18 8C				 DB 18h,( L1759)-$-1
1  9629
1  9630	    1E2E  54 52	55 45		 L17A1:	 DB 'TRUE'
1  9631	    1E32  46 41	4C 53 45	 L17A5:	 DB 'FALSE'
1  9632
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 170
msx_asm\rtl_rtl.ASM



1  9633						 GLOBALS L17AA
2  9634
2  9635						  IRP NAME,<L17AA>
2  9636							   GLOBAL2 <NAME>
2  9637						  ENDM
3  9638							   GLOBAL2 <L17AA>
4  9639						  GLOBAL L17AA : NEAR
4  9640
4  9641						  GLOBAL _L17AA	: NEAR
4  9642	    1E37			 _L17AA:
4  9643
2  9644
1  9645	    1E37			 L17AA:	  ; WRITE (VAR F: TEXT;	S: STRING);
1  9646						  ; LIB
1  9647	    1E37  CD				  DB 0cdh
1  9648	    1E38  06B5r				 DW  L04C8		   ; int to byte
1  9649	    1E3A  21				 DB 21h
1  9650	    1E3B  0002				 DW 2
1  9651	    1E3D  39				 DB 039h
1  9652
1  9653	    1E3E  4E				 DB 4eh
1  9654	    1E3F  23				 DB 23h
1  9655
1  9656	    1E40  CD				  DB 0cdh
1  9657	    1E41  1DBAr				 DW  L1759
1  9658
1  9659	    1E43  D1				  DB 0d1h		      ;	DE = return address
1  9660
1  9661	    1E44  F9				  DB 0f9h		    ; remove string from stack
1  9662
1  9663	    1E45  D5				  DB 0d5h		     ; jump to return address
1  9664	    1E46  C9				 DB 0c9h
1  9665
1  9666						 GLOBALS L17BA
2  9667
2  9668						  IRP NAME,<L17BA>
2  9669							   GLOBAL2 <NAME>
2  9670						  ENDM
3  9671							   GLOBAL2 <L17BA>
4  9672						  GLOBAL L17BA : NEAR
4  9673
4  9674						  GLOBAL _L17BA	: NEAR
4  9675	    1E47			 _L17BA:
4  9676
2  9677
1  9678	    1E47			 L17BA:	  ; WRITE (VAR F: TEXT;	CONSTANT STRING);
1  9679	    1E47  E1				  DB 0e1h		      ;	LIB
1  9680	    1E48  7E				 DB 7eh
1  9681	    1E49  23				 DB 23h
1  9682	    1E4A  B7				 DB 0b7h
1  9683	    1E4B  28 0C				 DB 28h,(L17CC)-$-1
1  9684	    1E4D  47				 DB 47h
1  9685
1  9686	    1E4E  7E			 L17C1:	 DB 7eh
1  9687	    1E4F  C5				 DB 0c5h
1  9688	    1E50  E5				 DB 0e5h
1  9689	    1E51  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 171
msx_asm\rtl_rtl.ASM



1  9690	    1E52  1D12r				 DW  L16C6
1  9691	    1E54  E1				 DB 0e1h
1  9692	    1E55  C1				 DB 0c1h
1  9693	    1E56  23				 DB 23h
1  9694	    1E57  10 F5				 DB 10h,( L17C1)-$-1
1  9695
1  9696	    1E59  E9			 L17CC:	  DB 0e9h		     ; jump to return address
1  9697
1  9698						 GLOBALS L17CD
2  9699
2  9700						  IRP NAME,<L17CD>
2  9701							   GLOBAL2 <NAME>
2  9702						  ENDM
3  9703							   GLOBAL2 <L17CD>
4  9704						  GLOBAL L17CD : NEAR
4  9705
4  9706						  GLOBAL _L17CD	: NEAR
4  9707	    1E5A			 _L17CD:
4  9708
2  9709
1  9710	    1E5A			 L17CD:	  ; WRITELN (VAR F: TEXT);
1  9711	    1E5A  3E 0D				  DB 3eh,0DH		       ; LIB, prints CR	LF codes
1  9712	    1E5C  CD				 DB 0cdh
1  9713	    1E5D  1D12r				 DW  L16C6
1  9714	    1E5F  3E 0A				 DB 3eh,0AH
1  9715	    1E61  C3				 DB 0c3h
1  9716	    1E62  1D12r				 DW  L16C6
1  9717
1  9718						 GLOBALS L17D7
2  9719
2  9720						  IRP NAME,<L17D7>
2  9721							   GLOBAL2 <NAME>
2  9722						  ENDM
3  9723							   GLOBAL2 <L17D7>
4  9724						  GLOBAL L17D7 : NEAR
4  9725
4  9726						  GLOBAL _L17D7	: NEAR
4  9727	    1E64			 _L17D7:
4  9728
2  9729
1  9730	    1E64			 L17D7:	 ; FUNCTION SeekEoln(VAR F: TEXT): BOOLEAN;
1  9731	    1E64  11				  DB 11h
1  9732	    1E65  010D				 DW 010DH		 ; D = 1 (repeat), search 0Dh
1  9733	    1E67  18 0D				 DB 18h,( L17E9)-$-1
1  9734
1  9735						 GLOBALS L17DC
2  9736
2  9737						  IRP NAME,<L17DC>
2  9738							   GLOBAL2 <NAME>
2  9739						  ENDM
3  9740							   GLOBAL2 <L17DC>
4  9741						  GLOBAL L17DC : NEAR
4  9742
4  9743						  GLOBAL _L17DC	: NEAR
4  9744	    1E69			 _L17DC:
4  9745
2  9746
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 172
msx_asm\rtl_rtl.ASM



1  9747	    1E69			 L17DC:	 ; FUNCTION Eoln(VAR F:	TEXT): BOOLEAN;
1  9748	    1E69  11				  DB 11h
1  9749	    1E6A  000D				 DW 0DH			 ; D = 0 (no repeat), test if 0Dh
1  9750	    1E6C  18 08				 DB 18h,( L17E9)-$-1
1  9751
1  9752						 GLOBALS L17E1
2  9753
2  9754						  IRP NAME,<L17E1>
2  9755							   GLOBAL2 <NAME>
2  9756						  ENDM
3  9757							   GLOBAL2 <L17E1>
4  9758						  GLOBAL L17E1 : NEAR
4  9759
4  9760						  GLOBAL _L17E1	: NEAR
4  9761	    1E6E			 _L17E1:
4  9762
2  9763
1  9764	    1E6E			 L17E1:	 ; LIB
1  9765						  ; FUNCTION SeekEof(VAR F: TEXT): BOOLEAN;
1  9766	    1E6E  11				  DB 11h
1  9767	    1E6F  011A				 DW 011AH		 ; D = 1 (repeat), search 1Ah
1  9768	    1E71  18 03				 DB 18h,( L17E9)-$-1
1  9769
1  9770						 GLOBALS L17E6
2  9771
2  9772						  IRP NAME,<L17E6>
2  9773							   GLOBAL2 <NAME>
2  9774						  ENDM
3  9775							   GLOBAL2 <L17E6>
4  9776						  GLOBAL L17E6 : NEAR
4  9777
4  9778						  GLOBAL _L17E6	: NEAR
4  9779	    1E73			 _L17E6:
4  9780
2  9781
1  9782	    1E73			 L17E6:	 ; LIB
1  9783						  ; FUNCTION Eof(VAR F:	TEXT): BOOLEAN;
1  9784	    1E73  11				  DB 11h
1  9785	    1E74  001A				 DW 1AH			 ; D = 0 (no repeat), test if 1Ah
1  9786
1  9787	    1E76			 L17E9:	 ; in:	 HL = FIB address
1  9788	    1E76  22				 DB 22h
1  9789	    1E77  01ACr				 DW L00E2		 ; save	FIB address
1  9790	    1E79  CB 7E				 DB 0cbh,07eh
1  9791	    1E7B  28 1C				 DB 28h,(L180C)-$-1		 ; jump	if no input allowed, return False
1  9792
1  9793	    1E7D  D5			 L17F0:	 DB 0d5h
1  9794	    1E7E  CD				 DB 0cdh
1  9795	    1E7F  1B56r				 DW  L156B		 ; read	character from file or device
1  9796	    1E81  D1				 DB 0d1h
1  9797	    1E82  BB				 DB 0bbh		 ; character found
1  9798	    1E83  28 10				 DB 28h,(L1808)-$-1
1  9799	    1E85  FE 1A				 DB 0feh, 1AH			 ; ^Z ?
1  9800	    1E87  28 0C				 DB 28h,(L1808)-$-1		 ; jump	if found, return True
1  9801	    1E89  FE 21				  DB 0feh, 21H			   ; >=	33 ? '!'
1  9802	    1E8B  30 0C				 DB 30h,(L180C)-$-1		 ; jump	if >= 31, return False
1  9803	    1E8D  14				 DB 14h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 173
msx_asm\rtl_rtl.ASM



1  9804	    1E8E  15				 DB 15h
1  9805	    1E8F  28 08				 DB 28h,(L180C)-$-1		 ; jump	if eof called, return False
1  9806
1  9807						 ; repeat for seek
1  9808	    1E91  CB AE				 DB 0cbh,0aeh		 ; no pre-read character
1  9809	    1E93  18 E8				 DB 18h,( L17F0)-$-1
1  9810
1  9811	    1E95  21			 L1808:	 DB 21h
1  9812	    1E96  0001				 DW 1			 ; return TRUE
1  9813	    1E98  C9				 DB 0c9h
1  9814
1  9815	    1E99  21			 L180C:	 DB 21h
1  9816	    1E9A  0000				 DW 0
1  9817	    1E9C  C9				 DB 0c9h		 ; return FALSE
1  9818
1  9819						 GLOBALS L1810
2  9820
2  9821						  IRP NAME,<L1810>
2  9822							   GLOBAL2 <NAME>
2  9823						  ENDM
3  9824							   GLOBAL2 <L1810>
4  9825						  GLOBAL L1810 : NEAR
4  9826
4  9827						  GLOBAL _L1810	: NEAR
4  9828	    1E9D			 _L1810:
4  9829
2  9830
1  9831	    1E9D			 L1810:	 ; LIB
1  9832						 ; PROCEDURE Rewrite(VAR F: FILE OF TYPE);
1  9833	    1E9D  3E AF				 DB 3eh,0AFH		 ; LIB,	LD A,XOR A
1  9834	    1E9F  C3				 DB 0c3h
1  9835	    1EA0  1EA3r				 DW  L1812
1  9836
1  9837						 GLOBALS L1811
2  9838
2  9839						  IRP NAME,<L1811>
2  9840							   GLOBAL2 <NAME>
2  9841						  ENDM
3  9842							   GLOBAL2 <L1811>
4  9843						  GLOBAL L1811 : NEAR
4  9844
4  9845						  GLOBAL _L1811	: NEAR
4  9846	    1EA2			 _L1811:
4  9847
2  9848
1  9849	    1EA2			 L1811:	 ; LIB
1  9850						 ; PROCEDURE Reset(VAR F: FILE OF TYPE);
1  9851	    1EA2  AF				 DB 0afh		 ; LIB
1  9852
1  9853	    1EA3			 L1812:	 ; in:	 HL = FIB address
1  9854						 ;	 DE = record length
1  9855	    1EA3  32				  DB 32h
1  9856	    1EA4  01B2r				 DW L00E8		; 0 = reset, NZ	= rewrite
1  9857
1  9858	    1EA6  53ED 01B0r			  DW 53edh,L00E6	      ;	save record length of typed file
1  9859
1  9860	    1EAA  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 174
msx_asm\rtl_rtl.ASM



1  9861	    1EAB  1F40r				 DW  L187A		 ; close a typed file
1  9862	    1EAD  3A				 DB 3ah
1  9863	    1EAE  01A0r				 DW L00D0		 ; read	IORESULT
1  9864	    1EB0  B7				 DB 0b7h
1  9865	    1EB1  C0				 DB 0c0h		 ; quit	if an error occurred
1  9866
1  9867	    1EB2  CD				 DB 0cdh
1  9868	    1EB3  1A17r				 DW  L1430		 ; open	or create file
1  9869	    1EB5  3A				 DB 3ah
1  9870	    1EB6  01A0r				 DW L00D0		 ; read	IORESULT
1  9871	    1EB8  B7				 DB 0b7h
1  9872	    1EB9  C0				 DB 0c0h		 ; quit	if an error occurred
1  9873
1  9874						 ; watch it !!,	A = 0
1  9875	    1EBA  2A				 DB 02ah
1  9876	    1EBB  01ACr				 DW L00E2
1  9877	    1EBD  36 D0				 DB 36h,0D0H		 ; bit 7 = '1',	input allowed
1  9878									 ; bit 6 = '1',	output allowed
1  9879									 ; bit 5 = '0',	no data	written	to buffer
1  9880									 ; bit 4 = '1',	contents is undefined
1  9881
1  9882	    1EBF  AF				  DB 0afh
1  9883						  OFF_HL 0 DOS_PTR
2  9884		  =0002			 ??0013	     EQU (DOS_PTR)-(0)
2  9885
2  9886	    1EC0  23				    DB 23h; INC	HL
2  9887	    1EC1  23				    DB 23h; INC	HL
2  9888
1  9889	    1EC2  77				  DB 77h		  ; DOS_PTR = 0
1  9890	    1EC3  23				  DB 23h
1  9891	    1EC4  77				  DB 77h
1  9892
1  9893						  OFF_HL DOS_PTR+1 DOS_CUR
2  9894		  =0009			 ??0014	     EQU (DOS_CUR)-(DOS_PTR+1)
2  9895
2  9896	    1EC5  D5					 DB 0D5H ; PUSH	DE
2  9897	    1EC6  11					 DB 11H
2  9898	    1EC7  0009					 DW ??0014
2  9899	    1EC9  19					 DB 19H	 ; ADD HL,DE
2  9900	    1ECA  D1					 DB 0D1H ; POP DE
2  9901
1  9902					 ;	  LD DE,6
1  9903					 ;	  ADD HL,DE
1  9904	    1ECB  77				 DB 77h		 ; FIB_CUR = 0
1  9905	    1ECC  23				 DB 23h
1  9906	    1ECD  77				 DB 77h
1  9907	    1ECE  23				  DB 23h
1  9908	    1ECF  77				  DB 77h
1  9909	    1ED0  23				  DB 23h
1  9910	    1ED1  77				  DB 77h
1  9911
1  9912					 ;	   OFF_HL FIB_CUR+1 FIB_FCB+21H	; offset to position in	FCB
1  9913					 ;;	    LD DE,0024H
1  9914					 ;;	    ADD	HL,DE
1  9915					 ;	   LD (HL),A
1  9916					 ;	   INC HL
1  9917					 ;	   LD (HL),A
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 175
msx_asm\rtl_rtl.ASM



1  9918
1  9919						  OFF_HL DOS_CUR+3 DOS_NUM
2  9920		  =-0009		 ??0015	     EQU (DOS_NUM)-(DOS_CUR+3)
2  9921
2  9922	    1ED2  D5					 DB 0D5H ; PUSH	DE
2  9923	    1ED3  11					 DB 11H
2  9924	    1ED4  FFF7					 DW ??0015
2  9925	    1ED6  19					 DB 19H	 ; ADD HL,DE
2  9926	    1ED7  D1					 DB 0D1H ; POP DE
2  9927
1  9928					 ;	   OFF_HL FIB_FCB+21H+1	FIB_NUM	; offset to FIB_NUM
1  9929					 ;	  LD DE,-42
1  9930					 ;	  ADD HL,DE
1  9931
1  9932	    1ED8  3A				 DB 3ah
1  9933	    1ED9  01B2r				 DW L00E8		 ; reset or rewrite ?
1  9934	    1EDB  B7				 DB 0b7h
1  9935	    1EDC  20 51				 DB 20h,(L1864)-$-1		 ; jump	if rewrite
1  9936
1  9937						  OFF_HL DOS_NUM DOS_FCB
2  9938		  =000A			 ??0016	     EQU (DOS_FCB)-(DOS_NUM)
2  9939
2  9940	    1EDE  D5					 DB 0D5H ; PUSH	DE
2  9941	    1EDF  11					 DB 11H
2  9942	    1EE0  000A					 DW ??0016
2  9943	    1EE2  19					 DB 19H	 ; ADD HL,DE
2  9944	    1EE3  D1					 DB 0D1H ; POP DE
2  9945
1  9946
1  9947	    1EE4  44				  DB 44h		     ; BC = handle/FCB address
1  9948	    1EE5  4D				  DB 4dh
1  9949	    1EE6  CD				  DB 0cdh
1  9950	    1EE7  0000e				 DW  FILESIZE		   ; 33e, TODO L2D22
1  9951
1  9952	    1EE9  D5				  DB 0d5h
1  9953	    1EEA  E5				  DB 0e5h
1  9954
1  9955	    1EEB  D5				  DB 0d5h
1  9956	    1EEC  E5				  DB 0e5h
1  9957	    1EED  2A				  DB 02ah
1  9958	    1EEE  01B0r				 DW L00E6	       ; DE:HL = record	length
1  9959	    1EF0  11				  DB 11h
1  9960	    1EF1  0000				 DW 0
1  9961
1  9962	    1EF3  CD				  DB 0cdh
1  9963	    1EF4  0B2Cr				 DW  L_MOD
1  9964	    1EF6  7D				  DB 7dh
1  9965	    1EF7  B4				  DB 0b4h
1  9966	    1EF8  B3				  DB 0b3h
1  9967	    1EF9  B2				  DB 0b2h
1  9968
1  9969	    1EFA  E1				  DB 0e1h
1  9970	    1EFB  D1				  DB 0d1h
1  9971	    1EFC  C2				  DB 0c2h
1  9972	    1EFD  1F24r				 DW L1860		 ; 33e,	TODO L1F28
1  9973
1  9974	    1EFF  D5				  DB 0d5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 176
msx_asm\rtl_rtl.ASM



1  9975	    1F00  E5				  DB 0e5h
1  9976	    1F01  2A				  DB 02ah
1  9977	    1F02  01B0r				 DW L00E6
1  9978	    1F04  11				  DB 11h
1  9979	    1F05  0000				 DW 0
1  9980	    1F07  CD				  DB 0cdh
1  9981	    1F08  0B16r				 DW  L_DIV		   ; 33e, TODO L0B18
1  9982
1  9983	    1F0A  D5				  DB 0d5h
1  9984	    1F0B  EB				  DB 0ebh
1  9985
1  9986	    1F0C  2A				  DB 02ah
1  9987	    1F0D  01ACr				 DW L00E2
1  9988	    1F0F  01				  DB 01h
1  9989	    1F10  0006				 DW DOS_NUM
1  9990	    1F12  09				  DB 09h
1  9991
1  9992	    1F13  73				  DB 73h
1  9993	    1F14  23				  DB 23h
1  9994	    1F15  72				  DB 72h
1  9995	    1F16  23				  DB 23h
1  9996	    1F17  D1				  DB 0d1h
1  9997	    1F18  73				  DB 73h
1  9998	    1F19  23				  DB 23h
1  9999	    1F1A  72				  DB 72h
1 10000	    1F1B  23				  DB 23h		     ; HL = address of DOS_REC
1 10001
1 10002	    1F1C  ED 5B				  DB 0edh,5bh
1 10003	    1F1E  01B0r				 DW L00E6
1 10004	    1F20  73				  DB 73h
1 10005	    1F21  23				  DB 23h
1 10006	    1F22  72				  DB 72h
1 10007	    1F23  C9				  DB 0c9h
1 10008
1 10009
1 10010					 ;	   LD BC,FIL_HDR	      ;	data length
1 10011					 ;	   XOR A
1 10012					 ;	   CALL	L1909		      ;	read data, fill	FIB_NUM	and FIB_
1 10013
1 10014					 ;	   POP HL		      ;	restore	address	to FIB_NUM
1 10015
1 10016					 ;	   OFF_HL FIB_NUM FIB_REC
1 10017					 ;	  INC HL
1 10018					 ;	  INC HL
1 10019					 ;	   LD C,(HL)		      ;	BC = record length from	file reset
1 10020					 ;	   INC HL
1 10021					 ;	   LD B,(HL)
1 10022
1 10023					 ;	   LD HL,(L00E6)
1 10024					 ;	   OR A
1 10025					 ;	   SBC HL,BC		      ;	file record length = typed length equal
1 10026					 ;	   RET Z		      ;	record length equal ?
1 10027
1 10028
1 10029	    1F24			 L1860:
1 10030	    1F24  3E 90				 DB 3eh,90H
1 10031	    1F26  32				 DB 32h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 177
msx_asm\rtl_rtl.ASM



1 10032	    1F27  01A0r				 DW L00D0		 ; IORESULT = 90H, Record length mismatch
1 10033	    1F29  3E 3D				  DB 3eh,3DH
1 10034	    1F2B  32				  DB 32h
1 10035	    1F2C  0000e				 DW ERRORNUMBER		; 33e, TODO 2BA3
1 10036	    1F2E  C9				 DB 0c9h
1 10037
1 10038	    1F2F			 L1864:
1 10039					 ; 33e	  PUSH HL
1 10040
1 10041	    1F2F  AF				 DB 0afh		 ; FIB_NUM = 0
1 10042	    1F30  77				 DB 77h
1 10043	    1F31  23				 DB 23h
1 10044	    1F32  77				 DB 77h
1 10045	    1F33  23				  DB 23h
1 10046	    1F34  77				  DB 77h
1 10047	    1F35  23				  DB 23h
1 10048	    1F36  77				  DB 77h
1 10049
1 10050						  OFF_HL DOS_NUM+3 DOS_REC
2 10051		  =0001			 ??0017	     EQU (DOS_REC)-(DOS_NUM+3)
2 10052
2 10053	    1F37  23				   DB 23h; INC HL
2 10054
1 10055					 ;	  INC HL
1 10056	    1F38  ED 5B				 DB 0edh,5bh
1 10057	    1F3A  01B0r				 DW L00E6		 ; DE =	record length
1 10058
1 10059	    1F3C  73				 DB 73h		 ; write record	length
1 10060	    1F3D  23				 DB 23h
1 10061	    1F3E  72				 DB 72h
1 10062	    1F3F  C9				  DB 0c9h
1 10063
1 10064					 ;	   POP HL
1 10065					 ;	   LD BC,FIL_HDR
1 10066					 ;	   LD A,3
1 10067					 ;	   JP L1909		      ;	write data, FIB_NUM and	FIB_REC	to file
1 10068
1 10069						 GLOBALS L187A
2 10070
2 10071						  IRP NAME,<L187A>
2 10072							   GLOBAL2 <NAME>
2 10073						  ENDM
3 10074							   GLOBAL2 <L187A>
4 10075						  GLOBAL L187A : NEAR
4 10076
4 10077						  GLOBAL _L187A	: NEAR
4 10078	    1F40			 _L187A:
4 10079
2 10080
1 10081	    1F40			 L187A:	 ; LIB
1 10082						  ; PROCEDURE Close(VAR	F: FILE	OF TYPE);
1 10083						 ; closes a typed file
1 10084						 ; in:	 HL = FIB address
1 10085	    1F40  22				 DB 22h
1 10086	    1F41  01ACr				 DW L00E2		 ; save	FIB address
1 10087	    1F43  7E				 DB 7eh
1 10088	    1F44  E6 C0				 DB 0e6h, 0C0H		 ; quit	if input/output	not allowed
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 178
msx_asm\rtl_rtl.ASM



1 10089	    1F46  C8				 DB 0c8h
1 10090	    1F47  C3				  DB 0c3h
1 10091	    1F48  1A5Dr				 DW  L1481		     ; CloseFile
1 10092
1 10093					 ;	   CALL	L19AE		      ;	write buffer to	current	record in FCB
1 10094					 ;				      ;	position unchanged
1 10095					 ;	   LD HL,(L00E2)
1 10096					 ;	   OFF_HL 0 FIB_FCB+21H
1 10097					 ;;	    LD DE,FIB_FCB+21H	       ; 002DH,	offset to first	byte of	file pos.
1 10098					 ;;	    ADD	HL,DE
1 10099					 ;	   XOR A
1 10100					 ;	   LD (HL),A		      ;	reset current file position
1 10101					 ;	   INC HL
1 10102					 ;	   LD (HL),A
1 10103					 ;
1 10104					 ;	   OFF_HL FIB_FCB+21H+1	FIB_PTR
1 10105					 ;;	    LD DE,FIB_PTR-(FIB_FCB+21H+1) ; -44
1 10106					 ;	  ADD HL,DE
1 10107					 ;	   LD (HL),A		      ;	reset sector buffer pointer
1 10108					 ;	   OFF_HL FIB_PTR FIB_NUM
1 10109					 ;;	    INC	HL
1 10110					 ;;	    INC	HL		       ; HL = address of number	of records
1 10111					 ;	   LD BC,FIL_HDR	      ;	0004
1 10112					 ;	   LD A,1
1 10113					 ;	   CALL	L1909		      ;	write data
1 10114					 ;	   CALL	L19AE		      ;	write buffer to	current	record in FCB
1 10115					 ;				      ;	position unchanged
1 10116					 ;	   JP L1481		      ;	close file
1 10117
1 10118
1 10119						 GLOBALS L18A4
2 10120
2 10121						  IRP NAME,<L18A4>
2 10122							   GLOBAL2 <NAME>
2 10123						  ENDM
3 10124							   GLOBAL2 <L18A4>
4 10125						  GLOBAL L18A4 : NEAR
4 10126
4 10127						  GLOBAL _L18A4	: NEAR
4 10128	    1F4A			 _L18A4:
4 10129
2 10130
1 10131	    1F4A  E3			 L18A4:	  DB 0e3h
1 10132	    1F4B  22				 DB 22h
1 10133	    1F4C  01AEr				 DW L00E4
1 10134	    1F4E  E3				 DB 0e3h
1 10135	    1F4F  22				 DB 22h
1 10136	    1F50  01ACr				 DW L00E2
1 10137	    1F52  7E				 DB 7eh
1 10138	    1F53  E6 C0				 DB 0e6h, 0C0H		 ; read	or write flags set?
1 10139	    1F55  C0				 DB 0c0h		 ; yes,	quit
1 10140
1 10141	    1F56  3E 04			 L18B0:	 DB 3eh,4
1 10142	    1F58  32				 DB 32h
1 10143	    1F59  01A0r				 DW L00D0		 ; IORESULT = 4, File not open
1 10144	    1F5B  C9				 DB 0c9h
1 10145
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 179
msx_asm\rtl_rtl.ASM



1 10146	    1F5C  0000				  DW 0			     ; ????
1 10147
1 10148
1 10149						 GLOBALS L18B6
2 10150
2 10151						  IRP NAME,<L18B6>
2 10152							   GLOBAL2 <NAME>
2 10153						  ENDM
3 10154							   GLOBAL2 <L18B6>
4 10155						  GLOBAL L18B6 : NEAR
4 10156
4 10157						  GLOBAL _L18B6	: NEAR
4 10158	    1F5E			 _L18B6:
4 10159
2 10160
1 10161	    1F5E			 L18B6:	  ; READ (VAR F: FILE OF TYPE)
1 10162						  ; in:	   HL =	destination address for	record to read
1 10163	    1F5E  3A				 DB 3ah
1 10164	    1F5F  01A0r				 DW L00D0		 ; LIB,	read IORESULT
1 10165	    1F61  B7				 DB 0b7h
1 10166	    1F62  C0				 DB 0c0h		 ; quit	if an error occurred
1 10167
1 10168	    1F63  01				  DB 01h
1 10169	    1F64  0001				 DW 1
1 10170	    1F66  EB				  DB 0ebh
1 10171	    1F67  3E 21				  DB 3eh,21H
1 10172
1 10173	    1F69			 L18C0:
1 10174	    1F69  21				  DB 21h
1 10175	    1F6A  01C2r				 DW L00F0		 ; 33e,	TODO L01C2
1 10176	    1F6C  22				  DB 22h
1 10177	    1F6D  01B0r				 DW L00E6
1 10178	    1F6F  2A				  DB 02ah
1 10179	    1F70  01ACr				 DW L00E2
1 10180	    1F72  C3				  DB 0c3h
1 10181	    1F73  21A2r				 DW  L1AFD		     ; 33e, TODO L21A6
1 10182
1 10183					 ;	   PUSH	HL
1 10184					 ;	   CALL	L1A5A		      ;	HL = number of records
1 10185					 ;				      ;	DE = current record
1 10186					 ;				      ;	BC = record length
1 10187					 ;	   EX DE,HL
1 10188					 ;	   OR A
1 10189					 ;	   SBC HL,DE		      ;	current	>= number of records ?
1 10190					 ;	   POP HL
1 10191					 ;	   JR NC,L18D6		      ;	jump if	Unexpected end-of-file
1 10192					 ;	   XOR A
1 10193					 ;	   CALL	L1909		      ;	read data
1 10194					 ;
1 10195	    1F75			 L18CA:
1 10196					 ;	   LD HL,(L00E2)	      ;	HL = FIB address
1 10197					 ;	   OFF_HL 0 FIB_CUR
1 10198					 ;;	    LD DE,0008
1 10199					 ;;	    ADD	HL,DE
1 10200					 ;	   INC (HL)		      ;	increase low byte of current record
1 10201					 ;	   RET NZ
1 10202					 ;	   INC HL
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 180
msx_asm\rtl_rtl.ASM



1 10203					 ;	   INC (HL)		      ;	increase high byte of current record
1 10204					 ;	   RET
1 10205
1 10206	    1F75  3E 99			 L18D6:	 DB 3eh,99H
1 10207	    1F77  32				 DB 32h
1 10208	    1F78  01A0r				 DW L00D0		 ; IORESULT = 99H, Unexpected end-of-file
1 10209	    1F7A  3E C7				  DB 3eh,0C7H
1 10210	    1F7C  32				  DB 32h
1 10211	    1F7D  0000e				 DW ERRORNUMBER		; 33e, TODO L2BA3
1 10212	    1F7F  C9				 DB 0c9h
1 10213
1 10214						 GLOBALS L18DC
2 10215
2 10216						  IRP NAME,<L18DC>
2 10217							   GLOBAL2 <NAME>
2 10218						  ENDM
3 10219							   GLOBAL2 <L18DC>
4 10220						  GLOBAL L18DC : NEAR
4 10221
4 10222						  GLOBAL _L18DC	: NEAR
4 10223	    1F80			 _L18DC:
4 10224
2 10225
1 10226	    1F80			 L18DC:	  ; WRITE (VAR F: FILE OF TYPE)
1 10227						  ; in:	   HL =	source address of record to write
1 10228						  ; LIB
1 10229	    1F80  3A				 DB 3ah
1 10230	    1F81  01A0r				 DW L00D0		 ; read	IORESULT
1 10231	    1F83  B7				 DB 0b7h
1 10232	    1F84  C0				 DB 0c0h		 ; quit	if an error occurred
1 10233	    1F85  01				  DB 01h
1 10234	    1F86  0001				 DW 1
1 10235	    1F88  EB				  DB 0ebh
1 10236	    1F89  3E 22				  DB 3eh,22H
1 10237	    1F8B  C3				  DB 0c3h
1 10238	    1F8C  1F69r				 DW  L18C0
1 10239
1 10240					 ;	   PUSH	HL
1 10241					 ;	   CALL	L1A5A		      ;	HL = number of records
1 10242					 ;				      ;	DE = current record
1 10243					 ;				      ;	BC = record length
1 10244					 ;	   OR A
1 10245					 ;	   SBC HL,DE		      ;	number = current ?
1 10246					 ;	   LD A,1		      ;	write data
1 10247					 ;	   JR NZ,L18FC		      ;	jump if	not equal
1 10248					 ;
1 10249					 ;	   ; increase the number of records
1 10250					 ;	   LD HL,(L00E2)
1 10251					 ;	   OFF_HL 0 FIB_NUM
1 10252					 ;;	    LD DE,0004
1 10253					 ;;	    ADD	HL,DE
1 10254					 ;	   INC (HL)		      ;	increase low-byte of position
1 10255					 ;	   JR NZ,L18FA
1 10256					 ;	   INC HL
1 10257					 ;	   INC (HL)		      ;	increase high-byte of position
1 10258					 ;	   JR Z,L1902		      ;	jump if	File size overflow
1 10259					 ;
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 181
msx_asm\rtl_rtl.ASM



1 10260					 ;L18FA:   LD A,3		      ;	write data + append ?
1 10261					 ;
1 10262					 ;L18FC:   POP HL
1 10263					 ;	   CALL	L1909		      ;	write data
1 10264					 ;	   JR L18CA		      ;	jump to	increase the current record
1 10265					 ;
1 10266					 ;L1902:   POP HL
1 10267					 ;	   LD A,0F2H
1 10268					 ;	   LD (L00D0),A		      ;	IORESULT = 0F2H, File size overflow
1 10269					 ;	   RET
1 10270					 ;
1 10271					 ;L1909:   ; in:    HL = destination/source address for	data
1 10272					 ;	   ;	    A, bit 0 = '1' for copy data from HL to buffer
1 10273					 ;	   ;	    A, bit 0 = '0' for copy data from buffer to	HL
1 10274					 ;	   LD (L00E9),A
1 10275					 ;	   EX DE,HL		      ;	DE = address FIB_NUM
1 10276					 ;
1 10277					 ;L190D:   LD HL,(L00E2)	      ;	HL = FIB address
1 10278					 ;	   BIT 4,(HL)
1 10279					 ;	   JR Z,L1943		      ;	jump if	buffer contents	is defined
1 10280					 ;
1 10281					 ;	   RES 4,(HL)
1 10282					 ;	   LD A,(L00E9)
1 10283					 ;	   BIT 0,A
1 10284					 ;	   JR Z,L1935		      ;	jump if	to copy	data from the buffer
1 10285					 ;
1 10286					 ;	   OFF_HL 0 FIB_PTR
1 10287					 ;;	    INC	HL
1 10288					 ;;	    INC	HL
1 10289					 ;	   LD A,(HL)		      ;	A = low	byte of	sector buffer pointer
1 10290					 ;	   OFF_HL FIB_PTR 0
1 10291					 ;;	    DEC	HL
1 10292					 ;;	    DEC	HL
1 10293					 ;	   OR A
1 10294					 ;	   JR NZ,L1935		      ;	jump if	buffer not empty
1 10295					 ;
1 10296					 ;	   LD A,(L00E9)
1 10297					 ;	   BIT 1,A
1 10298					 ;	   JR NZ,L1943
1 10299					 ;	   LD A,B
1 10300					 ;	   OR A
1 10301					 ;	   JR NZ,L1943
1 10302					 ;	   LD A,C
1 10303					 ;	   OR A
1 10304					 ;	   JP M,L1943
1 10305					 ;
1 10306					 ;L1935:   PUSH	BC
1 10307					 ;	   PUSH	DE
1 10308					 ;	   LD C,21H
1 10309					 ;	   CALL	L19BA		      ;	random read from current position
1 10310					 ;				      ;	to FIB_BUF
1 10311					 ;	   POP DE
1 10312					 ;	   POP BC
1 10313					 ;	   JR NZ,L1991		      ;	jump if	Unexpected end-of-file
1 10314					 ;	   LD HL,(L00E2)	      ;	HL = FIB address
1 10315					 ;
1 10316					 ;L1943:   LD A,(L00E9)
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 182
msx_asm\rtl_rtl.ASM



1 10317					 ;	   BIT 0,A
1 10318					 ;	   JR Z,L194C
1 10319					 ;	   SET 5,(HL)		      ;	data has been written to the buffer
1 10320					 ;
1 10321					 ;L194C:   OFF_HL 0 FIB_PTR
1 10322					 ;;	    INC	HL
1 10323					 ;;	    INC	HL
1 10324					 ;	   LD A,(HL)		      ;	A = low	byte sector buffer pointer
1 10325					 ;	   ADD A,FIB_BUF-FIB_PTR      ;	2EH
1 10326					 ;	   PUSH	DE
1 10327					 ;	   LD E,A
1 10328					 ;	   LD D,0
1 10329					 ;	   ADD HL,DE		      ;	HL = address within buffer
1 10330					 ;	   POP DE		      ;	DE = address FIB_NUM
1 10331					 ;	   SUB 2EH
1 10332					 ;	   CALL	L199A		      ;	swap HL,DE if L00E9,0 =	1
1 10333					 ;
1 10334					 ;	   ; BC	= number of byte to copy, (mostly 4 = FIL_HDR)
1 10335					 ;L195C:   LDI			      ;	copy from FIB_NUM to buffer or <-->
1 10336					 ;IFDEF	MSX
1 10337					 ;	   JP PO,L1966		      ;	jump if	BC = 0,	PO
1 10338					 ;ELSE
1 10339					 ;	   JP C,L1966		      ;	jump if	BC = 0,	PO
1 10340					 ;ENDIF
1 10341					 ;	   INC A		      ;	increase current pointer
1 10342					 ;	   JP P,L195C
1 10343					 ;	   DEC A
1 10344					 ;L1966:   INC A
1 10345					 ;
1 10346					 ;	   CALL	L199A		      ;	swap HL,DE if L00E9,0 =	1
1 10347					 ;	   LD HL,(L00E2)
1 10348					 ;	   OFF_HL 0 FIB_PTR
1 10349					 ;;	    INC	HL
1 10350					 ;;	    INC	HL
1 10351					 ;	   AND 7FH		      ;	modulo 128
1 10352					 ;	   LD (HL),A		      ;	write new sector buffer	pointer
1 10353					 ;	   JR NZ,L198A
1 10354					 ;
1 10355					 ;	   ; write complete buffer to disk if sector buffer pointer wrapped around
1 10356					 ;	   PUSH	BC
1 10357					 ;	   PUSH	DE
1 10358					 ;	   PUSH	HL
1 10359					 ;	   CALL	L19AE		      ;	write buffer to	current	record in FCB
1 10360					 ;				      ;	position unchanged
1 10361					 ;	   POP HL
1 10362					 ;	   POP DE
1 10363					 ;	   POP BC
1 10364					 ;	   JR NZ,L1994		      ;	jump if	write error
1 10365					 ;
1 10366					 ;	   PUSH	DE
1 10367					 ;	   OFF_HL FIB_PTR FIB_FCB+21H ;	offset to first	byte of	file position
1 10368					 ;;	    LD DE,002BH
1 10369					 ;;	    ADD	HL,DE
1 10370					 ;	   POP DE
1 10371					 ;	   INC (HL)		      ;	increase low byte
1 10372					 ;	   JR NZ,L198A
1 10373					 ;	   INC HL
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 183
msx_asm\rtl_rtl.ASM



1 10374					 ;	   INC (HL)		      ;	increase high byte
1 10375					 ;
1 10376					 ;L198A:   LD A,B
1 10377					 ;	   OR C
1 10378					 ;	   JP NZ,L190D		      ;	repeat until BC	= 0
1 10379					 ;	   EX DE,HL
1 10380					 ;	   RET
1 10381					 ;
1 10382					 ;L1991:   LD A,99H		      ;	IORESULT = 99H,	Unexpected end-of-file
1 10383					 ;
1 10384					 ;IFDEF	MSX
1 10385					 ;	   DB 1			      ;	opcode of 'LD BC,', eats 'LD A,0F0H'
1 10386					 ;ELSE
1 10387					 ;;!	   jmp near ptr	L1996
1 10388					 ;ENDIF
1 10389					 ;
1 10390					 ;L1994:   LD A,0F0H
1 10391					 ;L1996:   LD (L00D0),A		      ;	IORESULT = 0F0H, Disk write error
1 10392					 ;	   RET
1 10393					 ;
1 10394					 ;L199A:   PUSH	AF
1 10395					 ;	   LD A,(L00E9)
1 10396					 ;	   BIT 0,A
1 10397					 ;	   JR Z,L19A3
1 10398					 ;	   EX DE,HL
1 10399					 ;L19A3:   POP AF
1 10400					 ;	   RET
1 10401
1 10402						 GLOBALS L19A5
2 10403
2 10404						  IRP NAME,<L19A5>
2 10405							   GLOBAL2 <NAME>
2 10406						  ENDM
3 10407							   GLOBAL2 <L19A5>
4 10408						  GLOBAL L19A5 : NEAR
4 10409
4 10410						  GLOBAL _L19A5	: NEAR
4 10411	    1F8E			 _L19A5:
4 10412
2 10413
1 10414	    1F8E			 L19A5:	  ; FLUSH (VAR F: FILE OF TYPE)
1 10415	    1F8E  C9				  DB 0c9h
1 10416					 ;	   LD (L00E2),HL	      ;	LIB
1 10417					 ;	   CALL	L19AE		      ;	write buffer to	current	record in FCB
1 10418					 ;				      ;	position unchanged
1 10419					 ;	   RET Z		      ;	return if no error
1 10420					 ;	   JR L1994
1 10421
1 10422					 ; 33e MARK START 1F93
1 10423	    1F8F			 L19AE:	 ; random write	a changed buffer to the	current	position
1 10424						 ; according to	the FCB
1 10425	    1F8F  0E 22				 DB 0eh,22H		 ; random write
1 10426	    1F91  2A				 DB 02ah
1 10427	    1F92  01ACr				 DW L00E2
1 10428	    1F94  CB E6				 DB 0cbh,0e6h		 ; read	semaphore = 1, buffer undefined
1 10429	    1F96  CB 6E				 DB 0cbh,06eh		 ; write semephore = 1 ?
1 10430	    1F98  C8				 DB 0c8h		 ; return if no	data was written in buffer
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 184
msx_asm\rtl_rtl.ASM



1 10431						 ; some	data was written to the	buffer
1 10432	    1F99  CB AE				 DB 0cbh,0aeh
1 10433
1 10434
1 10435	    1F9B			 L19BA:	 ; write FIB_BUF to current position according to FCB
1 10436	    1F9B  2A				 DB 02ah
1 10437	    1F9C  01ACr				 DW L00E2		 ; HL =	address	of FIB
1 10438	    1F9E  E5				 DB 0e5h
1 10439	    1F9F  C5				 DB 0c5h		 ; save	record to write
1 10440
1 10441						  OFF_HL 0 DOS_BUF
2 10442		  =0051			 ??0018	     EQU (DOS_BUF)-(0)
2 10443
2 10444	    1FA0  D5					 DB 0D5H ; PUSH	DE
2 10445	    1FA1  11					 DB 11H
2 10446	    1FA2  0051					 DW ??0018
2 10447	    1FA4  19					 DB 19H	 ; ADD HL,DE
2 10448	    1FA5  D1					 DB 0D1H ; POP DE
2 10449
1 10450					 ;	  LD DE,FIB_BUF		  ; offset to BUFFER
1 10451					 ;	  ADD HL,DE
1 10452	    1FA6  EB				 DB 0ebh
1 10453	    1FA7  0E 1A				 DB 0eh,1AH		 ; C = set dma at FIB buffer
1 10454	    1FA9  CD				 DB 0cdh
1 10455	    1FAA  0005				 DW  MSXDOS
1 10456
1 10457	    1FAC  C1				 DB 0c1h
1 10458	    1FAD  E1				 DB 0e1h
1 10459						  OFF_HL 0 DOS_FCB
2 10460		  =0010			 ??0019	     EQU (DOS_FCB)-(0)
2 10461
2 10462	    1FAE  D5					 DB 0D5H ; PUSH	DE
2 10463	    1FAF  11					 DB 11H
2 10464	    1FB0  0010					 DW ??0019
2 10465	    1FB2  19					 DB 19H	 ; ADD HL,DE
2 10466	    1FB3  D1					 DB 0D1H ; POP DE
2 10467
1 10468					 ;	   LD DE,DOS_FCB	      ;	offset to FCB
1 10469					 ;	  ADD HL,DE
1 10470	    1FB4  EB				 DB 0ebh
1 10471	    1FB5  CD				 DB 0cdh
1 10472	    1FB6  0005				 DW  MSXDOS
1 10473	    1FB8  B7				 DB 0b7h
1 10474	    1FB9  C9				 DB 0c9h
1 10475					 ; 33e MARK END	1FBE
1 10476
1 10477
1 10478						 GLOBALS L19D5
2 10479
2 10480						  IRP NAME,<L19D5>
2 10481							   GLOBAL2 <NAME>
2 10482						  ENDM
3 10483							   GLOBAL2 <L19D5>
4 10484						  GLOBAL L19D5 : NEAR
4 10485
4 10486						  GLOBAL _L19D5	: NEAR
4 10487	    1FBA			 _L19D5:
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 185
msx_asm\rtl_rtl.ASM



4 10488
2 10489
1 10490	    1FBA			 L19D5:	  ; SEEK (VAR F: FILE OF TYPE; Pos: INTEGER);
1 10491						  ; LIB
1 10492						 ; seek	typed file
1 10493						 ; in:	 FIB address at	stack
1 10494						 ;	 HL = position to seek to
1 10495
1 10496	    1FBA  C3				  DB 0c3h
1 10497	    1FBB  21C4r				 DW  L1B6F		     ; 33e TODO	L21C8, SeekFile
1 10498
1 10499					 ;	   POP BC
1 10500					 ;	   POP DE
1 10501					 ;	   LD (L00E2),DE	      ;	save FIB address
1 10502					 ;	   PUSH	BC
1 10503					 ;	   PUSH	HL		      ;	save position
1 10504					 ;
1 10505					 ;	   CALL	L1A5A		      ;	HL = number of records
1 10506					 ;				      ;	DE = current record
1 10507					 ;				      ;	BC = record length
1 10508					 ;
1 10509					 ;	   POP DE		      ;	restore	DE = position
1 10510					 ;
1 10511					 ;	   OR A
1 10512					 ;	   SBC HL,DE		      ;	number - position
1 10513					 ;	   JR C,L1A26		      ;	jump if	Seek beyond end-of-file
1 10514					 ;
1 10515					 ;	   LD HL,(L00E2)
1 10516					 ;	   LD BC,FIB_REC	      ;	offset to record length
1 10517					 ;	   ADD HL,BC
1 10518					 ;	   LD C,(HL)		      ;	BC = record length
1 10519					 ;	   INC HL
1 10520					 ;	   LD B,(HL)
1 10521					 ;	   INC HL
1 10522					 ;	   LD (HL),E		      ;	set new	positon
1 10523					 ;	   INC HL
1 10524					 ;	   LD (HL),D
1 10525
1 10526	    1FBD  CD				 DB 0cdh
1 10527	    1FBE  1FF7r				 DW  L1A2C		 ; DE:HL = DE (current)	* BC (length)
1 10528
1 10529	    1FC0  01				 DB 01h
1 10530	    1FC1  0004				 DW FIL_HDR		 ; DE:HL = DE:HL + length of file header
1 10531	    1FC3  09				 DB 09h
1 10532	    1FC4  30 01				 DB 30h,(L19FE)-$-1
1 10533	    1FC6  13				 DB 13h
1 10534	    1FC7  7D			 L19FE:	 DB 7dh			 ; A = byte units
1 10535	    1FC8  E6 7F				 DB 0e6h, 7FH
1 10536
1 10537	    1FCA  29				 DB 029h	 ; DE:HL * 2
1 10538	    1FCB  EB				 DB 0ebh
1 10539	    1FCC  ED 6A				 DB 0EDH,06ah
1 10540	    1FCE  EB				 DB 0ebh
1 10541
1 10542	    1FCF  53				 DB 53h			 ; DE =	128 bytes record number
1 10543	    1FD0  5C				 DB 5ch
1 10544
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 186
msx_asm\rtl_rtl.ASM



1 10545	    1FD1  2A				 DB 02ah
1 10546	    1FD2  01ACr				 DW L00E2
1 10547						 OFF_HL	0 FIB_PTR
2 10548		  =0002			 ??001A	     EQU (FIB_PTR)-(0)
2 10549
2 10550	    1FD4  23				    DB 23h; INC	HL
2 10551	    1FD5  23				    DB 23h; INC	HL
2 10552
1 10553					 ;	  INC HL
1 10554					 ;	  INC HL
1 10555	    1FD6  77				 DB 77h		 ; set new FIB_PTR
1 10556
1 10557						 OFF_HL	FIB_PTR	FIB_FCB+21H
2 10558		  =002B			 ??001B	     EQU (FIB_FCB+21H)-(FIB_PTR)
2 10559
2 10560	    1FD7  D5					 DB 0D5H ; PUSH	DE
2 10561	    1FD8  11					 DB 11H
2 10562	    1FD9  002B					 DW ??001B
2 10563	    1FDB  19					 DB 19H	 ; ADD HL,DE
2 10564	    1FDC  D1					 DB 0D1H ; POP DE
2 10565
1 10566					 ;	  LD BC,FIB_FCB-FIB_PTR	+ 21H; 002BH, low byte of file position	in FCB
1 10567					 ;	  ADD HL,BC
1 10568	    1FDD  4E				 DB 4eh		 ; BC =	previous file position
1 10569	    1FDE  23				 DB 23h
1 10570	    1FDF  46				 DB 46h
1 10571	    1FE0  EB				 DB 0ebh		 ; HL =	new position
1 10572									 ; DE =	address	of high	byte of	file pos
1 10573	    1FE1  B7				 DB 0b7h
1 10574	    1FE2  ED 42				 DB 0EDH,042h		 ; previous == new position ?
1 10575					 ;!	 pushf
1 10576	    1FE4  09				 DB 09h		 ; restore
1 10577					 ;!	 popf
1 10578	    1FE5  C8				 DB 0c8h		 ; yes,	quit
1 10579
1 10580	    1FE6  D5				 DB 0d5h
1 10581	    1FE7  E5				 DB 0e5h
1 10582	    1FE8  CD				 DB 0cdh
1 10583	    1FE9  1F8Fr				 DW  L19AE		 ; update current record in FCB
1 10584									 ; position unchanged
1 10585	    1FEB  D1				 DB 0d1h
1 10586	    1FEC  E1				 DB 0e1h		 ; HL =	address	of high	byte of	file pos.
1 10587	    1FED  72				 DB 72h		 ; write new file position
1 10588	    1FEE  2B				 DB 2bh
1 10589	    1FEF  73				 DB 73h
1 10590	    1FF0  C9				 DB 0c9h
1 10591
1 10592
1 10593
1 10594	    1FF1  3E 91			 L1A26:	 DB 3eh,91H
1 10595	    1FF3  32				 DB 32h
1 10596	    1FF4  01A0r				 DW L00D0		 ;  IORESULT = 91H, Seek beyond	end-of-file
1 10597	    1FF6  C9				 DB 0c9h
1 10598
1 10599
1 10600
1 10601	    1FF7			 L1A2C:	 ; in:	 DE = current record
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 187
msx_asm\rtl_rtl.ASM



1 10602						 ;	 BC = record length
1 10603						 ; out:	 DE:HL = DE * BC
1 10604	    1FF7  D5				 DB 0d5h
1 10605	    1FF8  D9				 DB 0d9h
1 10606	    1FF9  E1				 DB 0e1h		 ; HL' = current record
1 10607	    1FFA  D9				 DB 0d9h
1 10608	    1FFB  21				 DB 21h
1 10609	    1FFC  0000				 DW 0000
1 10610	    1FFE  54				 DB 54h
1 10611	    1FFF  5D				 DB 5dh
1 10612	    2000  3E 10				 DB 3eh,10H
1 10613	    2002  29			 L1A37:	 DB 029h
1 10614	    2003  EB				 DB 0ebh
1 10615	    2004  ED 6A				 DB 0EDH,06ah
1 10616	    2006  EB				 DB 0ebh
1 10617	    2007  D9				 DB 0d9h
1 10618	    2008  29				 DB 029h
1 10619	    2009  D9				 DB 0d9h
1 10620	    200A  30 04				 DB 30h,(L1A45)-$-1
1 10621	    200C  09				 DB 09h
1 10622	    200D  30 01				 DB 30h,(L1A45)-$-1
1 10623	    200F  13				 DB 13h
1 10624
1 10625	    2010  3D			 L1A45:	 DB 3dh
1 10626	    2011  20 EF				 DB 20h,(L1A37)-$-1
1 10627	    2013  C9				 DB 0c9h
1 10628
1 10629
1 10630
1 10631
1 10632						 GLOBALS L1A49
2 10633
2 10634						  IRP NAME,<L1A49>
2 10635							   GLOBAL2 <NAME>
2 10636						  ENDM
3 10637							   GLOBAL2 <L1A49>
4 10638						  GLOBAL L1A49 : NEAR
4 10639
4 10640						  GLOBAL _L1A49	: NEAR
4 10641	    2014			 _L1A49:
4 10642
2 10643
1 10644	    2014			 L1A49:	  ; LIB
1 10645						 ; typed and untyped files
1 10646						 ; FUNCTION Eof(VAR F: FILE): BOOLEAN;
1 10647						 ; in:	 HL = FIB address
1 10648
1 10649	    2014  E5				  DB 0e5h
1 10650	    2015  CD				  DB 0cdh
1 10651	    2016  203Fr				 DW  L1A5D
1 10652	    2018  C1				  DB 0c1h
1 10653
1 10654	    2019  D5				  DB 0d5h		     ; push number of records: DE:HL
1 10655	    201A  E5				  DB 0e5h
1 10656
1 10657	    201B  60				  DB 60h
1 10658	    201C  69				  DB 69h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 188
msx_asm\rtl_rtl.ASM



1 10659
1 10660	    201D  CD				  DB 0cdh
1 10661	    201E  2028r				 DW  L1A55		   ; get current record	number:	DE:HL
1 10662
1 10663	    2020  C5				  DB 0c5h
1 10664	    2021  CD				  DB 0cdh
1 10665	    2022  09F4r				 DW  L_CMP
1 10666	    2024  C1				  DB 0c1h
1 10667	    2025  C3				  DB 0c3h
1 10668	    2026  086Dr				 DW  L0682
1 10669
1 10670						  GLOBALS L1A55
2 10671
2 10672						  IRP NAME,<L1A55>
2 10673							   GLOBAL2 <NAME>
2 10674						  ENDM
3 10675							   GLOBAL2 <L1A55>
4 10676						  GLOBAL L1A55 : NEAR
4 10677
4 10678						  GLOBAL _L1A55	: NEAR
4 10679	    2028			 _L1A55:
4 10680
2 10681
1 10682	    2028			 L1A55:	 ; LIB
1 10683						 ; typed file
1 10684						 ; FUNCTION FilePos(VAR	F: FILE	OF TYPE): INTEGER;
1 10685						  ; FUNCTION FilePos(VAR F: FILE): INTEGER;
1 10686
1 10687						  ; in:	    HL = FIB address
1 10688						  ; out:    BC = record	length
1 10689						  ;	 DE:HL = current record
1 10690
1 10691						  OFF_HL 0 DOS_REC
2 10692		  =000A			 ??001C	     EQU (DOS_REC)-(0)
2 10693
2 10694	    2028  D5					 DB 0D5H ; PUSH	DE
2 10695	    2029  11					 DB 11H
2 10696	    202A  000A					 DW ??001C
2 10697	    202C  19					 DB 19H	 ; ADD HL,DE
2 10698	    202D  D1					 DB 0D1H ; POP DE
2 10699
1 10700
1 10701	    202E  4E				  DB 4eh
1 10702	    202F  23				  DB 23h
1 10703	    2030  46				  DB 46h
1 10704	    2031  23				  DB 23h
1 10705	    2032  5E				  DB 5eh
1 10706	    2033  23				  DB 23h
1 10707	    2034  56				  DB 56h
1 10708	    2035  23				  DB 23h
1 10709	    2036  7E				  DB 7eh
1 10710	    2037  23				  DB 23h
1 10711	    2038  66				  DB 66h
1 10712	    2039  6F				  DB 6fh
1 10713	    203A  EB				  DB 0ebh
1 10714
1 10715	    203B  C9				  DB 0c9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 189
msx_asm\rtl_rtl.ASM



1 10716
1 10717	    203C  2A			 L1A5A:	  DB 02ah
1 10718	    203D  01ACr				 DW L00E2	       ; address of FIB
1 10719
1 10720						  GLOBALS L1A5D
2 10721
2 10722						  IRP NAME,<L1A5D>
2 10723							   GLOBAL2 <NAME>
2 10724						  ENDM
3 10725							   GLOBAL2 <L1A5D>
4 10726						  GLOBAL L1A5D : NEAR
4 10727
4 10728						  GLOBAL _L1A5D	: NEAR
4 10729	    203F			 _L1A5D:
4 10730
2 10731
1 10732	    203F			 L1A5D:	 ; LIB
1 10733						 ; FUNCTION FileSize(VAR F: FILE OF TYPE): INTEGER;
1 10734						  ; FUNCTION FileSize(VAR F: FILE): INTEGER;
1 10735
1 10736						  ; in:	    HL = FIB address
1 10737						  ; out:    BC = record	length
1 10738						  ;	 DE:HL = number	of records
1 10739
1 10740						  OFF_HL 0 DOS_REC+1
2 10741		  =000B			 ??001D	     EQU (DOS_REC+1)-(0)
2 10742
2 10743	    203F  D5					 DB 0D5H ; PUSH	DE
2 10744	    2040  11					 DB 11H
2 10745	    2041  000B					 DW ??001D
2 10746	    2043  19					 DB 19H	 ; ADD HL,DE
2 10747	    2044  D1					 DB 0D1H ; POP DE
2 10748
1 10749
1 10750	    2045  46				  DB 46h
1 10751	    2046  2B				  DB 2bh
1 10752	    2047  4E				  DB 4eh
1 10753	    2048  2B				  DB 2bh
1 10754	    2049  56				  DB 56h
1 10755	    204A  2B				  DB 2bh
1 10756	    204B  5E				  DB 5eh
1 10757	    204C  2B				  DB 2bh
1 10758	    204D  7E				  DB 7eh
1 10759	    204E  2B				  DB 2bh
1 10760	    204F  6E				  DB 6eh
1 10761	    2050  67				  DB 67h
1 10762
1 10763	    2051  C9				  DB 0c9h
1 10764
1 10765					 ;	   CALL	L1A5D		      ;	HL = number of records
1 10766					 ;				      ;	DE = current record
1 10767					 ;				      ;	BC = record length
1 10768					 ;
1 10769					 ;	   OR A
1 10770					 ;	   SBC HL,DE		      ;	total records == current record	?
1 10771					 ;
1 10772					 ;	   LD HL,0000		      ;	assume FALSE
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 190
msx_asm\rtl_rtl.ASM



1 10773					 ;	   RET NZ		      ;	return if false
1 10774					 ;
1 10775					 ;	   INC HL		      ;	return TRUE
1 10776					 ;	   RET
1 10777
1 10778					 ;	   GLOBALS L1A55
1 10779					 ;L1A55:   ; LIB
1 10780					 ;	   ; typed file
1 10781					 ;	   ; FUNCTION FilePos(VAR F: FILE OF TYPE): INTEGER;
1 10782					 ;	   ; FUNCTION FilePos(VAR F: FILE): INTEGER;
1 10783					 ;	   CALL	L1A5D		      ;	HL = number of records
1 10784					 ;				      ;	DE = current record
1 10785					 ;				      ;	BC = record length
1 10786					 ;	   EX DE,HL		      ;	return HL = current record
1 10787					 ;	   RET
1 10788					 ;
1 10789
1 10790
1 10791
1 10792					 ;L1A5A:   LD HL,(L00E2)	      ;	address	of FIB
1 10793					 ;
1 10794					 ;	   GLOBALS L1A5D
1 10795					 ;L1A5D:   ; LIB
1 10796					 ;	   ; FUNCTION FileSize(VAR F: FILE OF TYPE): INTEGER;
1 10797					 ;	   ; FUNCTION FileSize(VAR F: FILE): INTEGER;
1 10798					 ;	   ; in:    HL = address of FIB
1 10799					 ;	   ; out:   HL = number	of records
1 10800					 ;	   ;	    DE = current record
1 10801					 ;	   ;	    BC = record	length
1 10802					 ;	   OFF_HL 0 FIB_NUM
1 10803					 ;;	    LD DE,FIB_NUM	       ; offset	to number of records
1 10804					 ;;	    ADD	HL,DE
1 10805					 ;	   LD E,(HL)		      ;	DE = number of records
1 10806					 ;	   INC HL
1 10807					 ;	   LD D,(HL)
1 10808					 ;	   OFF_HL FIB_NUM+1 FIB_REC
1 10809					 ;;	    INC	HL
1 10810					 ;	   PUSH	DE		      ;	push number of records
1 10811					 ;
1 10812					 ;	   LD C,(HL)		      ;	BC = record length
1 10813					 ;	   INC HL
1 10814					 ;	   LD B,(HL)
1 10815					 ;	   OFF_HL FIB_REC+1 FIB_CUR
1 10816					 ;;	    INC	HL
1 10817					 ;
1 10818					 ;	   LD E,(HL)		      ;	DE = current record
1 10819					 ;	   INC HL
1 10820					 ;	   LD D,(HL)
1 10821					 ;
1 10822					 ;	   POP HL		      ;	HL = number of records
1 10823					 ;	   RET
1 10824
1 10825
1 10826
1 10827
1 10828						 GLOBALS L1A6F
2 10829
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 191
msx_asm\rtl_rtl.ASM



2 10830						  IRP NAME,<L1A6F>
2 10831							   GLOBAL2 <NAME>
2 10832						  ENDM
3 10833							   GLOBAL2 <L1A6F>
4 10834						  GLOBAL L1A6F : NEAR
4 10835
4 10836						  GLOBAL _L1A6F	: NEAR
4 10837	    2052			 _L1A6F:
4 10838
2 10839
1 10840	    2052			 L1A6F:	 ; LIB
1 10841						 ; PROCEDURE Rewrite(VAR F: FILE);
1 10842						 ; rewrites an untyped file
1 10843	    2052  3E AF				 DB 3eh,0AFH
1 10844	    2054  C3				 DB 0c3h
1 10845	    2055  2058r				 DW  L1A71
1 10846
1 10847						 GLOBALS L1A70
2 10848
2 10849						  IRP NAME,<L1A70>
2 10850							   GLOBAL2 <NAME>
2 10851						  ENDM
3 10852							   GLOBAL2 <L1A70>
4 10853						  GLOBAL L1A70 : NEAR
4 10854
4 10855						  GLOBAL _L1A70	: NEAR
4 10856	    2057			 _L1A70:
4 10857
2 10858
1 10859	    2057			 L1A70:	 ; LIB
1 10860						 ; PROCEDURE Reset(VAR F: FILE);
1 10861						 ; resets an untyped file
1 10862	    2057  AF				 DB 0afh
1 10863
1 10864	    2058			 L1A71:	  ; in:	   HL =	record size
1 10865						  ;	   FIB address on stack
1 10866	    2058  32				 DB 32h
1 10867	    2059  01B2r				 DW L00E8
1 10868	    205B  22				  DB 22h
1 10869	    205C  01B0r				 DW L00E6	       ; save record size
1 10870
1 10871	    205E  FD E1				  DB 0fdh,0e1h
1 10872	    2060  E1				  DB 0e1h		      ;	HL = FIB address
1 10873	    2061  FD E5				  DB 0fdh,0e5h
1 10874
1 10875	    2063  CD				 DB 0cdh
1 10876	    2064  20B8r				 DW  L1AB0		 ; close an untyped file
1 10877	    2066  3A				 DB 3ah
1 10878	    2067  01A0r				 DW L00D0		 ; read	IORESULT
1 10879	    2069  B7				 DB 0b7h
1 10880	    206A  C0				 DB 0c0h		 ; quit	if an error occurred
1 10881
1 10882	    206B  CD				 DB 0cdh
1 10883	    206C  1A17r				 DW  L1430		 ; open	or create file
1 10884	    206E  3A				 DB 3ah
1 10885	    206F  01A0r				 DW L00D0		 ; read	IORESULT
1 10886	    2071  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 192
msx_asm\rtl_rtl.ASM



1 10887	    2072  C0				 DB 0c0h		 ; quit	if an error occurred
1 10888
1 10889	    2073  2A				 DB 02ah
1 10890	    2074  01ACr				 DW L00E2
1 10891	    2076  36 C0				 DB 36h,0C0H		 ; input and output allowed
1 10892					 ;	   PUSH	HL
1 10893
1 10894						  OFF_HL 0 DOS_PTR
2 10895		  =0002			 ??001E	     EQU (DOS_PTR)-(0)
2 10896
2 10897	    2078  23				    DB 23h; INC	HL
2 10898	    2079  23				    DB 23h; INC	HL
2 10899
1 10900	    207A  36 00				  DB 36h,0
1 10901	    207C  23				  DB 23h
1 10902	    207D  36 00				  DB 36h,0
1 10903
1 10904						  OFF_HL DOS_PTR+1 DOS_BLEN
2 10905		  =0001			 ??001F	     EQU (DOS_BLEN)-(DOS_PTR+1)
2 10906
2 10907	    207F  23				   DB 23h; INC HL
2 10908
1 10909	    2080  36 80				  DB 36h,128
1 10910	    2082  23				  DB 23h
1 10911	    2083  36 00				  DB 36h,0
1 10912
1 10913						  OFF_HL DOS_BLEN+1 DOS_NUM
2 10914		  =0001			 ??0020	     EQU (DOS_NUM)-(DOS_BLEN+1)
2 10915
2 10916	    2085  23				   DB 23h; INC HL
2 10917
1 10918	    2086  E5				  DB 0e5h		     ; save position of	number of records
1 10919
1 10920						  OFF_HL DOS_NUM DOS_FCB
2 10921		  =000A			 ??0021	     EQU (DOS_FCB)-(DOS_NUM)
2 10922
2 10923	    2087  D5					 DB 0D5H ; PUSH	DE
2 10924	    2088  11					 DB 11H
2 10925	    2089  000A					 DW ??0021
2 10926	    208B  19					 DB 19H	 ; ADD HL,DE
2 10927	    208C  D1					 DB 0D1H ; POP DE
2 10928
1 10929	    208D  44				  DB 44h
1 10930	    208E  4D				  DB 4dh
1 10931	    208F  CD				  DB 0cdh
1 10932	    2090  0000e				 DW  FILESIZE		   ; 33e, L2D22	FileSize ?
1 10933
1 10934	    2092  D5				  DB 0d5h		     ; push filesize: DE:HL
1 10935	    2093  E5				  DB 0e5h
1 10936
1 10937	    2094  2A				  DB 02ah
1 10938	    2095  01B0r				 DW L00E6	       ; DE:HL = record	size
1 10939	    2097  11				  DB 11h
1 10940	    2098  0000				 DW 0
1 10941	    209A  CD				  DB 0cdh
1 10942	    209B  0B16r				 DW  L_DIV
1 10943	    209D  44				  DB 44h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 193
msx_asm\rtl_rtl.ASM



1 10944	    209E  4D				  DB 4dh
1 10945
1 10946	    209F  E1				  DB 0e1h		      ;	HL = address of	DOS_NUM
1 10947	    20A0  71				  DB 71h
1 10948	    20A1  23				  DB 23h
1 10949	    20A2  70				  DB 70h
1 10950	    20A3  23				  DB 23h
1 10951	    20A4  73				  DB 73h
1 10952	    20A5  23				  DB 23h
1 10953	    20A6  72				  DB 72h
1 10954
1 10955						  OFF_HL DOS_NUM+3 DOS_REC
2 10956		  =0001			 ??0022	     EQU (DOS_REC)-(DOS_NUM+3)
2 10957
2 10958	    20A7  23				   DB 23h; INC HL
2 10959
1 10960
1 10961	    20A8  ED 5B				  DB 0edh,5bh
1 10962	    20AA  01B0r				 DW L00E6	       ; DE = record size
1 10963	    20AC  73				  DB 73h
1 10964	    20AD  23				  DB 23h
1 10965	    20AE  72				  DB 72h
1 10966
1 10967						  OFF_HL DOS_REC+1 DOS_CUR
2 10968		  =0001			 ??0023	     EQU (DOS_CUR)-(DOS_REC+1)
2 10969
2 10970	    20AF  23				   DB 23h; INC HL
2 10971
1 10972					 ;	   XOR A		     ; 33e, TODO error ?
1 10973	    20B0  77				  DB 77h
1 10974	    20B1  23				  DB 23h
1 10975	    20B2  77				  DB 77h
1 10976	    20B3  23				  DB 23h
1 10977	    20B4  77				  DB 77h
1 10978	    20B5  23				  DB 23h
1 10979	    20B6  77				  DB 77h
1 10980
1 10981	    20B7  C9				  DB 0c9h
1 10982
1 10983					 ;	   OFF_HL 0 FIB_FCB
1 10984					 ;;	    LD DE,000CH		       ; length	of FIB header
1 10985					 ;;	    ADD	HL,DE
1 10986					 ;	   EX DE,HL
1 10987					 ;	   LD C,23H		      ;	C = get	file size
1 10988					 ;	   CALL	MSXDOS
1 10989					 ;	   POP HL
1 10990					 ;
1 10991					 ;	   OFF_HL 0 FIB_FCB+21H	      ;	offset to first	byte of	file size
1 10992					 ;;	    LD DE,FIB_FCB+21H	       ; 002DH,	offset to first	byte of	file pos.
1 10993					 ;;	    ADD	HL,DE
1 10994					 ;	   XOR A
1 10995					 ;	   LD C,(HL)		      ;	BC = file size and reset file pos.
1 10996					 ;	   LD (HL),A
1 10997					 ;	   INC HL
1 10998					 ;	   LD B,(HL)
1 10999					 ;	   LD (HL),A
1 11000					 ;
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 194
msx_asm\rtl_rtl.ASM



1 11001					 ;	   OFF_HL FIB_FCB+21H+1	FIB_NUM
1 11002					 ;;	    LD DE,-42
1 11003					 ;;	    ADD	HL,DE
1 11004					 ;	   LD (HL),C		      ;	write file size	in FIB_NUM
1 11005					 ;	   INC HL
1 11006					 ;	   LD (HL),B
1 11007					 ;
1 11008					 ;	   OFF_HL FIB_NUM+1 FIB_REC
1 11009					 ;;	    INC	HL
1 11010					 ;	   LD (HL),80H		      ;	FIB_REC	= 128 bytes per	record
1 11011					 ;	   INC HL
1 11012					 ;	   LD (HL),A
1 11013					 ;
1 11014					 ;	   OFF_HL FIB_REC+1 FIB_CUR
1 11015					 ;;	    INC	HL
1 11016					 ;	   LD (HL),A		      ;	FIB_CUR	= 0
1 11017					 ;	   INC HL
1 11018					 ;	   LD (HL),A
1 11019					 ;	   RET
1 11020					 ;
1 11021						 GLOBALS L1AB0
2 11022
2 11023						  IRP NAME,<L1AB0>
2 11024							   GLOBAL2 <NAME>
2 11025						  ENDM
3 11026							   GLOBAL2 <L1AB0>
4 11027						  GLOBAL L1AB0 : NEAR
4 11028
4 11029						  GLOBAL _L1AB0	: NEAR
4 11030	    20B8			 _L1AB0:
4 11031
2 11032
1 11033	    20B8			 L1AB0:	 ; LIB
1 11034						 ; PROCEDURE Close(VAR F: FILE);
1 11035						 ; closes an untyped file
1 11036						 ; in:	 HL = FIB address
1 11037	    20B8  22				 DB 22h
1 11038	    20B9  01ACr				 DW L00E2		 ; save	FIB address
1 11039	    20BB  7E				 DB 7eh
1 11040	    20BC  E6 C0				 DB 0e6h, 0C0H		 ; input/output	allowed	?
1 11041	    20BE  C8				 DB 0c8h		 ; return if not allowed
1 11042
1 11043	    20BF  C3				 DB 0c3h
1 11044	    20C0  1A5Dr				 DW  L1481		 ; close file
1 11045
1 11046						 GLOBALS L1ABA
2 11047
2 11048						  IRP NAME,<L1ABA>
2 11049							   GLOBAL2 <NAME>
2 11050						  ENDM
3 11051							   GLOBAL2 <L1ABA>
4 11052						  GLOBAL L1ABA : NEAR
4 11053
4 11054						  GLOBAL _L1ABA	: NEAR
4 11055	    20C2			 _L1ABA:
4 11056
2 11057
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 195
msx_asm\rtl_rtl.ASM



1 11058	    20C2			 L1ABA:	 ; PROCEDURE BlockWrite(VAR F: FILE; VAR Dest: Type; Num: INTEGER);
1 11059	    20C2  3E 22				 DB 3eh,22H
1 11060	    20C4  18 02				 DB 18h,( L1AC0)-$-1
1 11061
1 11062						 GLOBALS L1ABE
2 11063
2 11064						  IRP NAME,<L1ABE>
2 11065							   GLOBAL2 <NAME>
2 11066						  ENDM
3 11067							   GLOBAL2 <L1ABE>
4 11068						  GLOBAL L1ABE : NEAR
4 11069
4 11070						  GLOBAL _L1ABE	: NEAR
4 11071	    20C6			 _L1ABE:
4 11072
2 11073
1 11074	    20C6			 L1ABE:	 ; PROCEDURE BlockRead(VAR F: FILE; VAR	Dest: Type; Num: INTEGER);
1 11075	    20C6  3E 21				 DB 3eh,21H
1 11076
1 11077	    20C8  44			 L1AC0:	 DB 44h			 ; BC =	Num parameter
1 11078	    20C9  4D				 DB 4dh
1 11079	    20CA  21				 DB 21h
1 11080	    20CB  01C2r				 DW L00F0		 ; dummy address for result parameter
1 11081	    20CD  22				 DB 22h
1 11082	    20CE  01B0r				 DW L00E6
1 11083
1 11084	    20D0  AF				  DB 0afh
1 11085	    20D1  32				  DB 32h
1 11086	    20D2  01A0r				 DW L00D0
1 11087
1 11088	    20D4  DD E1				 DB 0ddh,0e1h			 ; return address
1 11089	    20D6  D1				 DB 0d1h		 ; DE =	destination address
1 11090	    20D7  E1				 DB 0e1h		 ; HL =	address	of FIB
1 11091	    20D8  DD E5				 DB 0ddh,0e5h			 ; restore return address
1 11092
1 11093	    20DA  C5				 DB 0c5h		 ; save	Num
1 11094	    20DB  CD				 DB 0cdh
1 11095	    20DC  21A2r				 DW  L1AFD		 ; perform real	blockread
1 11096	    20DE  C1				 DB 0c1h
1 11097	    20DF  C0				  DB 0c0h
1 11098
1 11099	    20E0  3A				 DB 3ah
1 11100	    20E1  01A0r				 DW L00D0		 ; read	IORESULT
1 11101	    20E3  B7				 DB 0b7h
1 11102	    20E4  C0				 DB 0c0h		 ; quit	if an error occurred
1 11103
1 11104	    20E5  2A				 DB 02ah
1 11105	    20E6  01C2r				 DW L00F0
1 11106	    20E8  ED 42				 DB 0EDH,042h
1 11107	    20EA  C8				 DB 0c8h
1 11108
1 11109	    20EB  3A				 DB 3ah
1 11110	    20EC  01B3r				 DW L00E9		 ; 21H = random	read, 22H = random write
1 11111	    20EE  FE 21				 DB 0feh, 21H
1 11112
1 11113					 ;	   LD A,99H		      ;	IORESULT = 99H,	Unexpected end-of-file
1 11114	    20F0  CA				  DB 0cah
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 196
msx_asm\rtl_rtl.ASM



1 11115	    20F1  1F75r				 DW L18D6
1 11116
1 11117	    20F3  3E F0				 DB 3eh,0F0H		 ; IORESULT = 0F0H, Disk write error
1 11118
1 11119	    20F5  32			 L1AE9:	 DB 32h
1 11120	    20F6  01A0r				 DW L00D0		 ; set IORESULT
1 11121	    20F8  C9				 DB 0c9h
1 11122
1 11123					 ; 33e,	used ????
1 11124	    20F9			 L20FD:
1 11125	    20F9  CD				  DB 0cdh
1 11126	    20FA  0A18r				 DW  L0A1A
1 11127	    20FC  7C				  DB 7ch
1 11128	    20FD  B5				  DB 0b5h
1 11129	    20FE  C8				  DB 0c8h
1 11130	    20FF  C5				  DB 0c5h
1 11131	    2100  EB				  DB 0ebh
1 11132	    2101  44				  DB 44h
1 11133	    2102  4D				  DB 4dh
1 11134	    2103  21				  DB 21h
1 11135	    2104  0000				 DW 0
1 11136
1 11137	    2106			 L210A:
1 11138	    2106  09				  DB 09h
1 11139	    2107  1B				  DB 1bh
1 11140	    2108  7A				  DB 7ah
1 11141	    2109  B3				  DB 0b3h
1 11142	    210A  20 FA				  DB 20h,(L210A)-$-1
1 11143
1 11144	    210C  C1				  DB 0c1h
1 11145	    210D  C9				  DB 0c9h
1 11146
1 11147	    210E			 L2112:
1 11148	    210E  D5				  DB 0d5h		     ; save FIB	address
1 11149
1 11150						  OFF_HL 0 DOS_REC
2 11151		  =000A			 ??0024	     EQU (DOS_REC)-(0)
2 11152
2 11153	    210F  D5					 DB 0D5H ; PUSH	DE
2 11154	    2110  11					 DB 11H
2 11155	    2111  000A					 DW ??0024
2 11156	    2113  19					 DB 19H	 ; ADD HL,DE
2 11157	    2114  D1					 DB 0D1H ; POP DE
2 11158
1 11159
1 11160	    2115  7E				  DB 7eh		  ; HL = record	size
1 11161	    2116  23				  DB 23h
1 11162	    2117  66				  DB 66h
1 11163	    2118  6F				  DB 6fh
1 11164
1 11165	    2119  D1				  DB 0d1h
1 11166
1 11167	    211A  C3				  DB 0c3h
1 11168	    211B  20F9r				 DW  L20FD
1 11169
1 11170	    211D  E5			 L2121:	  DB 0e5h		     ; HL = FIB	address
1 11171
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 197
msx_asm\rtl_rtl.ASM



1 11172	    211E  D5				  DB 0d5h
1 11173
1 11174	    211F  EB				  DB 0ebh
1 11175	    2120  21				  DB 21h
1 11176	    2121  0010				 DW DOS_FCB
1 11177	    2123  19				  DB 019h
1 11178	    2124  EB				  DB 0ebh
1 11179
1 11180	    2125  D5				  DB 0d5h
1 11181
1 11182	    2126  50				  DB 50h
1 11183	    2127  59				  DB 59h
1 11184
1 11185	    2128  CD				  DB 0cdh
1 11186	    2129  210Er				 DW  L2112
1 11187
1 11188	    212B  C1				  DB 0c1h
1 11189	    212C  D1				  DB 0d1h
1 11190	    212D  CD				  DB 0cdh
1 11191	    212E  2187r				 DW  L218B		   ; 33e, TODO L218B
1 11192
1 11193	    2130  EB				  DB 0ebh
1 11194
1 11195	    2131  E1				  DB 0e1h		      ;	HL = FIB address
1 11196
1 11197	    2132  C0				  DB 0c0h
1 11198
1 11199	    2133  E5				  DB 0e5h		     ; HL = FIB	address
1 11200
1 11201	    2134  01				  DB 01h
1 11202	    2135  0000				 DW 0
1 11203	    2137  C5				  DB 0c5h
1 11204	    2138  D5				  DB 0d5h
1 11205
1 11206						  OFF_HL 0 DOS_REC
2 11207		  =000A			 ??0025	     EQU (DOS_REC)-(0)
2 11208
2 11209	    2139  D5					 DB 0D5H ; PUSH	DE
2 11210	    213A  11					 DB 11H
2 11211	    213B  000A					 DW ??0025
2 11212	    213D  19					 DB 19H	 ; ADD HL,DE
2 11213	    213E  D1					 DB 0D1H ; POP DE
2 11214
1 11215
1 11216	    213F  5E				  DB 5eh		  ; DE = record	length
1 11217	    2140  23				  DB 23h
1 11218	    2141  56				  DB 56h
1 11219
1 11220	    2142  EB				  DB 0ebh
1 11221	    2143  11				  DB 11h
1 11222	    2144  0000				 DW 0
1 11223
1 11224	    2146  CD				  DB 0cdh
1 11225	    2147  0B16r				 DW  L_DIV
1 11226
1 11227	    2149  44				  DB 44h
1 11228	    214A  4D				  DB 4dh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 198
msx_asm\rtl_rtl.ASM



1 11229
1 11230	    214B  E1				  DB 0e1h		      ;	HL = FIB address
1 11231
1 11232						  OFF_HL 0 DOS_CUR
2 11233		  =000C			 ??0026	     EQU (DOS_CUR)-(0)
2 11234
2 11235	    214C  D5					 DB 0D5H ; PUSH	DE
2 11236	    214D  11					 DB 11H
2 11237	    214E  000C					 DW ??0026
2 11238	    2150  19					 DB 19H	 ; ADD HL,DE
2 11239	    2151  D1					 DB 0D1H ; POP DE
2 11240
1 11241
1 11242	    2152  C5				  DB 0c5h
1 11243	    2153  E5				  DB 0e5h
1 11244
1 11245	    2154  7E				  DB 7eh
1 11246	    2155  81				  DB 081h
1 11247	    2156  77				  DB 77h
1 11248	    2157  23				  DB 23h
1 11249
1 11250	    2158  7E				  DB 7eh
1 11251	    2159  88				  DB 088h
1 11252	    215A  77				  DB 77h
1 11253	    215B  23				  DB 23h
1 11254
1 11255	    215C  7E				  DB 7eh
1 11256	    215D  CE 00				  DB 0ceh,0
1 11257	    215F  77				  DB 77h
1 11258	    2160  23				  DB 23h
1 11259
1 11260	    2161  7E				  DB 7eh
1 11261	    2162  CE 00				  DB 0ceh,0
1 11262	    2164  77				  DB 77h
1 11263
1 11264	    2165  D1				  DB 0d1h
1 11265
1 11266	    2166  3A				  DB 3ah
1 11267	    2167  01B3r				 DW L00E9
1 11268	    2169  FE 21				  DB 0feh, 21H
1 11269	    216B  28 17				  DB 28h,(L2188)-$-1
1 11270
1 11271	    216D  EB				  DB 0ebh
1 11272
1 11273						  OFF_HL DOS_CUR DOS_NUM+3
2 11274		  =-0003		 ??0027	     EQU (DOS_NUM+3)-(DOS_CUR)
2 11275
2 11276	    216E  2B					DB 2bh;	DEC HL
2 11277	    216F  2B					DB 2bh;	DEC HL
2 11278	    2170  2B					DB 2bh;	DEC HL
2 11279
1 11280
1 11281	    2171  01				  DB 01h
1 11282	    2172  0004				 DW 4
1 11283	    2174			 L2178:
1 11284	    2174  1A				  DB 1ah
1 11285	    2175  BE				  DB 0beh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 199
msx_asm\rtl_rtl.ASM



1 11286	    2176  38 0C				  DB 38h,(L2188)-$-1
1 11287	    2178  20 07				  DB 20h,(L2185)-$-1
1 11288
1 11289	    217A  1B				  DB 1bh
1 11290	    217B  2B				  DB 2bh
1 11291	    217C  0D				  DB 0dh
1 11292	    217D  20 F5				  DB 20h,(L2178)-$-1
1 11293	    217F  18 03				  DB 18h,( L2188)-$-1
1 11294
1 11295	    2181  EB			 L2185:	  DB 0ebh
1 11296	    2182  ED B8				  DB 0edh,0b8h
1 11297
1 11298	    2184			 L2188:
1 11299	    2184  E1				  DB 0e1h
1 11300	    2185  AF				  DB 0afh
1 11301	    2186  C9				  DB 0c9h
1 11302
1 11303	    2187  3A			 L218B:	  DB 3ah
1 11304	    2188  01B3r				 DW L00E9
1 11305	    218A  FE 21				  DB 0feh, 21H
1 11306	    218C  CA				  DB 0cah
1 11307	    218D  0000e				 DW READFILE		  ; 33e, TODO L2D62
1 11308	    218F  C3				  DB 0c3h
1 11309	    2190  0000e				 DW  WRITEFILE		     ; 33e, TODO L2D8E
1 11310
1 11311					 ; 33e
1 11312
1 11313						 GLOBALS L1AED
2 11314
2 11315						  IRP NAME,<L1AED>
2 11316							   GLOBAL2 <NAME>
2 11317						  ENDM
3 11318							   GLOBAL2 <L1AED>
4 11319						  GLOBAL L1AED : NEAR
4 11320
4 11321						  GLOBAL _L1AED	: NEAR
4 11322	    2192			 _L1AED:
4 11323
2 11324
1 11325	    2192			 L1AED:	 ; PROCEDURE BlockWrite(VAR F: FILE; VAR Dest: Type; Num: INTEGER;
1 11326						 ;		      VAR Result: INTEGER);
1 11327	    2192  3E 22				 DB 3eh,22H
1 11328	    2194  18 02				 DB 18h,( L1AF3)-$-1
1 11329
1 11330						 GLOBALS L1AF1
2 11331
2 11332						  IRP NAME,<L1AF1>
2 11333							   GLOBAL2 <NAME>
2 11334						  ENDM
3 11335							   GLOBAL2 <L1AF1>
4 11336						  GLOBAL L1AF1 : NEAR
4 11337
4 11338						  GLOBAL _L1AF1	: NEAR
4 11339	    2196			 _L1AF1:
4 11340
2 11341
1 11342	    2196			 L1AF1:	 ; PROCEDURE BlockRead(VAR F: FILE; VAR	Dest: Type; Num: INTEGER;
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 200
msx_asm\rtl_rtl.ASM



1 11343						 ;		     VAR Result: INTEGER);
1 11344	    2196  3E 21				 DB 3eh,21H
1 11345
1 11346	    2198  22			 L1AF3:	 DB 22h
1 11347	    2199  01B0r				 DW L00E6		 ; save	address	of result parameter
1 11348	    219B  DD E1				 DB 0ddh,0e1h
1 11349	    219D  C1				 DB 0c1h		 ; BC =	Num parameter
1 11350	    219E  D1				 DB 0d1h		 ; DE =	destination/source address
1 11351	    219F  E1				 DB 0e1h		 ; HL =	FIB address
1 11352	    21A0  DD E5				 DB 0ddh,0e5h
1 11353
1 11354	    21A2			 L1AFD:	 ; in:	 HL = FIB address
1 11355						 ;	 DE = destination/source address
1 11356						 ;	 BC = number of	records	of 128 bytes to	read
1 11357	    21A2  32				 DB 32h
1 11358	    21A3  01B3r				 DW L00E9		 ; 21H = random	read, 22H = random write
1 11359	    21A5  22				  DB 22h
1 11360	    21A6  01ACr				 DW L00E2	       ; save FIB address
1 11361	    21A8  7E				 DB 7eh
1 11362	    21A9  E6 C0				 DB 0e6h, 0C0H		 ; read	or write flags set ?
1 11363	    21AB  CA				 DB 0cah
1 11364	    21AC  1F56r				 DW L18B0		 ; jump	if both	are not	set, File not open
1 11365									 ; input and/or	output allowed
1 11366
1 11367	    21AE  2A				 DB 02ah
1 11368	    21AF  01B0r				 DW L00E6		 ; HL =	address	of read	record count
1 11369	    21B1  AF				 DB 0afh
1 11370	    21B2  77				 DB 77h		 ; zero	records	read
1 11371	    21B3  23				 DB 23h
1 11372	    21B4  77				 DB 77h
1 11373
1 11374	    21B5  2A				  DB 02ah
1 11375	    21B6  01ACr				 DW L00E2
1 11376	    21B8  CD				  DB 0cdh
1 11377	    21B9  211Dr				 DW  L2121
1 11378	    21BB  C0				  DB 0c0h
1 11379
1 11380	    21BC  EB				  DB 0ebh
1 11381	    21BD  2A				  DB 02ah
1 11382	    21BE  01B0r				 DW L00E6
1 11383	    21C0  73				  DB 73h
1 11384	    21C1  23				  DB 23h
1 11385	    21C2  72				  DB 72h
1 11386	    21C3  C9				  DB 0c9h
1 11387
1 11388					 ; hier	ben ik
1 11389
1 11390					 ;L1B10:   LD A,B
1 11391					 ;	   OR C
1 11392					 ;	   JR Z,L1B4D		      ;	quit if	count =	0
1 11393					 ;
1 11394					 ;	   PUSH	BC
1 11395					 ;	   PUSH	DE
1 11396					 ;
1 11397					 ;	   LD C,1AH		      ;	C = set	dma
1 11398					 ;	   CALL	MSXDOS
1 11399					 ;	   LD HL,(L00E2)
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 201
msx_asm\rtl_rtl.ASM



1 11400					 ;	   OFF_HL 0 FIB_FCB
1 11401					 ;;	    LD DE,FIB_FCB	       ; length	of FIB header
1 11402					 ;;	    ADD	HL,DE
1 11403					 ;
1 11404					 ;	   EX DE,HL		      ;	DE = address of	FIB
1 11405					 ;	   LD A,(L00E9)		      ;	random read/write
1 11406					 ;	   LD C,A
1 11407					 ;	   CALL	MSXDOS
1 11408					 ;
1 11409					 ;	   POP DE
1 11410					 ;	   POP BC
1 11411					 ;	   OR A
1 11412					 ;	   JR NZ,L1B4D		      ;	jump if	error
1 11413					 ;
1 11414					 ;	   PUSH	DE
1 11415					 ;	   LD HL,(L00E2)
1 11416					 ;	   OFF_HL 0 FIB_FCB+21H
1 11417					 ;;	    LD DE,FIB_FCB+21H	       ; 002DH,	offset to first	byte of	file pos.
1 11418					 ;;	    ADD	HL,DE
1 11419					 ;	   INC (HL)		      ;	increase low byte
1 11420					 ;	   JR NZ,L1B3C
1 11421					 ;	   INC HL
1 11422					 ;	   INC (HL)		      ;	increase high byte
1 11423					 ;
1 11424					 ;L1B3C:   POP DE
1 11425					 ;	   LD HL,128		      ;	next DMA address
1 11426					 ;	   ADD HL,DE
1 11427					 ;	   EX DE,HL
1 11428					 ;
1 11429					 ;	   LD HL,(L00E6)	      ;	increase number	of records read
1 11430					 ;	   INC (HL)		      ;	low byte
1 11431					 ;	   JR NZ,L1B4A
1 11432					 ;	   INC HL
1 11433					 ;	   INC (HL)		      ;	high byte
1 11434					 ;
1 11435					 ;L1B4A:   DEC BC		      ;	decrease records to go
1 11436					 ;	   JR L1B10
1 11437					 ;
1 11438					 ;L1B4D:   LD HL,(L00E2)
1 11439					 ;	   OFF_HL 0 FIB_FCB+21H
1 11440					 ;;	    LD DE,FIB_FCB+21H	       ; 002DH,	offset to first	byte of	file pos.
1 11441					 ;;	    ADD	HL,DE
1 11442					 ;	   LD C,(HL)		      ;	BC = updated current record in FCB
1 11443					 ;	   INC HL
1 11444					 ;	   LD B,(HL)
1 11445					 ;
1 11446					 ;	   OFF_HL FIB_FCB+21H+1	FIB_CUR
1 11447					 ;;	    LD DE,FIB_CUR-(FIB_FCB+21H+1) ; -38, HL = address of current record
1 11448					 ;;	    ADD	HL,DE
1 11449					 ;	   LD (HL),C		      ;	copy to	the FIB	current	record
1 11450					 ;	   INC HL
1 11451					 ;	   LD (HL),B
1 11452					 ;
1 11453					 ;	   OFF_HL FIB_CUR+1 FIB_NUM+1
1 11454					 ;;	    LD DE,FIB_NUM-FIB_CUR      ; -4, HL	= address of number of records
1 11455					 ;	  ADD HL,DE
1 11456					 ;	   LD D,(HL)
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 202
msx_asm\rtl_rtl.ASM



1 11457					 ;	   DEC HL
1 11458					 ;	   LD E,(HL)
1 11459					 ;	   EX DE,HL		      ;	HL = number of records
1 11460					 ;	   OR A
1 11461					 ;	   SBC HL,BC		      ;	current	record <= number of records ?
1 11462					 ;	   RET NC		      ;	return and don't increase it
1 11463					 ;	   EX DE,HL
1 11464					 ;	   LD (HL),C		      ;	update to a new	number of records
1 11465					 ;	   INC HL
1 11466					 ;	   LD (HL),B
1 11467					 ;	   RET
1 11468
1 11469						 GLOBALS L1B6F
2 11470
2 11471						  IRP NAME,<L1B6F>
2 11472							   GLOBAL2 <NAME>
2 11473						  ENDM
3 11474							   GLOBAL2 <L1B6F>
4 11475						  GLOBAL L1B6F : NEAR
4 11476
4 11477						  GLOBAL _L1B6F	: NEAR
4 11478	    21C4			 _L1B6F:
4 11479
2 11480
1 11481	    21C4			 L1B6F:	  ; SEEK (VAR F: FILE; Pos: INTEGER);
1 11482						  ; LIB
1 11483						 ; seek	untyped	file
1 11484						 ; in:	 FIB address at	stack
1 11485						  ;	   DE:HL = position to seek to
1 11486	    21C4  DD E1				  DB 0ddh,0e1h
1 11487	    21C6  C1				  DB 0c1h
1 11488	    21C7  43ED 01ACr			  DW 43edh,L00E2	      ;	save FIB address
1 11489	    21CB  DD E5				  DB 0ddh,0e5h
1 11490
1 11491	    21CD  D5				  DB 0d5h
1 11492	    21CE  E5				 DB 0e5h
1 11493
1 11494	    21CF  D5				  DB 0d5h
1 11495	    21D0  E5				  DB 0e5h
1 11496
1 11497	    21D1  CD				  DB 0cdh
1 11498	    21D2  203Cr				 DW  L1A5A		   ; FileSize
1 11499
1 11500	    21D4  C5				  DB 0c5h
1 11501	    21D5  CD				  DB 0cdh
1 11502	    21D6  09F4r				 DW  L_CMP		   ; Pos > FileSize ?
1 11503	    21D8  C1				  DB 0c1h
1 11504
1 11505	    21D9  38 02				  DB 38h,(L1B72)-$-1
1 11506	    21DB  20 31				  DB 20h,(L2212)-$-1
1 11507
1 11508	    21DD			 L1B72:
1 11509	    21DD  D1				  DB 0d1h
1 11510	    21DE  60				  DB 60h
1 11511	    21DF  69				  DB 69h
1 11512	    21E0  E3				  DB 0e3h
1 11513	    21E1  D5				  DB 0d5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 203
msx_asm\rtl_rtl.ASM



1 11514	    21E2  44				  DB 44h
1 11515	    21E3  4D				  DB 4dh
1 11516
1 11517	    21E4  2A				  DB 02ah
1 11518	    21E5  01ACr				 DW L00E2	       ; HL = FIB address
1 11519						  OFF_HL 0 DOS_CUR+3
2 11520		  =000F			 ??0028	     EQU (DOS_CUR+3)-(0)
2 11521
2 11522	    21E7  D5					 DB 0D5H ; PUSH	DE
2 11523	    21E8  11					 DB 11H
2 11524	    21E9  000F					 DW ??0028
2 11525	    21EB  19					 DB 19H	 ; ADD HL,DE
2 11526	    21EC  D1					 DB 0D1H ; POP DE
2 11527
1 11528
1 11529	    21ED  D1				  DB 0d1h
1 11530	    21EE  72				  DB 72h
1 11531	    21EF  2B				  DB 2bh
1 11532	    21F0  73				  DB 73h
1 11533	    21F1  2B				  DB 2bh
1 11534	    21F2  70				  DB 70h
1 11535	    21F3  2B				  DB 2bh
1 11536	    21F4  71				  DB 71h
1 11537
1 11538	    21F5  21				  DB 21h
1 11539	    21F6  0000				 DW 0
1 11540	    21F8  E3				  DB 0e3h
1 11541	    21F9  E5				  DB 0e5h
1 11542
1 11543	    21FA  60				  DB 60h
1 11544	    21FB  69				  DB 69h
1 11545
1 11546	    21FC  CD				  DB 0cdh
1 11547	    21FD  0A9Ar				 DW  L_MUL
1 11548
1 11549	    21FF  E5				  DB 0e5h		     ; save low-word
1 11550
1 11551	    2200  2A				  DB 02ah
1 11552	    2201  01ACr				 DW L00E2
1 11553	    2203  01				  DB 01h
1 11554	    2204  0010				 DW DOS_FCB
1 11555	    2206  09				  DB 09h
1 11556	    2207  44				  DB 44h
1 11557	    2208  4D				  DB 4dh
1 11558
1 11559	    2209  E1				  DB 0e1h		      ;	restore	low-word
1 11560
1 11561	    220A  CD				  DB 0cdh
1 11562	    220B  0000e				 DW  FILESEEK		   ; L2CCD
1 11563
1 11564	    220D  C9				  DB 0c9h
1 11565
1 11566					 ; 33e 2212
1 11567	    220E			 L2212:
1 11568	    220E  E1				  DB 0e1h
1 11569	    220F  D1				  DB 0d1h
1 11570	    2210  C3				  DB 0c3h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 204
msx_asm\rtl_rtl.ASM



1 11571	    2211  1FF1r				 DW  L1A26
1 11572
1 11573					 ;	   CALL	L1A5A		      ;	HL = number of records
1 11574					 ;				      ;	DE = current record
1 11575					 ;				      ;	BC = record length
1 11576					 ;	   POP DE
1 11577					 ;	   OR A
1 11578					 ;	   SBC HL,DE
1 11579					 ;	   JP C,L1A26		      ;	jump if	Seek beyond end-of-file
1 11580					 ;
1 11581					 ;	   LD HL,(L00E2)
1 11582					 ;	   LD BC,FIB_CUR
1 11583					 ;	   ADD HL,BC		      ;	offset to current record
1 11584					 ;	   LD (HL),E		      ;	set new	position
1 11585					 ;	   INC HL
1 11586					 ;	   LD (HL),D
1 11587					 ;
1 11588					 ;	   LD BC,FIB_FCB+21H-(FIB_CUR+1); 0024H, address of file position in FCB
1 11589					 ;	   ADD HL,BC
1 11590					 ;	   LD (HL),E		      ;	set new	position in FCB, 128 byte records
1 11591					 ;	   INC HL
1 11592					 ;	   LD (HL),D
1 11593					 ;	   RET
1 11594
1 11595					 ; 33e 2217
1 11596						 GLOBALS L1B93
2 11597
2 11598						  IRP NAME,<L1B93>
2 11599							   GLOBAL2 <NAME>
2 11600						  ENDM
3 11601							   GLOBAL2 <L1B93>
4 11602						  GLOBAL L1B93 : NEAR
4 11603
4 11604						  GLOBAL _L1B93	: NEAR
4 11605	    2213			 _L1B93:
4 11606
2 11607
1 11608	    2213			 L1B93:	 ; LIB
1 11609						 ; PROCEDURE Erase(VAR F: FILE);
1 11610	    2213  CD				 DB 0cdh
1 11611	    2214  22CDr				 DW  L1C4C		 ; check on a logical device
1 11612	    2216  C0				 DB 0c0h		 ; return if it	is a logical device
1 11613
1 11614						  OFF_HL 0 DOS_FCB+1	     ; address of filename
2 11615		  =0011			 ??0029	     EQU (DOS_FCB+1)-(0)
2 11616
2 11617	    2217  D5					 DB 0D5H ; PUSH	DE
2 11618	    2218  11					 DB 11H
2 11619	    2219  0011					 DW ??0029
2 11620	    221B  19					 DB 19H	 ; ADD HL,DE
2 11621	    221C  D1					 DB 0D1H ; POP DE
2 11622
1 11623
1 11624	    221D  EB				  DB 0ebh
1 11625	    221E  CD				  DB 0cdh
1 11626	    221F  0000e				 DW  DELETEFILE
1 11627					 ;	  LD DE,000CH		  ; length of FIB header
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 205
msx_asm\rtl_rtl.ASM



1 11628					 ;	  ADD HL,DE
1 11629					 ;	   EX DE,HL
1 11630					 ;	   LD C,13H		      ;	C = file delete
1 11631					 ;	   CALL	MSXDOS
1 11632					 ;	   INC A
1 11633	    2221  C8				  DB 0c8h		       ; return	if no error
1 11634
1 11635	    2222  C3				  DB 0c3h
1 11636	    2223  2274r				 DW  L1BE4		     ; jump if error, File does	not exist
1 11637
1 11638					 ; 33e 2229
1 11639						  GLOBALS RENAMEFILE_LIB
2 11640
2 11641						  IRP NAME,<RENAMEFILE_LIB>
2 11642							   GLOBAL2 <NAME>
2 11643						  ENDM
3 11644							   GLOBAL2 <RENAMEFILE_LIB>
4 11645						  GLOBAL RENAMEFILE_LIB	: NEAR
4 11646
4 11647						  GLOBAL _RENAMEFILE_LIB : NEAR
4 11648	    2225			 _RENAMEFILE_LIB:
4 11649
2 11650
1 11651	    2225			 RENAMEFILE_LIB:
1 11652						  ; PROCEDURE RenameFile(OldName: STRING; NewName: STRING);
1 11653	    2225  FD E1				  DB 0fdh,0e1h			   ; IY	= return address
1 11654
1 11655	    2227  2A				  DB 02ah
1 11656	    2228  01A1r				 DW L00D2	       ; TEMP address for NewName
1 11657	    222A  06 3F				  DB 06h,63		       ; maximum string	length
1 11658	    222C  CD				  DB 0cdh
1 11659	    222D  07CDr				 DW  L05E2		   ; pop NewName from stack
1 11660	    222F  AF				  DB 0afh
1 11661	    2230  12				  DB 12h		  ; make ASCIIZ	string
1 11662	    2231  2A				  DB 02ah
1 11663	    2232  01A1r				 DW L00D2
1 11664	    2234  11				  DB 11h
1 11665	    2235  0040				 DW 64
1 11666	    2237  19				  DB 019h
1 11667	    2238  06 3F				  DB 06h,63		       ; maximum string	length
1 11668	    223A  CD				  DB 0cdh
1 11669	    223B  07CDr				 DW  L05E2		   ; pop OldName from stack
1 11670	    223D  AF				  DB 0afh
1 11671	    223E  12				  DB 12h		  ; make ASCIIZ	string
1 11672
1 11673	    223F  FD E5				  DB 0fdh,0e5h			  ; restore return address
1 11674
1 11675	    2241  ED 5B				  DB 0edh,5bh
1 11676	    2243  01A1r				 DW L00D2	       ; DE = (L00D2)
1 11677	    2245  21				  DB 21h
1 11678	    2246  0040				 DW 64
1 11679	    2248  19				  DB 019h		   ; HL	= (L00D2) + 64
1 11680	    2249  23				  DB 23h
1 11681	    224A  13				  DB 13h
1 11682	    224B  EB				  DB 0ebh		    ; DE = old Drive/path/file ASCIIZ string
1 11683									     ; HL = new	filename ASCIIZ	string
1 11684	    224C  C3				  DB 0c3h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 206
msx_asm\rtl_rtl.ASM



1 11685	    224D  0000e				 DW  RENAMEFILE
1 11686
1 11687					 ; 33e 2253
1 11688						 GLOBALS L1BA5
2 11689
2 11690						  IRP NAME,<L1BA5>
2 11691							   GLOBAL2 <NAME>
2 11692						  ENDM
3 11693							   GLOBAL2 <L1BA5>
4 11694						  GLOBAL L1BA5 : NEAR
4 11695
4 11696						  GLOBAL _L1BA5	: NEAR
4 11697	    224F			 _L1BA5:
4 11698
2 11699
1 11700	    224F			 L1BA5:	 ; LIB
1 11701						 ; rename(var F: file; Name: string);
1 11702	    224F  FD E1				 DB 0fdh,0e1h			 ; IY =	return address
1 11703	    2251  2A				  DB 02ah
1 11704	    2252  01A1r				 DW L00D2	       ; HL = destination address of string
1 11705	    2254  06 3F				  DB 06h,63		       ; maximum of 63 bytes
1 11706	    2256  CD				  DB 0cdh
1 11707	    2257  07CDr				 DW  L05E2		   ; LIB, pop string from stack
1 11708	    2259  AF				 DB 0afh
1 11709	    225A  12				 DB 12h		 ; zero	byte direct after string
1 11710
1 11711	    225B  E1				 DB 0e1h		 ; HL =	FIB address
1 11712	    225C  FD E5				 DB 0fdh,0e5h			 ; restore return address
1 11713
1 11714	    225E  CD				 DB 0cdh
1 11715	    225F  22CDr				 DW  L1C4C		 ; check on a logical device
1 11716	    2261  C0				 DB 0c0h		 ; return if it	is a logical device
1 11717
1 11718						  OFF_HL 0 DOS_FCB+1	     ; HL = address of filename	in handle/FCB
2 11719		  =0011			 ??002A	     EQU (DOS_FCB+1)-(0)
2 11720
2 11721	    2262  D5					 DB 0D5H ; PUSH	DE
2 11722	    2263  11					 DB 11H
2 11723	    2264  0011					 DW ??002A
2 11724	    2266  19					 DB 19H	 ; ADD HL,DE
2 11725	    2267  D1					 DB 0D1H ; POP DE
2 11726
1 11727	    2268  EB				  DB 0ebh		    ; DE = address of old filename
1 11728
1 11729	    2269  2A				  DB 02ah
1 11730	    226A  01A1r				 DW L00D2
1 11731	    226C  23				  DB 23h		     ; HL = address of new filename
1 11732
1 11733	    226D  CD				  DB 0cdh
1 11734	    226E  0000e				 DW  RENAMEFILE
1 11735	    2270  C8				  DB 0c8h		       ; quit if succeeded
1 11736
1 11737	    2271  C3				  DB 0c3h
1 11738	    2272  2274r				 DW  L1BE4		     ; set IORESULT = 1
1 11739
1 11740					 ;	   PUSH	HL
1 11741					 ;
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 207
msx_asm\rtl_rtl.ASM



1 11742					 ;	   CALL	L03F2		      ;	parse filename at address in L00D2 without
1 11743					 ;				      ;	wildcards to FCB at L005C
1 11744					 ;
1 11745					 ;	   POP HL
1 11746					 ;	   PUSH	HL
1 11747					 ;	   OFF_HL 0 FIB_FCB+16	      ;	fill second half of FCB	with new name
1 11748					 ;;	    LD DE,001CH
1 11749					 ;;	    ADD	HL,DE
1 11750					 ;	   EX DE,HL
1 11751					 ;	   LD HL,L005C
1 11752					 ;	   LD BC,12		      ;	drive, name and	extension
1 11753					 ;	   LDIR			      ;	copy new name to second	half at	FIB_FCB
1 11754					 ;	   POP HL
1 11755					 ;	   OFF_HL 0 FIB_FCB
1 11756					 ;;	    LD DE,FIB_FCB	       ; offset	to FCB
1 11757					 ;;	    ADD	HL,DE
1 11758					 ;	   PUSH	HL
1 11759					 ;
1 11760					 ;	   EX DE,HL
1 11761					 ;	   LD C,17H		      ;	C = file rename
1 11762					 ;	   CALL	MSXDOS
1 11763					 ;	   POP DE
1 11764					 ;	   INC A
1 11765					 ;	   JR Z,L1BE4		      ;	jump if	error, File does not exist
1 11766					 ;
1 11767					 ;	   LD HL,L005C
1 11768					 ;	   LD BC,FCB_LEN
1 11769					 ;	   LDIR			      ;	copy FCB with new name to FIB_FCB address
1 11770					 ;	   RET
1 11771
1 11772					 ; 33e,	2278
1 11773
1 11774	    2274  3E 01			 L1BE4:	 DB 3eh,1			 ; IORESULT = 1, File does not exist
1 11775
1 11776	    2276  32			 L1BE6:	 DB 32h
1 11777	    2277  01A0r				 DW L00D0
1 11778	    2279  C9				 DB 0c9h
1 11779
1 11780						 GLOBALS L1BEA
2 11781
2 11782						  IRP NAME,<L1BEA>
2 11783							   GLOBAL2 <NAME>
2 11784						  ENDM
3 11785							   GLOBAL2 <L1BEA>
4 11786						  GLOBAL L1BEA : NEAR
4 11787
4 11788						  GLOBAL _L1BEA	: NEAR
4 11789	    227A			 _L1BEA:
4 11790
2 11791
1 11792	    227A			 L1BEA:	 ; PROCEDURE Execute(VAR F: FILE);
1 11793	    227A  3E AF				 DB 3eh,0AFH		 ; LIB,	LD A,XOR A
1 11794	    227C  18 01				 DB 18h,( L1BEC)-$-1
1 11795
1 11796						 GLOBALS L1BEB
2 11797
2 11798						  IRP NAME,<L1BEB>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 208
msx_asm\rtl_rtl.ASM



2 11799							   GLOBAL2 <NAME>
2 11800						  ENDM
3 11801							   GLOBAL2 <L1BEB>
4 11802						  GLOBAL L1BEB : NEAR
4 11803
4 11804						  GLOBAL _L1BEB	: NEAR
4 11805	    227E			 _L1BEB:
4 11806
2 11807
1 11808	    227E			 L1BEB:	 ; PROCEDURE Chain(F: FILE);
1 11809	    227E  AF				 DB 0afh		 ; LIB
1 11810
1 11811	    227F  32			 L1BEC:	 DB 32h
1 11812	    2280  01B2r				 DW L00E8		 ; 0 = Chain, NonZero =	Execute
1 11813
1 11814	    2282  CD				 DB 0cdh
1 11815	    2283  22CDr				 DW  L1C4C		 ; check on a logical device
1 11816	    2285  C0				 DB 0c0h		 ; return if it	is a logical device
1 11817
1 11818					 ;	   LD A,(L00D8)		      ;	running	from compiler memory mode ?
1 11819					 ;	   OR A
1 11820					 ;	   LD A,21H		      ;	IORESULT = 21H,	Not Allowed in direct mode
1 11821					 ;	   JR Z,L1BE6
1 11822
1 11823	    2286  2A				 DB 02ah
1 11824	    2287  01ACr				 DW L00E2
1 11825						  OFF_HL 0 DOS_FCB+1
2 11826		  =0011			 ??002B	     EQU (DOS_FCB+1)-(0)
2 11827
2 11828	    2289  D5					 DB 0D5H ; PUSH	DE
2 11829	    228A  11					 DB 11H
2 11830	    228B  0011					 DW ??002B
2 11831	    228D  19					 DB 19H	 ; ADD HL,DE
2 11832	    228E  D1					 DB 0D1H ; POP DE
2 11833
1 11834
1 11835	    228F  ED 5B				  DB 0edh,5bh
1 11836	    2291  01A1r				 DW L00D2
1 11837	    2293  3E 20				  DB 3eh,' '
1 11838	    2295  01				  DB 01h
1 11839	    2296  2020				 DW ' '*256 + '	'
1 11840	    2298  CD				  DB 0cdh
1 11841	    2299  0000e				 DW  OPENFILE
1 11842	    229B  C2				  DB 0c2h
1 11843	    229C  2274r				 DW L1BE4		 ; IORESULT = 1, File does not exist
1 11844
1 11845	    229E  44				  DB 44h
1 11846	    229F  4D				  DB 4dh
1 11847	    22A0  CD				  DB 0cdh
1 11848	    22A1  0000e				 DW  FILESIZE
1 11849
1 11850	    22A3  11				  DB 11h
1 11851	    22A4  0100r				 DW L0100
1 11852	    22A6  3A				  DB 3ah
1 11853	    22A7  01B2r				 DW L00E8
1 11854	    22A9  B7				  DB 0b7h
1 11855	    22AA  20 04				  DB 20h,(L1C2D)-$-1		    ; nonzero, do Execute
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 209
msx_asm\rtl_rtl.ASM



1 11856	    22AC  ED 5B				  DB 0edh,5bh
1 11857	    22AE  0101r				 DW L0101
1 11858
1 11859	    22B0			 L1C2D:
1 11860	    22B0  CD				  DB 0cdh
1 11861	    22B1  0000e				 DW  READFILE
1 11862
1 11863					 ;;	    LD DE,FIB_FCB	       ; length	of FIB header
1 11864					 ;;	    ADD	HL,DE
1 11865					 ;	   LD DE,005CH		      ;	!!!
1 11866					 ;	   LD BC,FCB_LEN	      ;	37 bytes for a FCB !!!
1 11867					 ;	   LDIR
1 11868					 ;	   XOR A
1 11869					 ;	   LD (DE),A		      ;	reset 4th byte of file position
1 11870					 ;	   LD DE,005CH		      ;	!!!
1 11871					 ;	   LD C,0FH		      ;	C = file open
1 11872					 ;	   CALL	MSXDOS
1 11873					 ;	   INC A
1 11874					 ;	   JR Z,L1BE4		      ;	jump if	error, File does not exist
1 11875					 ;IFDEF	MSX
1 11876					 ;	   LD HL,1
1 11877					 ;	   LD (006AH),HL	      ;	FCB + 14 = record size
1 11878					 ;ENDIF
1 11879					 ;	   LD HL,L1C33
1 11880					 ;	   LD DE,00B0H		      ;	load code at some neutral address
1 11881					 ;				      ;	at least outside the program
1 11882					 ;				      ;	AUXINPTR+1
1 11883					 ;	   LD BC,L1C33_A-L1C33	      ;	maximum	of 100H-0B0H bytes !!!
1 11884					 ;	   LDIR
1 11885					 ;
1 11886					 ;	   LD DE,L0100		      ;	assume load from 100H, Execute
1 11887					 ;	   LD A,(L00E8)
1 11888					 ;	   OR A
1 11889					 ;	   JR NZ,L1C2D		      ;	jump if	Execute
1 11890					 ;
1 11891					 ;; L22B0
1 11892					 ;	   LD DE,(L0101)	      ;	load direct after runtime library
1 11893					 ;
1 11894					 ;L1C2D:
1 11895	    22B3  31				  DB 31h
1 11896	    22B4  0100r				 DW L0100
1 11897	    22B6  C3				  DB 0c3h
1 11898	    22B7  0100r				 DW  L0100
1 11899					 ;	   JP 00B0H		      ;	some address outside the running program
1 11900									 ; AUXINPTR+1		 ; ???
1 11901
1 11902	    22B9  D5			 L1C33:	 DB 0d5h
1 11903	    22BA  0E 1A				 DB 0eh,1AH		 ; C = set dma
1 11904	    22BC  CD				 DB 0cdh
1 11905	    22BD  0005				 DW  MSXDOS
1 11906
1 11907	    22BF  2A				 DB 02ah
1 11908	    22C0  006C				 DW 006CH		 ; HL =	file length, read the complete file
1 11909	    22C2  11				 DB 11h
1 11910	    22C3  005C				 DW 005CH		 ; !!!
1 11911	    22C5  0E 27				 DB 0eh,27H
1 11912	    22C7  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 210
msx_asm\rtl_rtl.ASM



1 11913	    22C8  0005				 DW  MSXDOS
1 11914
1 11915					 ;	  LD DE,L005C
1 11916					 ;	  LD C,14H		  ; C =	sequential read
1 11917					 ;	  CALL MSXDOS
1 11918					 ;	  POP DE
1 11919					 ;	  LD HL,0080H
1 11920					 ;	  ADD HL,DE
1 11921					 ;	  EX DE,HL
1 11922					 ;	  OR A
1 11923					 ;	  JR Z,L1C33
1 11924	    22CA  C3				 DB 0c3h
1 11925	    22CB  0100				 DW  100H
1 11926	    22CD			 L1C33_A:
1 11927
1 11928					 ; 33e 22D1
1 11929	    22CD  22			 L1C4C:	 DB 22h
1 11930	    22CE  01ACr				 DW L00E2		 ; save	address	of FIB
1 11931	    22D0  7E				 DB 7eh
1 11932	    22D1  E6 0F				 DB 0e6h, 0FH			 ; a logical device ?
1 11933	    22D3  C8				 DB 0c8h		 ; quit	if not a logical device
1 11934
1 11935	    22D4  3E C1				  DB 3eh,0C1H
1 11936	    22D6  32				  DB 32h
1 11937	    22D7  0000e				 DW ERRORNUMBER		; 33e, TODO 2BA3
1 11938	    22D9  3E 20				 DB 3eh,20H
1 11939	    22DB  32				 DB 32h
1 11940	    22DC  01A0r				 DW L00D0		 ; IORESULT = 20H, Operation not allowed on
1 11941									 ; a logical device
1 11942	    22DE  C9				 DB 0c9h
1 11943
1 11944					 ;	   GLOBALS L1C59
1 11945					 ;L1C59:   LD A,255		      ;	OverlayLoadOnly	= TRUE
1 11946					 ;	   JP RUNOVERLAY
1 11947
1 11948	    22DF			 OVERLAYCOMPAREID:
1 11949						  ; in:	   HL =	address	of low-byte of ID in info-block
1 11950						  ;	   BC:DE = position to compare it with
1 11951						  ; out:   HL =	address	of low-byte of ID in info-block	(unchanged)
1 11952						  ;	   NonZero if not equal
1 11953						  ;	   Zero	if equal
1 11954					 ; 33e 22E3
1 11955						  ; new	position equals	current	position ?
1 11956	    22DF  E5				  DB 0e5h
1 11957
1 11958	    22E0  7E				  DB 7eh
1 11959	    22E1  B9				  DB 0b9h			; byte 0
1 11960	    22E2  20 0F				  DB 20h,(OVERLAYCOMPAREIDEND)-$-1  ; quit if not equal
1 11961
1 11962	    22E4  23				  DB 23h
1 11963	    22E5  7E				  DB 7eh
1 11964	    22E6  B8				  DB 0b8h			; byte 1
1 11965	    22E7  20 0A				  DB 20h,(OVERLAYCOMPAREIDEND)-$-1  ; jump if not equal
1 11966
1 11967	    22E9  23				  DB 23h
1 11968	    22EA  7E				  DB 7eh
1 11969	    22EB  BB				  DB 0bbh			; byte 2
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 211
msx_asm\rtl_rtl.ASM



1 11970	    22EC  20 05				  DB 20h,(OVERLAYCOMPAREIDEND)-$-1  ; jump if not equal
1 11971
1 11972	    22EE  23				  DB 23h
1 11973	    22EF  7E				  DB 7eh
1 11974	    22F0  BA				  DB 0bah			; byte 3
1 11975	    22F1  28 00				  DB 28h,(OVERLAYCOMPAREIDEND)-$-1   ; jump if equal, run the program
1 11976
1 11977	    22F3			 OVERLAYCOMPAREIDEND:
1 11978	    22F3  E1				  DB 0e1h
1 11979	    22F4  C9				  DB 0c9h
1 11980
1 11981	    22F5			 OVERLAYSAVEPARAMS:
1 11982	    22F5  43ED 01C0r			  DW 43edh,OVERLAYDATALEN     ;	save length
1 11983
1 11984	    22F9  22				  DB 22h
1 11985	    22FA  01BCr				 DW OVERLAYPOS	       ; save low-word of position
1 11986	    22FC  53ED 01BEr			  DW 53edh,OVERLAYPOS+2	      ;	save high-word of position
1 11987	    2300  C9				  DB 0c9h
1 11988
1 11989						  GLOBALS OVERLAYREC1
2 11990
2 11991						  IRP NAME,<OVERLAYREC1>
2 11992							   GLOBAL2 <NAME>
2 11993						  ENDM
3 11994							   GLOBAL2 <OVERLAYREC1>
4 11995						  GLOBAL OVERLAYREC1 : NEAR
4 11996
4 11997						  GLOBAL _OVERLAYREC1 :	NEAR
4 11998	    2301			 _OVERLAYREC1:
4 11999
2 12000
1 12001	    2301			 OVERLAYREC1:
1 12002	    2301  E5				  DB 0e5h		     ; save address of overlay-info block
1 12003
1 12004	    2302  11				  DB 11h
1 12005	    2303  01BCr				 DW OVERLAYPOS		 ; destination address
1 12006	    2305  01				  DB 01h
1 12007	    2306  0006				 DW 6			 ; restore 6 bytes from	heap
1 12008	    2308  CD				  DB 0cdh
1 12009	    2309  070Er				 DW  L0522		   ; heap de-alloc
1 12010
1 12011	    230B  E1				  DB 0e1h		      ;	HL = address of	overlay-info block
1 12012
1 12013	    230C  22				  DB 22h
1 12014	    230D  01BAr				 DW OVERLAYINFOADDRESS
1 12015
1 12016	    230F  D1				  DB 0d1h
1 12017	    2310  53ED 01ACr			  DW 53edh,L00E2	      ;	save return address
1 12018	    2314  D5				  DB 0d5h
1 12019
1 12020	    2315  ED 4B				  DB 0edh,4bh
1 12021	    2317  01BCr				 DW OVERLAYPOS
1 12022	    2319  ED 5B				  DB 0edh,5bh
1 12023	    231B  01BEr				 DW OVERLAYPOS+2
1 12024
1 12025	    231D  D9				  DB 0d9h
1 12026	    231E  C5				  DB 0c5h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 212
msx_asm\rtl_rtl.ASM



1 12027	    231F  D5				  DB 0d5h
1 12028	    2320  E5				  DB 0e5h
1 12029	    2321  D9				  DB 0d9h
1 12030
1 12031	    2322  3E FF				  DB 3eh,255		       ; OverlayLoadOnly = TRUE
1 12032	    2324  CD				  DB 0cdh
1 12033	    2325  2346r				 DW  LOADORRUNOVERLAY
1 12034
1 12035	    2327  D9				  DB 0d9h
1 12036	    2328  E1				  DB 0e1h
1 12037	    2329  D1				  DB 0d1h
1 12038	    232A  C1				  DB 0c1h
1 12039
1 12040	    232B  C9				  DB 0c9h
1 12041
1 12042					 ; 33e 2330
1 12043						  GLOBALS LOADRUNOVERLAYREC
2 12044
2 12045						  IRP NAME,<LOADRUNOVERLAYREC>
2 12046							   GLOBAL2 <NAME>
2 12047						  ENDM
3 12048							   GLOBAL2 <LOADRUNOVERLAYREC>
4 12049						  GLOBAL LOADRUNOVERLAYREC : NEAR
4 12050
4 12051						  GLOBAL _LOADRUNOVERLAYREC : NEAR
4 12052	    232C			 _LOADRUNOVERLAYREC:
4 12053
2 12054
1 12055	    232C			 LOADRUNOVERLAYREC:
1 12056						  ; recursive overlay loader and runner
1 12057
1 12058	    232C  D9				  DB 0d9h
1 12059
1 12060	    232D  01				  DB 01h
1 12061	    232E  0006				 DW 6			 ; save	6 bytes	on heap
1 12062	    2330  E1				  DB 0e1h		      ;	HL = address of	position in
1 12063									     ;	    overlay-info block
1 12064	    2331  22				  DB 22h
1 12065	    2332  01ACr				 DW L00E2	       ; save address if an error would	occur
1 12066	    2334  E5				  DB 0e5h
1 12067	    2335  CD				  DB 0cdh
1 12068	    2336  06F4r				 DW  L0508		   ; heap alloc
1 12069
1 12070	    2338  D9				  DB 0d9h
1 12071
1 12072					 ;	   GLOBALS L1C59
1 12073					 ;L1C59:
1 12074						  GLOBALS LOADRUNOVERLAY
2 12075
2 12076						  IRP NAME,<LOADRUNOVERLAY>
2 12077							   GLOBAL2 <NAME>
2 12078						  ENDM
3 12079							   GLOBAL2 <LOADRUNOVERLAY>
4 12080						  GLOBAL LOADRUNOVERLAY	: NEAR
4 12081
4 12082						  GLOBAL _LOADRUNOVERLAY : NEAR
4 12083	    2339			 _LOADRUNOVERLAY:
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 213
msx_asm\rtl_rtl.ASM



4 12084
2 12085
1 12086	    2339			 LOADRUNOVERLAY:
1 12087						  ; non-recursive overlay loader and runner
1 12088
1 12089						  ; in:	   DEHL	= position in file to read from
1 12090						  ;	   BC =	length in bytes	to read	from file
1 12091
1 12092	    2339  AF				  DB 0afh		       ; OverlayLoadOnly = FALSE
1 12093
1 12094	    233A  CD				  DB 0cdh
1 12095	    233B  22F5r				 DW  OVERLAYSAVEPARAMS
1 12096
1 12097	    233D  44				  DB 44h		     ; BC = HL = low-word position
1 12098	    233E  4D				  DB 4dh
1 12099
1 12100	    233F  E1				  DB 0e1h
1 12101	    2340  22				  DB 22h
1 12102	    2341  01ACr				 DW L00E2	       ; save address of overlay-info block
1 12103	    2343  22				  DB 22h
1 12104	    2344  01BAr				 DW OVERLAYINFOADDRESS
1 12105
1 12106	    2346			 LOADORRUNOVERLAY:
1 12107						  ; in:	   DEBC	= position in file to read from
1 12108						  ;	   HL =	address	of overlay-info	block
1 12109
1 12110	    2346  CB 7A				  DB 0cbh,07ah			  ; negative position ?
1 12111	    2348  C0				  DB 0c0h		      ;	quit if	negative
1 12112
1 12113	    2349  32				  DB 32h
1 12114	    234A  01B9r				 DW OVERLAYLOADONLY	; 0 = FALSE, NonZero = TRUE
1 12115
1 12116	    234C  E5				  DB 0e5h
1 12117	    234D  D9				  DB 0d9h
1 12118	    234E  E1				  DB 0e1h
1 12119	    234F  01				  DB 01h
1 12120	    2350  0015				 DW 21
1 12121	    2352  09				  DB 09h
1 12122	    2353  D9				  DB 0d9h
1 12123
1 12124	    2354  7A				  DB 7ah
1 12125	    2355  FE 40				  DB 0feh, 40H
1 12126
1 12127	    2357  D9				  DB 0d9h
1 12128	    2358  28 33				  DB 28h,(RUNOVERLAY_PROGRAM1)-$-1
1 12129	    235A  D9				  DB 0d9h
1 12130
1 12131	    235B  CD				  DB 0cdh
1 12132	    235C  22DFr				 DW  OVERLAYCOMPAREID
1 12133
1 12134	    235E  3A				  DB 3ah
1 12135	    235F  01B9r				 DW OVERLAYLOADONLY
1 12136
1 12137	    2361  28 28				  DB 28h,(RUNOVERLAY_PROGRAM)-$-1    ; jump if equal, run the program
1 12138
1 12139	    2363  71				  DB 71h
1 12140	    2364  23				  DB 23h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 214
msx_asm\rtl_rtl.ASM



1 12141	    2365  70				  DB 70h
1 12142	    2366  23				  DB 23h
1 12143	    2367  73				  DB 73h
1 12144	    2368  23				  DB 23h
1 12145	    2369  72				  DB 72h
1 12146	    236A  23				  DB 23h		     ; HL = address of overlay data length
1 12147
1 12148	    236B  3A				  DB 3ah
1 12149	    236C  01B9r				 DW OVERLAYLOADONLY
1 12150	    236E  F5				  DB 0f5h
1 12151	    236F  D9				  DB 0d9h
1 12152	    2370  E5				  DB 0e5h
1 12153
1 12154	    2371  E5				  DB 0e5h		     ; push Address of data
1 12155	    2372  D9				  DB 0d9h
1 12156
1 12157	    2373  D5				  DB 0d5h		     ; push high-word first
1 12158	    2374  C5				  DB 0c5h		     ; push low-word second
1 12159									     ; Position	pushed
1 12160
1 12161	    2375  ED 5B				  DB 0edh,5bh
1 12162	    2377  01C0r				 DW OVERLAYDATALEN
1 12163	    2379  73				  DB 73h
1 12164	    237A  23				  DB 23h
1 12165	    237B  72				  DB 72h
1 12166	    237C  23				  DB 23h		     ; HL = address of overlay number
1 12167	    237D  D5				  DB 0d5h		     ; DataLen pushed
1 12168
1 12169	    237E  7E				  DB 7eh
1 12170	    237F  23				  DB 23h
1 12171	    2380  06 00				  DB 06h,0
1 12172	    2382  4F				  DB 4fh
1 12173	    2383  C5				  DB 0c5h		     ; save overlay number
1 12174
1 12175	    2384  E5				  DB 0e5h		     ; save adress of file name	string as
1 12176									     ; var string
1 12177	    2385  23				  DB 23h		     ; HL = address of ASCIIZ-string
1 12178
1 12179	    2386  CD				  DB 0cdh
1 12180	    2387  238Er				 DW  OVERLAYLOAD
1 12181
1 12182	    2389  E1				  DB 0e1h		      ;	run address for	overlay	code
1 12183
1 12184	    238A  F1				  DB 0f1h		      ;	OverlayLoadOnly	flag
1 12185
1 12186
1 12187	    238B			 RUNOVERLAY_PROGRAM:
1 12188
1 12189	    238B  B7				  DB 0b7h
1 12190	    238C  C0				  DB 0c0h		      ;	quit if	it should not be executed
1 12191
1 12192					 ; 33e 2391
1 12193	    238D			 RUNOVERLAY_PROGRAM1:
1 12194
1 12195					 ;L1CCA:
1 12196						  ; run	the overlay program
1 12197					 ;	   LD HL,(OverlayInfoAddress)
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 215
msx_asm\rtl_rtl.ASM



1 12198					 ;	   LD DE,21 ; 19 ; 17 ;	13
1 12199					 ;	   ADD HL,DE
1 12200	    238D  E9				 DB 0e9h
1 12201
1 12202	    238E			 OVERLAYLOAD:
1 12203
1 12204						  GLOBALS OVERLAYLOADPTR
2 12205
2 12206						  IRP NAME,<OVERLAYLOADPTR>
2 12207							   GLOBAL2 <NAME>
2 12208						  ENDM
3 12209							   GLOBAL2 <OVERLAYLOADPTR>
4 12210						  GLOBAL OVERLAYLOADPTR	: NEAR
4 12211
4 12212						  GLOBAL _OVERLAYLOADPTR : NEAR
4 12213	    238E			 _OVERLAYLOADPTR:
4 12214
2 12215
1 12216	    238E			 OVERLAYLOADPTR:
1 12217	    238E  C3				  DB 0c3h
1 12218	    238F  2391r				 DW  OVERLAYLOADDEFAULT
1 12219
1 12220	    2391			 OVERLAYLOADDEFAULT:
1 12221						  ; (Address: INTEGER; DataLength: INTEGER; FilePos: LONGINT;
1 12222						  ;  OverlayNumber: BYTE; VAR Name: STRING);
1 12223
1 12224					 ;	   ; in:    HL = address of ASCIIZ-string (filename)
1 12225
1 12226						  ; overlay drive/path must be added if	DOS 2
1 12227						  ; overlay drive name must be added if	DOS 1
1 12228
1 12229	    2391  D1				  DB 0d1h		      ;	DE = return address
1 12230
1 12231	    2392  E1				  DB 0e1h		      ;	HL = VAR STRING
1 12232	    2393  23				  DB 23h
1 12233
1 12234	    2394  D5				  DB 0d5h		     ; restore return address
1 12235
1 12236	    2395  11				  DB 11h
1 12237	    2396  0128r				 DW L005C		 ; address of 64 byte buffer
1 12238	    2398  3E 20				  DB 3eh,' '		       ; default extension of '	  '
1 12239	    239A  47				  DB 47h
1 12240	    239B  4F				  DB 4fh
1 12241	    239C  CD				  DB 0cdh
1 12242	    239D  0000e				 DW  OPENFILE
1 12243	    239F  C2				  DB 0c2h
1 12244	    23A0  23BDr				 DW L1CD2		 ; jump: Overlay file not found
1 12245
1 12246	    23A2  44				  DB 44h		     ; BC = handle/FCB address
1 12247	    23A3  4D				  DB 4dh
1 12248
1 12249	    23A4  D1				  DB 0d1h		      ;	DE = return address
1 12250
1 12251	    23A5  E1				  DB 0e1h		      ;	remove OverlayNumber
1 12252
1 12253	    23A6  E1				  DB 0e1h
1 12254	    23A7  22				  DB 22h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 216
msx_asm\rtl_rtl.ASM



1 12255	    23A8  01C0r				 DW OVERLAYDATALEN     ; save OverlayDataLen
1 12256
1 12257	    23AA  EB				  DB 0ebh
1 12258	    23AB  D1				  DB 0d1h		      ;	DE = low-word of Position
1 12259	    23AC  E3				  DB 0e3h		  ; push return	address
1 12260									     ; pop high-word in	HL
1 12261	    23AD  EB				  DB 0ebh		    ; DE:HL = position
1 12262
1 12263					 ;	   LD HL,(OVERLAYPOS)
1 12264					 ;	   LD DE,(OVERLAYPOS+2)
1 12265	    23AE  CD				  DB 0cdh
1 12266	    23AF  0000e				 DW  FILESEEK		   ; set new file position
1 12267
1 12268	    23B1  E1				  DB 0e1h		      ;	HL = return address
1 12269	    23B2  D1				  DB 0d1h		      ;	DE = Address of	data
1 12270	    23B3  E5				  DB 0e5h		     ; restore return address
1 12271
1 12272
1 12273					 ;	   LD HL,(OverlayInfoAddress) ;	HL = address of	overlay-info block
1 12274					 ;	   LD DE,2+2+2+2+13	      ;	length of overlay-info block
1 12275					 ;	   ADD HL,DE
1 12276					 ;	   EX DE,HL		      ;	DE = destination address for overlay code
1 12277	    23B4  2A				  DB 02ah
1 12278	    23B5  01C0r				 DW OVERLAYDATALEN     ; HL = length in	bytes
1 12279
1 12280						  ; BC = handle/FCB address
1 12281	    23B7  CD				  DB 0cdh
1 12282	    23B8  0000e				 DW  READFILE
1 12283					 ;	  JP NZ,$$$$		     ; jump if error reading overlay file
1 12284
1 12285						  ; BC = handle/FCB address
1 12286	    23BA  C3				  DB 0c3h
1 12287	    23BB  0000e				 DW  CLOSEFILE		     ; Close the File
1 12288
1 12289	    23BD  DD 2A			 L1CD2:	  DB 0ddh,02ah
1 12290	    23BF  01ACr				 DW L00E2	       ; IX = runtime error address
1 12291	    23C1  3E F0				 DB 3eh,0F0H		 ; r.error 0F0H: Overlay file not found
1 12292	    23C3  C3				 DB 0c3h
1 12293	    23C4  273Ar				 DW  L2029
1 12294
1 12295						 GLOBALS L1CDB
2 12296
2 12297						  IRP NAME,<L1CDB>
2 12298							   GLOBAL2 <NAME>
2 12299						  ENDM
3 12300							   GLOBAL2 <L1CDB>
4 12301						  GLOBAL L1CDB : NEAR
4 12302
4 12303						  GLOBAL _L1CDB	: NEAR
4 12304	    23C6			 _L1CDB:
4 12305
2 12306
1 12307	    23C6			 L1CDB:	  ; PROCEDURE OvrDrive(Drive: INTEGER);
1 12308	    23C6  CD				  DB 0cdh
1 12309	    23C7  06B5r				 DW  L04C8		   ; LIB, int to byte
1 12310	    23C9  FE 11				 DB 0feh, 11H
1 12311	    23CB  D0				 DB 0d0h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 217
msx_asm\rtl_rtl.ASM



1 12312	    23CC  32				  DB 32h
1 12313	    23CD  01A8r				 DW L00DC		; set new overlay drive
1 12314	    23CF  C9				 DB 0c9h
1 12315
1 12316
1 12317
1 12318
1 12319					 ; 33e 23D4
1 12320						 GLOBALS L1CE5
2 12321
2 12322						  IRP NAME,<L1CE5>
2 12323							   GLOBAL2 <NAME>
2 12324						  ENDM
3 12325							   GLOBAL2 <L1CE5>
4 12326						  GLOBAL L1CE5 : NEAR
4 12327
4 12328						  GLOBAL _L1CE5	: NEAR
4 12329	    23D0			 _L1CE5:
4 12330
2 12331
1 12332	    23D0			 L1CE5:	  ; PROCEDURE New(VAR P: POINTER);
1 12333						  ; in:	   HL =	size
1 12334	    23D0  22				  DB 22h
1 12335	    23D1  01C2r				 DW L00F0	       ; LIB
1 12336	    23D3  EB				  DB 0ebh		    ; DE = size
1 12337
1 12338	    23D4  E1				  DB 0e1h		      ;	HL = return address
1 12339	    23D5  E3				 DB 0e3h
1 12340
1 12341						  ; HL = pointer address
1 12342						  ; return address on stack
1 12343	    23D6  22				  DB 22h
1 12344	    23D7  01C4r				 DW L00F2
1 12345	    23D9  13				 DB 13h
1 12346	    23DA  13				 DB 13h
1 12347	    23DB  13				 DB 13h
1 12348	    23DC  7B				 DB 7bh
1 12349	    23DD  E6 FC				 DB 0e6h, 0FCH
1 12350	    23DF  5F				 DB 5fh
1 12351	    23E0  21				 DB 21h
1 12352	    23E1  01A9r				 DW L00DE
1 12353	    23E3  22				 DB 22h
1 12354	    23E4  01CAr				 DW L00F8
1 12355	    23E6  DD 2A				 DB 0ddh,02ah
1 12356	    23E8  01A9r				 DW L00DE
1 12357	    23EA  DD 6E	02		 L1CFF:	 DB 0ddh,6eh,+2
1 12358	    23ED  DD 66	03			 DB 0ddh,66h,+3
1 12359	    23F0  7D				 DB 7dh
1 12360	    23F1  B4				 DB 0b4h
1 12361	    23F2  28 48				 DB 28h,(L1D51)-$-1
1 12362	    23F4  ED 52				 DB 0EDH,052h
1 12363	    23F6  30 0F				 DB 30h,(L1D1C)-$-1
1 12364	    23F8  DD 6E	00			 DB 0ddh,6eh,+0
1 12365	    23FB  DD 66	01			 DB 0ddh,66h,+1
1 12366	    23FE  E5				 DB 0e5h
1 12367	    23FF  22DD 01CAr			 DW 22ddh,L00F8
1 12368	    2403  DD E1				 DB 0ddh,0e1h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 218
msx_asm\rtl_rtl.ASM



1 12369	    2405  18 E3				 DB 18h,( L1CFF)-$-1
1 12370
1 12371	    2407  20 0A			 L1D1C:	 DB 20h,(L1D28)-$-1
1 12372	    2409  DD 5E	00			 DB 0ddh,5eh,+0
1 12373	    240C  DD 56	01			 DB 0ddh,56h,+1
1 12374	    240F  DD E5				 DB 0ddh,0e5h
1 12375	    2411  18 1B				 DB 18h,( L1D43)-$-1
1 12376
1 12377	    2413  4D			 L1D28:	 DB 4dh
1 12378	    2414  44				 DB 44h
1 12379	    2415  DD 6E	00			 DB 0ddh,6eh,+0
1 12380	    2418  DD 66	01			 DB 0ddh,66h,+1
1 12381	    241B  DD E5			 L1D30:	 DB 0ddh,0e5h
1 12382	    241D  DD 19				 DB 0ddh,019h
1 12383	    241F  DD 75	00			 DB 0ddh,75h,+0
1 12384	    2422  DD 74	01			 DB 0ddh,74h,+1
1 12385	    2425  DD 71	02			 DB 0ddh,71h,+2
1 12386	    2428  DD 70	03			 DB 0ddh,70h,+3
1 12387	    242B  DD E5				 DB 0ddh,0e5h
1 12388	    242D  D1				 DB 0d1h
1 12389	    242E  2A			 L1D43:	 DB 02ah
1 12390	    242F  01CAr				 DW L00F8
1 12391	    2431  73				 DB 73h
1 12392	    2432  23				 DB 23h
1 12393	    2433  72				 DB 72h
1 12394	    2434  D1				 DB 0d1h
1 12395	    2435  2A				 DB 02ah
1 12396	    2436  01C4r				 DW L00F2
1 12397	    2438  73				 DB 73h
1 12398	    2439  23				 DB 23h
1 12399	    243A  72				 DB 72h
1 12400	    243B  C9				 DB 0c9h
1 12401
1 12402	    243C  DD E5			 L1D51:	 DB 0ddh,0e5h
1 12403	    243E  E1				 DB 0e1h
1 12404	    243F  19				 DB 019h
1 12405	    2440  22				 DB 22h
1 12406	    2441  0192r				 DW HEAPPTR
1 12407	    2443  2A				 DB 02ah
1 12408	    2444  01C2r				 DW L00F0
1 12409	    2446  01				 DB 01h
1 12410	    2447  0004				 DW 0004
1 12411	    2449  09				 DB 09h
1 12412	    244A  DD E5				 DB 0ddh,0e5h
1 12413	    244C  C1				 DB 0c1h
1 12414	    244D  09				 DB 09h
1 12415	    244E  DA				 DB 0dah
1 12416	    244F  2460r				 DW L1D75
1 12417	    2451  ED 4B				 DB 0edh,4bh
1 12418	    2453  0194r				 DW RECURPTR
1 12419	    2455  ED 42				 DB 0EDH,042h
1 12420	    2457  01				 DB 01h
1 12421	    2458  0000				 DW 0000
1 12422	    245A  21				 DB 21h
1 12423	    245B  0000				 DW 0000
1 12424	    245D  DA				 DB 0dah
1 12425	    245E  241Br				 DW L1D30
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 219
msx_asm\rtl_rtl.ASM



1 12426
1 12427	    2460  3E FF			 L1D75:	 DB 3eh,0FFH		 ; r.error 0FFH: Heap/stack collision
1 12428	    2462  C3				 DB 0c3h
1 12429	    2463  2738r				 DW  L2027		 ; Run-time error
1 12430
1 12431
1 12432
1 12433
1 12434						 GLOBALS L1D7A
2 12435
2 12436						  IRP NAME,<L1D7A>
2 12437							   GLOBAL2 <NAME>
2 12438						  ENDM
3 12439							   GLOBAL2 <L1D7A>
4 12440						  GLOBAL L1D7A : NEAR
4 12441
4 12442						  GLOBAL _L1D7A	: NEAR
4 12443	    2465			 _L1D7A:
4 12444
2 12445
1 12446	    2465  EB			 L1D7A:	 DB 0ebh		 ; LIB
1 12447	    2466  E1				 DB 0e1h
1 12448	    2467  E3				 DB 0e3h
1 12449	    2468  7E				 DB 7eh
1 12450	    2469  23				 DB 23h
1 12451	    246A  66				 DB 66h
1 12452	    246B  6F				 DB 6fh
1 12453	    246C  13				 DB 13h
1 12454	    246D  13				 DB 13h
1 12455	    246E  13				 DB 13h
1 12456	    246F  7B				 DB 7bh
1 12457	    2470  E6 FC				 DB 0e6h, 0FCH
1 12458	    2472  5F				 DB 5fh
1 12459	    2473  EB				 DB 0ebh
1 12460	    2474  22				 DB 22h
1 12461	    2475  01C2r				 DW L00F0
1 12462	    2477  2A				 DB 02ah
1 12463	    2478  01A9r				 DW L00DE
1 12464	    247A  E5				 DB 0e5h
1 12465	    247B  DD E1				 DB 0ddh,0e1h
1 12466	    247D  B7				 DB 0b7h
1 12467	    247E  ED 52				 DB 0EDH,052h
1 12468	    2480  30 52				 DB 30h,(L1DE9)-$-1
1 12469
1 12470	    2482  DD 6E	00		 L1D97:	 DB 0ddh,6eh,+0
1 12471	    2485  DD 66	01			 DB 0ddh,66h,+1
1 12472	    2488  E5				 DB 0e5h
1 12473	    2489  B7				 DB 0b7h
1 12474	    248A  ED 52				 DB 0EDH,052h
1 12475	    248C  30 04				 DB 30h,(L1DA7)-$-1
1 12476	    248E  DD E1				 DB 0ddh,0e1h
1 12477	    2490  18 F0				 DB 18h,( L1D97)-$-1
1 12478
1 12479	    2492  E1			 L1DA7:	 DB 0e1h
1 12480	    2493  D5				 DB 0d5h
1 12481	    2494  FD E1				 DB 0fdh,0e1h
1 12482	    2496  ED 4B				 DB 0edh,4bh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 220
msx_asm\rtl_rtl.ASM



1 12483	    2498  01C2r				 DW L00F0
1 12484	    249A  FD 71	02			 DB 0fdh,71h,+2
1 12485	    249D  FD 70	03			 DB 0fdh,70h,+3
1 12486	    24A0  FD 75	00			 DB 0fdh,75h,+0
1 12487	    24A3  FD 74	01			 DB 0fdh,74h,+1
1 12488	    24A6  DD 73	00			 DB 0ddh,73h,+0
1 12489	    24A9  DD 72	01			 DB 0ddh,72h,+1
1 12490	    24AC  DD E5				 DB 0ddh,0e5h
1 12491	    24AE  E1				 DB 0e1h
1 12492	    24AF  DD 4E	02			 DB 0ddh,4eh,+2
1 12493	    24B2  DD 46	03			 DB 0ddh,46h,+3
1 12494	    24B5  CD				 DB 0cdh
1 12495	    24B6  24EFr				 DW  L1E04
1 12496	    24B8  28 09				 DB 28h,(L1DD8)-$-1
1 12497	    24BA  DD 5E	00			 DB 0ddh,5eh,+0
1 12498	    24BD  DD 56	01			 DB 0ddh,56h,+1
1 12499	    24C0  D5				 DB 0d5h
1 12500	    24C1  DD E1				 DB 0ddh,0e1h
1 12501
1 12502	    24C3  DD E5			 L1DD8:	 DB 0ddh,0e5h
1 12503	    24C5  E1				 DB 0e1h
1 12504	    24C6  DD 4E	02			 DB 0ddh,4eh,+2
1 12505	    24C9  DD 46	03			 DB 0ddh,46h,+3
1 12506	    24CC  DD 5E	00			 DB 0ddh,5eh,+0
1 12507	    24CF  DD 56	01			 DB 0ddh,56h,+1
1 12508	    24D2  18 1B				 DB 18h,( L1E04)-$-1
1 12509
1 12510	    24D4  2A			 L1DE9:	 DB 02ah
1 12511	    24D5  01A9r				 DW L00DE		 ; ----
1 12512	    24D7  53ED 01A9r			 DW 53edh,L00DE
1 12513	    24DB  D5				 DB 0d5h
1 12514	    24DC  DD E1				 DB 0ddh,0e1h
1 12515	    24DE  DD 75	00			 DB 0ddh,75h,+0
1 12516	    24E1  DD 74	01			 DB 0ddh,74h,+1
1 12517	    24E4  ED 4B				 DB 0edh,4bh
1 12518	    24E6  01C2r				 DW L00F0
1 12519	    24E8  DD 71	02			 DB 0ddh,71h,+2
1 12520	    24EB  DD 70	03			 DB 0ddh,70h,+3
1 12521	    24EE  EB				 DB 0ebh
1 12522
1 12523	    24EF  09			 L1E04:	 DB 09h
1 12524	    24F0  B7				 DB 0b7h
1 12525	    24F1  ED 52				 DB 0EDH,052h
1 12526	    24F3  C0				 DB 0c0h
1 12527	    24F4  D5				 DB 0d5h
1 12528	    24F5  FD E1				 DB 0fdh,0e1h
1 12529	    24F7  2A				 DB 02ah
1 12530	    24F8  0192r				 DW HEAPPTR
1 12531	    24FA  B7				 DB 0b7h
1 12532	    24FB  ED 52				 DB 0EDH,052h
1 12533	    24FD  28 1B				 DB 28h,(L1E2F)-$-1
1 12534	    24FF  FD 7E	00			 DB 0fdh,7eh,+0
1 12535	    2502  DD 77	00			 DB 0ddh,77h,+0
1 12536	    2505  FD 7E	01			 DB 0fdh,7eh,+1
1 12537	    2508  DD 77	01			 DB 0ddh,77h,+1
1 12538	    250B  FD 6E	02			 DB 0fdh,6eh,+2
1 12539	    250E  FD 66	03			 DB 0fdh,66h,+3
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 221
msx_asm\rtl_rtl.ASM



1 12540	    2511  09				 DB 09h
1 12541	    2512  DD 75	02			 DB 0ddh,75h,+2
1 12542	    2515  DD 74	03			 DB 0ddh,74h,+3
1 12543	    2518  AF				 DB 0afh
1 12544	    2519  C9				 DB 0c9h
1 12545
1 12546	    251A  DD E5			 L1E2F:	 DB 0ddh,0e5h
1 12547	    251C  E1				 DB 0e1h
1 12548	    251D  22				 DB 22h
1 12549	    251E  0192r				 DW HEAPPTR
1 12550	    2520  06 04				 DB 06h,4
1 12551	    2522  36 00			 L1E37:	 DB 36h,0
1 12552	    2524  23				 DB 23h
1 12553	    2525  10 FB				 DB 10h,( L1E37)-$-1
1 12554	    2527  C9				 DB 0c9h
1 12555
1 12556
1 12557
1 12558
1 12559
1 12560						 GLOBALS L1E3D
2 12561
2 12562						  IRP NAME,<L1E3D>
2 12563							   GLOBAL2 <NAME>
2 12564						  ENDM
3 12565							   GLOBAL2 <L1E3D>
4 12566						  GLOBAL L1E3D : NEAR
4 12567
4 12568						  GLOBAL _L1E3D	: NEAR
4 12569	    2528			 _L1E3D:
4 12570
2 12571
1 12572	    2528			 L1E3D:	 ; FUNCTION MemAvail: INTEGER;
1 12573	    2528  CD				 DB 0cdh
1 12574	    2529  2536r				 DW  L1E4B		 ; LIB
1 12575	    252B  2A				 DB 02ah
1 12576	    252C  01C6r				 DW L00F4		 ; return MemAvail
1 12577	    252E  C9				 DB 0c9h
1 12578
1 12579						 GLOBALS L1E44
2 12580
2 12581						  IRP NAME,<L1E44>
2 12582							   GLOBAL2 <NAME>
2 12583						  ENDM
3 12584							   GLOBAL2 <L1E44>
4 12585						  GLOBAL L1E44 : NEAR
4 12586
4 12587						  GLOBAL _L1E44	: NEAR
4 12588	    252F			 _L1E44:
4 12589
2 12590
1 12591	    252F			 L1E44:	 ; FUNCTION MaxAvail: INTEGER;
1 12592	    252F  CD				 DB 0cdh
1 12593	    2530  2536r				 DW  L1E4B		 ; LIB
1 12594	    2532  2A				 DB 02ah
1 12595	    2533  01C8r				 DW L00F6		 ; return MaxAvail
1 12596	    2535  C9				 DB 0c9h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 222
msx_asm\rtl_rtl.ASM



1 12597
1 12598
1 12599
1 12600
1 12601	    2536			 L1E4B:	 ; info	for: MemAvail, MaxAvail
1 12602	    2536  21				 DB 21h
1 12603	    2537  0000				 DW 0000
1 12604	    2539  22				 DB 22h
1 12605	    253A  01C6r				 DW L00F4		 ; MemAvail = 0
1 12606	    253C  22				 DB 22h
1 12607	    253D  01C8r				 DW L00F6		 ; MaxAvail = 0
1 12608
1 12609	    253F  DD 2A				 DB 0ddh,02ah
1 12610	    2541  01A9r				 DW L00DE
1 12611	    2543  DD 4E	02		 L1E58:	 DB 0ddh,4eh,+2
1 12612	    2546  DD 46	03			 DB 0ddh,46h,+3
1 12613	    2549  79				 DB 79h
1 12614	    254A  B0				 DB 0b0h
1 12615	    254B  28 1E				 DB 28h,(L1E80)-$-1
1 12616
1 12617	    254D  2A				 DB 02ah
1 12618	    254E  01C6r				 DW L00F4		 ; MemAvail += BC
1 12619	    2550  09				 DB 09h
1 12620	    2551  22				 DB 22h
1 12621	    2552  01C6r				 DW L00F4
1 12622
1 12623	    2554  2A				 DB 02ah
1 12624	    2555  01C8r				 DW L00F6		 ; MaxAvail
1 12625	    2557  B7				 DB 0b7h
1 12626	    2558  ED 42				 DB 0EDH,042h
1 12627	    255A  30 04				 DB 30h,(L1E75)-$-1
1 12628	    255C  43ED 01C8r			 DW 43edh,L00F6
1 12629
1 12630	    2560  DD 6E	00		 L1E75:	 DB 0ddh,6eh,+0		 ; get pointer to next Block
1 12631	    2563  DD 66	01			 DB 0ddh,66h,+1
1 12632	    2566  E5				 DB 0e5h
1 12633	    2567  DD E1				 DB 0ddh,0e1h
1 12634	    2569  18 D8				 DB 18h,( L1E58)-$-1
1 12635
1 12636	    256B  2A			 L1E80:	 DB 02ah
1 12637	    256C  0194r				 DW RECURPTR
1 12638	    256E  01				 DB 01h
1 12639	    256F  FFFB				 DW -5
1 12640	    2571  09				 DB 09h
1 12641	    2572  ED 5B				 DB 0edh,5bh
1 12642	    2574  0192r				 DW HEAPPTR
1 12643	    2576  B7				 DB 0b7h
1 12644	    2577  ED 52				 DB 0EDH,052h
1 12645	    2579  D8				 DB 0d8h
1 12646	    257A  EB				 DB 0ebh
1 12647	    257B  2A				 DB 02ah
1 12648	    257C  01C6r				 DW L00F4		 ; MemAvail += DE
1 12649	    257E  19				 DB 019h
1 12650	    257F  22				 DB 22h
1 12651	    2580  01C6r				 DW L00F4
1 12652	    2582  2A				 DB 02ah
1 12653	    2583  01C8r				 DW L00F6		 ; MaxAvail
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 223
msx_asm\rtl_rtl.ASM



1 12654	    2585  B7				 DB 0b7h
1 12655	    2586  ED 52				 DB 0EDH,052h
1 12656	    2588  D0				 DB 0d0h
1 12657	    2589  53ED 01C8r			 DW 53edh,L00F6
1 12658	    258D  C9				 DB 0c9h
1 12659
1 12660
1 12661
1 12662
1 12663						 GLOBALS L1EA3
2 12664
2 12665						  IRP NAME,<L1EA3>
2 12666							   GLOBAL2 <NAME>
2 12667						  ENDM
3 12668							   GLOBAL2 <L1EA3>
4 12669						  GLOBAL L1EA3 : NEAR
4 12670
4 12671						  GLOBAL _L1EA3	: NEAR
4 12672	    258E			 _L1EA3:
4 12673
2 12674
1 12675	    258E  ED 5B			 L1EA3:	 DB 0edh,5bh
1 12676	    2590  0192r				 DW HEAPPTR		 ; LIB
1 12677	    2592  73				 DB 73h
1 12678	    2593  23				 DB 23h
1 12679	    2594  72				 DB 72h
1 12680	    2595  C9				 DB 0c9h
1 12681
1 12682						 GLOBALS L1EAB
2 12683
2 12684						  IRP NAME,<L1EAB>
2 12685							   GLOBAL2 <NAME>
2 12686						  ENDM
3 12687							   GLOBAL2 <L1EAB>
4 12688						  GLOBAL L1EAB : NEAR
4 12689
4 12690						  GLOBAL _L1EAB	: NEAR
4 12691	    2596			 _L1EAB:
4 12692
2 12693
1 12694	    2596  5E			 L1EAB:	 DB 5eh		 ; LIB
1 12695	    2597  23				 DB 23h
1 12696	    2598  56				 DB 56h
1 12697	    2599  EB				 DB 0ebh
1 12698
1 12699	    259A  22			 L1EAF:	 DB 22h
1 12700	    259B  0192r				 DW HEAPPTR
1 12701	    259D  22				 DB 22h
1 12702	    259E  01A9r				 DW L00DE
1 12703	    25A0  06 04				 DB 06h,4			 ; clear top 4 bytes of	new HEAPPTR
1 12704	    25A2  36 00			 L1EB7:	 DB 36h,0
1 12705	    25A4  23				 DB 23h
1 12706	    25A5  10 FB				 DB 10h,( L1EB7)-$-1
1 12707	    25A7  C9				 DB 0c9h
1 12708
1 12709						  GLOBALS L1EBC
2 12710
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 224
msx_asm\rtl_rtl.ASM



2 12711						  IRP NAME,<L1EBC>
2 12712							   GLOBAL2 <NAME>
2 12713						  ENDM
3 12714							   GLOBAL2 <L1EBC>
4 12715						  GLOBAL L1EBC : NEAR
4 12716
4 12717						  GLOBAL _L1EBC	: NEAR
4 12718	    25A8			 _L1EBC:
4 12719
2 12720
1 12721	    25A8			 L1EBC:	  ; LIB, print LONG
1 12722	    25A8  3E 02				  DB 3eh,2
1 12723	    25AA  18 05				  DB 18h,( L1EBF)-$-1
1 12724
1 12725						  GLOBALS L1EBD
2 12726
2 12727						  IRP NAME,<L1EBD>
2 12728							   GLOBAL2 <NAME>
2 12729						  ENDM
3 12730							   GLOBAL2 <L1EBD>
4 12731						  GLOBAL L1EBD : NEAR
4 12732
4 12733						  GLOBAL _L1EBD	: NEAR
4 12734	    25AC			 _L1EBD:
4 12735
2 12736
1 12737	    25AC			 L1EBD:	  ; LIB, print REAL
1 12738	    25AC  3E 01				  DB 3eh,1
1 12739	    25AE  18 01				 DB 18h,( L1EBF)-$-1
1 12740
1 12741						 GLOBALS L1EBE
2 12742
2 12743						  IRP NAME,<L1EBE>
2 12744							   GLOBAL2 <NAME>
2 12745						  ENDM
3 12746							   GLOBAL2 <L1EBE>
4 12747						  GLOBAL L1EBE : NEAR
4 12748
4 12749						  GLOBAL _L1EBE	: NEAR
4 12750	    25B0			 _L1EBE:
4 12751
2 12752
1 12753	    25B0			 L1EBE:	  ; LIB, print INTEGER
1 12754	    25B0  AF				 DB 0afh		 ; LIB
1 12755
1 12756	    25B1  4F			 L1EBF:	  DB 4fh
1 12757	    25B2  22				 DB 22h
1 12758	    25B3  01B2r				 DW L00E8
1 12759	    25B5  AF				 DB 0afh
1 12760	    25B6  77				 DB 77h
1 12761	    25B7  32				 DB 32h
1 12762	    25B8  01A0r				 DW L00D0		 ; reset IORESULT
1 12763	    25BA  78				 DB 78h
1 12764	    25BB  32				  DB 32h
1 12765	    25BC  01B4r				 DW L00EA		; save destination string length
1 12766	    25BE  2A				 DB 02ah
1 12767	    25BF  01ACr				 DW L00E2		 ; HL =	current	device pointer
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 225
msx_asm\rtl_rtl.ASM



1 12768	    25C1  22				 DB 22h
1 12769	    25C2  01B7r				 DW L00ED		 ; save	old device pointer
1 12770	    25C4  21				 DB 21h
1 12771	    25C5  264Er				 DW L1F46		 ; device 6
1 12772	    25C7  22				 DB 22h
1 12773	    25C8  01ACr				 DW L00E2
1 12774	    25CA  E1				 DB 0e1h
1 12775	    25CB  22				 DB 22h
1 12776	    25CC  01AEr				 DW L00E4
1 12777	    25CE  E1				 DB 0e1h
1 12778
1 12779	    25CF  0D				  DB 0dh		      ;	REAL ?
1 12780	    25D0  28 0D				  DB 28h,(L1EE6)-$-1		     ; jump to print REAL
1 12781
1 12782	    25D2  0D				  DB 0dh		      ;	LONG ?
1 12783	    25D3  28 05				  DB 28h,(L1EE5)-$-1		     ; jump to print LONG
1 12784
1 12785	    25D5  CD				  DB 0cdh
1 12786	    25D6  1D87r				 DW  L1726		   ; print INTEGER
1 12787	    25D8  18 08				 DB 18h,( L1EE9)-$-1		 ; restore device and continue
1 12788									 ; add saved return address
1 12789
1 12790	    25DA  CD			 L1EE5:	  DB 0cdh
1 12791	    25DB  1DECr				 DW  PRT_LONG
1 12792	    25DD  18 03				  DB 18h,( L1EE9)-$-1
1 12793
1 12794	    25DF  CD			 L1EE6:	 DB 0cdh
1 12795	    25E0  1DDAr				 DW  L1779		 ; call	print REAL
1 12796
1 12797	    25E2			 L1EE9:	 ; restore to old device
1 12798						 ; and jumps to	address	in L00E4
1 12799	    25E2  2A				 DB 02ah
1 12800	    25E3  01B7r				 DW L00ED		 ; HL =	old device pointer
1 12801	    25E5  22				 DB 22h
1 12802	    25E6  01ACr				 DW L00E2		 ; restore to old device
1 12803
1 12804	    25E8  2A				 DB 02ah
1 12805	    25E9  01AEr				 DW L00E4		 ; HL =	return address
1 12806	    25EB  E9				 DB 0e9h		 ; continue
1 12807
1 12808						 GLOBALS L1EF2
2 12809
2 12810						  IRP NAME,<L1EF2>
2 12811							   GLOBAL2 <NAME>
2 12812						  ENDM
3 12813							   GLOBAL2 <L1EF2>
4 12814						  GLOBAL L1EF2 : NEAR
4 12815
4 12816						  GLOBAL _L1EF2	: NEAR
4 12817	    25EC			 _L1EF2:
4 12818
2 12819
1 12820	    25EC			 L1EF2:	 ; val(S: string; var L: longint; var P: integer);
1 12821	    25EC  3E 02				 DB 3eh,2			 ; LIB,	ascii to LONGINT
1 12822	    25EE  18 05				 DB 18h,( L1EF5)-$-1
1 12823
1 12824						 GLOBALS L1EF3
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 226
msx_asm\rtl_rtl.ASM



2 12825
2 12826						  IRP NAME,<L1EF3>
2 12827							   GLOBAL2 <NAME>
2 12828						  ENDM
3 12829							   GLOBAL2 <L1EF3>
4 12830						  GLOBAL L1EF3 : NEAR
4 12831
4 12832						  GLOBAL _L1EF3	: NEAR
4 12833	    25F0			 _L1EF3:
4 12834
2 12835
1 12836	    25F0			 L1EF3:	 ; val(S: string; var R: real; var P: integer);
1 12837	    25F0  3E 01				 DB 3eh,1			 ; LIB,	ascii to REAL
1 12838	    25F2  18 01				 DB 18h,( L1EF5)-$-1
1 12839
1 12840						 GLOBALS L1EF4
2 12841
2 12842						  IRP NAME,<L1EF4>
2 12843							   GLOBAL2 <NAME>
2 12844						  ENDM
3 12845							   GLOBAL2 <L1EF4>
4 12846						  GLOBAL L1EF4 : NEAR
4 12847
4 12848						  GLOBAL _L1EF4	: NEAR
4 12849	    25F4			 _L1EF4:
4 12850
2 12851
1 12852	    25F4			 L1EF4:	 ; val(S: string; var I,P: integer);
1 12853	    25F4  AF				 DB 0afh		 ; LIB,	ascii to INTEGER
1 12854
1 12855	    25F5  32			 L1EF5:	 DB 32h
1 12856	    25F6  01B6r				 DW L00EC		 ; flag	for conversion
1 12857									 ; 0 = to INTEGER
1 12858									 ; 1 = to REAL
1 12859									 ; 2 = to LONGINT
1 12860	    25F8  22				 DB 22h
1 12861	    25F9  01B2r				 DW L00E8		 ; save	optional address P
1 12862
1 12863	    25FB  2A				 DB 02ah
1 12864	    25FC  01ACr				 DW L00E2		 ; HL =	current	device pointer
1 12865	    25FE  22				 DB 22h
1 12866	    25FF  01B7r				 DW L00ED		 ; save	old device pointer
1 12867	    2601  21				 DB 21h
1 12868	    2602  264Er				 DW L1F46		 ; device 6
1 12869	    2604  22				 DB 22h
1 12870	    2605  01ACr				 DW L00E2
1 12871
1 12872	    2607  E1				 DB 0e1h
1 12873	    2608  22				 DB 22h
1 12874	    2609  01AEr				 DW L00E4		 ; save	return address
1 12875
1 12876	    260B  E1				 DB 0e1h
1 12877	    260C  22				 DB 22h
1 12878	    260D  01B4r				 DW L00EA		 ; save	address	resulting REAL,
1 12879									 ; INTEGER, BYTE or LONGINT
1 12880
1 12881	    260F  21				 DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 227
msx_asm\rtl_rtl.ASM



1 12882	    2610  0128r				 DW L005C		 ; HL =	destination address of string
1 12883	    2612  06 1E				 DB 06h,1EH		 ; maximum of 30 bytes
1 12884	    2614  CD				 DB 0cdh
1 12885	    2615  07CDr				 DW  L05E2		 ; LIB,	pop string from	stack
1 12886	    2617  AF				 DB 0afh
1 12887	    2618  12				 DB 12h		 ; end string with a '\0'
1 12888
1 12889	    2619  2A				 DB 02ah
1 12890	    261A  01B4r				 DW L00EA		 ; destination address for real	/ integer
1 12891
1 12892	    261C  3A				 DB 3ah
1 12893	    261D  01B6r				 DW L00EC		 ; conversion flag
1 12894	    261F  B7				 DB 0b7h
1 12895	    2620  28 08				 DB 28h,(L1F26)-$-1		 ; jump	if conversion to INTEGER
1 12896	    2622  3D				 DB 3dh
1 12897	    2623  28 0A				 DB 28h,(L1F27)-$-1		 ; jump	if conversion to REAL
1 12898
1 12899	    2625  CD				 DB 0cdh
1 12900	    2626  1C98r				 DW  L1671		 ; conversion to LONGINT
1 12901	    2628  18 08				 DB 18h,( L1F2A)-$-1
1 12902
1 12903	    262A  CD			 L1F26:	 DB 0cdh
1 12904	    262B  1C74r				 DW  L164E		 ; conversion to INTEGER
1 12905	    262D  18 03				 DB 18h,( L1F2A)-$-1
1 12906
1 12907	    262F  CD			 L1F27:	 DB 0cdh
1 12908	    2630  1CBEr				 DW  L1672		 ; conversion to REAL
1 12909
1 12910	    2632			 L1F2A:	 ; IX =	last read character or position	of the error
1 12911	    2632  21				 DB 21h
1 12912	    2633  01A0r				 DW L00D0
1 12913	    2635  7E				 DB 7eh		 ; read	IORESULT
1 12914	    2636  36 00				 DB 36h,0		 ; reset IORESULT
1 12915	    2638  B7				 DB 0b7h
1 12916	    2639  67				 DB 67h			 ; HL =	0
1 12917	    263A  6F				 DB 6fh
1 12918	    263B  28 08				 DB 28h,(L1F3D)-$-1		 ; jump	if no error occurred
1 12919
1 12920						 ; watch it!, stil NonCarry
1 12921	    263D  DD E5				 DB 0ddh,0e5h
1 12922	    263F  E1				 DB 0e1h
1 12923	    2640  11				 DB 11h
1 12924	    2641  0128r				 DW L005D-1
1 12925	    2643  ED 52				 DB 0EDH,052h		 ; calculate position of the error
1 12926
1 12927	    2645  EB			 L1F3D:	 DB 0ebh
1 12928	    2646  2A				 DB 02ah
1 12929	    2647  01B2r				 DW L00E8		 ; HL =	address	of error position
1 12930	    2649  73				 DB 73h		 ; save	position
1 12931	    264A  23				 DB 23h
1 12932	    264B  72				 DB 72h
1 12933
1 12934	    264C  18 94				 DB 18h,( L1EE9)-$-1		 ; restore device and continue
1 12935									 ; add saved return address
1 12936
1 12937	    264E  C6 00			 L1F46:	 DB 0C6H,0		 ; device 6
1 12938
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 228
msx_asm\rtl_rtl.ASM



1 12939						 GLOBALS L1F48
2 12940
2 12941						  IRP NAME,<L1F48>
2 12942							   GLOBAL2 <NAME>
2 12943						  ENDM
3 12944							   GLOBAL2 <L1F48>
4 12945						  GLOBAL L1F48 : NEAR
4 12946
4 12947						  GLOBAL _L1F48	: NEAR
4 12948	    2650			 _L1F48:
4 12949
2 12950
1 12951	    2650			 L1F48:	 ; randomize
1 12952	    2650  ED 5F				 DB 0edh,5fh
1 12953	    2652  32				 DB 32h
1 12954	    2653  0199r				 DW L00CB		 ; random waarde ?
1 12955	    2655  C9				 DB 0c9h
1 12956
1 12957
1 12958
1 12959
1 12960						 GLOBALS L1F4E
2 12961
2 12962						  IRP NAME,<L1F4E>
2 12963							   GLOBAL2 <NAME>
2 12964						  ENDM
3 12965							   GLOBAL2 <L1F4E>
4 12966						  GLOBAL L1F4E : NEAR
4 12967
4 12968						  GLOBAL _L1F4E	: NEAR
4 12969	    2656			 _L1F4E:
4 12970
2 12971
1 12972	    2656  EB			 L1F4E:	 DB 0ebh		 ; LIB
1 12973	    2657  DD E1				 DB 0ddh,0e1h
1 12974	    2659  C1				 DB 0c1h
1 12975	    265A  E1				 DB 0e1h
1 12976	    265B  78				 DB 78h
1 12977	    265C  B1				 DB 0b1h
1 12978	    265D  28 0B				 DB 28h,(L1F62)-$-1
1 12979	    265F  73				 DB 73h
1 12980	    2660  0B				 DB 0bh
1 12981	    2661  78				 DB 78h
1 12982	    2662  B1				 DB 0b1h
1 12983	    2663  28 05				 DB 28h,(L1F62)-$-1
1 12984	    2665  54				 DB 54h
1 12985	    2666  5D				 DB 5dh
1 12986	    2667  13				 DB 13h
1 12987	    2668  ED B0			 L1F60:	 DB 0edh,0b0h
1 12988	    266A  DD E9			 L1F62:	 DB 0ddh,0e9h
1 12989
1 12990						 GLOBALS L1F64
2 12991
2 12992						  IRP NAME,<L1F64>
2 12993							   GLOBAL2 <NAME>
2 12994						  ENDM
3 12995							   GLOBAL2 <L1F64>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 229
msx_asm\rtl_rtl.ASM



4 12996						  GLOBAL L1F64 : NEAR
4 12997
4 12998						  GLOBAL _L1F64	: NEAR
4 12999	    266C			 _L1F64:
4 13000
2 13001
1 13002	    266C			 L1F64:	 ; LIB
1 13003	    266C  44				 DB 44h			 ; LIB
1 13004	    266D  4D				 DB 4dh
1 13005	    266E  DD E1				 DB 0ddh,0e1h
1 13006	    2670  D1				 DB 0d1h
1 13007	    2671  E1				 DB 0e1h
1 13008	    2672  78				 DB 78h
1 13009	    2673  B1				 DB 0b1h
1 13010	    2674  28 F4				 DB 28h,(L1F62)-$-1
1 13011	    2676  ED 52				 DB 0EDH,052h
1 13012	    2678  19				 DB 019h
1 13013	    2679  30 ED				 DB 30h,(L1F60)-$-1
1 13014	    267B  0B				 DB 0bh
1 13015	    267C  09				 DB 09h
1 13016	    267D  EB				 DB 0ebh
1 13017	    267E  09				 DB 09h
1 13018	    267F  EB				 DB 0ebh
1 13019	    2680  03				 DB 03h
1 13020	    2681  ED B8				 DB 0edh,0b8h
1 13021	    2683  DD E9				 DB 0ddh,0e9h
1 13022
1 13023
1 13024
1 13025
1 13026						 GLOBALS L1F7D
2 13027
2 13028						  IRP NAME,<L1F7D>
2 13029							   GLOBAL2 <NAME>
2 13030						  ENDM
3 13031							   GLOBAL2 <L1F7D>
4 13032						  GLOBAL L1F7D : NEAR
4 13033
4 13034						  GLOBAL _L1F7D	: NEAR
4 13035	    2685			 _L1F7D:
4 13036
2 13037
1 13038	    2685			 L1F7D:	 ; FUNCTION ParamStr(N:	INTEGER): STRING;
1 13039	    2685  55				 DB 55h			 ; LIB
1 13040	    2686  14				 DB 14h
1 13041	    2687  15				 DB 15h
1 13042	    2688  28 03				 DB 28h,(L1F85)-$-1
1 13043	    268A  CD				 DB 0cdh
1 13044	    268B  26A5r				 DW  L1F9D
1 13045
1 13046	    268D  DD E1			 L1F85:	 DB 0ddh,0e1h
1 13047	    268F  4F				 DB 4fh
1 13048	    2690  06 00				 DB 06h,0
1 13049	    2692  2F				 DB 2fh
1 13050	    2693  6F				 DB 6fh
1 13051	    2694  26 FF				 DB 26h,0FFH
1 13052	    2696  39				 DB 039h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 230
msx_asm\rtl_rtl.ASM



1 13053	    2697  F9				 DB 0f9h
1 13054	    2698  71				 DB 71h
1 13055	    2699  23				 DB 23h
1 13056	    269A  EB				 DB 0ebh
1 13057	    269B  0C				 DB 0ch
1 13058	    269C  0D				 DB 0dh
1 13059	    269D  28 02				 DB 28h,(L1F99)-$-1
1 13060	    269F  ED B0				 DB 0edh,0b0h
1 13061	    26A1  DD E9			 L1F99:	 DB 0ddh,0e9h
1 13062
1 13063						 GLOBALS L1F9B
2 13064
2 13065						  IRP NAME,<L1F9B>
2 13066							   GLOBAL2 <NAME>
2 13067						  ENDM
3 13068							   GLOBAL2 <L1F9B>
4 13069						  GLOBAL L1F9B : NEAR
4 13070
4 13071						  GLOBAL _L1F9B	: NEAR
4 13072	    26A3			 _L1F9B:
4 13073
2 13074
1 13075	    26A3			 L1F9B:	 ; FUNCTION ParamCount:	INTEGER;
1 13076	    26A3  16 00				 DB 16h,0			 ; LIB
1 13077
1 13078	    26A5  21			 L1F9D:	  DB 21h
1 13079	    26A6  0080				 DW L0080
1 13080	    26A8  3E 1F				 DB 3eh,1FH
1 13081	    26AA  46				 DB 46h
1 13082	    26AB  B8				 DB 0b8h
1 13083	    26AC  30 02				 DB 30h,(L1FA8)-$-1
1 13084	    26AE  06 1F				 DB 06h,1FH
1 13085	    26B0  23			 L1FA8:	 DB 23h
1 13086	    26B1  0E 00				 DB 0eh,0
1 13087
1 13088	    26B3  04			 L1FAB:	 DB 04h
1 13089	    26B4  05				 DB 05h
1 13090	    26B5  28 0D				 DB 28h,(L1FBC)-$-1
1 13091	    26B7  7E				 DB 7eh
1 13092	    26B8  FE 20				 DB 0feh, 20H
1 13093	    26BA  28 04				 DB 28h,(L1FB8)-$-1
1 13094	    26BC  FE 09				 DB 0feh, 9
1 13095	    26BE  20 04				 DB 20h,(L1FBC)-$-1
1 13096	    26C0  23			 L1FB8:	 DB 23h
1 13097	    26C1  05				 DB 05h
1 13098	    26C2  18 EF				 DB 18h,( L1FAB)-$-1
1 13099
1 13100	    26C4  5D			 L1FBC:	 DB 5dh
1 13101	    26C5  04			 L1FBD:	 DB 04h
1 13102	    26C6  05				 DB 05h
1 13103	    26C7  28 0D				 DB 28h,(L1FCE)-$-1
1 13104	    26C9  7E				 DB 7eh
1 13105	    26CA  FE 20				 DB 0feh, 20H
1 13106	    26CC  28 08				 DB 28h,(L1FCE)-$-1
1 13107	    26CE  FE 09				 DB 0feh, 9
1 13108	    26D0  28 04				 DB 28h,(L1FCE)-$-1
1 13109	    26D2  23				 DB 23h
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 231
msx_asm\rtl_rtl.ASM



1 13110	    26D3  05				 DB 05h
1 13111	    26D4  18 EF				 DB 18h,( L1FBD)-$-1
1 13112
1 13113	    26D6  7D			 L1FCE:	 DB 7dh
1 13114	    26D7  93				 DB 093h
1 13115	    26D8  28 04				 DB 28h,(L1FD6)-$-1
1 13116	    26DA  0C				 DB 0ch
1 13117	    26DB  15				 DB 15h
1 13118	    26DC  20 D5				 DB 20h,(L1FAB)-$-1
1 13119	    26DE  69			 L1FD6:	 DB 69h
1 13120	    26DF  26 00				 DB 26h,0
1 13121	    26E1  54				 DB 54h
1 13122	    26E2  C9				 DB 0c9h
1 13123
1 13124
1 13125
1 13126						 GLOBALS L1FDB
2 13127
2 13128						  IRP NAME,<L1FDB>
2 13129							   GLOBAL2 <NAME>
2 13130						  ENDM
3 13131							   GLOBAL2 <L1FDB>
4 13132						  GLOBAL L1FDB : NEAR
4 13133
4 13134						  GLOBAL _L1FDB	: NEAR
4 13135	    26E3			 _L1FDB:
4 13136
2 13137
1 13138	    26E3			 L1FDB:	 ; LIB
1 13139						 ; in:	 X pushed on stack
1 13140						 ;	 L = Y
1 13141	    26E3  D1				 DB 0d1h		 ; gotoxy(x,y)
1 13142	    26E4  C1				 DB 0c1h		 ; C = Y
1 13143	    26E5  D5				 DB 0d5h
1 13144	    26E6  2D				 DB 2dh			 ; L = X - 1
1 13145	    26E7  61				 DB 61h
1 13146	    26E8  25				 DB 25h			 ; H = Y - 1
1 13147	    26E9  C3				 DB 0c3h
1 13148	    26EA  0355r				 DW  L02A2
1 13149
1 13150
1 13151
1 13152						 GLOBALS L1FE4
2 13153
2 13154						  IRP NAME,<L1FE4>
2 13155							   GLOBAL2 <NAME>
2 13156						  ENDM
3 13157							   GLOBAL2 <L1FE4>
4 13158						  GLOBAL L1FE4 : NEAR
4 13159
4 13160						  GLOBAL _L1FE4	: NEAR
4 13161	    26EC			 _L1FE4:
4 13162
2 13163
1 13164	    26EC  7D			 L1FE4:	 DB 7dh			 ; LIB
1 13165	    26ED  CD				 DB 0cdh
1 13166	    26EE  0691r				 DW  L04A6		 ; upcase
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 232
msx_asm\rtl_rtl.ASM



1 13167	    26F0  6F				 DB 6fh
1 13168	    26F1  C9				 DB 0c9h
1 13169
1 13170						 GLOBALS L1FEA
2 13171
2 13172						  IRP NAME,<L1FEA>
2 13173							   GLOBAL2 <NAME>
2 13174						  ENDM
3 13175							   GLOBAL2 <L1FEA>
4 13176						  GLOBAL L1FEA : NEAR
4 13177
4 13178						  GLOBAL _L1FEA	: NEAR
4 13179	    26F2			 _L1FEA:
4 13180
2 13181
1 13182	    26F2  2A			 L1FEA:	 DB 02ah
1 13183	    26F3  0001				 DW 0001	 ; LIB
1 13184	    26F5  19				 DB 019h
1 13185	    26F6  19				 DB 019h
1 13186	    26F7  19				 DB 019h
1 13187	    26F8  E9				 DB 0e9h
1 13188
1 13189						 GLOBALS L1FF1
2 13190
2 13191						  IRP NAME,<L1FF1>
2 13192							   GLOBAL2 <NAME>
2 13193						  ENDM
3 13194							   GLOBAL2 <L1FF1>
4 13195						  GLOBAL L1FF1 : NEAR
4 13196
4 13197						  GLOBAL _L1FF1	: NEAR
4 13198	    26F9			 _L1FF1:
4 13199
2 13200
1 13201	    26F9			 L1FF1:	 ; FUNCTION IOresult: BYTE; ; LIB
1 13202	    26F9  21				 DB 21h
1 13203	    26FA  01A0r				 DW L00D0		 ; HL =	address	of IORESULT value
1 13204	    26FC  7E				 DB 7eh
1 13205	    26FD  36 00				 DB 36h,0
1 13206
1 13207	    26FF			 L1FF2:
1 13208	    26FF  6F				  DB 6fh
1 13209	    2700  26 00				 DB 26h,0
1 13210	    2702  C9				 DB 0c9h
1 13211
1 13212						  GLOBALS GETERROR_LIB
2 13213
2 13214						  IRP NAME,<GETERROR_LIB>
2 13215							   GLOBAL2 <NAME>
2 13216						  ENDM
3 13217							   GLOBAL2 <GETERROR_LIB>
4 13218						  GLOBAL GETERROR_LIB :	NEAR
4 13219
4 13220						  GLOBAL _GETERROR_LIB : NEAR
4 13221	    2703			 _GETERROR_LIB:
4 13222
2 13223
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 233
msx_asm\rtl_rtl.ASM



1 13224	    2703			 GETERROR_LIB:
1 13225	    2703  AF				  DB 0afh
1 13226	    2704  32				  DB 32h
1 13227	    2705  01A0r				 DW L00D0
1 13228	    2707  C3				  DB 0c3h
1 13229	    2708  0000e				 DW  GETERROR
1 13230					 ;	   INC L
1 13231					 ;	   DEC L
1 13232					 ;	   RET NZ		      ;	quit with error	if there was one
1 13233					 ;
1 13234					 ;	   LD A,(GIOSOK)
1 13235					 ;	   OR A
1 13236					 ;	   RET Z		      ;	quit if	GIOS not present
1 13237					 ;				      ;	and return 0 for no error
1 13238					 ;
1 13239					 ;	   LD A,75
1 13240					 ;	   JP RUNGIOS		      ;	call GIOS function 75 (GetError)
1 13241
1 13242
1 13243
1 13244
1 13245						 ; LIB,	CBREAK handler
1 13246	    270A  CD			 L1FFB:	 DB 0cdh
1 13247	    270B  03C9r				 DW  L0316		 ; keypressed
1 13248	    270D  7C				 DB 7ch
1 13249	    270E  B5				 DB 0b5h
1 13250	    270F  C8				 DB 0c8h		 ; quit	if not
1 13251	    2710  3A				 DB 3ah
1 13252	    2711  0190r				 DW CBREAK
1 13253	    2713  F5				 DB 0f5h		 ; save	previous CBREAK
1 13254	    2714  AF				 DB 0afh
1 13255	    2715  32				 DB 32h
1 13256	    2716  0190r				 DW CBREAK
1 13257	    2718  CD				 DB 0cdh
1 13258	    2719  03D7r				 DW  L0320		 ; read	character with CBREAK off
1 13259	    271B  F1				 DB 0f1h
1 13260	    271C  32				 DB 32h
1 13261	    271D  0190r				 DW CBREAK		 ; restore CBREAK
1 13262
1 13263	    271F  7D				 DB 7dh
1 13264	    2720  FE 03				 DB 0feh, 3
1 13265	    2722  C0				 DB 0c0h		 ; quit	if CBREAK not pressed
1 13266
1 13267	    2723  DD E1				 DB 0ddh,0e1h			 ; IX =	return address
1 13268
1 13269
1 13270
1 13271	    2725  11			 L2016:	 DB 11h
1 13272	    2726  0001				 DW 0001	 ; user	break, D = 0 with error	code = 1
1 13273	    2728  18 13				 DB 18h,( L202C)-$-1
1 13274
1 13275						 GLOBALS L201B
2 13276
2 13277						  IRP NAME,<L201B>
2 13278							   GLOBAL2 <NAME>
2 13279						  ENDM
3 13280							   GLOBAL2 <L201B>
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 234
msx_asm\rtl_rtl.ASM



4 13281						  GLOBAL L201B : NEAR
4 13282
4 13283						  GLOBAL _L201B	: NEAR
4 13284	    272A			 _L201B:
4 13285
2 13286
1 13287	    272A			 L201B:	 ; I/O error
1 13288	    272A  3A				 DB 3ah
1 13289	    272B  01A0r				 DW L00D0		 ; read	IORESULT
1 13290	    272D  B7				 DB 0b7h
1 13291	    272E  C8				 DB 0c8h		 ; quit	if no error
1 13292	    272F  DD E1				 DB 0ddh,0e1h
1 13293	    2731  5F				 DB 5fh			 ; E = IORESULT	error code
1 13294	    2732  16 01				 DB 16h,1			 ; I/O error
1 13295	    2734  18 07				 DB 18h,( L202C)-$-1
1 13296
1 13297	    2736			 L201C:	  ; error: 0AAH	throug 0AEH
1 13298	    2736  3E AA				  DB 3eh,0AAH
1 13299		  =_TEXT:2737		 L201D	  EQU $-1
1 13300
1 13301	    2738			 L2027:	  ; Run-time error
1 13302	    2738  DD E1				  DB 0ddh,0e1h			   ; return address of original	call
1 13303
1 13304	    273A  5F			 L2029:	 DB 5fh			 ; E = error code
1 13305	    273B  16 02				 DB 16h,2			 ; Run-time rror
1 13306
1 13307	    273D			 L202C:	 ; in:	 D = 0,	user break
1 13308						 ;	 D = 1,	I/O error, E = error number
1 13309						 ;	 D = 2,	Run-time error	 E = error number
1 13310						  ;	   IX =	return address of original call
1 13311
1 13312	    273D  AF				 DB 0afh
1 13313	    273E  32				  DB 32h
1 13314	    273F  0190r				 DW CBREAK
1 13315
1 13316	    2741  DD E5				  DB 0ddh,0e5h
1 13317	    2743  E1				  DB 0e1h
1 13318
1 13319	    2744  3A				  DB 3ah
1 13320	    2745  019Fr				 DW ERROREXITOK
1 13321	    2747  B7				  DB 0b7h
1 13322	    2748  C2				  DB 0c2h
1 13323	    2749  286Er				 DW ERRORHANDLERRETURN
1 13324
1 13325	    274B  22				  DB 22h
1 13326	    274C  019Cr				 DW L00CE
1 13327	    274E  73ED 019Er			  DW 73edh,ERRORSTACK
1 13328
1 13329	    2752  D5				  DB 0d5h		     ; save error type and code
1 13330
1 13331	    2753  D5				 DB 0d5h
1 13332	    2754  E5				  DB 0e5h		     ; address where error occurred
1 13333	    2755  CD				  DB 0cdh
1 13334	    2756  018Dr				 DW  ERRORPTR		   ; ErrorHandler(DE = type, HL	= address)
1 13335
1 13336	    2758  D1				  DB 0d1h		      ;	restore	error type and code
1 13337
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 235
msx_asm\rtl_rtl.ASM



1 13338	    2759  7A			 L2054:	 DB 7ah
1 13339	    275A  B7				 DB 0b7h
1 13340	    275B  20 14				 DB 20h,(L206C)-$-1
1 13341	    275D  CD				 DB 0cdh
1 13342	    275E  02B0r				 DW  L0200		 ; D = 0 >> User Break
1 13343	    2760  5E 43	0D 0A			 DB '^C',0DH,0AH
1 13344	    2764  55 73	65 72 20 62 72+		 DB 'User break',0
  13345		  65 61	6B 00
1 13346	    276F  18 2B				 DB 18h,( L2097)-$-1
1 13347
1 13348	    2771  3D			 L206C:	 DB 3dh
1 13349	    2772  20 0B				 DB 20h,(L207A)-$-1
1 13350	    2774  CD				 DB 0cdh
1 13351	    2775  02B0r				 DW  L0200		 ; D = 1 >> I/O	error
1 13352		  =_TEXT:277A		 L2075	 EQU $+3
1 13353	    2777  0D 0A	49 2F 4F 00		 DB 0DH,0AH,'I/O',0
1 13354	    277D  18 0E				 DB 18h,( L2088)-$-1
1 13355
1 13356	    277F  CD			 L207A:	 DB 0cdh
1 13357	    2780  02B0r				 DW  L0200		 ; D = 2 >> Run-time error
1 13358	    2782  0D 0A	52 75 6E 2D 74+		 DB 0DH,0AH,'Run-time',0
  13359		  69 6D	65 00
1 13360
1 13361	    278D  CD			 L2088:	 DB 0cdh
1 13362	    278E  02B0r				 DW  L0200
1 13363	    2790  20 65	72 72 6F 72 20+		 DB ' error ',0
  13364		  00
1 13365
1 13366	    2798  7B			 L2093:	 DB 7bh
1 13367	    2799  CD				 DB 0cdh
1 13368	    279A  069Fr				 DW  L04B4
1 13369
1 13370	    279C  D5			 L2097:	  DB 0d5h
1 13371	    279D  CD				  DB 0cdh
1 13372	    279E  02B0r				 DW  L0200
1 13373	    27A0  2C 20	50 43 3D 00		 DB ', PC=',0
1 13374	    27A6  2A				  DB 02ah
1 13375	    27A7  019Cr				 DW L00CE
1 13376	    27A9  CD				 DB 0cdh
1 13377	    27AA  069Ar				 DW  L04AF
1 13378	    27AC  D1				  DB 0d1h
1 13379
1 13380	    27AD  7B				  DB 7bh
1 13381	    27AE  FE AA				  DB 0feh, 0AAH
1 13382	    27B0  38 34				  DB 38h,(L20BD)-$-1		     ; jump if < 0AAH
1 13383	    27B2  FE AF				  DB 0feh, 0AEH+1
1 13384	    27B4  30 30				  DB 30h,(L20BD)-$-1		    ; jump if >	0AEH
1 13385
1 13386	    27B6  CD				  DB 0cdh
1 13387	    27B7  02B0r				 DW  L0200
1 13388	    27B9  0D 0A	00			  DB 13,10,0
1 13389
1 13390	    27BC  21				  DB 21h
1 13391	    27BD  2802r				 DW GIOSMESSAGES
1 13392	    27BF  D6 A9				  DB 0d6h, 0AAH	- 1
1 13393	    27C1  47				  DB 47h		     ; 1 = 0AAH, 2 = 0ABH etc.
1 13394
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 236
msx_asm\rtl_rtl.ASM



1 13395	    27C2			 GIOSMESSAGELOOP:
1 13396	    27C2  05				  DB 05h
1 13397	    27C3  28 07				  DB 28h,(GIOSMESSAGEFOUND)-$-1
1 13398
1 13399	    27C5			 GIOSMESSAGESCAN:
1 13400	    27C5  7E				  DB 7eh
1 13401	    27C6  23				  DB 23h
1 13402
1 13403	    27C7  B7				  DB 0b7h
1 13404	    27C8  20 FB				  DB 20h,(GIOSMESSAGESCAN)-$-1
1 13405
1 13406	    27CA  18 F6				  DB 18h,( GIOSMESSAGELOOP)-$-1
1 13407
1 13408	    27CC			 GIOSMESSAGEFOUND:
1 13409						  ; Do something
1 13410	    27CC  CD				  DB 0cdh
1 13411	    27CD  0280r				 DW  L01D0
1 13412
1 13413
1 13414	    27CF  18 15				  DB 18h,( L20BD)-$-1
1 13415
1 13416	    27D1  CD			 L20A8:	  DB 0cdh
1 13417	    27D2  02B0r				 DW  L0200
1 13418	    27D4  4E 6F	74 20 65 6E 6F+		 DB 'Not enough	memory',0
  13419		  75 67	68 20 6D 65 6D+
  13420		  6F 72	79 00
1 13421
1 13422	    27E6  CD			 L20BD:	  DB 0cdh
1 13423	    27E7  02B0r				 DW  L0200
1 13424	    27E9  0D 0A	50 72 6F 67 72+		 DB 0DH,0AH,'Program aborted',0DH,0AH,0
  13425		  61 6D	20 61 62 6F 72+
  13426		  74 65	64 0D 0A 00
1 13427
1 13428						 GLOBALS L20D4
2 13429
2 13430						  IRP NAME,<L20D4>
2 13431							   GLOBAL2 <NAME>
2 13432						  ENDM
3 13433							   GLOBAL2 <L20D4>
4 13434						  GLOBAL L20D4 : NEAR
4 13435
4 13436						  GLOBAL _L20D4	: NEAR
4 13437	    27FD			 _L20D4:
4 13438
2 13439
1 13440	    27FD			 L20D4:
1 13441					 ;	   CALL	GotoTextMode
1 13442
1 13443					 ;	   LD A,(L00D8)
1 13444					 ;	   OR A
1 13445					 ;	  JP Z,L278E
1 13446	    27FD  0E 00				 DB 0eh,0
1 13447	    27FF  CD				 DB 0cdh
1 13448	    2800  0005				 DW  MSXDOS
1 13449
1 13450	    2802			 GIOSMESSAGES:
1 13451	    2802  12 4D	65 6D 4D 61 6E+		  DB 18,'MemMan	not present',0	 ; 0AAH
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 237
msx_asm\rtl_rtl.ASM



  13452		  20 6E	6F 74 20 70 72+
  13453		  65 73	65 6E 74 00
1 13454	    2816  14 57	72 6F 6E 67 20+		  DB 20,'Wrong MemMan version',0 ; 0ABH
  13455		  4D 65	6D 4D 61 6E 20+
  13456		  76 65	72 73 69 6F 6E+
  13457		  00
1 13458	    282C  14 47	49 4F 53 2D 74+		  DB 20,'GIOS-tsr not present',0 ; 0ACH
  13459		  73 72	20 6E 6F 74 20+
  13460		  70 72	65 73 65 6E 74+
  13461		  00
1 13462	    2842  10 47	49 4F 53 20 6E+		  DB 16,'GIOS not present',0	 ; 0ADH
  13463		  6F 74	20 70 72 65 73+
  13464		  65 6E	74 00
1 13465	    2854  12 57	72 6F 6E 67 20+		  DB 18,'Wrong GIOS version',0	 ; 0AEH
  13466		  47 49	4F 53 20 76 65+
  13467		  72 73	69 6F 6E 00
1 13468
1 13469	    2868			 L20DE:
1 13470	    2868  CD				  DB 0cdh
1 13471	    2869  288Ar				 DW  GOTOTEXTMODE
1 13472
1 13473	    286B  E1				  DB 0e1h
1 13474	    286C  D1				 DB 0d1h
1 13475	    286D  D1				 DB 0d1h
1 13476
1 13477	    286E			 ERRORHANDLERRETURN:
1 13478	    286E  E9				  DB 0e9h
1 13479
1 13480						  GLOBALS ERROREXIT
2 13481
2 13482						  IRP NAME,<ERROREXIT>
2 13483							   GLOBAL2 <NAME>
2 13484						  ENDM
3 13485							   GLOBAL2 <ERROREXIT>
4 13486						  GLOBAL ERROREXIT : NEAR
4 13487
4 13488						  GLOBAL _ERROREXIT : NEAR
4 13489	    286F			 _ERROREXIT:
4 13490
2 13491
1 13492	    286F			 ERROREXIT:
1 13493	    286F  D9				  DB 0d9h
1 13494	    2870  21				  DB 21h
1 13495	    2871  019Fr				 DW ERROREXITOK
1 13496	    2873  7E				  DB 7eh
1 13497	    2874  B7				  DB 0b7h
1 13498	    2875  D9				  DB 0d9h
1 13499	    2876  C8				  DB 0c8h		       ; quit if no ErrorExit
1 13500
1 13501	    2877  D9				  DB 0d9h
1 13502
1 13503	    2878  36 00				  DB 36h,0
1 13504
1 13505	    287A  ED 7B				  DB 0edh,7bh
1 13506	    287C  019Er				 DW ERRORSTACK
1 13507
1 13508	    287E  2A				  DB 02ah
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 238
msx_asm\rtl_rtl.ASM



1 13509	    287F  019Cr				 DW L00CE	       ; HL = return address of	original call
1 13510	    2881  E5				  DB 0e5h
1 13511
1 13512	    2882  D9				  DB 0d9h
1 13513	    2883  C9				  DB 0c9h
1 13514
1 13515						  GLOBALS DOSERRORHANDLERON
2 13516
2 13517						  IRP NAME,<DOSERRORHANDLERON>
2 13518							   GLOBAL2 <NAME>
2 13519						  ENDM
3 13520							   GLOBAL2 <DOSERRORHANDLERON>
4 13521						  GLOBAL DOSERRORHANDLERON : NEAR
4 13522
4 13523						  GLOBAL _DOSERRORHANDLERON : NEAR
4 13524	    2884			 _DOSERRORHANDLERON:
4 13525
2 13526
1 13527	    2884			 DOSERRORHANDLERON:
1 13528	    2884  C3				  DB 0c3h
1 13529	    2885  0000e				 DW  SETERRORHANDLER
1 13530
1 13531						  GLOBALS DOSERRORHANDLEROFF
2 13532
2 13533						  IRP NAME,<DOSERRORHANDLEROFF>
2 13534							   GLOBAL2 <NAME>
2 13535						  ENDM
3 13536							   GLOBAL2 <DOSERRORHANDLEROFF>
4 13537						  GLOBAL DOSERRORHANDLEROFF : NEAR
4 13538
4 13539						  GLOBAL _DOSERRORHANDLEROFF : NEAR
4 13540	    2887			 _DOSERRORHANDLEROFF:
4 13541
2 13542
1 13543	    2887			 DOSERRORHANDLEROFF:
1 13544	    2887  C3				  DB 0c3h
1 13545	    2888  0000e				 DW  RESERRORHANDLER
1 13546
1 13547	    288A			 GOTOTEXTMODE:
1 13548	    288A  3A				  DB 3ah
1 13549	    288B  FCAF				 DW 0FCAFH
1 13550	    288D  FE 02				  DB 0feh, 2
1 13551	    288F  D8				  DB 0d8h		       ; quit if screen	number < 2
1 13552
1 13553	    2890  21				  DB 21h
1 13554	    2891  0000				 DW 0
1 13555
1 13556	    2893  3A				  DB 3ah
1 13557	    2894  0581r				 DW GIOSOK
1 13558	    2896  B7				  DB 0b7h
1 13559	    2897  20 0E				  DB 20h,(GOTOTEXTMODE1)-$-1	    ; jump if GIOS present
1 13560
1 13561	    2899  39				  DB 039h		   ; HL	= SP
1 13562
1 13563	    289A  11				  DB 11h
1 13564	    289B  812C				 DW 8000H+300
1 13565	    289D  EB				  DB 0ebh
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 239
msx_asm\rtl_rtl.ASM



1 13566	    289E  B7				  DB 0b7h
1 13567	    289F  ED 52				  DB 0EDH,052h			; 8000H+300 - SP
1 13568	    28A1  D0				  DB 0d0h		      ;	quit if	not enough space on stack left
1 13569
1 13570						  ; A =	0
1 13571	    28A2  00F7				  DW 0F7H
1 13572	    28A4  005F				  DW 05FH		     ; SCREEN 0
1 13573	    28A6  C9				  DB 0c9h
1 13574
1 13575	    28A7			 GOTOTEXTMODE1:
1 13576	    28A7  E5				  DB 0e5h
1 13577	    28A8  3E 08				  DB 3eh,8
1 13578	    28AA  CD				  DB 0cdh
1 13579	    28AB  057Br				 DW  RUNGIOS		   ; call GIOS function	8 (SCREEN)
1 13580									     ; must be a call because of return	address
1 13581	    28AD  C9				  DB 0c9h
  13582
  13583						  end L0100
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 240
Symbol Table




Symbol Name			  Type	 Value

??0000				  Number 0010
??0001				  Number 0002
??0002				  Number 0007
??0003				  Number 0010
??0004				  Number 0010
??0005				  Number 0002
??0006				  Number 0008
??0007				  Number 0005
??0008				  Number 0041
??0009				  Number 004F
??000A				  Number 0002
??000B				  Number 0001
??000C				  Number -0001
??000D				  Number 0001
??000E				  Number -0001
??000F				  Number 0002
??0010				  Number 0002
??0011				  Number 000E
??0012				  Number 0041
??0013				  Number 0002
??0014				  Number 0009
??0015				  Number -0009
??0016				  Number 000A
??0017				  Number 0001
??0018				  Number 0051
??0019				  Number 0010
??001A				  Number 0002
??001B				  Number 002B
??001C				  Number 000A
??001D				  Number 000B
??001E				  Number 0002
??001F				  Number 0001
??0020				  Number 0001
??0021				  Number 000A
??0022				  Number 0001
??0023				  Number 0001
??0024				  Number 000A
??0025				  Number 000A
??0026				  Number 000C
??0027				  Number -0003
??0028				  Number 000F
??0029				  Number 0011
??002A				  Number 0011
??002B				  Number 0011
??DATE				  Text	 "03/26/99"
??FILENAME			  Text	 "rtl_rtl "
??TIME				  Text	 "21:36:59"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 1F1FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 241
Symbol Table



@DATASIZE			  Text	 0
@FILENAME			  Text	 RTL_RTL
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 @STACK
@WORDSIZE			  Text	 4
A2L				  Near	 _TEXT:0CE6
A2L02				  Near	 _TEXT:0CF6
A2L04				  Near	 _TEXT:0CF8
A2L20				  Near	 _TEXT:0D18
A2L36				  Near	 _TEXT:0D4C
A2L37				  Near	 _TEXT:0D59
A2L38				  Near	 _TEXT:0D5C
A2L_FLAG			  Near	 _TEXT:0CE5
A2L_HEX				  Near	 _TEXT:0D3B
AUXINPTR			  Near	 _TEXT:0177
AUXOUTPTR			  Near	 _TEXT:0174
BUFLEN				  Near	 _TEXT:018C
CBREAK				  Near	 _TEXT:0190
CHECKMEMMAN			  Near	 _TEXT:050D
CHECKREDIRECTION		  Near	 _TEXT:046D
CHECKTSR			  Near	 _TEXT:0517
CHKMMAN				  Near	 _TEXT:0567
CLOSEFILE			  Near	 _TEXT:---- Extern
COMPMANTISSE			  Near	 _TEXT:10A4
CON1OUTPTR			  Near	 _TEXT:016F
CONINPTR			  Near	 _TEXT:016B
CONINPTR_1			  Near	 _TEXT:016C
CONOUTPTR			  Near	 _TEXT:016E
CONSTPTR			  Near	 _TEXT:0168
CONSTPTR_1			  Near	 _TEXT:0169
CREATEFILE			  Near	 _TEXT:---- Extern
DELETEFILE			  Near	 _TEXT:---- Extern
DIVREAL1			  Near	 _TEXT:1057
DIVREAL2			  Near	 _TEXT:1063
DIVREAL3			  Near	 _TEXT:1074
DIVREAL4			  Near	 _TEXT:1089
DIVREAL5			  Near	 _TEXT:1097
DOS2PRESENT			  Near	 _TEXT:---- Extern
DOSERRORHANDLEROFF		  Near	 _TEXT:2887
DOSERRORHANDLERON		  Near	 _TEXT:2884
DOS_BLEN			  Number 0004
DOS_BUF				  Number 0051
DOS_CHR				  Number 0001
DOS_CUR				  Number 000C
DOS_FCB				  Number 0010
DOS_FLG				  Number 0000
DOS_LEN				  Number 00D1
DOS_NUM				  Number 0006
DOS_PTR				  Number 0002
DOS_REC				  Number 000A
ERROREXIT			  Near	 _TEXT:286F
ERROREXITOK			  Number _TEXT:019F
ERRORHANDLERRETURN		  Near	 _TEXT:286E
ERRORNUMBER			  Near	 _TEXT:---- Extern
ERRORPTR			  Near	 _TEXT:018D
ERRORPTR_1			  Near	 _TEXT:018E
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 242
Symbol Table



ERRORSTACK			  Near	 _TEXT:019E
FASTREAL			  Near	 _TEXT:0000
FCB_DRIVE			  Number 0000
FCB_EXT				  Number 0009
FCB_FILEPOS			  Number 0021
FCB_FILESIZE			  Number 0010
FCB_LEN				  Number 0024
FCB_NAME			  Number 0001
FCB_RECSIZE			  Number 000E
FIB_BUF				  Number 0030
FIB_CHR				  Number 0001
FIB_CUR				  Number 0008
FIB_F				  Number 0000
FIB_FCB				  Number 000C
FIB_LEN				  Number 00B0
FIB_NUM				  Number 0004
FIB_PTR				  Number 0002
FIB_REC				  Number 0006
FILESEEK			  Near	 _TEXT:---- Extern
FILESIZE			  Near	 _TEXT:---- Extern
FIL_HDR				  Number 0004
GETERROR			  Near	 _TEXT:---- Extern
GETERROR_LIB			  Near	 _TEXT:2703
GIOSMESSAGEFOUND		  Near	 _TEXT:27CC
GIOSMESSAGELOOP			  Near	 _TEXT:27C2
GIOSMESSAGES			  Near	 _TEXT:2802
GIOSMESSAGESCAN			  Near	 _TEXT:27C5
GIOSOK				  Near	 _TEXT:0581
GIOSTSRNAME			  Near	 _TEXT:0584
GIOSVER				  Near	 _TEXT:0582
GOTOTEXTMODE			  Near	 _TEXT:288A
GOTOTEXTMODE1			  Near	 _TEXT:28A7
HEAPPTR				  Near	 _TEXT:0192
IGIOS				  Near	 _TEXT:047B
INITFILEIO			  Near	 _TEXT:---- Extern
I_DDAT				  Near	 _TEXT:093A
I_DIV1				  Near	 _TEXT:094F
I_DIV_0				  Near	 _TEXT:093C
I_DIV_2				  Near	 _TEXT:0960
I_DIV_3				  Near	 _TEXT:0969
I_DIV_4				  Near	 _TEXT:097D
I_DIV_5				  Near	 _TEXT:0989
I_DIV_6				  Near	 _TEXT:098A
I_DIV_7				  Near	 _TEXT:0993
J0213				  Near	 _TEXT:02CD
L0038				  Near	 _TEXT:0125
L0039				  Near	 _TEXT:0126
L005C				  Near	 _TEXT:0128
L005D				  Near	 _TEXT:0129
L0065				  Near	 _TEXT:0131
L0066				  Near	 _TEXT:0132
L0068				  Near	 _TEXT:0134
L006C				  Near	 _TEXT:0138
L0070				  Near	 _TEXT:013C
L0074				  Near	 _TEXT:0140
L007C				  Near	 _TEXT:0148
L007D				  Near	 _TEXT:0149
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 243
Symbol Table



L0080				  Number 0080
L00B8				  Near	 _TEXT:0180
L00BA				  Near	 _TEXT:0182
L00BE				  Near	 _TEXT:0186
L00C0				  Near	 _TEXT:0188
L00C8				  Near	 _TEXT:0196
L00CB				  Near	 _TEXT:0199
L00CC				  Near	 _TEXT:019A
L00CE				  Near	 _TEXT:019C
L00D0				  Near	 _TEXT:01A0
L00D2				  Near	 _TEXT:01A1
L00D4				  Near	 _TEXT:01A3
L00D6				  Near	 _TEXT:01A5
L00D8				  Near	 _TEXT:01A7
L00DC				  Near	 _TEXT:01A8
L00DE				  Near	 _TEXT:01A9
L00E0				  Near	 _TEXT:01AB
L00E2				  Near	 _TEXT:01AC
L00E4				  Near	 _TEXT:01AE
L00E6				  Near	 _TEXT:01B0
L00E8				  Near	 _TEXT:01B2
L00E9				  Number _TEXT:01B3
L00EA				  Near	 _TEXT:01B4
L00EC				  Near	 _TEXT:01B6
L00ED				  Near	 _TEXT:01B7
L00F0				  Near	 _TEXT:01C2
L00F2				  Near	 _TEXT:01C4
L00F4				  Near	 _TEXT:01C6
L00F6				  Near	 _TEXT:01C8
L00F8				  Near	 _TEXT:01CA
L0100				  Near	 _TEXT:0100
L0101				  Near	 _TEXT:0101
L0124				  Near	 _TEXT:01D4
L0126				  Near	 _TEXT:01D6
L0153				  Near	 _TEXT:0203
L0168				  Near	 _TEXT:0218
L0169				  Near	 _TEXT:0219
L016B				  Near	 _TEXT:021B
L017B				  Near	 _TEXT:022B
L018B				  Near	 _TEXT:023B
L019B				  Near	 _TEXT:024B
L019C				  Near	 _TEXT:024C
L019D				  Near	 _TEXT:024D
L019E				  Near	 _TEXT:024E
L019F				  Near	 _TEXT:024F
L01A0				  Near	 _TEXT:0250
L01A2				  Near	 _TEXT:0252
L01A8				  Near	 _TEXT:0258
L01AE				  Near	 _TEXT:025E
L01B4				  Near	 _TEXT:0264
L01BA				  Near	 _TEXT:026A
L01BC				  Near	 _TEXT:026C
L01C2				  Near	 _TEXT:0272
L01C8				  Near	 _TEXT:0278
L01CE				  Near	 _TEXT:027E
L01D0				  Near	 _TEXT:0280
L01D4				  Near	 _TEXT:0284
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 244
Symbol Table



L01E1				  Near	 _TEXT:0291
L01E8				  Near	 _TEXT:0298
L01EE				  Near	 _TEXT:029E
L01FA				  Near	 _TEXT:02AA
L0200				  Near	 _TEXT:02B0
L0204				  Near	 _TEXT:02B4
L0209				  Near	 _TEXT:02B9
L020B				  Near	 _TEXT:02BB
L020C				  Near	 _TEXT:02BC
L0212				  Near	 _TEXT:02C2
L0213				  Near	 _TEXT:02CE
L0218				  Near	 _TEXT:02C8
L021D				  Near	 _TEXT:02D0
L0226				  Near	 _TEXT:02D9
L0235				  Near	 _TEXT:02E8
L023E				  Near	 _TEXT:02F1
L024B				  Near	 _TEXT:02FE
L0259				  Near	 _TEXT:030C
L0262				  Near	 _TEXT:0315
L026B				  Near	 _TEXT:031E
L027C				  Near	 _TEXT:032F
L0282				  Near	 _TEXT:0335
L0284				  Near	 _TEXT:0337
L0299				  Near	 _TEXT:034C
L02A2				  Near	 _TEXT:0355
L02DC				  Near	 _TEXT:038F
L02EC				  Near	 _TEXT:039F
L02F3				  Near	 _TEXT:03A6
L02F6				  Near	 _TEXT:03A9
L02FF				  Near	 _TEXT:03B2
L0302				  Near	 _TEXT:03B5
L030A				  Near	 _TEXT:03BD
L0310				  Near	 _TEXT:03C3
L0316				  Near	 _TEXT:03C9
L0316_OK			  Near	 _TEXT:03D5
L0320				  Near	 _TEXT:03D7
L0321				  Near	 _TEXT:03D9
L0323				  Near	 _TEXT:03DE
L0326				  Near	 _TEXT:03E1
L032A				  Near	 _TEXT:03E5
L032F				  Near	 _TEXT:03E9
L0334				  Near	 _TEXT:03ED
L0339				  Near	 _TEXT:03F1
L033C				  Near	 _TEXT:03F3
L035D				  Near	 _TEXT:0414
L035D_1				  Near	 _TEXT:0416
L035F				  Near	 _TEXT:041B
L0364				  Near	 _TEXT:0420
L037A				  Near	 _TEXT:0432
L03A5				  Near	 _TEXT:0590
L03A5_L				  Number 0018
L03BD				  Near	 _TEXT:05A8
L03C9				  Near	 _TEXT:05B4
L03D9				  Near	 _TEXT:05C4
L03E1				  Near	 _TEXT:05CC
L03E8				  Near	 _TEXT:05D3
L03EE				  Near	 _TEXT:05D9
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 245
Symbol Table



L03F2				  Near	 _TEXT:05DD
L03F8				  Near	 _TEXT:05E3
L03FE				  Near	 _TEXT:05E9
L0406				  Near	 _TEXT:05F1
L041F				  Near	 _TEXT:060A
L0420				  Near	 _TEXT:060B
L0421				  Near	 _TEXT:060C
L0443				  Near	 _TEXT:062E
L0453				  Near	 _TEXT:063E
L0458				  Near	 _TEXT:0643
L045E				  Near	 _TEXT:0649
L046B				  Near	 _TEXT:0656
L0470				  Near	 _TEXT:065B
L0476				  Near	 _TEXT:0661
L0477				  Near	 _TEXT:0662
L047B				  Near	 _TEXT:0666
L047D				  Near	 _TEXT:0668
L0482				  Near	 _TEXT:066D
L04911				  Number 000E
L0496				  Near	 _TEXT:0681
L0498				  Near	 _TEXT:0683
L04A6				  Near	 _TEXT:0691
L04AF				  Near	 _TEXT:069A
L04B4				  Near	 _TEXT:069F
L04BD				  Near	 _TEXT:06A8
L04BE				  Near	 _TEXT:06B0
L04C8				  Near	 _TEXT:06B5
L04D2				  Near	 _TEXT:06BE
L04D2_D				  Near	 _TEXT:06C2
L04D4				  Near	 _TEXT:06C3
L0508				  Near	 _TEXT:06F4
L0522				  Near	 _TEXT:070E
L052C				  Near	 _TEXT:0717
L053A				  Near	 _TEXT:0725
L054D				  Near	 _TEXT:0738
L055D				  Near	 _TEXT:0748
L056C				  Near	 _TEXT:0757
L0570				  Near	 _TEXT:075B
L057B				  Near	 _TEXT:0766
L057F				  Near	 _TEXT:076A
L0581				  Near	 _TEXT:076C
L058B				  Near	 _TEXT:0776
L0591				  Near	 _TEXT:077C
L0597				  Near	 _TEXT:0782
L0599				  Near	 _TEXT:0784
L059B				  Near	 _TEXT:0786
L05AB				  Near	 _TEXT:0796
L05B6				  Near	 _TEXT:07A1
L05BA				  Near	 _TEXT:07A5
L05CD				  Near	 _TEXT:07B8
L05D1				  Near	 _TEXT:07BC
L05E2				  Near	 _TEXT:07CD
L05EE				  Near	 _TEXT:07D9
L05F4				  Near	 _TEXT:07DF
L05FD				  Near	 _TEXT:07E8
L0601				  Near	 _TEXT:07EC
L0612				  Near	 _TEXT:07FD
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 246
Symbol Table



L061F				  Near	 _TEXT:080A
L0623				  Near	 _TEXT:080E
L0638				  Near	 _TEXT:0823
L064C				  Near	 _TEXT:0837
L0656				  Near	 _TEXT:0841
L0661				  Near	 _TEXT:084C
L0666				  Near	 _TEXT:0851
L066A				  Near	 _TEXT:0855
L0671				  Near	 _TEXT:085C
L0672				  Near	 _TEXT:085D
L0676				  Near	 _TEXT:0861
L067F				  Near	 _TEXT:086A
L0682				  Near	 _TEXT:086D
L0688				  Near	 _TEXT:0889
L068D				  Near	 _TEXT:088F
L0692				  Near	 _TEXT:0895
L0695				  Near	 _TEXT:0898
L069B				  Near	 _TEXT:08A3
L06A0				  Near	 _TEXT:08A8
L06A5				  Near	 _TEXT:08AD
L06A8				  Near	 _TEXT:08B0
L06AE				  Near	 _TEXT:08BB
L06B3				  Near	 _TEXT:08C0
L06B8				  Near	 _TEXT:08C5
L06BB				  Near	 _TEXT:08C8
L06C2				  Near	 _TEXT:08D4
L06C7				  Near	 _TEXT:08D9
L06CC				  Near	 _TEXT:08DE
L06CF				  Near	 _TEXT:08E1
L06D6				  Near	 _TEXT:08ED
L06DB				  Near	 _TEXT:08F2
L06E0				  Near	 _TEXT:08F7
L06E3				  Near	 _TEXT:08FA
L06E9				  Near	 _TEXT:0905
L06EE				  Near	 _TEXT:090A
L06F3				  Near	 _TEXT:090F
L06F5				  Near	 _TEXT:0911
L0704				  Near	 _TEXT:0920
L070B				  Near	 _TEXT:0927
L070F				  Near	 _TEXT:092B
L073B				  Near	 _TEXT:0999
L0745				  Near	 _TEXT:09A3
L074E				  Near	 _TEXT:09B0
L0752				  Near	 _TEXT:09B4
L0756				  Near	 _TEXT:09B8
L075A				  Near	 _TEXT:09BC
L0761				  Near	 _TEXT:09C3
L076E				  Near	 _TEXT:09D0
L0772				  Near	 _TEXT:09D4
L077E				  Near	 _TEXT:09E0
L0780				  Near	 _TEXT:09E2
L0783				  Near	 _TEXT:09E5
L078B				  Near	 _TEXT:09ED
L0792				  Near	 _TEXT:0C25
L07C6				  Near	 _TEXT:0C59
L07E2				  Near	 _TEXT:0C75
L07E3				  Near	 _TEXT:0C76
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 247
Symbol Table



L07EF				  Near	 _TEXT:0C82
L07F7				  Near	 _TEXT:0C8A
L0802				  Near	 _TEXT:0C95
L0804				  Near	 _TEXT:0C97
L0820				  Near	 _TEXT:0CB3
L082C				  Near	 _TEXT:0CBF
L0837				  Near	 _TEXT:0CCA
L083D				  Near	 _TEXT:0D66
L0866				  Near	 _TEXT:0D8F
L086B				  Near	 _TEXT:0D94
L0896				  Near	 _TEXT:0DBF
L0899				  Near	 _TEXT:0DC2
L089C				  Near	 _TEXT:0DC5
L089F				  Near	 _TEXT:0DC8
L08A3				  Near	 _TEXT:0DCC
L08B2				  Near	 _TEXT:0DDB
L08CE				  Near	 _TEXT:0DF7
L08D1				  Near	 _TEXT:0DFA
L08DC				  Near	 _TEXT:0E05
L08E1				  Near	 _TEXT:0E0A
L08EF				  Near	 _TEXT:0E18
L08F3				  Near	 _TEXT:0E1C
L091C				  Near	 _TEXT:0E45
L091E				  Near	 _TEXT:0E47
L0920				  Near	 _TEXT:0E49
L0937				  Near	 _TEXT:0E60
L0938				  Near	 _TEXT:0E61
L0949				  Near	 _TEXT:0E72
L0951				  Near	 _TEXT:0E7A
L096E				  Near	 _TEXT:0E97
L0973				  Near	 _TEXT:0E9C
L097A				  Near	 _TEXT:0EA3
L098B				  Near	 _TEXT:0EB4
L0996				  Near	 _TEXT:0EBF
L09A2				  Near	 _TEXT:0ECB
L09B0				  Near	 _TEXT:0ED9
L09C4				  Near	 _TEXT:0EED
L09CC				  Near	 _TEXT:0EF5
L09CD				  Near	 _TEXT:0EF6
L09D3				  Near	 _TEXT:0EFC
L09DD				  Near	 _TEXT:0F06
L09E4				  Near	 _TEXT:0F0D
L09E9				  Near	 _TEXT:0F12
L09EC				  Near	 _TEXT:0F15
L09F2				  Near	 _TEXT:0F1B
L09F7				  Near	 _TEXT:0F20
L09FA				  Near	 _TEXT:0F23
L09FF				  Near	 _TEXT:0F28
L0A03				  Near	 _TEXT:0F2C
L0A0D				  Near	 _TEXT:0F36
L0A11				  Near	 _TEXT:0A0F
L0A14				  Near	 _TEXT:0F3D
L0A1A				  Near	 _TEXT:0A18
L0A27				  Near	 _TEXT:0F50
L0A3C				  Near	 _TEXT:0F65
L0A47				  Near	 _TEXT:0F70
L0A5B				  Near	 _TEXT:0F84
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 248
Symbol Table



L0A65				  Near	 _TEXT:0F8E
L0A68				  Near	 _TEXT:0F91
L0A72				  Near	 _TEXT:0F9B
L0A75				  Near	 _TEXT:0F9E
L0A76				  Near	 _TEXT:0F9F
L0A7A				  Near	 _TEXT:0FA3
L0A7B				  Near	 _TEXT:0FA4
L0A81				  Near	 _TEXT:0FAA
L0A88				  Near	 _TEXT:0FB1
L0A8F				  Near	 _TEXT:0FB8
L0A97				  Near	 _TEXT:0FC0
L0ADE				  Near	 _TEXT:101F
L0AE1				  Near	 _TEXT:1022
L0AE2				  Near	 _TEXT:1023
L0AF5				  Near	 _TEXT:1037
L0B00				  Near	 _TEXT:1042
L0B3B				  Near	 _TEXT:1097
L0B47				  Near	 _TEXT:10B8
L0B4D				  Near	 _TEXT:10C0
L0B55				  Near	 _TEXT:10C8
L0B59				  Near	 _TEXT:10CC
L0B70				  Near	 _TEXT:10E4
L0B72				  Near	 _TEXT:10E6
L0B7A				  Near	 _TEXT:10EE
L0B7B				  Near	 _TEXT:10EF
L0B86				  Near	 _TEXT:10FA
L0B87				  Near	 _TEXT:10FB
L0B92				  Near	 _TEXT:1106
L0BAC				  Near	 _TEXT:1120
L0BC6				  Near	 _TEXT:113A
L0BDF				  Near	 _TEXT:1153
L0BE9				  Near	 _TEXT:115D
L0BF3				  Near	 _TEXT:1167
L0BFD				  Near	 _TEXT:1171
L0C10				  Near	 _TEXT:1184
L0C31				  Near	 _TEXT:11A5
L0C34				  Near	 _TEXT:11A8
L0C46				  Near	 _TEXT:11BA
L0C5F				  Near	 _TEXT:11D3
L0C7F				  Near	 _TEXT:11F3
L0C87				  Near	 _TEXT:11FB
L0CA3				  Near	 _TEXT:1217
L0CAA				  Near	 _TEXT:121E
L0CB6				  Near	 _TEXT:122A
L0CC3				  Near	 _TEXT:1237
L0D03				  Near	 _TEXT:1277
L0D0D				  Near	 _TEXT:1281
L0D2B				  Near	 _TEXT:129F
L0D7C				  Near	 _TEXT:12F0
L0DB6				  Near	 _TEXT:132A
L0DE0				  Near	 _TEXT:1354
L0DF2				  Near	 _TEXT:1306
L0E03				  Near	 _TEXT:1377
L0E10				  Near	 _TEXT:1384
L0E16				  Near	 _TEXT:138A
L0E46				  Near	 _TEXT:13BA
L0E58				  Near	 _TEXT:13CC
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 249
Symbol Table



L0E66				  Near	 _TEXT:13DA
L0E7B				  Near	 _TEXT:13EF
L0E81				  Near	 _TEXT:13F5
L0E9C				  Near	 _TEXT:1410
L0ECA				  Near	 _TEXT:143E
L0ECE				  Near	 _TEXT:1442
L0ED8				  Near	 _TEXT:144C
L0EE0				  Near	 _TEXT:1454
L0F0A				  Near	 _TEXT:147E
L0F10				  Near	 _TEXT:1484
L0F2E				  Near	 _TEXT:14A2
L0F34				  Near	 _TEXT:14A8
L0F49				  Near	 _TEXT:14BD
L0F50				  Near	 _TEXT:14C4
L0F60				  Near	 _TEXT:14D4
L0F6E				  Near	 _TEXT:14E2
L0F73				  Near	 _TEXT:14E7
L0F86				  Near	 _TEXT:14FA
L0F8E				  Near	 _TEXT:1502
L0F98				  Near	 _TEXT:150C
L0FA2				  Near	 _TEXT:1516
L0FAC				  Near	 _TEXT:1520
L0FB4				  Near	 _TEXT:1528
L0FBC				  Near	 _TEXT:1530
L0FCD				  Near	 _TEXT:1541
L0FD0				  Near	 _TEXT:1544
L0FDA				  Near	 _TEXT:154E
L0FDE				  Near	 _TEXT:1552
L0FE8				  Near	 _TEXT:155C
L0FF5				  Near	 _TEXT:1569
L0FFF				  Near	 _TEXT:1573
L1003				  Near	 _TEXT:1577
L10031				  Near	 _TEXT:157C
L1008				  Near	 _TEXT:1581
L1015				  Near	 _TEXT:158E
L1027				  Near	 _TEXT:15F4
L1033				  Near	 _TEXT:1600
L1040				  Near	 _TEXT:160D
L1044				  Near	 _TEXT:1611
L104A				  Near	 _TEXT:1617
L104B				  Near	 _TEXT:1618
L106B				  Near	 _TEXT:1638
L1071				  Near	 _TEXT:163E
L1076				  Near	 _TEXT:1643
L107F				  Near	 _TEXT:164C
L1086				  Near	 _TEXT:1653
L108F				  Near	 _TEXT:165C
L1096				  Near	 _TEXT:1663
L109F				  Near	 _TEXT:166C
L10A8				  Near	 _TEXT:1675
L10B1				  Near	 _TEXT:167E
L10C5				  Near	 _TEXT:1692
L10CB				  Near	 _TEXT:1698
L10D9				  Near	 _TEXT:16A6
L10E3				  Near	 _TEXT:16B0
L10E5				  Near	 _TEXT:16B2
L10EB				  Near	 _TEXT:16B8
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 250
Symbol Table



L10F3				  Near	 _TEXT:16C0
L10FF				  Near	 _TEXT:16CC
L1119				  Near	 _TEXT:16E6
L112C				  Near	 _TEXT:16F9
L1135				  Near	 _TEXT:1702
L113D				  Near	 _TEXT:170A
L1143				  Near	 _TEXT:1710
L117D				  Near	 _TEXT:174A
L1180				  Near	 _TEXT:174D
L118D				  Near	 _TEXT:175A
L119C				  Near	 _TEXT:1769
L11A3				  Near	 _TEXT:1770
L11AB				  Near	 _TEXT:1778
L11BD				  Near	 _TEXT:178A
L11C1				  Near	 _TEXT:178E
L11E3				  Near	 _TEXT:17B0
L11E6				  Near	 _TEXT:17B3
L11FC				  Near	 _TEXT:17C9
L11FE				  Near	 _TEXT:17CB
L1215				  Near	 _TEXT:17E2
L121D				  Near	 _TEXT:17EA
L121E				  Near	 _TEXT:17EB
L1236				  Near	 _TEXT:1803
L1239				  Near	 _TEXT:1806
L1240				  Near	 _TEXT:180D
L1247				  Near	 _TEXT:1814
L1253				  Near	 _TEXT:1820
L1266				  Near	 _TEXT:1833
L126E				  Near	 _TEXT:183B
L1277				  Near	 _TEXT:1844
L12B3				  Near	 _TEXT:1880
L12D6				  Near	 _TEXT:18A3
L12DD				  Near	 _TEXT:18AA
L12E1				  Near	 _TEXT:18AE
L12E3				  Near	 _TEXT:18B0
L12E6				  Near	 _TEXT:18B3
L12F2				  Near	 _TEXT:18BF
L12FC				  Near	 _TEXT:18C9
L1300				  Near	 _TEXT:18CD
L1302				  Near	 _TEXT:18CF
L1309				  Near	 _TEXT:18D6
L130B				  Near	 _TEXT:18D8
L1318				  Near	 _TEXT:18E5
L131B				  Near	 _TEXT:18E8
L1322				  Near	 _TEXT:18EF
L1326				  Near	 _TEXT:18F3
L1329				  Near	 _TEXT:18F6
L1333				  Near	 _TEXT:1900
L1336				  Near	 _TEXT:1903
L133F				  Near	 _TEXT:190C
L134F				  Near	 _TEXT:191C
L135C				  Near	 _TEXT:1929
L1362				  Near	 _TEXT:192F
L136D				  Near	 _TEXT:193A
L136F				  Near	 _TEXT:193C
L1370				  Near	 _TEXT:193D
L1390				  Near	 _TEXT:1963
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 251
Symbol Table



L13A0				  Near	 _TEXT:1973
L13B6				  Near	 _TEXT:198E
L13BB				  Near	 _TEXT:1993
L13C3				  Near	 _TEXT:199B
L13C9				  Near	 _TEXT:19A1
L13DA				  Near	 _TEXT:19B2
L13E6				  Near	 _TEXT:19BE
L13FE				  Near	 _TEXT:19D6
L13FF				  Near	 _TEXT:19D7
L142B				  Near	 _TEXT:1A03
L1430				  Near	 _TEXT:1A17
L1469				  Near	 _TEXT:1A45
L147E				  Near	 _TEXT:1A5A
L1481				  Near	 _TEXT:1A5D
L1498				  Near	 _TEXT:1A74
L149B				  Near	 _TEXT:1A77
L14A9				  Near	 _TEXT:1A85
L14BA				  Near	 _TEXT:1A96
L14CB				  Near	 _TEXT:1AA7
L14CC				  Near	 _TEXT:1AAB
L14CD				  Near	 _TEXT:1AAC
L14E6				  Near	 _TEXT:1ACD
L14E8				  Near	 _TEXT:1ACF
L14EA				  Near	 _TEXT:1AD1
L14F4				  Near	 _TEXT:1ADB
L14FD				  Near	 _TEXT:1AE4
L14FF				  Near	 _TEXT:1AE6
L1533				  Near	 _TEXT:1B1A
L153F				  Near	 _TEXT:1B2A
L1550				  Near	 _TEXT:1B3B
L1556				  Near	 _TEXT:1B41
L155A				  Near	 _TEXT:1B45
L155E				  Near	 _TEXT:1B49
L1566				  Near	 _TEXT:1B51
L156B				  Near	 _TEXT:1B56
L1590				  Near	 _TEXT:1B9C
L1594				  Near	 _TEXT:1BA1
L1595				  Near	 _TEXT:1BAC
L1596				  Near	 _TEXT:1BB4
L1597				  Near	 _TEXT:1BB6
L15AB				  Near	 _TEXT:1BCC
L15BF				  Near	 _TEXT:1BE0
L15C9				  Near	 _TEXT:1BEA
L15D2				  Near	 _TEXT:1BF3
L15DC				  Near	 _TEXT:1BFD
L15E0				  Near	 _TEXT:1C01
L15E9				  Near	 _TEXT:1C0A
L15ED				  Near	 _TEXT:1C0E
L15F0				  Near	 _TEXT:1C11
L15FB				  Near	 _TEXT:1C1C
L160A				  Near	 _TEXT:1C2B
L160F				  Near	 _TEXT:1C30
L1620				  Near	 _TEXT:1C41
L1622				  Near	 _TEXT:1C43
L1624				  Near	 _TEXT:1C45
L1636				  Near	 _TEXT:1C57
L163D				  Near	 _TEXT:1C60
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 252
Symbol Table



L1644				  Near	 _TEXT:1C67
L164D				  Near	 _TEXT:1C70
L164E				  Near	 _TEXT:1C74
L164F				  Near	 _TEXT:1C75
L1670				  Near	 _TEXT:1C96
L1671				  Near	 _TEXT:1C98
L1672				  Near	 _TEXT:1CBE
L168E				  Near	 _TEXT:1CDA
L1692				  Near	 _TEXT:1CDE
L16A8				  Near	 _TEXT:1CF4
L16AB				  Near	 _TEXT:1CF7
L16C5				  Near	 _TEXT:1D11
L16C6				  Near	 _TEXT:1D12
L16E4				  Near	 _TEXT:1D30
L16FD				  Near	 _TEXT:1D49
L170C				  Near	 _TEXT:1D58
L1722				  Near	 _TEXT:1D83
L1726				  Near	 _TEXT:1D87
L1737				  Near	 _TEXT:1D98
L1745				  Near	 _TEXT:1DA6
L1749				  Near	 _TEXT:1DAA
L1759				  Near	 _TEXT:1DBA
L1760				  Near	 _TEXT:1DC1
L176A				  Near	 _TEXT:1DCB
L176C				  Near	 _TEXT:1DCD
L1779				  Near	 _TEXT:1DDA
L178B				  Near	 _TEXT:1E18
L17A1				  Near	 _TEXT:1E2E
L17A5				  Near	 _TEXT:1E32
L17AA				  Near	 _TEXT:1E37
L17BA				  Near	 _TEXT:1E47
L17C1				  Near	 _TEXT:1E4E
L17CC				  Near	 _TEXT:1E59
L17CD				  Near	 _TEXT:1E5A
L17D7				  Near	 _TEXT:1E64
L17DC				  Near	 _TEXT:1E69
L17E1				  Near	 _TEXT:1E6E
L17E6				  Near	 _TEXT:1E73
L17E9				  Near	 _TEXT:1E76
L17F0				  Near	 _TEXT:1E7D
L1808				  Near	 _TEXT:1E95
L180C				  Near	 _TEXT:1E99
L1810				  Near	 _TEXT:1E9D
L1811				  Near	 _TEXT:1EA2
L1812				  Near	 _TEXT:1EA3
L1860				  Near	 _TEXT:1F24
L1864				  Near	 _TEXT:1F2F
L187A				  Near	 _TEXT:1F40
L18A4				  Near	 _TEXT:1F4A
L18B0				  Near	 _TEXT:1F56
L18B6				  Near	 _TEXT:1F5E
L18C0				  Near	 _TEXT:1F69
L18CA				  Near	 _TEXT:1F75
L18D6				  Near	 _TEXT:1F75
L18DC				  Near	 _TEXT:1F80
L19A5				  Near	 _TEXT:1F8E
L19AE				  Near	 _TEXT:1F8F
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 253
Symbol Table



L19BA				  Near	 _TEXT:1F9B
L19D5				  Near	 _TEXT:1FBA
L19FE				  Near	 _TEXT:1FC7
L1A26				  Near	 _TEXT:1FF1
L1A2C				  Near	 _TEXT:1FF7
L1A37				  Near	 _TEXT:2002
L1A3B				  Near	 _TEXT:1A37
L1A45				  Near	 _TEXT:2010
L1A49				  Near	 _TEXT:2014
L1A55				  Near	 _TEXT:2028
L1A5A				  Near	 _TEXT:203C
L1A5D				  Near	 _TEXT:203F
L1A6F				  Near	 _TEXT:2052
L1A70				  Near	 _TEXT:2057
L1A71				  Near	 _TEXT:2058
L1AB0				  Near	 _TEXT:20B8
L1ABA				  Near	 _TEXT:20C2
L1ABE				  Near	 _TEXT:20C6
L1AC0				  Near	 _TEXT:20C8
L1AE9				  Near	 _TEXT:20F5
L1AED				  Near	 _TEXT:2192
L1AF1				  Near	 _TEXT:2196
L1AF3				  Near	 _TEXT:2198
L1AFD				  Near	 _TEXT:21A2
L1B6F				  Near	 _TEXT:21C4
L1B72				  Near	 _TEXT:21DD
L1B93				  Near	 _TEXT:2213
L1BA5				  Near	 _TEXT:224F
L1BE4				  Near	 _TEXT:2274
L1BE6				  Near	 _TEXT:2276
L1BEA				  Near	 _TEXT:227A
L1BEB				  Near	 _TEXT:227E
L1BEC				  Near	 _TEXT:227F
L1C2D				  Near	 _TEXT:22B0
L1C33				  Near	 _TEXT:22B9
L1C33_A				  Near	 _TEXT:22CD
L1C4C				  Near	 _TEXT:22CD
L1CD2				  Near	 _TEXT:23BD
L1CDB				  Near	 _TEXT:23C6
L1CE5				  Near	 _TEXT:23D0
L1CFF				  Near	 _TEXT:23EA
L1D1C				  Near	 _TEXT:2407
L1D28				  Near	 _TEXT:2413
L1D30				  Near	 _TEXT:241B
L1D43				  Near	 _TEXT:242E
L1D51				  Near	 _TEXT:243C
L1D75				  Near	 _TEXT:2460
L1D7A				  Near	 _TEXT:2465
L1D97				  Near	 _TEXT:2482
L1DA7				  Near	 _TEXT:2492
L1DD8				  Near	 _TEXT:24C3
L1DE9				  Near	 _TEXT:24D4
L1E04				  Near	 _TEXT:24EF
L1E2F				  Near	 _TEXT:251A
L1E37				  Near	 _TEXT:2522
L1E3D				  Near	 _TEXT:2528
L1E44				  Near	 _TEXT:252F
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 254
Symbol Table



L1E4B				  Near	 _TEXT:2536
L1E58				  Near	 _TEXT:2543
L1E75				  Near	 _TEXT:2560
L1E80				  Near	 _TEXT:256B
L1EA3				  Near	 _TEXT:258E
L1EAB				  Near	 _TEXT:2596
L1EAF				  Near	 _TEXT:259A
L1EB7				  Near	 _TEXT:25A2
L1EBC				  Near	 _TEXT:25A8
L1EBD				  Near	 _TEXT:25AC
L1EBE				  Near	 _TEXT:25B0
L1EBF				  Near	 _TEXT:25B1
L1EE5				  Near	 _TEXT:25DA
L1EE6				  Near	 _TEXT:25DF
L1EE9				  Near	 _TEXT:25E2
L1EF2				  Near	 _TEXT:25EC
L1EF3				  Near	 _TEXT:25F0
L1EF4				  Near	 _TEXT:25F4
L1EF5				  Near	 _TEXT:25F5
L1F26				  Near	 _TEXT:262A
L1F27				  Near	 _TEXT:262F
L1F2A				  Near	 _TEXT:2632
L1F3D				  Near	 _TEXT:2645
L1F46				  Near	 _TEXT:264E
L1F48				  Near	 _TEXT:2650
L1F4E				  Near	 _TEXT:2656
L1F60				  Near	 _TEXT:2668
L1F62				  Near	 _TEXT:266A
L1F64				  Near	 _TEXT:266C
L1F7D				  Near	 _TEXT:2685
L1F85				  Near	 _TEXT:268D
L1F99				  Near	 _TEXT:26A1
L1F9B				  Near	 _TEXT:26A3
L1F9D				  Near	 _TEXT:26A5
L1FA8				  Near	 _TEXT:26B0
L1FAB				  Near	 _TEXT:26B3
L1FB8				  Near	 _TEXT:26C0
L1FBC				  Near	 _TEXT:26C4
L1FBD				  Near	 _TEXT:26C5
L1FCE				  Near	 _TEXT:26D6
L1FD6				  Near	 _TEXT:26DE
L1FDB				  Near	 _TEXT:26E3
L1FE4				  Near	 _TEXT:26EC
L1FEA				  Near	 _TEXT:26F2
L1FF1				  Near	 _TEXT:26F9
L1FF2				  Near	 _TEXT:26FF
L1FFB				  Near	 _TEXT:270A
L2016				  Near	 _TEXT:2725
L201B				  Near	 _TEXT:272A
L201C				  Near	 _TEXT:2736
L201D				  Number _TEXT:2737
L2027				  Near	 _TEXT:2738
L2029				  Near	 _TEXT:273A
L202C				  Near	 _TEXT:273D
L2054				  Near	 _TEXT:2759
L206C				  Near	 _TEXT:2771
L2075				  Number _TEXT:277A
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 255
Symbol Table



L207A				  Near	 _TEXT:277F
L2088				  Near	 _TEXT:278D
L2093				  Near	 _TEXT:2798
L2097				  Near	 _TEXT:279C
L20A8				  Near	 _TEXT:27D1
L20BD				  Near	 _TEXT:27E6
L20D4				  Near	 _TEXT:27FD
L20DE				  Near	 _TEXT:2868
L20E2				  Near	 _TEXT:---- Extern
L20FD				  Near	 _TEXT:20F9
L210A				  Near	 _TEXT:2106
L2112				  Near	 _TEXT:210E
L2121				  Near	 _TEXT:211D
L2178				  Near	 _TEXT:2174
L2185				  Near	 _TEXT:2181
L2188				  Near	 _TEXT:2184
L218B				  Near	 _TEXT:2187
L2212				  Near	 _TEXT:220E
L278E				  Word	 _TEXT:---- Extern
L2A				  Near	 _TEXT:0CCC
L2A_1				  Near	 _TEXT:0CCE
L2A_2				  Near	 _TEXT:0CD9
LOADORRUNOVERLAY		  Near	 _TEXT:2346
LOADRUNOVERLAY			  Near	 _TEXT:2339
LOADRUNOVERLAYREC		  Near	 _TEXT:232C
LST				  Near	 _TEXT:0184
LSTOUTPTR			  Near	 _TEXT:0171
L_ABS				  Near	 _TEXT:0A61
L_ABS1				  Near	 _TEXT:0C10
L_ADD				  Near	 _TEXT:0A74
L_AND				  Near	 _TEXT:0A1E
L_CM0				  Near	 _TEXT:0A00
L_CMP				  Near	 _TEXT:09F4
L_CMP1				  Near	 _TEXT:0A15
L_DDAT				  Near	 _TEXT:0B12
L_DIV				  Near	 _TEXT:0B16
L_DIV1				  Near	 _TEXT:0B6C
L_DIV10				  Near	 _TEXT:0AEF
L_DIV101			  Near	 _TEXT:0AF4
L_DIV102			  Near	 _TEXT:0B06
L_DIV_0				  Near	 _TEXT:0B45
L_DIV_2				  Near	 _TEXT:0B8B
L_DIV_3				  Near	 _TEXT:0B97
L_DIV_4				  Near	 _TEXT:0BAB
L_DIV_5				  Near	 _TEXT:0BBE
L_DIV_6				  Near	 _TEXT:0BC2
L_DIV_7				  Near	 _TEXT:0BCF
L_EQ				  Near	 _TEXT:0883
L_FOR_DOWNTO			  Near	 _TEXT:0851
L_FOR_TO			  Near	 _TEXT:0851
L_GT				  Near	 _TEXT:08E8
L_GTE				  Near	 _TEXT:08B6
L_LS				  Near	 _TEXT:0900
L_LSE				  Near	 _TEXT:08CF
L_M2				  Near	 _TEXT:0D60
L_MDAT				  Near	 _TEXT:0A90
L_MOD				  Near	 _TEXT:0B2C
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 256
Symbol Table



L_MUL				  Near	 _TEXT:0A9A
L_MUL1				  Near	 _TEXT:0ACC
L_MUL11				  Near	 _TEXT:0ACF
L_MUL2				  Near	 _TEXT:0AD1
L_MUL3				  Near	 _TEXT:0AD9
L_MUL4				  Near	 _TEXT:0AE6
L_NEG				  Near	 _TEXT:0A64
L_NEQ				  Near	 _TEXT:089E
L_NOT				  Near	 _TEXT:0A54
L_OR				  Near	 _TEXT:0A30
L_PRED				  Near	 _TEXT:0873
L_R				  Near	 _TEXT:15A0
L_R_SH				  Near	 _TEXT:15AF
L_SHL				  Near	 _TEXT:0BD5
L_SHL_1				  Near	 _TEXT:0BDA
L_SHL_2				  Near	 _TEXT:0BE5
L_SHL_3				  Near	 _TEXT:0BE9
L_SHR				  Near	 _TEXT:0BF1
L_SHR_1				  Near	 _TEXT:0BF6
L_SHR_2				  Near	 _TEXT:0C01
L_SHR_3				  Near	 _TEXT:0C05
L_SQR				  Near	 _TEXT:0A94
L_SUB				  Near	 _TEXT:0A7F
L_SUCC				  Near	 _TEXT:087C
L_XOR				  Near	 _TEXT:0A42
MAGICNUMBER			  Near	 _TEXT:0103
MEMMAN				  Near	 _TEXT:057E
MEMMNVER			  Near	 _TEXT:057F
MESSAGESFORTILBURG		  Near	 _TEXT:0000
MSX				  Near	 _TEXT:0000
MSXDOS				  Number 0005
MULTREAL1			  Near	 _TEXT:0FE3
MULTREAL2			  Near	 _TEXT:0FEA
MULTREAL3			  Near	 _TEXT:0FF5
NEEDEDGIOSVERSION		  Number 0222
NEEDEDMEMMANVERSION		  Number 0204
OPENFILE			  Near	 _TEXT:---- Extern
OUTPUT				  Near	 _TEXT:018A
OVERLAYCOMPAREID		  Near	 _TEXT:22DF
OVERLAYCOMPAREIDEND		  Near	 _TEXT:22F3
OVERLAYDATALEN			  Near	 _TEXT:01C0
OVERLAYINFOADDRESS		  Near	 _TEXT:01BA
OVERLAYLOAD			  Near	 _TEXT:238E
OVERLAYLOADDEFAULT		  Near	 _TEXT:2391
OVERLAYLOADONLY			  Near	 _TEXT:01B9
OVERLAYLOADPTR			  Near	 _TEXT:238E
OVERLAYPOS			  Near	 _TEXT:01BC
OVERLAYREC1			  Near	 _TEXT:2301
OVERLAYSAVEPARAMS		  Near	 _TEXT:22F5
PARSENAME			  Near	 _TEXT:---- Extern
PRT_LONG			  Near	 _TEXT:1DEC
PRT_LONG1			  Near	 _TEXT:1DFF
PRT_LONG11			  Near	 _TEXT:1E0E
PRT_LONG2			  Near	 _TEXT:1E10
READFILE			  Near	 _TEXT:---- Extern
RECURPTR			  Near	 _TEXT:0194
REDIRECTIONFLAG			  Near	 _TEXT:046C
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 257
Symbol Table



RENAMEFILE			  Near	 _TEXT:---- Extern
RENAMEFILE_LIB			  Near	 _TEXT:2225
RESERRORHANDLER			  Near	 _TEXT:---- Extern
RUNGIOS				  Near	 _TEXT:057B
RUNOVERLAY_PROGRAM		  Near	 _TEXT:238B
RUNOVERLAY_PROGRAM1		  Near	 _TEXT:238D
RUNTIME				  Near	 _TEXT:0000
R_L				  Near	 _TEXT:15C4
R_L_READY			  Near	 _TEXT:15E2
R_L_SH				  Near	 _TEXT:15CE
SETERRORHANDLER			  Near	 _TEXT:---- Extern
SETUSERERROR62			  Near	 _TEXT:195D
TAB110100			  Near	 _TEXT:03BA
TSRCALL				  Near	 _TEXT:0507
TSRCALL1			  Near	 _TEXT:050B
TSRNAME				  Near	 _TEXT:0522
TSRPRESENT			  Near	 _TEXT:052E
TSRPRESENT1			  Near	 _TEXT:0545
TSRPRESENT2			  Near	 _TEXT:054F
TSRPRESENT3			  Near	 _TEXT:0550
TSRPRESENT4			  Near	 _TEXT:0559
TURBOPASCALVERSION		  Near	 _TEXT:0107
USELIB				  Near	 _TEXT:0000
USRINPTR			  Near	 _TEXT:017D
USROUTPTR			  Near	 _TEXT:017A
WRITEFILE			  Near	 _TEXT:---- Extern
_AUXINPTR			  Near	 _TEXT:0177
_AUXOUTPTR			  Near	 _TEXT:0174
_BUFLEN				  Near	 _TEXT:018C
_CBREAK				  Near	 _TEXT:0190
_CONINPTR			  Near	 _TEXT:016B
_CONOUTPTR			  Near	 _TEXT:016E
_CONSTPTR			  Near	 _TEXT:0168
_DOSERRORHANDLEROFF		  Near	 _TEXT:2887
_DOSERRORHANDLERON		  Near	 _TEXT:2884
_ERROREXIT			  Near	 _TEXT:286F
_ERRORPTR			  Near	 _TEXT:018D
_GETERROR_LIB			  Near	 _TEXT:2703
_GIOSOK				  Near	 _TEXT:0581
_GIOSVER			  Near	 _TEXT:0582
_HEAPPTR			  Near	 _TEXT:0192
_L00B8				  Near	 _TEXT:0180
_L00BA				  Near	 _TEXT:0182
_L00BE				  Near	 _TEXT:0186
_L00C0				  Near	 _TEXT:0188
_L021D				  Near	 _TEXT:02D0
_L023E				  Near	 _TEXT:02F1
_L0259				  Near	 _TEXT:030C
_L0262				  Near	 _TEXT:0315
_L026B				  Near	 _TEXT:031E
_L0284				  Near	 _TEXT:0337
_L0299				  Near	 _TEXT:034C
_L030A				  Near	 _TEXT:03BD
_L0310				  Near	 _TEXT:03C3
_L0364				  Near	 _TEXT:0420
_L04D4				  Near	 _TEXT:06C3
_L0508				  Near	 _TEXT:06F4
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 258
Symbol Table



_L0522				  Near	 _TEXT:070E
_L052C				  Near	 _TEXT:0717
_L053A				  Near	 _TEXT:0725
_L054D				  Near	 _TEXT:0738
_L055D				  Near	 _TEXT:0748
_L0581				  Near	 _TEXT:076C
_L0591				  Near	 _TEXT:077C
_L059B				  Near	 _TEXT:0786
_L05D1				  Near	 _TEXT:07BC
_L05E2				  Near	 _TEXT:07CD
_L0601				  Near	 _TEXT:07EC
_L0612				  Near	 _TEXT:07FD
_L0623				  Near	 _TEXT:080E
_L0638				  Near	 _TEXT:0823
_L064C				  Near	 _TEXT:0837
_L0656				  Near	 _TEXT:0841
_L0666				  Near	 _TEXT:0851
_L0676				  Near	 _TEXT:0861
_L067F				  Near	 _TEXT:086A
_L0688				  Near	 _TEXT:0889
_L068D				  Near	 _TEXT:088F
_L0692				  Near	 _TEXT:0895
_L069B				  Near	 _TEXT:08A3
_L06A0				  Near	 _TEXT:08A8
_L06A5				  Near	 _TEXT:08AD
_L06AE				  Near	 _TEXT:08BB
_L06B3				  Near	 _TEXT:08C0
_L06B8				  Near	 _TEXT:08C5
_L06C2				  Near	 _TEXT:08D4
_L06C7				  Near	 _TEXT:08D9
_L06CC				  Near	 _TEXT:08DE
_L06D6				  Near	 _TEXT:08ED
_L06DB				  Near	 _TEXT:08F2
_L06E0				  Near	 _TEXT:08F7
_L06E9				  Near	 _TEXT:0905
_L06EE				  Near	 _TEXT:090A
_L06F3				  Near	 _TEXT:090F
_L06F5				  Near	 _TEXT:0911
_L070F				  Near	 _TEXT:092B
_L073B				  Near	 _TEXT:0999
_L0745				  Near	 _TEXT:09A3
_L074E				  Near	 _TEXT:09B0
_L0756				  Near	 _TEXT:09B8
_L0780				  Near	 _TEXT:09E2
_L0783				  Near	 _TEXT:09E5
_L078B				  Near	 _TEXT:09ED
_L083D				  Near	 _TEXT:0D66
_L086B				  Near	 _TEXT:0D94
_L08A3				  Near	 _TEXT:0DCC
_L08B2				  Near	 _TEXT:0DDB
_L08F3				  Near	 _TEXT:0E1C
_L0920				  Near	 _TEXT:0E49
_L0996				  Near	 _TEXT:0EBF
_L09A2				  Near	 _TEXT:0ECB
_L09E9				  Near	 _TEXT:0F12
_L09F2				  Near	 _TEXT:0F1B
_L09F7				  Near	 _TEXT:0F20
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 259
Symbol Table



_L09FA				  Near	 _TEXT:0F23
_L09FF				  Near	 _TEXT:0F28
_L0BFD				  Near	 _TEXT:1171
_L0C34				  Near	 _TEXT:11A8
_L0C46				  Near	 _TEXT:11BA
_L0C7F				  Near	 _TEXT:11F3
_L0C87				  Near	 _TEXT:11FB
_L0D2B				  Near	 _TEXT:129F
_L0DB6				  Near	 _TEXT:132A
_L0E46				  Near	 _TEXT:13BA
_L0FB4				  Near	 _TEXT:1528
_L0FD0				  Near	 _TEXT:1544
_L0FDE				  Near	 _TEXT:1552
_L1008				  Near	 _TEXT:1581
_L12DD				  Near	 _TEXT:18AA
_L12E1				  Near	 _TEXT:18AE
_L12FC				  Near	 _TEXT:18C9
_L1300				  Near	 _TEXT:18CD
_L1318				  Near	 _TEXT:18E5
_L1326				  Near	 _TEXT:18F3
_L1333				  Near	 _TEXT:1900
_L134F				  Near	 _TEXT:191C
_L136F				  Near	 _TEXT:193C
_L1370				  Near	 _TEXT:193D
_L13FE				  Near	 _TEXT:19D6
_L13FF				  Near	 _TEXT:19D7
_L1469				  Near	 _TEXT:1A45
_L149B				  Near	 _TEXT:1A77
_L14A9				  Near	 _TEXT:1A85
_L14BA				  Near	 _TEXT:1A96
_L14CB				  Near	 _TEXT:1AA7
_L14CC				  Near	 _TEXT:1AAB
_L1644				  Near	 _TEXT:1C67
_L164D				  Near	 _TEXT:1C70
_L164E				  Near	 _TEXT:1C74
_L1671				  Near	 _TEXT:1C98
_L1672				  Near	 _TEXT:1CBE
_L168E				  Near	 _TEXT:1CDA
_L16AB				  Near	 _TEXT:1CF7
_L1722				  Near	 _TEXT:1D83
_L1726				  Near	 _TEXT:1D87
_L1779				  Near	 _TEXT:1DDA
_L178B				  Near	 _TEXT:1E18
_L17AA				  Near	 _TEXT:1E37
_L17BA				  Near	 _TEXT:1E47
_L17CD				  Near	 _TEXT:1E5A
_L17D7				  Near	 _TEXT:1E64
_L17DC				  Near	 _TEXT:1E69
_L17E1				  Near	 _TEXT:1E6E
_L17E6				  Near	 _TEXT:1E73
_L1810				  Near	 _TEXT:1E9D
_L1811				  Near	 _TEXT:1EA2
_L187A				  Near	 _TEXT:1F40
_L18A4				  Near	 _TEXT:1F4A
_L18B6				  Near	 _TEXT:1F5E
_L18DC				  Near	 _TEXT:1F80
_L19A5				  Near	 _TEXT:1F8E
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 260
Symbol Table



_L19D5				  Near	 _TEXT:1FBA
_L1A49				  Near	 _TEXT:2014
_L1A55				  Near	 _TEXT:2028
_L1A5D				  Near	 _TEXT:203F
_L1A6F				  Near	 _TEXT:2052
_L1A70				  Near	 _TEXT:2057
_L1AB0				  Near	 _TEXT:20B8
_L1ABA				  Near	 _TEXT:20C2
_L1ABE				  Near	 _TEXT:20C6
_L1AED				  Near	 _TEXT:2192
_L1AF1				  Near	 _TEXT:2196
_L1B6F				  Near	 _TEXT:21C4
_L1B93				  Near	 _TEXT:2213
_L1BA5				  Near	 _TEXT:224F
_L1BEA				  Near	 _TEXT:227A
_L1BEB				  Near	 _TEXT:227E
_L1CDB				  Near	 _TEXT:23C6
_L1CE5				  Near	 _TEXT:23D0
_L1D7A				  Near	 _TEXT:2465
_L1E3D				  Near	 _TEXT:2528
_L1E44				  Near	 _TEXT:252F
_L1EA3				  Near	 _TEXT:258E
_L1EAB				  Near	 _TEXT:2596
_L1EBC				  Near	 _TEXT:25A8
_L1EBD				  Near	 _TEXT:25AC
_L1EBE				  Near	 _TEXT:25B0
_L1EF2				  Near	 _TEXT:25EC
_L1EF3				  Near	 _TEXT:25F0
_L1EF4				  Near	 _TEXT:25F4
_L1F48				  Near	 _TEXT:2650
_L1F4E				  Near	 _TEXT:2656
_L1F64				  Near	 _TEXT:266C
_L1F7D				  Near	 _TEXT:2685
_L1F9B				  Near	 _TEXT:26A3
_L1FDB				  Near	 _TEXT:26E3
_L1FE4				  Near	 _TEXT:26EC
_L1FEA				  Near	 _TEXT:26F2
_L1FF1				  Near	 _TEXT:26F9
_L201B				  Near	 _TEXT:272A
_L20D4				  Near	 _TEXT:27FD
_LOADRUNOVERLAY			  Near	 _TEXT:2339
_LOADRUNOVERLAYREC		  Near	 _TEXT:232C
_LST				  Near	 _TEXT:0184
_LSTOUTPTR			  Near	 _TEXT:0171
_L_ABS				  Near	 _TEXT:0A61
_L_ADD				  Near	 _TEXT:0A74
_L_AND				  Near	 _TEXT:0A1E
_L_DIV				  Near	 _TEXT:0B16
_L_EQ				  Near	 _TEXT:0883
_L_FOR_DOWNTO			  Near	 _TEXT:0851
_L_FOR_TO			  Near	 _TEXT:0851
_L_GT				  Near	 _TEXT:08E8
_L_GTE				  Near	 _TEXT:08B6
_L_LS				  Near	 _TEXT:0900
_L_LSE				  Near	 _TEXT:08CF
_L_MOD				  Near	 _TEXT:0B2C
_L_MUL				  Near	 _TEXT:0A9A
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 261
Symbol Table



_L_NEG				  Near	 _TEXT:0A64
_L_NEQ				  Near	 _TEXT:089E
_L_NOT				  Near	 _TEXT:0A54
_L_OR				  Near	 _TEXT:0A30
_L_PRED				  Near	 _TEXT:0873
_L_R				  Near	 _TEXT:15A0
_L_SHL				  Near	 _TEXT:0BD5
_L_SHR				  Near	 _TEXT:0BF1
_L_SQR				  Near	 _TEXT:0A94
_L_SUB				  Near	 _TEXT:0A7F
_L_SUCC				  Near	 _TEXT:087C
_L_XOR				  Near	 _TEXT:0A42
_MEMMAN				  Near	 _TEXT:057E
_MEMMNVER			  Near	 _TEXT:057F
_OUTPUT				  Near	 _TEXT:018A
_OVERLAYLOADPTR			  Near	 _TEXT:238E
_OVERLAYREC1			  Near	 _TEXT:2301
_PRT_LONG			  Near	 _TEXT:1DEC
_RECURPTR			  Near	 _TEXT:0194
_RENAMEFILE_LIB			  Near	 _TEXT:2225
_RUNGIOS			  Near	 _TEXT:057B
_R_L				  Near	 _TEXT:15C4
_TSRPRESENT			  Near	 _TEXT:052E
_USRINPTR			  Near	 _TEXT:017D
_USROUTPTR			  Near	 _TEXT:017A

Macro Name

DC
GLOBAL2
GLOBALS
OFF_HL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
_TEXT				  16  28AE Word	  Public  CODE
Turbo Assembler	 Version 3.2	    03/26/99 21:36:59	    Page 262
Error Summary



*Warning* LIBDEFS.INC(38) Global type doesn't match symbol type: L0080
