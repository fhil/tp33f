Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 1
msx_asm\tur_slib.ASM



      1	    0000				  .model small
      2	    0000				  .code
      3						  .486 ; .8086
      4
      5						  include msx_gen\slib.mc
1     6					 ;	   .Z80
1     7
1     8	    0000			 MSX:
1     9
1    10		  =0005			 MSXDOS	  EQU 5
1    11
1    12	    0000			 FASTWRITE:
1    13	    0000  00				  DB 0
1    14
1    15						  INCLUDE STDIO.INC
2    16		  =0004			 FIL_HDR  EQU 4			     ; length of FILE header
2    17
2    18						  include ..\library\fileio.inc
3    19
3    20					 ; FILEIO.MAC global definitions file
3    21
3    22						  GLOBAL DOS2Present:NEAR
3    23						  GLOBAL InitFileIO:NEAR
3    24						  GLOBAL GetError:NEAR
3    25						  GLOBAL SetErrorHandler:NEAR
3    26						  GLOBAL ResErrorHandler:NEAR
3    27
3    28						  GLOBAL ParseName:NEAR
3    29						  GLOBAL SetExtension:NEAR
3    30
3    31						  GLOBAL CreateFile:NEAR
3    32						  GLOBAL OpenFile:NEAR
3    33						  GLOBAL ReadFile:NEAR
3    34						  GLOBAL WriteFile:NEAR
3    35						  GLOBAL CloseFile:NEAR
3    36						  GLOBAL FileSeek:NEAR
3    37						  GLOBAL FilePos:NEAR
3    38						  GLOBAL FileSize:NEAR
3    39						  GLOBAL DeleteFile:NEAR     ; or subdirectory
3    40						  GLOBAL RenameFile:NEAR     ; or subdirectory
3    41						  GLOBAL GetCurrentDirectory:NEAR
3    42
3    43						  GLOBAL FatalError:NEAR     ; 0 = no fatal error, NonZero = fatal
3    44						  GLOBAL ErrorNumber:NEAR    ; 0 = no error, NonZero = DOS 2 error code
3    45
3    46		  =0024			 FCB_LEN	   EQU 36	     ; length of an FCB
3    47
3    48		  =0000			 FCB_DRIVE	   EQU 0	     ; Drive Number
3    49		  =0001			 FCB_NAME	   EQU 1	     ; Name
3    50		  =0009			 FCB_EXT	   EQU 9	     ; Extension
3    51		  =000E			 FCB_RECSIZE	   EQU 0EH	     ; Record Size (word)
3    52		  =0010			 FCB_FILESIZE	   EQU 10H	     ; File Size (long)
3    53		  =0021			 FCB_FILEPOS	   EQU 21H	     ; File Position (long)
3    54
3    55
2    56
2    57		  =0000			 FIB_F	  EQU 0			     ; Flags byte
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 2
msx_asm\tur_slib.ASM



2    58		  =0001			 FIB_CHR  EQU 1			     ; Character buffer
2    59		  =0002			 FIB_PTR  EQU 2			     ; Sector buffer pointer
2    60		  =0004			 FIB_NUM  EQU 4			     ; Number of records
2    61		  =0006			 FIB_REC  EQU 6			     ; Record length
2    62		  =0008			 FIB_CUR  EQU 8			     ; Current record
2    63		  =000C			 FIB_FCB  EQU 12		     ; First byte of FCB
2    64		  =0030			 FIB_BUF  EQU 48		     ; First byte of sector buffer
2    65
2    66		  =00B0			 FIB_LEN  EQU FIB_BUF+128	     ; total length of a complete FIB
2    67
2    68		  =0000			 DOS_FLG  EQU 0			     ; Flags byte
2    69		  =0001			 DOS_CHR  EQU 1			     ; Character buffer
2    70		  =0002			 DOS_PTR  EQU 2			     ; Sector buffer pointer
2    71		  =0004			 DOS_BLEN EQU 4			     ; Sector buffer length
2    72		  =0006			 DOS_NUM  EQU 6			     ; Number of records
2    73		  =000A			 DOS_REC  EQU 10		     ; Record length
2    74		  =000C			 DOS_CUR  EQU 12		     ; Current record
2    75		  =0010			 DOS_FCB  EQU 16		     ; First byte FCB/Handle structure
2    76		  =0051			 DOS_BUF  EQU (16 + 65)		     ; First byte of sector buffer
2    77
2    78		  =00D1			 DOS_LEN  EQU (DOS_BUF + 128)
2    79
2    80						  include ..\library\macros.inc
3    81					 OFF_HL	  MACRO	CURRENT,NEW
3    82						  LOCAL	DIF
3    83					 DIF	  EQU (NEW)-(CURRENT)
3    84
3    85					 IFDEF MSX
3    86						  IFE DIF-1
3    87						   DB 23h; INC HL
3    88						  ELSE
3    89						   IFE DIF-2
3    90						    DB 23h; INC	HL
3    91						    DB 23h; INC	HL
3    92						   ELSE
3    93						    IFE	DIF-3
3    94						     DB	23h; INC HL
3    95						     DB	23h; INC HL
3    96						     DB	23h; INC HL
3    97						    ELSE
3    98						     IFE DIF+1
3    99						      DB 2bh; DEC HL
3   100						     ELSE
3   101						      IFE DIF+2
3   102						       DB 2bh; DEC HL
3   103						       DB 2bh; DEC HL
3   104						      ELSE
3   105						       IFE DIF+3
3   106							DB 2bh;	DEC HL
3   107							DB 2bh;	DEC HL
3   108							DB 2bh;	DEC HL
3   109						       ELSE
3   110							IFE DIF
3   111							ELSE
3   112							 DB 0D5H ; PUSH	DE
3   113							 DB 11H
3   114							 DW DIF
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 3
msx_asm\tur_slib.ASM



3   115							 DB 19H	 ; ADD HL,DE
3   116							 DB 0D1H ; POP DE
3   117							ENDIF
3   118						       ENDIF
3   119						      ENDIF
3   120						     ENDIF
3   121						    ENDIF
3   122						   ENDIF
3   123						  ENDIF
3   124					 ELSE
3   125						  IFE DIF-1
3   126						   INC bx
3   127						  ELSE
3   128						   IFE DIF-2
3   129						    INC	bx
3   130						    INC	bx
3   131						   ELSE
3   132						    IFE	DIF-3
3   133						     INC bx
3   134						     INC bx
3   135						     INC bx
3   136						    ELSE
3   137						     IFE DIF+1
3   138						      DEC bx
3   139						     ELSE
3   140						      IFE DIF+2
3   141						       DEC bx
3   142						       DEC bx
3   143						      ELSE
3   144						       IFE DIF+3
3   145							DEC bx
3   146							DEC bx
3   147							DEC bx
3   148						       ELSE
3   149							IFE DIF
3   150							ELSE
3   151							 push dx
3   152							 mov dx,DIF
3   153							 ADD bx,dx
3   154							 pop dx
3   155							ENDIF
3   156						       ENDIF
3   157						      ENDIF
3   158						     ENDIF
3   159						    ENDIF
3   160						   ENDIF
3   161						  ENDIF
3   162					 ENDIF
3   163
3   164						  ENDM
3   165
3   166					 dc	 macro string
3   167
3   168						 strsize sizestr <string>
3   169						 pos = 0
3   170
3   171						 irpc parameter,string
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 4
msx_asm\tur_slib.ASM



3   172							 pos = pos + 1
3   173
3   174							 if pos	EQ strsize - 1
3   175							 db '&parameter' + 80h
3   176							 endif
3   177
3   178							 if pos	GT 1
3   179								 if pos	LT strsize -1
3   180									 db '&parameter'
3   181								 endif
3   182							 endif
3   183
3   184						 endm
3   185
3   186						 endm
3   187
3   188
2   189
1   190
1   191						  INCLUDE LIBDEFS.INC
2   192
2   193
2   194					 GLOBAL2  MACRO	NAME
2   195						  GLOBAL NAME :	NEAR
2   196
2   197						  IFDEF	MSX
2   198						  IFDEF	RUNTIME
2   199						  GLOBAL _&NAME	: NEAR
2   200					 _&NAME:
2   201						  ELSE
2   202							   _&NAME EQU NAME
2   203						  ENDIF
2   204						  ELSE
2   205							   _&NAME EQU NAME
2   206						  ENDIF
2   207
2   208						  ENDM
2   209
2   210					 GLOBALS MACRO NAMES
2   211
2   212						  IRP NAME,<NAMES>
2   213							   GLOBAL2 <NAME>
2   214						  ENDM
2   215
2   216						  ENDM
2   217
2   218						  GLOBAL L0004:NEAR	     ; def. init.mac
2   219						  GLOBAL L0006:NEAR	     ; def. init.mac
2   220						  GLOBAL L005C:NEAR	     ; def. init.mac
2   221						  GLOBAL L005D:NEAR	     ; def. init.mac
2   222						  GLOBAL L0065:NEAR	     ; def. init.mac
2   223						  GLOBAL L0066:NEAR	     ; def. init.mac
2   224						  GLOBAL L006C:NEAR	     ; def. init.mac
2   225						  GLOBAL L0080:NEAR	     ; def. init.mac
2   226						  GLOBAL L00CE:NEAR	     ; def. init.mac
2   227						  GLOBAL L00E0:NEAR	     ; def. init.mac
2   228						  GLOBAL L0100:NEAR	     ; def. init.mac
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 5
msx_asm\tur_slib.ASM



2   229						  GLOBAL L0101:NEAR	     ; def. init.mac
2   230						  GLOBAL L0168:NEAR	     ; def. init.mac
2   231						  GLOBAL L0169:NEAR	     ; def. init.mac
2   232						  GLOBAL L01AE:NEAR	     ; def. init.mac
2   233						  GLOBAL L01B4:NEAR	     ; def. init.mac
2   234						  GLOBAL L01BC:NEAR	     ; def. init.mac
2   235						  GLOBAL L01D0:NEAR	     ; def. init.mac
2   236						  GLOBAL L01E1:NEAR	     ; def. init.mac
2   237						  GLOBAL L01E8:NEAR	     ; def. init.mac
2   238						  GLOBAL L01FA:NEAR	     ; def. init.mac
2   239						  GLOBAL L0200:NEAR	     ; def. init.mac
2   240						  GLOBAL L023E:NEAR	     ; def. init.mac
2   241						  GLOBAL L0259:NEAR	     ; def. init.mac
2   242						  GLOBAL L0262:NEAR	     ; def. init.mac
2   243						  GLOBAL L026B:NEAR	     ; def. init.mac
2   244						  GLOBAL L0284:NEAR	     ; def. init.mac
2   245						  GLOBAL L0299:NEAR	     ; def. init.mac
2   246						  GLOBAL L02A2:NEAR	     ; def. init.mac
2   247						  GLOBAL L030A:NEAR	     ; def. init.mac
2   248						  GLOBAL L0310:NEAR	     ; def. init.mac
2   249						  GLOBAL L0364:NEAR	     ; def. init.mac
2   250						  GLOBAL L03C9:NEAR	     ; def. init.mac
2   251						  GLOBAL L03E1:NEAR	     ; def. init.mac
2   252						  GLOBAL L03EE:NEAR	     ; def. init.mac
2   253						  GLOBAL L0406:NEAR	     ; def. init.mac
2   254						  GLOBAL L04A6:NEAR	     ; def. init.mac
2   255						  GLOBAL L04B4:NEAR	     ; def. init.mac
2   256						  GLOBAL L04D2:NEAR	     ; def. init.mac
2   257						  GLOBAL L04AF:NEAR	     ; def. init.mac
2   258						  GLOBAL L0581:NEAR	     ; def. init.mac
2   259						  GLOBAL L0591:NEAR	     ; def. init.mac
2   260						  GLOBAL L059B:NEAR	     ; def. init.mac
2   261						  GLOBAL L0612:NEAR	     ; def. init.mac
2   262						  GLOBAL L0783:NEAR	     ; def. init.mac
2   263						  GLOBAL L07F7:NEAR	     ; def. init.mac
2   264						  GLOBAL L1008:NEAR	     ; def. init.mac
2   265						  GLOBAL L11A3:NEAR	     ; def. init.mac
2   266						  GLOBAL L149B:NEAR	     ; def. init.mac
2   267						  GLOBAL L14E8:NEAR	     ; def. init.mac
2   268						  GLOBAL L1726:NEAR	     ; def. init.mac
2   269						  GLOBAL L20E2:NEAR	     ; def. init.mac
2   270
2   271						  GLOBAL CON1OUTPTR:NEAR     ; def. init.mac
2   272						  GLOBAL CONSTPTR:NEAR	     ; def. init.mac
2   273						  GLOBAL A2L:NEAR	     ; def. init.mac
2   274						  GLOBAL L_NEG:NEAR	     ; def. init.mac
2   275						  GLOBAL L_R:NEAR	     ; def. init.mac
2   276						  GLOBAL PREFIX:NEAR	     ; def. init.mac
2   277
2   278						  GLOBAL DEF_TYPE:NEAR	     ; def. compiler.mac
2   279						  GLOBAL L72E1:NEAR	     ; def. compiler.mac, no conditon error
2   280						  GLOBAL L7B5C:NEAR	     ; def. compiler.mac
2   281						  GLOBAL L7B62:NEAR	     ; def. compiler.mac
2   282
2   283						  GLOBAL L7BF5:NEAR	     ; def. end.mac
2   284
2   285						  GLOBAL O_BYTE:NEAR,O_CALHL:NEAR,O_CODE:NEAR,O_HL:NEAR
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 6
msx_asm\tur_slib.ASM



2   286						  GLOBAL O_JPHL:NEAR,O_LDDE:NEAR,O_LDHL:NEAR,O_PSHHL:NEAR
2   287
2   288						  GLOBAL ParseByteVar:NEAR   ; def. glib.mac
2   289						  GLOBAL ParseIntVar:NEAR    ; def. glib.mac
2   290						  GLOBAL ParseIntError:NEAR  ; def. glib.mac
2   291						  GLOBAL ParseStrVAR64:NEAR  ; def. glib.mac
2   292						  GLOBAL ParseVAR64:NEAR     ; def. glib.mac
2   293
2   294						  GLOBAL TableIndex2:NEAR    ; def. compiler.mac
2   295
2   296						  ; GIOS Procedures
2   297						  GLOBAL P_DELETEFILE:NEAR   ; def. glib.mac
2   298						  GLOBAL P_DEFINEPICTURE:NEAR; def. glib.mac
2   299						  GLOBAL P_PFILLSHAPE:NEAR   ; def. glib.mac
2   300						  GLOBAL P_PPAINT:NEAR	     ; def. glib.mac
2   301						  GLOBAL P_MEMEXPAND:NEAR    ; def. glib.mac
2   302						  GLOBAL P_MEMTOVRAM:NEAR    ; def. glib.mac
2   303						  GLOBAL P_MEMLOADPICTURE:NEAR;	def. glib.mac
2   304						  GLOBAL P_MEMUNCRUNCH:NEAR  ; def. glib.mac
2   305						  GLOBAL P_MEMSAVEPICTURE:NEAR;	def. glib.mac
2   306						  GLOBAL P_SETCLIPPING:NEAR  ; def. glib.mac
2   307						  GLOBAL P_SETVIEWPORT:NEAR  ; def. glib.mac
2   308						  GLOBAL P_GETVIEWPORT:NEAR  ; def. glib.mac
2   309						  GLOBAL P_MEMCOPY:NEAR	     ; def. glib.mac
2   310						  GLOBAL P_BLOAD:NEAR	     ; def. glib.mac
2   311						  GLOBAL P_BSAVE:NEAR	     ; def. glib.mac
2   312						  GLOBAL P_CHANGECOLOR:NEAR  ; def. glib.mac
2   313						  GLOBAL P_CHANGESCREEN:NEAR ; def. glib.mac
2   314						  GLOBAL P_CIRCLE:NEAR	     ; def. glib.mac
2   315						  GLOBAL P_CLEARMEM:NEAR     ; def. glib.mac
2   316						  GLOBAL P_DATE:NEAR	     ; def. glib.mac
2   317						  GLOBAL P_DISPLAYPAGE:NEAR  ; def. glib.mac
2   318						  GLOBAL P_ELLIPSE:NEAR	     ; def. glib.mac
2   319						  GLOBAL P_EXPAND:NEAR	     ; def. glib.mac
2   320						  GLOBAL P_FASTBOX:NEAR	     ; def. glib.mac
2   321						  GLOBAL P_FASTCOPY:NEAR     ; def. glib.mac
2   322						  GLOBAL P_FILLBOX:NEAR	     ; def. glib.mac
2   323						  GLOBAL P_FILLSHAPE:NEAR    ; def. glib.mac
2   324						  GLOBAL P_FILLSPRITE:NEAR   ; def. glib.mac
2   325						  GLOBAL P_GCOPY:NEAR	     ; def. glib.mac
2   326						  GLOBAL P_GETDOSVERSION:NEAR; def. glib.mac
2   327						  GLOBAL P_LINE:NEAR	     ; def. glib.mac
2   328						  GLOBAL P_LOADPICTURE:NEAR  ; def. glib.mac
2   329						  GLOBAL P_LOADVRAM:NEAR     ; def. glib.mac
2   330						  GLOBAL P_MEMREADFILE:NEAR  ; def. glib.mac
2   331						  GLOBAL P_MEMWRITEFILE:NEAR ; def. glib.mac
2   332						  GLOBAL P_MEMAPPENDFILE:NEAR; def. glib.mac
2   333						  GLOBAL P_MOVEVRAM:NEAR     ; def. glib.mac
2   334						  GLOBAL P_PAINT:NEAR	     ; def. glib.mac
2   335						  GLOBAL P_PSET:NEAR	     ; def. glib.mac
2   336						  GLOBAL P_PUTSPRITE:NEAR    ; def. glib.mac
2   337						  GLOBAL P_READMEM:NEAR	     ; def. glib.mac
2   338						  GLOBAL P_READSECTOR:NEAR   ; def. glib.mac
2   339						  GLOBAL P_SAVEPICTURE:NEAR  ; def. glib.mac
2   340						  GLOBAL P_SAVEVRAM:NEAR     ; def. glib.mac
2   341						  GLOBAL P_SCREEN:NEAR	     ; def. glib.mac
2   342						  GLOBAL P_SCREENOFF:NEAR    ; def. glib.mac
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 7
msx_asm\tur_slib.ASM



2   343						  GLOBAL P_SCREENON:NEAR     ; def. glib.mac
2   344						  GLOBAL P_SETCHANNEL:NEAR   ; def. glib.mac
2   345						  GLOBAL P_SOUND:NEAR	     ; def. glib.mac
2   346						  GLOBAL P_SPRITEATTRIBUTEADDRESS:NEAR	; def. glib.mac
2   347						  GLOBAL P_SPRITECOLOR:NEAR  ; def. glib.mac
2   348						  GLOBAL P_SPRITEPATTERN:NEAR; def. glib.mac
2   349						  GLOBAL P_SPRITEPATTERNADDRESS:NEAR	; def. glib.mac
2   350						  GLOBAL P_SPRITESIZE:NEAR   ; def. glib.mac
2   351						  GLOBAL P_SPRITESOFF:NEAR   ; def. glib.mac
2   352						  GLOBAL P_SPRITESON:NEAR    ; def. glib.mac
2   353						  GLOBAL P_TIME:NEAR	     ; def. glib.mac
2   354						  GLOBAL P_UNCRUNCH:NEAR     ; def. glib.mac
2   355						  GLOBAL P_VPOKE:NEAR	     ; def. glib.mac
2   356						  GLOBAL P_WAITVDP:NEAR	     ; def. glib.mac
2   357						  GLOBAL P_WRITEMEM:NEAR     ; def. glib.mac
2   358						  GLOBAL P_WRITESECTOR:NEAR  ; def. glib.mac
2   359						  GLOBAL P_WRITEVDP:NEAR     ; def. glib.mac
2   360
2   361						  ; GIOS Functions
2   362						  GLOBAL F_TSRPRESENT:NEAR   ; def. glib.mac
2   363						  GLOBAL F_GETCLIPPING:NEAR  ; def. glib.mac
2   364						  GLOBAL F_SIMULATEDDISK:NEAR; def. glib.mac
2   365						  GLOBAL F_FINDFIRST:NEAR    ; def. glib.mac
2   366						  GLOBAL F_FINDNEXT:NEAR     ; def. glib.mac
2   367						  GLOBAL F_GETDRIVE:NEAR     ; def. glib.mac
2   368						  GLOBAL F_TESTDRIVE:NEAR    ; def. glib.mac
2   369						  GLOBAL F_GETERROR:NEAR     ; def. glib.mac
2   370						  GLOBAL F_GETFKEY:NEAR	     ; def. glib.mac
2   371						  GLOBAL F_GETPAD:NEAR	     ; def. glib.mac
2   372						  GLOBAL F_GETPDL:NEAR	     ; def. glib.mac
2   373						  GLOBAL F_GETCHANNEL:NEAR   ; def. glib.mac
2   374						  GLOBAL F_GETPAGEID:NEAR    ; def. glib.mac
2   375						  GLOBAL F_POINT:NEAR	     ; def. glib.mac
2   376						  GLOBAL F_READPSG:NEAR	     ; def. glib.mac
2   377						  GLOBAL F_READSTATUS:NEAR   ; def. glib.mac
2   378						  GLOBAL F_READVDP:NEAR	     ; def. glib.mac
2   379						  GLOBAL F_SEARCH:NEAR	     ; def. glib.mac
2   380						  GLOBAL F_SETDATE:NEAR	     ; def. glib.mac
2   381						  GLOBAL F_SETMEM:NEAR	     ; def. glib.mac
2   382						  GLOBAL F_SETTIME:NEAR	     ; def. glib.mac
2   383						  GLOBAL F_STICK:NEAR	     ; def. glib.mac
2   384						  GLOBAL F_STRIG:NEAR	     ; def. glib.mac
2   385						  GLOBAL F_VPEEK:NEAR	     ; def. glib.mac
2   386
2   387
1   388
1   389						  INCLUDE LIBCONST.INC
2   390		  =OFFSET 0177		 _AUXINPTR EQU offset 00177h
2   391		  =OFFSET 0174		 _AUXOUTPTR EQU	offset 00174h
2   392		  =OFFSET 018C		 _BUFLEN EQU offset 0018Ch
2   393		  =OFFSET 0190		 _CBREAK EQU offset 00190h
2   394		  =OFFSET 016B		 _CONINPTR EQU offset 0016Bh
2   395		  =OFFSET 016E		 _CONOUTPTR EQU	offset 0016Eh
2   396		  =OFFSET 0168		 _CONSTPTR EQU offset 00168h
2   397		  =OFFSET 2887		 _DOSERRORHANDLEROFF EQU offset	02887h
2   398		  =OFFSET 2884		 _DOSERRORHANDLERON EQU	offset 02884h
2   399		  =OFFSET 286F		 _ERROREXIT EQU	offset 0286Fh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 8
msx_asm\tur_slib.ASM



2   400		  =OFFSET 018D		 _ERRORPTR EQU offset 0018Dh
2   401		  =OFFSET 2703		 _GETERROR_LIB EQU offset 02703h
2   402		  =OFFSET 0581		 _GIOSOK EQU offset 00581h
2   403		  =OFFSET 0582		 _GIOSVER EQU offset 00582h
2   404		  =OFFSET 0192		 _HEAPPTR EQU offset 00192h
2   405		  =OFFSET 0180		 _L00B8	EQU offset 00180h
2   406		  =OFFSET 0182		 _L00BA	EQU offset 00182h
2   407		  =OFFSET 0186		 _L00BE	EQU offset 00186h
2   408		  =OFFSET 0188		 _L00C0	EQU offset 00188h
2   409		  =OFFSET 02D0		 _L021D	EQU offset 002D0h
2   410		  =OFFSET 02F1		 _L023E	EQU offset 002F1h
2   411		  =OFFSET 030C		 _L0259	EQU offset 0030Ch
2   412		  =OFFSET 0315		 _L0262	EQU offset 00315h
2   413		  =OFFSET 031E		 _L026B	EQU offset 0031Eh
2   414		  =OFFSET 0337		 _L0284	EQU offset 00337h
2   415		  =OFFSET 034C		 _L0299	EQU offset 0034Ch
2   416		  =OFFSET 03BD		 _L030A	EQU offset 003BDh
2   417		  =OFFSET 03C3		 _L0310	EQU offset 003C3h
2   418		  =OFFSET 0420		 _L0364	EQU offset 00420h
2   419		  =OFFSET 06C3		 _L04D4	EQU offset 006C3h
2   420		  =OFFSET 06F4		 _L0508	EQU offset 006F4h
2   421		  =OFFSET 070E		 _L0522	EQU offset 0070Eh
2   422		  =OFFSET 0717		 _L052C	EQU offset 00717h
2   423		  =OFFSET 0725		 _L053A	EQU offset 00725h
2   424		  =OFFSET 0738		 _L054D	EQU offset 00738h
2   425		  =OFFSET 0748		 _L055D	EQU offset 00748h
2   426		  =OFFSET 076C		 _L0581	EQU offset 0076Ch
2   427		  =OFFSET 077C		 _L0591	EQU offset 0077Ch
2   428		  =OFFSET 0786		 _L059B	EQU offset 00786h
2   429		  =OFFSET 07BC		 _L05D1	EQU offset 007BCh
2   430		  =OFFSET 07CD		 _L05E2	EQU offset 007CDh
2   431		  =OFFSET 07EC		 _L0601	EQU offset 007ECh
2   432		  =OFFSET 07FD		 _L0612	EQU offset 007FDh
2   433		  =OFFSET 080E		 _L0623	EQU offset 0080Eh
2   434		  =OFFSET 0823		 _L0638	EQU offset 00823h
2   435		  =OFFSET 0837		 _L064C	EQU offset 00837h
2   436		  =OFFSET 0841		 _L0656	EQU offset 00841h
2   437		  =OFFSET 0851		 _L0666	EQU offset 00851h
2   438		  =OFFSET 0861		 _L0676	EQU offset 00861h
2   439		  =OFFSET 086A		 _L067F	EQU offset 0086Ah
2   440		  =OFFSET 0889		 _L0688	EQU offset 00889h
2   441		  =OFFSET 088F		 _L068D	EQU offset 0088Fh
2   442		  =OFFSET 0895		 _L0692	EQU offset 00895h
2   443		  =OFFSET 08A3		 _L069B	EQU offset 008A3h
2   444		  =OFFSET 08A8		 _L06A0	EQU offset 008A8h
2   445		  =OFFSET 08AD		 _L06A5	EQU offset 008ADh
2   446		  =OFFSET 08BB		 _L06AE	EQU offset 008BBh
2   447		  =OFFSET 08C0		 _L06B3	EQU offset 008C0h
2   448		  =OFFSET 08C5		 _L06B8	EQU offset 008C5h
2   449		  =OFFSET 08D4		 _L06C2	EQU offset 008D4h
2   450		  =OFFSET 08D9		 _L06C7	EQU offset 008D9h
2   451		  =OFFSET 08DE		 _L06CC	EQU offset 008DEh
2   452		  =OFFSET 08ED		 _L06D6	EQU offset 008EDh
2   453		  =OFFSET 08F2		 _L06DB	EQU offset 008F2h
2   454		  =OFFSET 08F7		 _L06E0	EQU offset 008F7h
2   455		  =OFFSET 0905		 _L06E9	EQU offset 00905h
2   456		  =OFFSET 090A		 _L06EE	EQU offset 0090Ah
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 9
msx_asm\tur_slib.ASM



2   457		  =OFFSET 090F		 _L06F3	EQU offset 0090Fh
2   458		  =OFFSET 0911		 _L06F5	EQU offset 00911h
2   459		  =OFFSET 092B		 _L070F	EQU offset 0092Bh
2   460		  =OFFSET 0999		 _L073B	EQU offset 00999h
2   461		  =OFFSET 09A3		 _L0745	EQU offset 009A3h
2   462		  =OFFSET 09B0		 _L074E	EQU offset 009B0h
2   463		  =OFFSET 09B8		 _L0756	EQU offset 009B8h
2   464		  =OFFSET 09E2		 _L0780	EQU offset 009E2h
2   465		  =OFFSET 09E5		 _L0783	EQU offset 009E5h
2   466		  =OFFSET 09ED		 _L078B	EQU offset 009EDh
2   467		  =OFFSET 0D66		 _L083D	EQU offset 00D66h
2   468		  =OFFSET 0D94		 _L086B	EQU offset 00D94h
2   469		  =OFFSET 0DCC		 _L08A3	EQU offset 00DCCh
2   470		  =OFFSET 0DDB		 _L08B2	EQU offset 00DDBh
2   471		  =OFFSET 0E1C		 _L08F3	EQU offset 00E1Ch
2   472		  =OFFSET 0E49		 _L0920	EQU offset 00E49h
2   473		  =OFFSET 0EBF		 _L0996	EQU offset 00EBFh
2   474		  =OFFSET 0ECB		 _L09A2	EQU offset 00ECBh
2   475		  =OFFSET 0F12		 _L09E9	EQU offset 00F12h
2   476		  =OFFSET 0F1B		 _L09F2	EQU offset 00F1Bh
2   477		  =OFFSET 0F20		 _L09F7	EQU offset 00F20h
2   478		  =OFFSET 0F23		 _L09FA	EQU offset 00F23h
2   479		  =OFFSET 0F28		 _L09FF	EQU offset 00F28h
2   480		  =OFFSET 1171		 _L0BFD	EQU offset 01171h
2   481		  =OFFSET 11A8		 _L0C34	EQU offset 011A8h
2   482		  =OFFSET 11BA		 _L0C46	EQU offset 011BAh
2   483		  =OFFSET 11F3		 _L0C7F	EQU offset 011F3h
2   484		  =OFFSET 11FB		 _L0C87	EQU offset 011FBh
2   485		  =OFFSET 129F		 _L0D2B	EQU offset 0129Fh
2   486		  =OFFSET 132A		 _L0DB6	EQU offset 0132Ah
2   487		  =OFFSET 13BA		 _L0E46	EQU offset 013BAh
2   488		  =OFFSET 1528		 _L0FB4	EQU offset 01528h
2   489		  =OFFSET 1544		 _L0FD0	EQU offset 01544h
2   490		  =OFFSET 1552		 _L0FDE	EQU offset 01552h
2   491		  =OFFSET 1581		 _L1008	EQU offset 01581h
2   492		  =OFFSET 18AA		 _L12DD	EQU offset 018AAh
2   493		  =OFFSET 18AE		 _L12E1	EQU offset 018AEh
2   494		  =OFFSET 18C9		 _L12FC	EQU offset 018C9h
2   495		  =OFFSET 18CD		 _L1300	EQU offset 018CDh
2   496		  =OFFSET 18E5		 _L1318	EQU offset 018E5h
2   497		  =OFFSET 18F3		 _L1326	EQU offset 018F3h
2   498		  =OFFSET 1900		 _L1333	EQU offset 01900h
2   499		  =OFFSET 191C		 _L134F	EQU offset 0191Ch
2   500		  =OFFSET 193C		 _L136F	EQU offset 0193Ch
2   501		  =OFFSET 193D		 _L1370	EQU offset 0193Dh
2   502		  =OFFSET 19D6		 _L13FE	EQU offset 019D6h
2   503		  =OFFSET 19D7		 _L13FF	EQU offset 019D7h
2   504		  =OFFSET 1A45		 _L1469	EQU offset 01A45h
2   505		  =OFFSET 1A77		 _L149B	EQU offset 01A77h
2   506		  =OFFSET 1A85		 _L14A9	EQU offset 01A85h
2   507		  =OFFSET 1A96		 _L14BA	EQU offset 01A96h
2   508		  =OFFSET 1AA7		 _L14CB	EQU offset 01AA7h
2   509		  =OFFSET 1AAB		 _L14CC	EQU offset 01AABh
2   510		  =OFFSET 1C67		 _L1644	EQU offset 01C67h
2   511		  =OFFSET 1C70		 _L164D	EQU offset 01C70h
2   512		  =OFFSET 1C74		 _L164E	EQU offset 01C74h
2   513		  =OFFSET 1C98		 _L1671	EQU offset 01C98h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 10
msx_asm\tur_slib.ASM



2   514		  =OFFSET 1CBE		 _L1672	EQU offset 01CBEh
2   515		  =OFFSET 1CDA		 _L168E	EQU offset 01CDAh
2   516		  =OFFSET 1CF7		 _L16AB	EQU offset 01CF7h
2   517		  =OFFSET 1D83		 _L1722	EQU offset 01D83h
2   518		  =OFFSET 1D87		 _L1726	EQU offset 01D87h
2   519		  =OFFSET 1DDA		 _L1779	EQU offset 01DDAh
2   520		  =OFFSET 1E18		 _L178B	EQU offset 01E18h
2   521		  =OFFSET 1E37		 _L17AA	EQU offset 01E37h
2   522		  =OFFSET 1E47		 _L17BA	EQU offset 01E47h
2   523		  =OFFSET 1E5A		 _L17CD	EQU offset 01E5Ah
2   524		  =OFFSET 1E64		 _L17D7	EQU offset 01E64h
2   525		  =OFFSET 1E69		 _L17DC	EQU offset 01E69h
2   526		  =OFFSET 1E6E		 _L17E1	EQU offset 01E6Eh
2   527		  =OFFSET 1E73		 _L17E6	EQU offset 01E73h
2   528		  =OFFSET 1E9D		 _L1810	EQU offset 01E9Dh
2   529		  =OFFSET 1EA2		 _L1811	EQU offset 01EA2h
2   530		  =OFFSET 1F40		 _L187A	EQU offset 01F40h
2   531		  =OFFSET 1F4A		 _L18A4	EQU offset 01F4Ah
2   532		  =OFFSET 1F5E		 _L18B6	EQU offset 01F5Eh
2   533		  =OFFSET 1F80		 _L18DC	EQU offset 01F80h
2   534		  =OFFSET 1F8E		 _L19A5	EQU offset 01F8Eh
2   535		  =OFFSET 1FBA		 _L19D5	EQU offset 01FBAh
2   536		  =OFFSET 2014		 _L1A49	EQU offset 02014h
2   537		  =OFFSET 2028		 _L1A55	EQU offset 02028h
2   538		  =OFFSET 203F		 _L1A5D	EQU offset 0203Fh
2   539		  =OFFSET 2052		 _L1A6F	EQU offset 02052h
2   540		  =OFFSET 2057		 _L1A70	EQU offset 02057h
2   541		  =OFFSET 20B8		 _L1AB0	EQU offset 020B8h
2   542		  =OFFSET 20C2		 _L1ABA	EQU offset 020C2h
2   543		  =OFFSET 20C6		 _L1ABE	EQU offset 020C6h
2   544		  =OFFSET 2192		 _L1AED	EQU offset 02192h
2   545		  =OFFSET 2196		 _L1AF1	EQU offset 02196h
2   546		  =OFFSET 21C4		 _L1B6F	EQU offset 021C4h
2   547		  =OFFSET 2213		 _L1B93	EQU offset 02213h
2   548		  =OFFSET 224F		 _L1BA5	EQU offset 0224Fh
2   549		  =OFFSET 227A		 _L1BEA	EQU offset 0227Ah
2   550		  =OFFSET 227E		 _L1BEB	EQU offset 0227Eh
2   551		  =OFFSET 23C6		 _L1CDB	EQU offset 023C6h
2   552		  =OFFSET 23D0		 _L1CE5	EQU offset 023D0h
2   553		  =OFFSET 2465		 _L1D7A	EQU offset 02465h
2   554		  =OFFSET 2528		 _L1E3D	EQU offset 02528h
2   555		  =OFFSET 252F		 _L1E44	EQU offset 0252Fh
2   556		  =OFFSET 258E		 _L1EA3	EQU offset 0258Eh
2   557		  =OFFSET 2596		 _L1EAB	EQU offset 02596h
2   558		  =OFFSET 25A8		 _L1EBC	EQU offset 025A8h
2   559		  =OFFSET 25AC		 _L1EBD	EQU offset 025ACh
2   560		  =OFFSET 25B0		 _L1EBE	EQU offset 025B0h
2   561		  =OFFSET 25EC		 _L1EF2	EQU offset 025ECh
2   562		  =OFFSET 25F0		 _L1EF3	EQU offset 025F0h
2   563		  =OFFSET 25F4		 _L1EF4	EQU offset 025F4h
2   564		  =OFFSET 2650		 _L1F48	EQU offset 02650h
2   565		  =OFFSET 2656		 _L1F4E	EQU offset 02656h
2   566		  =OFFSET 266C		 _L1F64	EQU offset 0266Ch
2   567		  =OFFSET 2685		 _L1F7D	EQU offset 02685h
2   568		  =OFFSET 26A3		 _L1F9B	EQU offset 026A3h
2   569		  =OFFSET 26E3		 _L1FDB	EQU offset 026E3h
2   570		  =OFFSET 26EC		 _L1FE4	EQU offset 026ECh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 11
msx_asm\tur_slib.ASM



2   571		  =OFFSET 26F2		 _L1FEA	EQU offset 026F2h
2   572		  =OFFSET 26F9		 _L1FF1	EQU offset 026F9h
2   573		  =OFFSET 272A		 _L201B	EQU offset 0272Ah
2   574		  =OFFSET 27FD		 _L20D4	EQU offset 027FDh
2   575		  =OFFSET 2E9B		 _L20E2	EQU offset 02E9Bh
2   576		  =OFFSET 2339		 _LOADRUNOVERLAY EQU offset 02339h
2   577		  =OFFSET 232C		 _LOADRUNOVERLAYREC EQU	offset 0232Ch
2   578		  =OFFSET 0184		 _LST EQU offset 00184h
2   579		  =OFFSET 0171		 _LSTOUTPTR EQU	offset 00171h
2   580		  =OFFSET 0A61		 _L_ABS	EQU offset 00A61h
2   581		  =OFFSET 0A74		 _L_ADD	EQU offset 00A74h
2   582		  =OFFSET 0A1E		 _L_AND	EQU offset 00A1Eh
2   583		  =OFFSET 0B16		 _L_DIV	EQU offset 00B16h
2   584		  =OFFSET 0883		 _L_EQ EQU offset 00883h
2   585		  =OFFSET 0851		 _L_FOR_DOWNTO EQU offset 00851h
2   586		  =OFFSET 0851		 _L_FOR_TO EQU offset 00851h
2   587		  =OFFSET 08E8		 _L_GT EQU offset 008E8h
2   588		  =OFFSET 08B6		 _L_GTE	EQU offset 008B6h
2   589		  =OFFSET 0900		 _L_LS EQU offset 00900h
2   590		  =OFFSET 08CF		 _L_LSE	EQU offset 008CFh
2   591		  =OFFSET 0B2C		 _L_MOD	EQU offset 00B2Ch
2   592		  =OFFSET 0A9A		 _L_MUL	EQU offset 00A9Ah
2   593		  =OFFSET 0A64		 _L_NEG	EQU offset 00A64h
2   594		  =OFFSET 089E		 _L_NEQ	EQU offset 0089Eh
2   595		  =OFFSET 0A54		 _L_NOT	EQU offset 00A54h
2   596		  =OFFSET 0A30		 _L_OR EQU offset 00A30h
2   597		  =OFFSET 0873		 _L_PRED EQU offset 00873h
2   598		  =OFFSET 15A0		 _L_R EQU offset 015A0h
2   599		  =OFFSET 0BD5		 _L_SHL	EQU offset 00BD5h
2   600		  =OFFSET 0BF1		 _L_SHR	EQU offset 00BF1h
2   601		  =OFFSET 0A94		 _L_SQR	EQU offset 00A94h
2   602		  =OFFSET 0A7F		 _L_SUB	EQU offset 00A7Fh
2   603		  =OFFSET 087C		 _L_SUCC EQU offset 0087Ch
2   604		  =OFFSET 0A42		 _L_XOR	EQU offset 00A42h
2   605		  =OFFSET 057E		 _MEMMAN EQU offset 0057Eh
2   606		  =OFFSET 057F		 _MEMMNVER EQU offset 0057Fh
2   607		  =OFFSET 018A		 _OUTPUT EQU offset 0018Ah
2   608		  =OFFSET 238E		 _OVERLAYLOADPTR EQU offset 0238Eh
2   609		  =OFFSET 2301		 _OVERLAYREC1 EQU offset 02301h
2   610		  =OFFSET 1DEC		 _PRT_LONG EQU offset 01DECh
2   611		  =OFFSET 0194		 _RECURPTR EQU offset 00194h
2   612		  =OFFSET 2225		 _RENAMEFILE_LIB EQU offset 02225h
2   613		  =OFFSET 057B		 _RUNGIOS EQU offset 0057Bh
2   614		  =OFFSET 15C4		 _R_L EQU offset 015C4h
2   615		  =OFFSET 052E		 _TSRPRESENT EQU offset	0052Eh
2   616		  =OFFSET 017D		 _USRINPTR EQU offset 0017Dh
2   617		  =OFFSET 017A		 _USROUTPTR EQU	offset 0017Ah
2   618		  =OFFSET 0168		 _CONSTPTR EQU offset 00168h
2   619		  =OFFSET 016B		 _CONINPTR EQU offset 0016Bh
2   620		  =OFFSET 016E		 _CONOUTPTR EQU	offset 0016Eh
2   621		  =OFFSET 0171		 _LSTOUTPTR EQU	offset 00171h
2   622		  =OFFSET 0174		 _AUXOUTPTR EQU	offset 00174h
2   623		  =OFFSET 0177		 _AUXINPTR EQU offset 00177h
2   624		  =OFFSET 017A		 _USROUTPTR EQU	offset 0017Ah
2   625		  =OFFSET 017D		 _USRINPTR EQU offset 0017Dh
2   626		  =OFFSET 0180		 _L00B8	EQU offset 00180h
2   627		  =OFFSET 0182		 _L00BA	EQU offset 00182h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 12
msx_asm\tur_slib.ASM



2   628		  =OFFSET 0184		 _LST EQU offset 00184h
2   629		  =OFFSET 0186		 _L00BE	EQU offset 00186h
2   630		  =OFFSET 0188		 _L00C0	EQU offset 00188h
2   631		  =OFFSET 018A		 _OUTPUT EQU offset 0018Ah
2   632		  =OFFSET 018C		 _BUFLEN EQU offset 0018Ch
2   633		  =OFFSET 018D		 _ERRORPTR EQU offset 0018Dh
2   634		  =OFFSET 0190		 _CBREAK EQU offset 00190h
2   635		  =OFFSET 0192		 _HEAPPTR EQU offset 00192h
2   636		  =OFFSET 0194		 _RECURPTR EQU offset 00194h
2   637		  =OFFSET 02D0		 _L021D	EQU offset 002D0h
2   638		  =OFFSET 02F1		 _L023E	EQU offset 002F1h
2   639		  =OFFSET 030C		 _L0259	EQU offset 0030Ch
2   640		  =OFFSET 0315		 _L0262	EQU offset 00315h
2   641		  =OFFSET 031E		 _L026B	EQU offset 0031Eh
2   642		  =OFFSET 0337		 _L0284	EQU offset 00337h
2   643		  =OFFSET 034C		 _L0299	EQU offset 0034Ch
2   644		  =OFFSET 03BD		 _L030A	EQU offset 003BDh
2   645		  =OFFSET 03C3		 _L0310	EQU offset 003C3h
2   646		  =OFFSET 0420		 _L0364	EQU offset 00420h
2   647		  =OFFSET 052E		 _TSRPRESENT EQU offset	0052Eh
2   648		  =OFFSET 057B		 _RUNGIOS EQU offset 0057Bh
2   649		  =OFFSET 057E		 _MEMMAN EQU offset 0057Eh
2   650		  =OFFSET 057F		 _MEMMNVER EQU offset 0057Fh
2   651		  =OFFSET 0581		 _GIOSOK EQU offset 00581h
2   652		  =OFFSET 0582		 _GIOSVER EQU offset 00582h
2   653		  =OFFSET 06C3		 _L04D4	EQU offset 006C3h
2   654		  =OFFSET 06F4		 _L0508	EQU offset 006F4h
2   655		  =OFFSET 070E		 _L0522	EQU offset 0070Eh
2   656		  =OFFSET 0717		 _L052C	EQU offset 00717h
2   657		  =OFFSET 0725		 _L053A	EQU offset 00725h
2   658		  =OFFSET 0738		 _L054D	EQU offset 00738h
2   659		  =OFFSET 0748		 _L055D	EQU offset 00748h
2   660		  =OFFSET 076C		 _L0581	EQU offset 0076Ch
2   661		  =OFFSET 077C		 _L0591	EQU offset 0077Ch
2   662		  =OFFSET 0786		 _L059B	EQU offset 00786h
2   663		  =OFFSET 07BC		 _L05D1	EQU offset 007BCh
2   664		  =OFFSET 07CD		 _L05E2	EQU offset 007CDh
2   665		  =OFFSET 07EC		 _L0601	EQU offset 007ECh
2   666		  =OFFSET 07FD		 _L0612	EQU offset 007FDh
2   667		  =OFFSET 080E		 _L0623	EQU offset 0080Eh
2   668		  =OFFSET 0823		 _L0638	EQU offset 00823h
2   669		  =OFFSET 0837		 _L064C	EQU offset 00837h
2   670		  =OFFSET 0841		 _L0656	EQU offset 00841h
2   671		  =OFFSET 0851		 _L_FOR_TO EQU offset 00851h
2   672		  =OFFSET 0851		 _L0666	EQU offset 00851h
2   673		  =OFFSET 0851		 _L_FOR_DOWNTO EQU offset 00851h
2   674		  =OFFSET 0861		 _L0676	EQU offset 00861h
2   675		  =OFFSET 086A		 _L067F	EQU offset 0086Ah
2   676		  =OFFSET 0873		 _L_PRED EQU offset 00873h
2   677		  =OFFSET 087C		 _L_SUCC EQU offset 0087Ch
2   678		  =OFFSET 0883		 _L_EQ EQU offset 00883h
2   679		  =OFFSET 0889		 _L0688	EQU offset 00889h
2   680		  =OFFSET 088F		 _L068D	EQU offset 0088Fh
2   681		  =OFFSET 0895		 _L0692	EQU offset 00895h
2   682		  =OFFSET 089E		 _L_NEQ	EQU offset 0089Eh
2   683		  =OFFSET 08A3		 _L069B	EQU offset 008A3h
2   684		  =OFFSET 08A8		 _L06A0	EQU offset 008A8h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 13
msx_asm\tur_slib.ASM



2   685		  =OFFSET 08AD		 _L06A5	EQU offset 008ADh
2   686		  =OFFSET 08B6		 _L_GTE	EQU offset 008B6h
2   687		  =OFFSET 08BB		 _L06AE	EQU offset 008BBh
2   688		  =OFFSET 08C0		 _L06B3	EQU offset 008C0h
2   689		  =OFFSET 08C5		 _L06B8	EQU offset 008C5h
2   690		  =OFFSET 08CF		 _L_LSE	EQU offset 008CFh
2   691		  =OFFSET 08D4		 _L06C2	EQU offset 008D4h
2   692		  =OFFSET 08D9		 _L06C7	EQU offset 008D9h
2   693		  =OFFSET 08DE		 _L06CC	EQU offset 008DEh
2   694		  =OFFSET 08E8		 _L_GT EQU offset 008E8h
2   695		  =OFFSET 08ED		 _L06D6	EQU offset 008EDh
2   696		  =OFFSET 08F2		 _L06DB	EQU offset 008F2h
2   697		  =OFFSET 08F7		 _L06E0	EQU offset 008F7h
2   698		  =OFFSET 0900		 _L_LS EQU offset 00900h
2   699		  =OFFSET 0905		 _L06E9	EQU offset 00905h
2   700		  =OFFSET 090A		 _L06EE	EQU offset 0090Ah
2   701		  =OFFSET 090F		 _L06F3	EQU offset 0090Fh
2   702		  =OFFSET 0911		 _L06F5	EQU offset 00911h
2   703		  =OFFSET 092B		 _L070F	EQU offset 0092Bh
2   704		  =OFFSET 0999		 _L073B	EQU offset 00999h
2   705		  =OFFSET 09A3		 _L0745	EQU offset 009A3h
2   706		  =OFFSET 09B0		 _L074E	EQU offset 009B0h
2   707		  =OFFSET 09B8		 _L0756	EQU offset 009B8h
2   708		  =OFFSET 09E2		 _L0780	EQU offset 009E2h
2   709		  =OFFSET 09E5		 _L0783	EQU offset 009E5h
2   710		  =OFFSET 09ED		 _L078B	EQU offset 009EDh
2   711		  =OFFSET 0A1E		 _L_AND	EQU offset 00A1Eh
2   712		  =OFFSET 0A30		 _L_OR EQU offset 00A30h
2   713		  =OFFSET 0A42		 _L_XOR	EQU offset 00A42h
2   714		  =OFFSET 0A54		 _L_NOT	EQU offset 00A54h
2   715		  =OFFSET 0A61		 _L_ABS	EQU offset 00A61h
2   716		  =OFFSET 0A64		 _L_NEG	EQU offset 00A64h
2   717		  =OFFSET 0A74		 _L_ADD	EQU offset 00A74h
2   718		  =OFFSET 0A7F		 _L_SUB	EQU offset 00A7Fh
2   719		  =OFFSET 0A94		 _L_SQR	EQU offset 00A94h
2   720		  =OFFSET 0A9A		 _L_MUL	EQU offset 00A9Ah
2   721		  =OFFSET 0B16		 _L_DIV	EQU offset 00B16h
2   722		  =OFFSET 0B2C		 _L_MOD	EQU offset 00B2Ch
2   723		  =OFFSET 0BD5		 _L_SHL	EQU offset 00BD5h
2   724		  =OFFSET 0BF1		 _L_SHR	EQU offset 00BF1h
2   725		  =OFFSET 0D66		 _L083D	EQU offset 00D66h
2   726		  =OFFSET 0D94		 _L086B	EQU offset 00D94h
2   727		  =OFFSET 0DCC		 _L08A3	EQU offset 00DCCh
2   728		  =OFFSET 0DDB		 _L08B2	EQU offset 00DDBh
2   729		  =OFFSET 0E1C		 _L08F3	EQU offset 00E1Ch
2   730		  =OFFSET 0E49		 _L0920	EQU offset 00E49h
2   731		  =OFFSET 0EBF		 _L0996	EQU offset 00EBFh
2   732		  =OFFSET 0ECB		 _L09A2	EQU offset 00ECBh
2   733		  =OFFSET 0F12		 _L09E9	EQU offset 00F12h
2   734		  =OFFSET 0F1B		 _L09F2	EQU offset 00F1Bh
2   735		  =OFFSET 0F20		 _L09F7	EQU offset 00F20h
2   736		  =OFFSET 0F23		 _L09FA	EQU offset 00F23h
2   737		  =OFFSET 0F28		 _L09FF	EQU offset 00F28h
2   738		  =OFFSET 1171		 _L0BFD	EQU offset 01171h
2   739		  =OFFSET 11A8		 _L0C34	EQU offset 011A8h
2   740		  =OFFSET 11BA		 _L0C46	EQU offset 011BAh
2   741		  =OFFSET 11F3		 _L0C7F	EQU offset 011F3h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 14
msx_asm\tur_slib.ASM



2   742		  =OFFSET 11FB		 _L0C87	EQU offset 011FBh
2   743		  =OFFSET 129F		 _L0D2B	EQU offset 0129Fh
2   744		  =OFFSET 132A		 _L0DB6	EQU offset 0132Ah
2   745		  =OFFSET 13BA		 _L0E46	EQU offset 013BAh
2   746		  =OFFSET 1528		 _L0FB4	EQU offset 01528h
2   747		  =OFFSET 1544		 _L0FD0	EQU offset 01544h
2   748		  =OFFSET 1552		 _L0FDE	EQU offset 01552h
2   749		  =OFFSET 1581		 _L1008	EQU offset 01581h
2   750		  =OFFSET 15A0		 _L_R EQU offset 015A0h
2   751		  =OFFSET 15C4		 _R_L EQU offset 015C4h
2   752		  =OFFSET 18AA		 _L12DD	EQU offset 018AAh
2   753		  =OFFSET 18AE		 _L12E1	EQU offset 018AEh
2   754		  =OFFSET 18C9		 _L12FC	EQU offset 018C9h
2   755		  =OFFSET 18CD		 _L1300	EQU offset 018CDh
2   756		  =OFFSET 18E5		 _L1318	EQU offset 018E5h
2   757		  =OFFSET 18F3		 _L1326	EQU offset 018F3h
2   758		  =OFFSET 1900		 _L1333	EQU offset 01900h
2   759		  =OFFSET 191C		 _L134F	EQU offset 0191Ch
2   760		  =OFFSET 193C		 _L136F	EQU offset 0193Ch
2   761		  =OFFSET 193D		 _L1370	EQU offset 0193Dh
2   762		  =OFFSET 19D6		 _L13FE	EQU offset 019D6h
2   763		  =OFFSET 19D7		 _L13FF	EQU offset 019D7h
2   764		  =OFFSET 1A45		 _L1469	EQU offset 01A45h
2   765		  =OFFSET 1A77		 _L149B	EQU offset 01A77h
2   766		  =OFFSET 1A85		 _L14A9	EQU offset 01A85h
2   767		  =OFFSET 1A96		 _L14BA	EQU offset 01A96h
2   768		  =OFFSET 1AA7		 _L14CB	EQU offset 01AA7h
2   769		  =OFFSET 1AAB		 _L14CC	EQU offset 01AABh
2   770		  =OFFSET 1C67		 _L1644	EQU offset 01C67h
2   771		  =OFFSET 1C70		 _L164D	EQU offset 01C70h
2   772		  =OFFSET 1C74		 _L164E	EQU offset 01C74h
2   773		  =OFFSET 1C98		 _L1671	EQU offset 01C98h
2   774		  =OFFSET 1CBE		 _L1672	EQU offset 01CBEh
2   775		  =OFFSET 1CDA		 _L168E	EQU offset 01CDAh
2   776		  =OFFSET 1CF7		 _L16AB	EQU offset 01CF7h
2   777		  =OFFSET 1D83		 _L1722	EQU offset 01D83h
2   778		  =OFFSET 1D87		 _L1726	EQU offset 01D87h
2   779		  =OFFSET 1DDA		 _L1779	EQU offset 01DDAh
2   780		  =OFFSET 1DEC		 _PRT_LONG EQU offset 01DECh
2   781		  =OFFSET 1E18		 _L178B	EQU offset 01E18h
2   782		  =OFFSET 1E37		 _L17AA	EQU offset 01E37h
2   783		  =OFFSET 1E47		 _L17BA	EQU offset 01E47h
2   784		  =OFFSET 1E5A		 _L17CD	EQU offset 01E5Ah
2   785		  =OFFSET 1E64		 _L17D7	EQU offset 01E64h
2   786		  =OFFSET 1E69		 _L17DC	EQU offset 01E69h
2   787		  =OFFSET 1E6E		 _L17E1	EQU offset 01E6Eh
2   788		  =OFFSET 1E73		 _L17E6	EQU offset 01E73h
2   789		  =OFFSET 1E9D		 _L1810	EQU offset 01E9Dh
2   790		  =OFFSET 1EA2		 _L1811	EQU offset 01EA2h
2   791		  =OFFSET 1F40		 _L187A	EQU offset 01F40h
2   792		  =OFFSET 1F4A		 _L18A4	EQU offset 01F4Ah
2   793		  =OFFSET 1F5E		 _L18B6	EQU offset 01F5Eh
2   794		  =OFFSET 1F80		 _L18DC	EQU offset 01F80h
2   795		  =OFFSET 1F8E		 _L19A5	EQU offset 01F8Eh
2   796		  =OFFSET 1FBA		 _L19D5	EQU offset 01FBAh
2   797		  =OFFSET 2014		 _L1A49	EQU offset 02014h
2   798		  =OFFSET 2028		 _L1A55	EQU offset 02028h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 15
msx_asm\tur_slib.ASM



2   799		  =OFFSET 203F		 _L1A5D	EQU offset 0203Fh
2   800		  =OFFSET 2052		 _L1A6F	EQU offset 02052h
2   801		  =OFFSET 2057		 _L1A70	EQU offset 02057h
2   802		  =OFFSET 20B8		 _L1AB0	EQU offset 020B8h
2   803		  =OFFSET 20C2		 _L1ABA	EQU offset 020C2h
2   804		  =OFFSET 20C6		 _L1ABE	EQU offset 020C6h
2   805		  =OFFSET 2192		 _L1AED	EQU offset 02192h
2   806		  =OFFSET 2196		 _L1AF1	EQU offset 02196h
2   807		  =OFFSET 21C4		 _L1B6F	EQU offset 021C4h
2   808		  =OFFSET 2213		 _L1B93	EQU offset 02213h
2   809		  =OFFSET 2225		 _RENAMEFILE_LIB EQU offset 02225h
2   810		  =OFFSET 224F		 _L1BA5	EQU offset 0224Fh
2   811		  =OFFSET 227A		 _L1BEA	EQU offset 0227Ah
2   812		  =OFFSET 227E		 _L1BEB	EQU offset 0227Eh
2   813		  =OFFSET 2301		 _OVERLAYREC1 EQU offset 02301h
2   814		  =OFFSET 232C		 _LOADRUNOVERLAYREC EQU	offset 0232Ch
2   815		  =OFFSET 2339		 _LOADRUNOVERLAY EQU offset 02339h
2   816		  =OFFSET 238E		 _OVERLAYLOADPTR EQU offset 0238Eh
2   817		  =OFFSET 23C6		 _L1CDB	EQU offset 023C6h
2   818		  =OFFSET 23D0		 _L1CE5	EQU offset 023D0h
2   819		  =OFFSET 2465		 _L1D7A	EQU offset 02465h
2   820		  =OFFSET 2528		 _L1E3D	EQU offset 02528h
2   821		  =OFFSET 252F		 _L1E44	EQU offset 0252Fh
2   822		  =OFFSET 258E		 _L1EA3	EQU offset 0258Eh
2   823		  =OFFSET 2596		 _L1EAB	EQU offset 02596h
2   824		  =OFFSET 25A8		 _L1EBC	EQU offset 025A8h
2   825		  =OFFSET 25AC		 _L1EBD	EQU offset 025ACh
2   826		  =OFFSET 25B0		 _L1EBE	EQU offset 025B0h
2   827		  =OFFSET 25EC		 _L1EF2	EQU offset 025ECh
2   828		  =OFFSET 25F0		 _L1EF3	EQU offset 025F0h
2   829		  =OFFSET 25F4		 _L1EF4	EQU offset 025F4h
2   830		  =OFFSET 2650		 _L1F48	EQU offset 02650h
2   831		  =OFFSET 2656		 _L1F4E	EQU offset 02656h
2   832		  =OFFSET 266C		 _L1F64	EQU offset 0266Ch
2   833		  =OFFSET 2685		 _L1F7D	EQU offset 02685h
2   834		  =OFFSET 26A3		 _L1F9B	EQU offset 026A3h
2   835		  =OFFSET 26E3		 _L1FDB	EQU offset 026E3h
2   836		  =OFFSET 26EC		 _L1FE4	EQU offset 026ECh
2   837		  =OFFSET 26F2		 _L1FEA	EQU offset 026F2h
2   838		  =OFFSET 26F9		 _L1FF1	EQU offset 026F9h
2   839		  =OFFSET 2703		 _GETERROR_LIB EQU offset 02703h
2   840		  =OFFSET 272A		 _L201B	EQU offset 0272Ah
2   841		  =OFFSET 27FD		 _L20D4	EQU offset 027FDh
2   842		  =OFFSET 286F		 _ERROREXIT EQU	offset 0286Fh
2   843		  =OFFSET 2884		 _DOSERRORHANDLERON EQU	offset 02884h
2   844		  =OFFSET 2887		 _DOSERRORHANDLEROFF EQU offset	02887h
2   845		  =OFFSET 2E9B		 _L20E2	EQU offset 02E9Bh
2   846
1   847
1   848						  ; defined in compiler.mac
1   849						  EXTRN	L5271,L5287,L5639,L58C5,L5960,L59E9,L5A0C,L5A17,L5CAD
1   850						  EXTRN	L5D76,L5E8E,L5E97,L5EA2,L5EBB,L5EBE,L5ED0,L5EDD,L5EE8
1   851
1   852						  EXTRN	L6148,L6201,L620F,L6540,L65D5,L65DE,L65E7,L65EF,L65F7,L677F
1   853						  EXTRN	PARSE_O_IL_C
1   854						  EXTRN	PARSELONG
1   855						  EXTRN	L678B,L6A5C
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 16
msx_asm\tur_slib.ASM



1   856						  EXTRN	L6B5E		     ; output length (C) and data at L7A57
1   857						  EXTRN	L6CC2,L6D24,L6D43,L6E54
1   858						  EXTRN	L6F0B,L6F13,L6F1B,L6F5E,L6F66,L6F6E,L6F7E
1   859						  EXTRN	L72D4,L72DA
1   860						  EXTRN	L7B5E,L7B6F,L7B8B,L7B9E,L7BA3,L7BA7
1   861
1   862					 ;	   PUBLIC L5ABE
1   863						  PUBLIC L7638,L77B1
1   864
1   865	    0001  1EA2			 L59FA:	  DW _L1811		     ; LIB, reset typed	file
1   866	    0003  19D7				  DW _L13FF		     ; LIB, reset text file
1   867	    0005  2057				  DW _L1A70		     ; LIB, reset untyped file
1   868
1   869	    0007  1E9D			 L5A00:	  DW _L1810		     ; LIB, rewrite typed file
1   870	    0009  19D6				  DW _L13FE		     ; LIB, rewrite text file
1   871	    000B  2052				  DW _L1A6F		     ; LIB, rewrite untyped file
1   872
1   873	    000D  1F40			 L5A06:	  DW _L187A		     ; LIB, close typed	file
1   874	    000F  1A45				  DW _L1469		     ; LIB, close text file
1   875	    0011  20B8				  DW _L1AB0		     ; LIB, close untyped file
1   876
1   877	    0013			 L5943:	 ; PROCEDURE Assign(VAR	F: FILE; Name: STRING);
1   878	    0013  CD				  DB 0cdh
1   879	    0014  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   880	    0016  21				  DB 21h
1   881	    0017  193D				 DW _L1370		 ; LIB,	assume file type = untyped or typed
1   882	    0019  FE 06				 DB 0feh, 6
1   883	    001B  20 09				 DB 20h,(L5955)-$-1		 ; jump	if not text file
1   884
1   885	    001D  21				 DB 21h
1   886	    001E  193C				 DW _L136F		 ; LIB,	file type = text
1   887	    0020  CD				 DB 0cdh
1   888	    0021  0026r				 DW  L5955
1   889	    0023  C3				  DB 0c3h
1   890	    0024  0177r				 DW  L5ABE		     ; add call	for I/O	checking, if on
1   891
1   892	    0026  E5			 L5955:	 DB 0e5h
1   893	    0027  CD				 DB 0cdh
1   894	    0028  0000e				 DW  O_PSHHL		 ; push	for first parameter, FIB address
1   895	    002A  CD				  DB 0cdh
1   896	    002B  0000e				 DW  L6F5E		   ; match(',')
1   897	    002D  CD				  DB 0cdh
1   898	    002E  0000e				 DW  L5ED0		   ; parse string expression
1   899	    0030  E1				 DB 0e1h
1   900	    0031  C3				  DB 0c3h
1   901	    0032  0000e				 DW  L5960		     ; match(')', CALL HL
1   902
1   903	    0034			 L5966:	  ; PROCEDURE Rename(VAR F: FILE; Name:	STRING);
1   904	    0034  CD				  DB 0cdh
1   905	    0035  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   906	    0037  21				 DB 21h
1   907	    0038  224F				 DW _L1BA5		 ; LIB,	rename
1   908	    003A  CD				 DB 0cdh
1   909	    003B  0026r				 DW  L5955
1   910	    003D  C3				  DB 0c3h
1   911	    003E  0177r				 DW  L5ABE		     ; add call	for I/O	checking, if on
1   912
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 17
msx_asm\tur_slib.ASM



1   913	    0040			 P_RENAMEFILE:
1   914						  ; PROCEDURE RenameFile(OldName: STRING; NewName: STRING);
1   915	    0040  CD				  DB 0cdh
1   916	    0041  0000e				 DW  L6F66		   ; match('(')
1   917	    0043  CD				  DB 0cdh
1   918	    0044  0000e				 DW  L5ED0		   ; parse string expression
1   919	    0046  CD				  DB 0cdh
1   920	    0047  0000e				 DW  L6F5E		   ; match(',')
1   921	    0049  CD				  DB 0cdh
1   922	    004A  0000e				 DW  L5ED0		   ; parse string expression
1   923	    004C  21				  DB 21h
1   924	    004D  2225				 DW _RENAMEFILE_LIB
1   925	    004F  C3				  DB 0c3h
1   926	    0050  0000e				 DW  L5960		     ; match(')'), CALL	HL
1   927
1   928	    0052			 L5971:	 ; PROCEDURE Erase(VAR F: FILE);
1   929	    0052  CD				  DB 0cdh
1   930	    0053  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   931	    0055  21				 DB 21h
1   932	    0056  2213				 DW _L1B93		 ; LIB
1   933	    0058  C3				  DB 0c3h
1   934	    0059  0000e				 DW  L5960		     ; match(')'), CALL	HL
1   935
1   936	    005B			 L5979:	 ; PROCEDURE Chain(VAR F: FILE);
1   937	    005B  21				  DB 21h
1   938	    005C  227E				 DW _L1BEB		 ; LIB
1   939	    005E  18 03				  DB 18h,( L5981)-$-1
1   940
1   941	    0060			 L597E:	 ; PROCEDURE Execute(VAR F: FILE);
1   942	    0060  21				  DB 21h
1   943	    0061  227A				 DW _L1BEA		 ; LIB
1   944	    0063  E5			 L5981:	 DB 0e5h
1   945	    0064  CD				  DB 0cdh
1   946	    0065  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   947
1   948	    0067  E1			 L5985:	  DB 0e1h
1   949	    0068  CD			 L5986:	  DB 0cdh
1   950	    0069  0000e				 DW  L5960		   ; match(')'), CALL HL
1   951
1   952	    006B  C3				  DB 0c3h
1   953	    006C  0177r				 DW  L5ABE		     ; add call	for I/O	checking, if on
1   954
1   955	    006E			 L598C:	 ; PROCEDURE Seek(VAR F: FILE OF TYPE; Pos: INTEGER);
1   956						  ; PROCEDURE Seek(VAR F: FILE;	Pos: INTEGER);
1   957	    006E  CD				  DB 0cdh
1   958	    006F  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   959	    0071  FE 06				 DB 0feh, 6
1   960
1   961	    0073  CD				 DB 0cdh
1   962	    0074  0000e				 DW  L72D4		 ; Zero	--> error
1   963	    0076  3F				  DB 3FH		     ; error 63: Textfiles are not allowed here
1   964
1   965	    0077  21				  DB 21h
1   966	    0078  1FBA				 DW _L19D5		 ; LIB,	seek typed
1   967	    007A  FE 05				 DB 0feh, 5
1   968	    007C  28 03				  DB 28h,(L599F)-$-1		     ; jump if typed
1   969
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 18
msx_asm\tur_slib.ASM



1   970	    007E  21				  DB 21h
1   971	    007F  21C4				 DW _L1B6F		 ; LIB,	seek untyped
1   972	    0081  E5			 L599F:	 DB 0e5h
1   973	    0082  CD				 DB 0cdh
1   974	    0083  0000e				 DW  O_PSHHL
1   975	    0085  CD				  DB 0cdh
1   976	    0086  0000e				 DW  L6F5E		   ; match(',')
1   977					 ;	   CALL	L5E97		      ;	parse integer expression
1   978	    0088  CD				  DB 0cdh
1   979	    0089  0000e				 DW  PARSELONG		   ; parse integer/long	expression
1   980	    008B  18 DA				 DB 18h,( L5985)-$-1
1   981
1   982	    008D			 L59AB:	  ; PROCEDURE Flush(VAR	F: FILE	OF TYPE);
1   983	    008D  CD				  DB 0cdh
1   984	    008E  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1   985	    0090  FE 05				 DB 0feh, 5
1   986
1   987	    0092  CD				 DB 0cdh
1   988	    0093  0000e				 DW  L72DA		 ; NonZero --> error
1   989	    0095  40				 DB 40H			 ; error 64: Textfiles and untyped files
1   990									 ;	     are not allowed here
1   991
1   992	    0096  21				  DB 21h
1   993	    0097  1F8E				 DW _L19A5		 ; LIB,	flush typed file
1   994	    0099  18 CD				 DB 18h,( L5986)-$-1
1   995
1   996	    009B			 L59B9:	 ; PROCEDURE Reset(VAR F: FILE);
1   997	    009B  21				  DB 21h
1   998	    009C  0001r				 DW L59FA
1   999	    009E  18 03				 DB 18h,( L59C1)-$-1
1  1000
1  1001	    00A0			 L59BE:	 ; PROCEDURE Rewrite(VAR F: FILE);
1  1002	    00A0  21				 DB 21h
1  1003	    00A1  0007r				 DW L5A00
1  1004	    00A3  E5			 L59C1:	 DB 0e5h
1  1005	    00A4  CD				  DB 0cdh
1  1006	    00A5  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1  1007	    00A7  3A				  DB 3ah
1  1008	    00A8  0000e				 DW L7B5C		; 33e, 54C8
1  1009	    00AA  FE 07				  DB 0feh, 7
1  1010	    00AC  28 13				  DB 28h,(L78CD)-$-1
1  1011	    00AE  FE 05				  DB 0feh, 5			   ; jump if not a typed file
1  1012	    00B0  20 0C				  DB 20h,(L59D8)-$-1
1  1013
1  1014						  ; typed file
1  1015	    00B2  2A				  DB 02ah
1  1016	    00B3  0000e				 DW L7B5E
1  1017	    00B5  CD				 DB 0cdh
1  1018	    00B6  0000e				 DW  L5271
1  1019
1  1020	    00B8  2A				 DB 02ah
1  1021	    00B9  0000e				 DW L7B6F
1  1022	    00BB  CD				 DB 0cdh
1  1023	    00BC  0000e				 DW  O_LDDE
1  1024
1  1025	    00BE  E1			 L59D8:	 DB 0e1h
1  1026	    00BF  18 25				 DB 18h,( L59E1)-$-1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 19
msx_asm\tur_slib.ASM



1  1027
1  1028					 ; 33e
1  1029	    00C1			 L78CD:
1  1030	    00C1  CD				  DB 0cdh
1  1031	    00C2  0000e				 DW  O_PSHHL		   ; L427D
1  1032	    00C4  CD				  DB 0cdh
1  1033	    00C5  0000e				 DW  L6F13		   ; match(','), if present
1  1034	    00C7  20 0E				  DB 20h,(L78E3)-$-1		    ; jump if no size given
1  1035
1  1036	    00C9  3A				  DB 3ah
1  1037	    00CA  0000e				 DW L7B5C
1  1038	    00CC  F5				  DB 0f5h
1  1039	    00CD  CD				  DB 0cdh
1  1040	    00CE  0000e				 DW  L5E97		   ; parse integer expression
1  1041	    00D0  F1				  DB 0f1h
1  1042	    00D1  32				  DB 32h
1  1043	    00D2  0000e				 DW L7B5C
1  1044	    00D4  E1				  DB 0e1h
1  1045	    00D5  18 0F				  DB 18h,( L59E1)-$-1
1  1046
1  1047	    00D7			 L78E3:
1  1048	    00D7  21				  DB 21h
1  1049	    00D8  0080				 DW 0080H		 ; default block size
1  1050	    00DA  CD				  DB 0cdh
1  1051	    00DB  0000e				 DW  O_LDHL
1  1052	    00DD  E1				  DB 0e1h
1  1053	    00DE  18 06				  DB 18h,( L59E1)-$-1
1  1054					 ; 33e
1  1055
1  1056	    00E0			 L59DB:	 ; PROCEDURE Close(VAR F: FILE);
1  1057	    00E0  CD				  DB 0cdh
1  1058	    00E1  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1  1059
1  1060	    00E3  21				  DB 21h
1  1061	    00E4  000Dr				 DW L5A06		 ; HL =	address	of table for closing types
1  1062	    00E6  CD			 L59E1:	  DB 0cdh
1  1063	    00E7  0000e				 DW  L6F6E		   ; match(')')
1  1064
1  1065	    00E9  CD				  DB 0cdh
1  1066	    00EA  0000e				 DW  L59E9		   ; generate call for file I/O
1  1067	    00EC  C3				  DB 0c3h
1  1068	    00ED  0177r				 DW  L5ABE		     ; add call	for I/O	checking, if on
1  1069
1  1070
1  1071	    00EF			 L5A32:	  ; PROCEDURE Readln(VAR F: TEXT);
1  1072	    00EF  3E AF				 DB 3eh,0AFH		 ; NZ =	'LN' after read
1  1073	    00F1  18 01				  DB 18h,( L5A34)-$-1
1  1074
1  1075	    00F3			 L5A33:	 ; PROCEDURE Read(VAR F: FILE OF TYPE; VAR F: TYPE);
1  1076						 ; PROCEDURE Read(VAR F: TEXT; VAR I: INTEGER);
1  1077						  ; PROCEDURE Read(VAR F: TEXT;	VAR L: LONGINT);
1  1078						 ; PROCEDURE Read(VAR F: TEXT; VAR R: REAL);
1  1079						 ; PROCEDURE Read(VAR F: TEXT; VAR C: CHAR);
1  1080						 ; PROCEDURE Read(VAR F: TEXT; VAR S: STRING);
1  1081	    00F3  AF				 DB 0afh
1  1082	    00F4  32			 L5A34:	  DB 32h
1  1083	    00F5  0000e				 DW L7BA3		; 0 = no 'LN' after read
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 20
msx_asm\tur_slib.ASM



1  1084	    00F7  CD				 DB 0cdh
1  1085	    00F8  0000e				 DW  L6F1B		 ; match('('), if present
1  1086	    00FA  28 05				 DB 28h,(L5A41)-$-1		 ; jump	if '(' matched
1  1087
1  1088						 ; PROCEDURE Read;
1  1089	    00FC  CD				 DB 0cdh
1  1090	    00FD  0191r				 DW  L5ACA
1  1091	    00FF  18 6C				 DB 18h,( L5AB4)-$-1
1  1092
1  1093	    0101  CD			 L5A41:	  DB 0cdh
1  1094	    0102  0000e				 DW  L5A17		   ; parse file	parameter
1  1095	    0104  38 1D				 DB 38h,(L5A63)-$-1
1  1096	    0106  20 13				 DB 20h,(L5A5B)-$-1
1  1097
1  1098	    0108  FE 05				  DB 0feh, 5			   ; typed file	?
1  1099	    010A  CA				 DB 0cah
1  1100	    010B  02B0r				 DW L5BD8		 ; jump	if typed file
1  1101
1  1102	    010D  FE 06				  DB 0feh, 6			   ; no	typed file and no text file ?
1  1103
1  1104	    010F  CD				 DB 0cdh
1  1105	    0110  0000e				 DW  L72DA		 ; NonZero --> error
1  1106	    0112  41				 DB 41H			 ; error 65: Untyped files are not allowed here
1  1107
1  1108						 ; read	from text file
1  1109	    0113  21				 DB 21h
1  1110	    0114  1A85				 DW _L14A9		 ; LIB
1  1111	    0116  CD				 DB 0cdh
1  1112	    0117  0000e				 DW  O_CALHL
1  1113	    0119  18 4A				 DB 18h,( L5AAC)-$-1
1  1114
1  1115	    011B  CD			 L5A5B:	 DB 0cdh
1  1116	    011C  0000e				 DW  L678B
1  1117	    011E  CD				 DB 0cdh
1  1118	    011F  0191r				 DW  L5ACA
1  1119	    0121  18 06				 DB 18h,( L5A69)-$-1
1  1120
1  1121	    0123  CD			 L5A63:	 DB 0cdh
1  1122	    0124  0191r				 DW  L5ACA
1  1123	    0126  CD			 L5A66:	  DB 0cdh
1  1124	    0127  0000e				 DW  L677F		   ; parse var parameter
1  1125
1  1126	    0129  3A			 L5A69:	 DB 3ah
1  1127	    012A  0000e				 DW L7B5C
1  1128	    012C  FE 08				 DB 0feh, 8
1  1129	    012E  38 08				  DB 38h,(L5A78)-$-1		     ; no STRING, REAL,	INTEGER, BOOLEAN,
1  1130									     ; CHAR or LONGINT
1  1131
1  1132	    0130  FE 0B				  DB 0feh, 0BH			   ; type = BOOLEAN ?
1  1133	    0132  28 04				  DB 28h,(L5A78)-$-1		     ; jump for	error 66
1  1134
1  1135	    0134  FE 0F				  DB 0feh, 0EH+1
1  1136	    0136  38 04				 DB 38h,(L5A7C)-$-1
1  1137
1  1138	    0138  CD			 L5A78:	 DB 0cdh
1  1139	    0139  0000e				 DW  L72E1		 ; no condition
1  1140	    013B  42				 DB 42H			 ; error 66: I/O are not allowed
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 21
msx_asm\tur_slib.ASM



1  1141
1  1142	    013C  FE 08			 L5A7C:	 DB 0feh, 8
1  1143	    013E  20 0E				 DB 20h,(L5A8F)-$-1
1  1144
1  1145						  ; printed type = STRING
1  1146	    0140  3A				  DB 3ah
1  1147	    0141  0000e				 DW L7B62
1  1148	    0143  3D				 DB 3dh
1  1149	    0144  67				 DB 67h
1  1150	    0145  2E 06				 DB 2eh,6
1  1151	    0147  CD				 DB 0cdh
1  1152	    0148  0000e				 DW  O_HL
1  1153
1  1154	    014A  3E 08				  DB 3eh,8
1  1155	    014C  18 0E				  DB 18h,( L5A90)-$-1
1  1156
1  1157	    014E			 L5A8F:
1  1158	    014E  FE 0A				  DB 0feh, 0AH
1  1159	    0150  20 0A				  DB 20h,(L5A90)-$-1		    ; jump if not INTEGER
1  1160
1  1161	    0152  3A				  DB 3ah
1  1162	    0153  0000e				 DW L7B62
1  1163	    0155  3D				  DB 3dh
1  1164
1  1165	    0156  3E 0A				  DB 3eh,0AH		       ; assume	INTEGER
1  1166	    0158  20 02				  DB 20h,(L5A90)-$-1
1  1167
1  1168	    015A  3E 0D				  DB 3eh,0DH		       ; no, BYTE type
1  1169
1  1170	    015C			 L5A90:
1  1171	    015C  21				  DB 21h
1  1172	    015D  0173r				 DW READTYPESTABLE - 8*2
1  1173	    015F  CD				  DB 0cdh
1  1174	    0160  0000e				 DW  TABLEINDEX2
1  1175
1  1176	    0162  CD				  DB 0cdh
1  1177	    0163  0000e				 DW  O_CALHL
1  1178
1  1179	    0165  CD			 L5AAC:	  DB 0cdh
1  1180	    0166  0000e				 DW  L6F13		   ; match(','), if present
1  1181	    0168  28 BC				 DB 28h,(L5A66)-$-1		 ; jump	if ',' matched
1  1182
1  1183	    016A  CD				 DB 0cdh
1  1184	    016B  0000e				 DW  L6F6E		 ; match(')')
1  1185
1  1186	    016D  21			 L5AB4:	  DB 21h
1  1187	    016E  1CF7				 DW _L16AB		 ; LIB,	'LN' after Read
1  1188
1  1189	    0170  3A			 L5AB7:	  DB 3ah
1  1190	    0171  0000e				 DW L7BA3		; 0 = no 'LN' after read/write
1  1191	    0173  B7				 DB 0b7h
1  1192	    0174  C4				 DB 0c4h
1  1193	    0175  0000e				 DW O_CALHL		 ; call	if LN is needed
1  1194
1  1195	    0177  3A			 L5ABE:	  DB 3ah
1  1196	    0178  0000e				 DW L7B9E		; compiler directives
1  1197	    017A  CB 47				 DB 0cbh,047h			 ; 1 = I/O Error Handling on
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 22
msx_asm\tur_slib.ASM



1  1198	    017C  C8				 DB 0c8h		 ; return if off
1  1199	    017D  21				 DB 21h
1  1200	    017E  272A				 DW _L201B		 ; LIB,	I/O Error function
1  1201	    0180  C3				 DB 0c3h
1  1202	    0181  0000e				 DW  O_CALHL
1  1203
1  1204	    0183			 READTYPESTABLE:
1  1205	    0183  1CDA				  DW _L168E		     ; 08, read	STRING
1  1206	    0185  1CBE				  DW _L1672		     ; 09, read	REAL
1  1207	    0187  1C74				  DW _L164E		     ; 0A, read	INTEGER
1  1208	    0189  0000				  DW 0			     ; 0B
1  1209	    018B  1C67				  DW _L1644		     ; 0C, read	CHAR
1  1210	    018D  1C70				  DW _L164D		     ; 0D, read	BYTE
1  1211	    018F  1C98				  DW _L1671		     ; 0E, read	LONGINT
1  1212
1  1213	    0191  21			 L5ACA:	  DB 21h
1  1214	    0192  1A77				 DW _L149B		 ; LIB,	assume normal output
1  1215	    0194  3A				 DB 3ah
1  1216	    0195  0000e				 DW L7B9E		 ; compiler directives
1  1217	    0197  CB 77				 DB 0cbh,077h			 ; 1 = I/O Mode	selection on
1  1218	    0199  28 10				 DB 28h,(L5AE4)-$-1		 ; jump	if off
1  1219
1  1220	    019B  21				  DB 21h
1  1221	    019C  1AAB				 DW _L14CC		 ; LIB,	read from console
1  1222
1  1223	    019E  3A				  DB 3ah
1  1224	    019F  0000e				 DW L7BA3
1  1225	    01A1  B7				 DB 0b7h
1  1226	    01A2  28 07				 DB 28h,(L5AE4)-$-1
1  1227
1  1228	    01A4  21				  DB 21h
1  1229	    01A5  1AA7				 DW _L14CB		 ; LIB,	readln from console
1  1230	    01A7  AF				 DB 0afh
1  1231	    01A8  32				 DB 32h
1  1232	    01A9  0000e				 DW L7BA3
1  1233	    01AB  C3			 L5AE4:	 DB 0c3h
1  1234	    01AC  0000e				 DW  O_CALHL
1  1235
1  1236	    01AE			 L5AE7:	  ; FastWriteln
1  1237	    01AE  3E 01				  DB 3eh,1
1  1238	    01B0  18 01				  DB 18h,( L5AE72)-$-1
1  1239
1  1240	    01B2			 L5AE71:  ; normal Writeln
1  1241	    01B2  AF				  DB 0afh
1  1242
1  1243	    01B3  32			 L5AE72:  DB 32h
1  1244	    01B4  0000r				 DW FASTWRITE
1  1245
1  1246						  ; PROCEDURE Writeln(VAR F: TEXT);
1  1247	    01B6  3E AF				  DB 3eh,0AFH		       ; NZ = 'LN' after write
1  1248	    01B8  18 09				 DB 18h,( L5AE9)-$-1
1  1249
1  1250	    01BA			 L5AE8:	  ; FastWrite
1  1251	    01BA  3E 01				  DB 3eh,1
1  1252	    01BC  18 01				  DB 18h,( L5AE82)-$-1
1  1253
1  1254	    01BE			 L5AE81:  ; normal Write
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 23
msx_asm\tur_slib.ASM



1  1255	    01BE  AF				  DB 0afh
1  1256
1  1257	    01BF  32			 L5AE82:  DB 32h
1  1258	    01C0  0000r				 DW FASTWRITE
1  1259						  ; PROCEDURE Write(VAR	F: FILE	OF TYPE; VAR V:	TYPE);
1  1260						 ; PROCEDURE Write(VAR F: TEXT;	I: INTEGER);
1  1261						  ; PROCEDURE Write(VAR	F: TEXT; L: LONGINT);
1  1262						  ; PROCEDURE Write(VAR	F: TEXT; R: REAL);
1  1263						 ; PROCEDURE Write(VAR F: TEXT;	B: BOOLEAN);
1  1264						 ; PROCEDURE Write(VAR F: TEXT;	C: CHAR);
1  1265						 ; PROCEDURE Write(VAR F: TEXT;	S: STRING);
1  1266	    01C2  AF				 DB 0afh
1  1267
1  1268	    01C3  32			 L5AE9:	  DB 32h
1  1269	    01C4  0000e				 DW L7BA3		; 0 = no 'LN' after write
1  1270
1  1271	    01C6  CD				  DB 0cdh
1  1272	    01C7  0000e				 DW  L6F1B		   ; match('('), if present
1  1273	    01C9  28 09				  DB 28h,(L5AFA)-$-1		     ; jump if '(' matched
1  1274
1  1275	    01CB  21				 DB 21h
1  1276	    01CC  1A77				 DW _L149B		 ; LIB
1  1277	    01CE  CD				  DB 0cdh
1  1278	    01CF  0000e				 DW  O_CALHL		   ; set FIB address at	standard output
1  1279
1  1280	    01D1  C3				  DB 0c3h
1  1281	    01D2  029Cr				 DW  L5BD2		     ; output CALL for CR, LF codes
1  1282
1  1283	    01D4			 L5AFA:	  ; '('	parsed
1  1284	    01D4  CD				  DB 0cdh
1  1285	    01D5  0000e				 DW  L5A17		   ; parse file	parameter
1  1286	    01D7  38 21				  DB 38h,(L5B20)-$-1		     ; jump if no file variable	present
1  1287									     ; output CALL for standard	output
1  1288	    01D9  20 14				  DB 20h,(L5B15)-$-1
1  1289
1  1290	    01DB  FE 05				  DB 0feh, 5			   ; typed file	?
1  1291	    01DD  CA				  DB 0cah
1  1292	    01DE  02B5r				 DW L5BDD		  ; jump if typed file
1  1293
1  1294	    01E0  FE 06				  DB 0feh, 6			   ; text file
1  1295
1  1296	    01E2  CD				 DB 0cdh
1  1297	    01E3  0000e				 DW  L72DA		 ; NonZero --> error
1  1298	    01E5  41				 DB 41H			 ; error 65: Untyped files are not allowed here
1  1299
1  1300	    01E6  21				 DB 21h
1  1301	    01E7  1A96				 DW _L14BA		 ; LIB
1  1302	    01E9  CD				 DB 0cdh
1  1303	    01EA  0000e				 DW  O_CALHL
1  1304
1  1305	    01EC  C3				 DB 0c3h
1  1306	    01ED  0293r				 DW  L5BC9
1  1307
1  1308	    01EF  CD			 L5B15:	  DB 0cdh
1  1309	    01F0  0000e				 DW  L620F
1  1310
1  1311	    01F2  21				  DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 24
msx_asm\tur_slib.ASM



1  1312	    01F3  1A77				 DW _L149B		 ; LIB
1  1313	    01F5  CD				  DB 0cdh
1  1314	    01F6  0000e				 DW  O_CALHL		   ; set FIB address at	standard output
1  1315	    01F8  18 38				 DB 18h,( L5B4F)-$-1
1  1316
1  1317	    01FA  21			 L5B20:	  DB 21h
1  1318	    01FB  1A77				 DW _L149B		 ; LIB
1  1319	    01FD  CD				  DB 0cdh
1  1320	    01FE  0000e				 DW  O_CALHL		   ; set FIB address at	standard output
1  1321
1  1322	    0200  3E FF			 L5B26:	  DB 3eh,0FFH
1  1323	    0202  32				  DB 32h
1  1324	    0203  0000e				 DW DEF_TYPE		; default type = SMART
1  1325	    0205  1E 00				  DB 1eh,0		       ; no sign
1  1326	    0207  CD				  DB 0cdh
1  1327	    0208  0000e				 DW  L6A5C		   ; parse unsigned-constant
1  1328	    020A  20 21				  DB 20h,(L5B4C)-$-1		    ; jump if no constant parsed
1  1329
1  1330	    020C  78				  DB 78h
1  1331	    020D  FE 08				 DB 0feh, 8
1  1332	    020F  20 17				 DB 20h,(L5B47)-$-1
1  1333	    0211  DD 7E	00			 DB 0ddh,7eh,+0
1  1334	    0214  FE 2C				  DB 0feh, ','
1  1335	    0216  28 04				 DB 28h,(L5B3B)-$-1
1  1336	    0218  FE 29				  DB 0feh, ')'
1  1337	    021A  20 0C				 DB 20h,(L5B47)-$-1
1  1338
1  1339	    021C  21			 L5B3B:	 DB 21h
1  1340	    021D  1E47				 DW _L17BA		 ; LIB
1  1341	    021F  CD				 DB 0cdh
1  1342	    0220  0000e				 DW  O_CALHL
1  1343	    0222  CD				  DB 0cdh
1  1344	    0223  0000e				 DW  L6B5E		   ; output length (C) and data	at L7A57
1  1345	    0225  C3				 DB 0c3h
1  1346	    0226  0293r				 DW  L5BC9
1  1347
1  1348	    0228  CD			 L5B47:	  DB 0cdh
1  1349	    0229  0000e				 DW  L6201
1  1350	    022B  18 05				 DB 18h,( L5B4F)-$-1
1  1351
1  1352	    022D			 L5B4C:
1  1353	    022D  3E FF				  DB 3eh,0FFH		       ; default type =	smart
1  1354	    022F  CD				  DB 0cdh
1  1355	    0230  0000e				 DW  L5EE8		   ; parse expression
1  1356
1  1357	    0232  78			 L5B4F:	  DB 78h
1  1358					 ;	   CP 0EH		      ;	type = LONGINT ?
1  1359					 ;	   JR Z,L5B5C
1  1360
1  1361	    0233  FE 08				  DB 0feh, 8
1  1362	    0235  38 04				 DB 38h,(L5B58)-$-1
1  1363
1  1364	    0237  FE 0F				  DB 0feh, 0EH+1
1  1365	    0239  38 04				 DB 38h,(L5B5C)-$-1
1  1366
1  1367	    023B  CD			 L5B58:	 DB 0cdh
1  1368	    023C  0000e				 DW  L72E1		 ; no condition
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 25
msx_asm\tur_slib.ASM



1  1369	    023E  42				 DB 42H			 ; error 66: I/O are not allowed
1  1370
1  1371	    023F  FE 0C			 L5B5C:	  DB 0feh, 0CH			   ; type = CHAR ?
1  1372	    0241  20 0A				  DB 20h,(L5B6A)-$-1		    ; jump if not
1  1373
1  1374						  ; type = CHAR
1  1375	    0243  CD				  DB 0cdh
1  1376	    0244  0000e				 DW  L6F0B		   ; match(':'), if present
1  1377	    0246  20 41				 DB 20h,(L5BA6)-$-1		 ; jump	if ':' not matched
1  1378
1  1379	    0248  CD				  DB 0cdh
1  1380	    0249  0000e				 DW  L5EDD		   ; code to push CHAR as STRING
1  1381	    024B  18 08				 DB 18h,( L5B72)-$-1
1  1382
1  1383	    024D  CD			 L5B6A:	  DB 0cdh
1  1384	    024E  0000e				 DW  L6148		   ; generate code to push REAL, INTEGER,
1  1385									     ; BOOLEAN,	CHAR, POINTER or LONGINT
1  1386									     ; on the stack
1  1387	    0250  CD				 DB 0cdh
1  1388	    0251  0000e				 DW  L6F0B		 ; match(':'), if present
1  1389	    0253  20 19				 DB 20h,(L5B8B)-$-1		 ; jump	if ':' not matched
1  1390
1  1391	    0255			 L5B72:	  ; ':'	parsed,	size number expected
1  1392	    0255  C5				  DB 0c5h		     ; save type of expression before ':'
1  1393
1  1394	    0256  CD				  DB 0cdh
1  1395	    0257  0000e				 DW  L5E97		   ; parse integer expression
1  1396
1  1397	    0259  C1				  DB 0c1h
1  1398	    025A  78				 DB 78h
1  1399	    025B  FE 09				  DB 0feh, 9			   ; type REAL ?
1  1400	    025D  20 2A				  DB 20h,(L5BA6)-$-1		    ; jump if not
1  1401
1  1402						  ; type = REAL
1  1403						  ; second ':',	number of digits after '.'
1  1404	    025F  CD				  DB 0cdh
1  1405	    0260  0000e				 DW  L6F0B		   ; match(':'), if present
1  1406	    0262  20 1C				 DB 20h,(L5B9D)-$-1		 ; jump	if ':' not matched
1  1407
1  1408						  ; second ':' parsed
1  1409	    0264  C5				  DB 0c5h
1  1410	    0265  CD				  DB 0cdh
1  1411	    0266  0000e				 DW  O_PSHHL		   ; code: push	size on	stack
1  1412
1  1413	    0268  CD				  DB 0cdh
1  1414	    0269  0000e				 DW  L5E97		   ; parse integer expression
1  1415
1  1416	    026B  C1				  DB 0c1h
1  1417	    026C  18 1B				 DB 18h,( L5BA6)-$-1
1  1418
1  1419	    026E			 L5B8B:	  ; <expression>
1  1420	    026E  21				  DB 21h
1  1421	    026F  0000				 DW 0000
1  1422	    0271  78				 DB 78h
1  1423	    0272  FE 09				 DB 0feh, 9
1  1424	    0274  20 02				 DB 20h,(L5B95)-$-1
1  1425
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 26
msx_asm\tur_slib.ASM



1  1426						  ; type = REAL
1  1427	    0276  2E 12				  DB 2eh,12H		       ; default for first ':'
1  1428
1  1429	    0278  CD			 L5B95:	  DB 0cdh
1  1430	    0279  0000e				 DW  O_LDHL
1  1431	    027B  78				 DB 78h
1  1432	    027C  FE 09				 DB 0feh, 9
1  1433	    027E  20 09				 DB 20h,(L5BA6)-$-1
1  1434
1  1435	    0280			 L5B9D:	  ; type = REAL
1  1436	    0280  CD				  DB 0cdh
1  1437	    0281  0000e				 DW  O_PSHHL
1  1438	    0283  21				 DB 21h
1  1439	    0284  FFFF				 DW -1
1  1440	    0286  CD				 DB 0cdh
1  1441	    0287  0000e				 DW  O_LDHL
1  1442
1  1443	    0289  78			 L5BA6:	 DB 78h
1  1444	    028A  21				  DB 21h
1  1445	    028B  0292r				 DW WRITETYPESTABLE - 8*2
1  1446	    028D  CD				  DB 0cdh
1  1447	    028E  0000e				 DW  TABLEINDEX2
1  1448
1  1449	    0290  CD				  DB 0cdh
1  1450	    0291  0000e				 DW  O_CALHL
1  1451
1  1452	    0293  CD			 L5BC9:	  DB 0cdh
1  1453	    0294  0000e				 DW  L6F13		   ; match(','), if present
1  1454	    0296  CA				 DB 0cah
1  1455	    0297  0200r				 DW L5B26		 ; jump	if ',' matched
1  1456	    0299  CD				 DB 0cdh
1  1457	    029A  0000e				 DW  L6F6E		 ; match(')')
1  1458
1  1459	    029C  21			 L5BD2:	  DB 21h
1  1460	    029D  1E5A				 DW _L17CD		 ; LIB,	print CR LF codes
1  1461	    029F  C3				  DB 0c3h
1  1462	    02A0  0170r				 DW  L5AB7
1  1463
1  1464	    02A2			 WRITETYPESTABLE:
1  1465	    02A2  1E37				  DW _L17AA		     ; 08, write STRING
1  1466	    02A4  1DDA				  DW _L1779		     ; 09, write REAL
1  1467	    02A6  1D87				  DW _L1726		     ; 0A, write INTEGER
1  1468	    02A8  1E18				  DW _L178B		     ; 0B, write BOOLEAN
1  1469	    02AA  1D83				  DW _L1722		     ; 0C, write CHAR
1  1470	    02AC  0000				  DW 0			     ; 0D, write .., reserved for BYTE
1  1471	    02AE  1DEC				  DW _PRT_LONG		     ; 0E, write LONGINT
1  1472
1  1473	    02B0  21			 L5BD8:	  DB 21h
1  1474	    02B1  1F5E				 DW _L18B6		 ; LIB,	read from typed	file
1  1475	    02B3  18 03				 DB 18h,( L5BE0)-$-1
1  1476
1  1477	    02B5  21			 L5BDD:	  DB 21h
1  1478	    02B6  1F80				 DW _L18DC		 ; LIB,	write to typed file
1  1479
1  1480	    02B8  22			 L5BE0:	  DB 22h
1  1481	    02B9  0000e				 DW L7BA7
1  1482	    02BB  3A				 DB 3ah
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 27
msx_asm\tur_slib.ASM



1  1483	    02BC  0000e				 DW L7BA3
1  1484	    02BE  B7				 DB 0b7h
1  1485
1  1486	    02BF  CD				 DB 0cdh
1  1487	    02C0  0000e				 DW  L72DA		 ; NonZero --> error
1  1488	    02C2  23				 DB 23H			 ; error 35: Textfile expected
1  1489
1  1490	    02C3  21				  DB 21h
1  1491	    02C4  1F4A				 DW _L18A4		 ; LIB,	save FIB address and check
1  1492									     ; if the file is open
1  1493	    02C6  CD				 DB 0cdh
1  1494	    02C7  0000e				 DW  O_CALHL
1  1495
1  1496	    02C9  2A				  DB 02ah
1  1497	    02CA  0000e				 DW L7B5E
1  1498	    02CC  CD				 DB 0cdh
1  1499	    02CD  0000e				 DW  L5271
1  1500
1  1501	    02CF  CD			 L5BF7:	 DB 0cdh
1  1502	    02D0  0000e				 DW  L6F13		 ; match(','), if present
1  1503	    02D2  20 14				 DB 20h,(L5C10)-$-1		 ; jump	if ',' not matched
1  1504
1  1505	    02D4  CD				 DB 0cdh
1  1506	    02D5  0000e				 DW  L6D24		 ; push	13, L7B64
1  1507	    02D7  CD				  DB 0cdh
1  1508	    02D8  0000e				 DW  L677F		   ; parse var parameter
1  1509	    02DA  CD				 DB 0cdh
1  1510	    02DB  0000e				 DW  L6D43		 ; pop 13, L7B64
1  1511
1  1512	    02DD  CD				  DB 0cdh
1  1513	    02DE  0000e				 DW  L58C5		   ; perform type checking
1  1514	    02E0  2A				 DB 02ah
1  1515	    02E1  0000e				 DW L7BA7
1  1516	    02E3  CD				 DB 0cdh
1  1517	    02E4  0000e				 DW  O_CALHL
1  1518	    02E6  18 E7				 DB 18h,( L5BF7)-$-1
1  1519
1  1520	    02E8  CD			 L5C10:	 DB 0cdh
1  1521	    02E9  0000e				 DW  L6F6E		 ; match(')')
1  1522	    02EB  C3				 DB 0c3h
1  1523	    02EC  0177r				 DW  L5ABE
1  1524
1  1525	    02EE			 L5C16:	  ; PROCEDURE BlockRead(VAR F: FILE; VAR Dest: Type;
1  1526						  ;			Num: INTEGER [;	VAR Result: INTEGER]);
1  1527	    02EE  21				  DB 21h
1  1528	    02EF  2196				 DW _L1AF1		 ; LIB,	with result
1  1529	    02F1  11				  DB 11h
1  1530	    02F2  20C6				 DW _L1ABE		 ; LIB,	without	result
1  1531	    02F4  18 06				 DB 18h,( L5C24)-$-1
1  1532
1  1533	    02F6			 L5C1E:	  ; PROCEDURE BlockWrite(VAR F:	FILE; VAR Dest:	Type;
1  1534						  ;			 Num: INTEGER [; VAR Result: INTEGER]);
1  1535	    02F6  21				  DB 21h
1  1536	    02F7  2192				 DW _L1AED		 ; LIB,	with result
1  1537	    02F9  11				  DB 11h
1  1538	    02FA  20C2				 DW _L1ABA		 ; LIB,	without	result
1  1539
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 28
msx_asm\tur_slib.ASM



1  1540	    02FC  E5			 L5C24:	 DB 0e5h
1  1541	    02FD  D5				 DB 0d5h
1  1542	    02FE  CD				  DB 0cdh
1  1543	    02FF  0000e				 DW  L5A0C		   ; parse '(' and file	parameter
1  1544	    0301  FE 07				 DB 0feh, 7			 ; untyped file	?
1  1545
1  1546	    0303  CD				 DB 0cdh
1  1547	    0304  0000e				 DW  L72DA		 ; NonZero --> error
1  1548	    0306  25				 DB 25H			 ; error 37: Untyped file expected
1  1549
1  1550	    0307  CD				  DB 0cdh
1  1551	    0308  0000e				 DW  O_PSHHL		   ; push address FIB
1  1552	    030A  CD				  DB 0cdh
1  1553	    030B  0000e				 DW  L6F5E		   ; match(',')
1  1554
1  1555	    030D  CD				  DB 0cdh
1  1556	    030E  0000e				 DW  L677F		   ; parse VAR parameter
1  1557	    0310  CD				  DB 0cdh
1  1558	    0311  0000e				 DW  O_PSHHL		   ; push address of untyped variable
1  1559	    0313  CD				  DB 0cdh
1  1560	    0314  0000e				 DW  L6F5E		   ; match(',')
1  1561
1  1562	    0316  CD				  DB 0cdh
1  1563	    0317  0000e				 DW  L5E97		   ; parse integer expression
1  1564	    0319  CD				 DB 0cdh
1  1565	    031A  0000e				 DW  L6F13		 ; match(','), if present
1  1566
1  1567	    031C  D1				 DB 0d1h
1  1568	    031D  E1				 DB 0e1h
1  1569	    031E  28 03				  DB 28h,(L5C4B)-$-1		     ; jump if ',' matched = 'result' parameter
1  1570
1  1571	    0320  D5				  DB 0d5h		     ; address LIB routine without result
1  1572	    0321  18 18				 DB 18h,( L5C63)-$-1
1  1573
1  1574	    0323  E5			 L5C4B:	  DB 0e5h		     ; address LIB routine with	result
1  1575
1  1576	    0324  CD				  DB 0cdh
1  1577	    0325  0000e				 DW  O_PSHHL		   ; push Num parameter	on stack
1  1578
1  1579					 ;	   CALL	ParseIntVar	      ;	parse VAR integer parameter
1  1580	    0327  CD				  DB 0cdh
1  1581	    0328  0000e				 DW  L677F		   ; parse VAR parameter
1  1582
1  1583	    032A  3A				  DB 3ah
1  1584	    032B  0000e				 DW L7B5C
1  1585	    032D  FE 0A				  DB 0feh, 0AH			   ; type = integer ?
1  1586	    032F  20 06				  DB 20h,(L5C5F)-$-1		    ; jump if not integer
1  1587
1  1588	    0331  3A				  DB 3ah
1  1589	    0332  0000e				 DW L7B62		; A = sizeof var parameter (BYTE/INTEGER)
1  1590	    0334  3D				  DB 3dh
1  1591	    0335  20 04				  DB 20h,(L5C63)-$-1		    ; jump if size = 2 --> real	INTEGER
1  1592
1  1593	    0337  CD			 L5C5F:	  DB 0cdh
1  1594	    0338  0000e				 DW  L72E1		   ; no	condition
1  1595	    033A  18				  DB 18H		     ; error 24: Integer variable expected
1  1596
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 29
msx_asm\tur_slib.ASM



1  1597	    033B			 L5C63:
1  1598	    033B  C3				  DB 0c3h
1  1599	    033C  0067r				 DW  L5985
1  1600
1  1601	    033E			 L5C66:	  ; PROCEDURE Delete(VAR S: STRING; Pos, Len: INTEGER);
1  1602	    033E  CD				 DB 0cdh
1  1603	    033F  0000e				 DW  L6F66		 ; match('(')
1  1604	    0341  CD				  DB 0cdh
1  1605	    0342  0000e				 DW  L5CAD		   ; parse VAR string variable
1  1606	    0344  CD				 DB 0cdh
1  1607	    0345  0000e				 DW  O_PSHHL
1  1608	    0347  CD				  DB 0cdh
1  1609	    0348  0000e				 DW  L6F5E		   ; match(',')
1  1610	    034A  CD				  DB 0cdh
1  1611	    034B  0000e				 DW  L5E97		   ; parse integer expression
1  1612	    034D  CD				 DB 0cdh
1  1613	    034E  0000e				 DW  O_PSHHL
1  1614	    0350  CD				  DB 0cdh
1  1615	    0351  0000e				 DW  L6F5E		   ; match(',')
1  1616	    0353  CD				  DB 0cdh
1  1617	    0354  0000e				 DW  L5E97		   ; parse integer expression
1  1618	    0356  21				 DB 21h
1  1619	    0357  0E1C				 DW _L08F3		 ; LIB
1  1620	    0359  CD			 L5C81:	  DB 0cdh
1  1621	    035A  0000e				 DW  L6F6E		   ; match(')')
1  1622	    035C  C3				 DB 0c3h
1  1623	    035D  0000e				 DW  O_CALHL
1  1624
1  1625	    035F			 L5C87:	 ; PROCEDURE Insert(S: STRING; VAR D: STRING; Pos: INTEGER);
1  1626	    035F  CD				 DB 0cdh
1  1627	    0360  0000e				 DW  L6F66		 ; match('(')
1  1628	    0362  CD				  DB 0cdh
1  1629	    0363  0000e				 DW  L5ED0		   ; parse string expression
1  1630	    0365  CD				  DB 0cdh
1  1631	    0366  0000e				 DW  L6F5E		   ; match(',')
1  1632	    0368  CD				  DB 0cdh
1  1633	    0369  0000e				 DW  L5CAD		   ; parse VAR string variable
1  1634	    036B  CD				 DB 0cdh
1  1635	    036C  0000e				 DW  O_PSHHL
1  1636	    036E  3A				 DB 3ah
1  1637	    036F  0000e				 DW L7B62
1  1638	    0371  3D				 DB 3dh
1  1639	    0372  67				 DB 67h
1  1640	    0373  2E 06				 DB 2eh,6
1  1641	    0375  E5				 DB 0e5h
1  1642	    0376  CD				  DB 0cdh
1  1643	    0377  0000e				 DW  L6F5E		   ; match(',')
1  1644	    0379  CD				  DB 0cdh
1  1645	    037A  0000e				 DW  L5E97		   ; parse integer expression
1  1646	    037C  E1				 DB 0e1h
1  1647	    037D  CD				 DB 0cdh
1  1648	    037E  0000e				 DW  O_HL
1  1649	    0380  21				 DB 21h
1  1650	    0381  0E49				 DW _L0920		 ; LIB
1  1651	    0383  18 D4				 DB 18h,( L5C81)-$-1
1  1652
1  1653	    0385			 L5CBA:	  ; PROCEDURE Str(I: INTEGER; VAR S: STRING);
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 30
msx_asm\tur_slib.ASM



1  1654						  ; PROCEDURE Str(L: LONGINT; VAR S: STRING);
1  1655						  ; PROCEDURE Str(R: REAL; VAR S: STRING);
1  1656						  ; (INTEGER [:	INTEGER],
1  1657						  ; (LONGINT [:	INTEGER],
1  1658						  ; (REAL [: INTEGER [:	INTEGER] ],
1  1659	    0385  CD				 DB 0cdh
1  1660	    0386  0000e				 DW  L6F66		 ; match('(')
1  1661	    0388  3E FF				  DB 3eh,0FFH		       ; A = default type = smart
1  1662	    038A  CD				  DB 0cdh
1  1663	    038B  0000e				 DW  L5EA2		   ; parse integer, longint or real expression
1  1664	    038D  CD				  DB 0cdh
1  1665	    038E  0000e				 DW  L6148		   ; generate code to push REAL, INTEGER,
1  1666									     ; BOOLEAN,	CHAR or	POINTER	on the stack
1  1667	    0390  CD				 DB 0cdh
1  1668	    0391  0000e				 DW  L6F0B		 ; match(':'), if present
1  1669	    0393  20 20				 DB 20h,(L5CE4)-$-1		 ; jump	if ':' not matched
1  1670
1  1671	    0395  C5				  DB 0c5h		     ; save type of expression
1  1672
1  1673	    0396  CD				  DB 0cdh
1  1674	    0397  0000e				 DW  L5E97		   ; parse integer expression
1  1675	    0399  CD				 DB 0cdh
1  1676	    039A  0000e				 DW  O_PSHHL
1  1677
1  1678	    039C  C1				  DB 0c1h		      ;	B = type of expression
1  1679
1  1680	    039D  78				  DB 78h
1  1681	    039E  FE 0A				 DB 0feh, 00AH
1  1682	    03A0  28 39				  DB 28h,(L5D02)-$-1		     ; INTEGER has no second ':'
1  1683	    03A2  FE 0E				  DB 0feh, 00EH
1  1684	    03A4  28 35				  DB 28h,(L5D02)-$-1		     ; LONGINT has no second ':'
1  1685
1  1686	    03A6  CD				 DB 0cdh
1  1687	    03A7  0000e				 DW  L6F0B		 ; match(':'), if present
1  1688	    03A9  20 27				 DB 20h,(L5CF9)-$-1		 ; jump	if ':' not matched
1  1689
1  1690	    03AB  C5				 DB 0c5h
1  1691	    03AC  CD				  DB 0cdh
1  1692	    03AD  0000e				 DW  L5E97		   ; parse integer expression
1  1693	    03AF  CD				 DB 0cdh
1  1694	    03B0  0000e				 DW  O_PSHHL
1  1695	    03B2  C1				 DB 0c1h
1  1696	    03B3  18 26				 DB 18h,( L5D02)-$-1
1  1697
1  1698	    03B5			 L5CE4:	  ; (INTEGER
1  1699						  ; (LONGINT
1  1700						  ; (REAL
1  1701	    03B5  21				  DB 21h
1  1702	    03B6  0000				 DW 0			 ; assume ': 0'	for an integer or longint
1  1703	    03B8  78				 DB 78h
1  1704	    03B9  FE 0A				  DB 0feh, 00AH			   ; integer ?
1  1705	    03BB  28 06				 DB 28h,(L5CEE)-$-1
1  1706	    03BD  FE 0E				  DB 0feh, 00EH
1  1707	    03BF  28 02				  DB 28h,(L5CEE)-$-1		     ; longint ?
1  1708
1  1709	    03C1  2E 12				  DB 2eh,012H		       ; default ': 18'	for a real
1  1710
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 31
msx_asm\tur_slib.ASM



1  1711	    03C3  CD			 L5CEE:	  DB 0cdh
1  1712	    03C4  0000e				 DW  O_LDHL
1  1713	    03C6  CD				 DB 0cdh
1  1714	    03C7  0000e				 DW  O_PSHHL
1  1715	    03C9  78				 DB 78h
1  1716	    03CA  FE 0A				  DB 0feh, 00AH			   ; integer ?
1  1717	    03CC  28 0D				  DB 28h,(L5D02)-$-1		     ; an integer does not have	a second ': x'
1  1718	    03CE  FE 0E				  DB 0feh, 00EH			   ; longint ?
1  1719	    03D0  28 09				  DB 28h,(L5D02)-$-1		     ; a longint does not have a second	': x'
1  1720
1  1721	    03D2  21			 L5CF9:	  DB 21h
1  1722	    03D3  FFFF				 DW -1			 ; default second ': -1' for real
1  1723	    03D5  CD				 DB 0cdh
1  1724	    03D6  0000e				 DW  O_LDHL
1  1725	    03D8  CD				 DB 0cdh
1  1726	    03D9  0000e				 DW  O_PSHHL
1  1727
1  1728	    03DB  CD			 L5D02:	  DB 0cdh
1  1729	    03DC  0000e				 DW  L6F5E		   ; match(',')
1  1730
1  1731	    03DE  C5				  DB 0c5h
1  1732
1  1733	    03DF  CD				  DB 0cdh
1  1734	    03E0  0000e				 DW  L5CAD		   ; parse VAR string variable
1  1735	    03E2  3A				 DB 3ah
1  1736	    03E3  0000e				 DW L7B62
1  1737	    03E5  3D				 DB 3dh
1  1738	    03E6  67				 DB 67h
1  1739	    03E7  2E 06				 DB 2eh,6
1  1740	    03E9  CD				  DB 0cdh
1  1741	    03EA  0000e				 DW  O_HL		   ; output: LD	B,length of string variable
1  1742
1  1743	    03EC  C1				  DB 0c1h		      ;	B = type of first expression
1  1744
1  1745	    03ED  21				  DB 21h
1  1746	    03EE  25B0				 DW _L1EBE		 ; LIB,	print INTEGER
1  1747	    03F0  78				 DB 78h
1  1748	    03F1  FE 0A				 DB 0feh, 00AH
1  1749	    03F3  28 0A				 DB 28h,(L5D1F)-$-1
1  1750
1  1751	    03F5  21				  DB 21h
1  1752	    03F6  25A8				 DW _L1EBC		 ; LIB,	print LONGINT
1  1753	    03F8  FE 0E				  DB 0feh, 00EH
1  1754	    03FA  28 03				  DB 28h,(L5D1F)-$-1
1  1755
1  1756	    03FC  21				  DB 21h
1  1757	    03FD  25AC				 DW _L1EBD		 ; LIB,	print REAL
1  1758	    03FF  C3			 L5D1F:	 DB 0c3h
1  1759	    0400  0359r				 DW  L5C81
1  1760
1  1761	    0402			 L5D22:	  ; PROCEDURE Val(S: STRING; VAR R: REAL; VAR P: INTEGER);
1  1762						  ; PROCEDURE Val(S: STRING; VAR L: LONGINT; P:	INTEGER);
1  1763						 ; PROCEDURE Val(S: STRING; VAR	I,P: INTEGER);
1  1764	    0402  CD				 DB 0cdh
1  1765	    0403  0000e				 DW  L6F66		 ; match('(')
1  1766	    0405  CD				  DB 0cdh
1  1767	    0406  0000e				 DW  L5ED0		   ; parse string expression
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 32
msx_asm\tur_slib.ASM



1  1768	    0408  CD				  DB 0cdh
1  1769	    0409  0000e				 DW  L6F5E		   ; match(',')
1  1770	    040B  CD				  DB 0cdh
1  1771	    040C  0000e				 DW  L677F		   ; parse VAR parameter
1  1772	    040E  3A				 DB 3ah
1  1773	    040F  0000e				 DW L7B5C
1  1774
1  1775	    0411  FE 09				  DB 0feh, 9			   ; type = REAL ?
1  1776	    0413  28 14				  DB 28h,(L5D45)-$-1		     ; jump if type = REAL
1  1777
1  1778	    0415  FE 0E				  DB 0feh, 00EH			   ; type = LONGINT ?
1  1779	    0417  28 10				  DB 28h,(L5D45)-$-1		     ; jump if type = LONGINT
1  1780
1  1781	    0419  FE 0A				  DB 0feh, 00AH			   ; type = INTEGER ?
1  1782	    041B  20 08				  DB 20h,(L5D41)-$-1		    ; jump if not
1  1783
1  1784	    041D  3A				  DB 3ah
1  1785	    041E  0000e				 DW L7B62
1  1786	    0420  3D				 DB 3dh
1  1787	    0421  3E 0A				 DB 3eh,00AH
1  1788	    0423  20 04				 DB 20h,(L5D45)-$-1
1  1789
1  1790	    0425  CD			 L5D41:	  DB 0cdh
1  1791	    0426  0000e				 DW  L72E1		   ; no	condition
1  1792	    0428  1B				  DB 1BH		     ; error 27: Integer, longint or
1  1793									     ; real variable expected
1  1794
1  1795	    0429  F5			 L5D45:	  DB 0f5h
1  1796	    042A  CD				 DB 0cdh
1  1797	    042B  0000e				 DW  O_PSHHL
1  1798	    042D  CD				  DB 0cdh
1  1799	    042E  0000e				 DW  L6F5E		   ; match(',')
1  1800	    0430  CD				  DB 0cdh
1  1801	    0431  0000e				 DW  L677F		   ; parse VAR parameter
1  1802	    0433  3A				 DB 3ah
1  1803	    0434  0000e				 DW L7B5C
1  1804	    0436  FE 0A				  DB 0feh, 00AH			   ; type = integer ?
1  1805	    0438  20 06				 DB 20h,(L5D5C)-$-1		 ; jump	if type	<> integer
1  1806
1  1807	    043A  3A				 DB 3ah
1  1808	    043B  0000e				 DW L7B62
1  1809	    043D  3D				 DB 3dh
1  1810	    043E  20 04				 DB 20h,(L5D60)-$-1
1  1811
1  1812	    0440  CD			 L5D5C:	  DB 0cdh
1  1813	    0441  0000e				 DW  L72E1		   ; no	condition
1  1814	    0443  18				 DB 18H			 ; error 24: Integer variable expected
1  1815
1  1816	    0444  F1			 L5D60:	  DB 0f1h		      ;	A = type
1  1817	    0445  21				 DB 21h
1  1818	    0446  25F4				 DW _L1EF4		 ; LIB,	val(string,integer,integer)
1  1819	    0448  FE 0A				  DB 0feh, 00AH			   ; type = INTEGER ?
1  1820	    044A  28 B3				 DB 28h,(L5D1F)-$-1
1  1821
1  1822	    044C  21				  DB 21h
1  1823	    044D  25EC				 DW _L1EF2		 ; LIB,	val(string,longint,integer)
1  1824	    044F  FE 0E				  DB 0feh, 00EH			   ; type = LONGINT ?
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 33
msx_asm\tur_slib.ASM



1  1825	    0451  28 AC				  DB 28h,(L5D1F)-$-1
1  1826
1  1827	    0453  21				  DB 21h
1  1828	    0454  25F0				 DW _L1EF3		 ; LIB,	val(string,real,integer)
1  1829	    0456  18 A7				 DB 18h,( L5D1F)-$-1
1  1830
1  1831	    0458			 L5D6D:	  ; PROCEDURE GotoXY(X,	Y: INTEGER);
1  1832	    0458  CD				 DB 0cdh
1  1833	    0459  0000e				 DW  L6F66		 ; match('(')
1  1834	    045B  CD				  DB 0cdh
1  1835	    045C  0000e				 DW  L5E97		   ; parse integer expression
1  1836	    045E  21				 DB 21h
1  1837	    045F  26E3				 DW _L1FDB		 ; LIB
1  1838	    0461  C3				  DB 0c3h
1  1839	    0462  0000e				 DW  L5D76
1  1840
1  1841	    0464			 L5D83:	  ; PROCEDURE Randomize;
1  1842	    0464  21				 DB 21h
1  1843	    0465  2650				 DW _L1F48		 ; LIB
1  1844	    0467  C3				 DB 0c3h
1  1845	    0468  0000e				 DW  O_CALHL
1  1846
1  1847	    046A			 L5D89:	  ; PROCEDURE Delay(mS:	INTEGER);
1  1848	    046A  CD				 DB 0cdh
1  1849	    046B  0000e				 DW  L6F66		 ; match('(')
1  1850	    046D  CD				  DB 0cdh
1  1851	    046E  0000e				 DW  L5E97		   ; parse integer expression
1  1852	    0470  21				 DB 21h
1  1853	    0471  02D0				 DW _L021D		 ; LIB
1  1854	    0473  C3				  DB 0c3h
1  1855	    0474  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1856
1  1857	    0476			 L5E05:	  ; PROCEDURE Move(VAR Source,Dest: TYPE; Length: INTEGER);
1  1858	    0476  CD				 DB 0cdh
1  1859	    0477  0000e				 DW  L6F66		 ; match('(')
1  1860	    0479  CD				  DB 0cdh
1  1861	    047A  0000e				 DW  L677F		   ; parse VAR parameter
1  1862	    047C  CD				 DB 0cdh
1  1863	    047D  0000e				 DW  O_PSHHL
1  1864	    047F  CD				  DB 0cdh
1  1865	    0480  0000e				 DW  L6F5E		   ; match(',')
1  1866	    0482  CD				  DB 0cdh
1  1867	    0483  0000e				 DW  L677F		   ; parse VAR parameter
1  1868	    0485  21				 DB 21h
1  1869	    0486  266C				 DW _L1F64		 ; LIB,	clear
1  1870	    0488  C3				 DB 0c3h
1  1871	    0489  0000e				 DW  L5D76
1  1872
1  1873	    048B			 L5E1A:	  ; PROCEDURE FillChar(var Dest; Length: INTEGER; Data:	CHAR);
1  1874						 ; PROCEDURE FillChar(var Dest;	Length:	INTEGER; Data: BYTE);
1  1875	    048B  CD				 DB 0cdh
1  1876	    048C  0000e				 DW  L6F66		 ; match('(')
1  1877	    048E  CD				  DB 0cdh
1  1878	    048F  0000e				 DW  L677F		   ; parse VAR parameter
1  1879	    0491  CD				 DB 0cdh
1  1880	    0492  0000e				 DW  O_PSHHL
1  1881	    0494  CD				  DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 34
msx_asm\tur_slib.ASM



1  1882	    0495  0000e				 DW  L6F5E		   ; match(',')
1  1883	    0497  CD				  DB 0cdh
1  1884	    0498  0000e				 DW  L5E97		   ; parse integer expression
1  1885	    049A  CD				 DB 0cdh
1  1886	    049B  0000e				 DW  O_PSHHL
1  1887	    049D  CD				  DB 0cdh
1  1888	    049E  0000e				 DW  L6F5E		   ; match(',')
1  1889	    04A0  3E 0A				  DB 3eh,0AH		       ; A = default type = INTEGER
1  1890	    04A2  CD				  DB 0cdh
1  1891	    04A3  0000e				 DW  L5EBB		   ; parse simple expression
1  1892	    04A5  21				 DB 21h
1  1893	    04A6  2656				 DW _L1F4E		 ; LIB,	clear
1  1894	    04A8  C3				  DB 0c3h
1  1895	    04A9  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1896
1  1897	    04AB			 L5D94:	  ; PROCEDURE GetMem(VAR P: POINTER; I:	INTEGER);
1  1898	    04AB  CD				  DB 0cdh
1  1899	    04AC  04FBr				 DW  L5DE3		   ; parse '(',	VAR pointer and	O_PSHHL
1  1900	    04AE  CD				  DB 0cdh
1  1901	    04AF  0000e				 DW  L6F5E		   ; match(',')
1  1902	    04B1  CD				  DB 0cdh
1  1903	    04B2  0000e				 DW  L5E97		   ; parse integer expression
1  1904	    04B4  18 0F				 DB 18h,( L5DAE)-$-1
1  1905
1  1906	    04B6			 L5D9F:	 ; PROCEDURE New(VAR P:	POINTER);
1  1907	    04B6  CD				  DB 0cdh
1  1908	    04B7  04FBr				 DW  L5DE3		   ; parse '(',	VAR pointer and	O_PSHHL
1  1909	    04B9  2A				 DB 02ah
1  1910	    04BA  0000e				 DW L7B5E
1  1911	    04BC  CD				 DB 0cdh
1  1912	    04BD  0000e				 DW  L5271
1  1913	    04BF  2A				 DB 02ah
1  1914	    04C0  0000e				 DW L7B6F
1  1915	    04C2  CD				 DB 0cdh
1  1916	    04C3  0000e				 DW  O_LDHL
1  1917
1  1918	    04C5  21			 L5DAE:	 DB 21h
1  1919	    04C6  23D0				 DW _L1CE5		 ; LIB,	clear
1  1920	    04C8  C3				  DB 0c3h
1  1921	    04C9  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1922
1  1923	    04CB			 L5DB4:	 ; PROCEDURE FreeMem(VAR P: POINTER; I:	INTEGER);
1  1924	    04CB  CD				  DB 0cdh
1  1925	    04CC  04FBr				 DW  L5DE3		   ; parse '(',	VAR pointer and	O_PSHHL
1  1926	    04CE  CD				  DB 0cdh
1  1927	    04CF  0000e				 DW  L6F5E		   ; match(',')
1  1928	    04D1  CD				  DB 0cdh
1  1929	    04D2  0000e				 DW  L5E97		   ; parse integer expression
1  1930	    04D4  18 0F				 DB 18h,( L5DCE)-$-1
1  1931
1  1932	    04D6			 L5DBF:	 ; PROCEDURE Dispose(VAR P: POINTER);
1  1933	    04D6  CD				  DB 0cdh
1  1934	    04D7  04FBr				 DW  L5DE3		   ; parse '(',	VAR pointer and	O_PSHHL
1  1935	    04D9  2A				 DB 02ah
1  1936	    04DA  0000e				 DW L7B5E
1  1937	    04DC  CD				 DB 0cdh
1  1938	    04DD  0000e				 DW  L5271
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 35
msx_asm\tur_slib.ASM



1  1939	    04DF  2A				 DB 02ah
1  1940	    04E0  0000e				 DW L7B6F
1  1941	    04E2  CD				 DB 0cdh
1  1942	    04E3  0000e				 DW  O_LDHL
1  1943
1  1944	    04E5  21			 L5DCE:	 DB 21h
1  1945	    04E6  2465				 DW _L1D7A		 ; LIB,	clear
1  1946	    04E8  C3				  DB 0c3h
1  1947	    04E9  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1948
1  1949	    04EB			 L5DD4:	 ; PROCEDURE Mark(VAR P: POINTER);
1  1950	    04EB  21				 DB 21h
1  1951	    04EC  258E				 DW _L1EA3		 ; LIB,	clear
1  1952	    04EE  18 03				 DB 18h,( L5DDC)-$-1
1  1953
1  1954	    04F0			 L5DD9:	 ; PROCEDURE Release(VAR P: POINTER);
1  1955	    04F0  21				 DB 21h
1  1956	    04F1  2596				 DW _L1EAB		 ; LIB,	clear
1  1957
1  1958	    04F3  E5			 L5DDC:	  DB 0e5h
1  1959	    04F4  CD				  DB 0cdh
1  1960	    04F5  0501r				 DW  L5DE9		   ; parse '(' and VAR pointer
1  1961	    04F7  E1				 DB 0e1h
1  1962	    04F8  C3				  DB 0c3h
1  1963	    04F9  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1964
1  1965	    04FB			 L5DE3:	  ; parses a '(', VAR pointer and O_PSHHL
1  1966	    04FB  CD				  DB 0cdh
1  1967	    04FC  0501r				 DW  L5DE9		   ; parse '(' and VAR pointer
1  1968
1  1969	    04FE  C3				 DB 0c3h
1  1970	    04FF  0000e				 DW  O_PSHHL
1  1971
1  1972	    0501			 L5DE9:	  ; parses a '(' and VAR pointer
1  1973	    0501  CD				  DB 0cdh
1  1974	    0502  0000e				 DW  L6F66		   ; match('(')
1  1975	    0504  CD				  DB 0cdh
1  1976	    0505  0000e				 DW  L677F		   ; parse VAR parameter
1  1977	    0507  3A				 DB 3ah
1  1978	    0508  0000e				 DW L7B5C
1  1979	    050A  FE 04				  DB 0feh, 4			   ; pointer variable parsed ?
1  1980	    050C  C8				  DB 0c8h		       ; return	if yes
1  1981
1  1982	    050D  CD				 DB 0cdh
1  1983	    050E  0000e				 DW  L72E1		 ; no condition
1  1984	    0510  1C				 DB 1CH			 ; error 28: Pointer variable expected
1  1985
1  1986	    0511			 L5DF9:	  ; PROCEDURE OvrDrive(Drive: INTEGER);
1  1987	    0511  CD				 DB 0cdh
1  1988	    0512  0000e				 DW  L6F66		 ; match('(')
1  1989	    0514  CD				  DB 0cdh
1  1990	    0515  0000e				 DW  L5E97		   ; parse integer expression
1  1991	    0517  21				 DB 21h
1  1992	    0518  23C6				 DW _L1CDB		 ; LIB,	clear
1  1993	    051A  C3				  DB 0c3h
1  1994	    051B  0000e				 DW  L5960		     ; match(')'), CALL	HL
1  1995
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 36
msx_asm\tur_slib.ASM



1  1996	    051D			 L5E38:	  ; PROCEDURE CrtInit;
1  1997	    051D  21				 DB 21h
1  1998	    051E  03BD				 DW _L030A		 ; LIB,	done
1  1999	    0520  18 08				  DB 18h,( L5E45)-$-1			; CALL HL
1  2000
1  2001	    0522			 L5E3D:	 ; PROCEDURE CrtExit;
1  2002	    0522  21				 DB 21h
1  2003	    0523  03C3				 DW _L0310		 ; LIB,	done
1  2004	    0525  18 03				  DB 18h,( L5E45)-$-1			; CALL HL
1  2005
1  2006	    0527			 L5E42:	 ; PROCEDURE ClrScr;
1  2007	    0527  21				 DB 21h
1  2008	    0528  02F1				 DW _L023E		 ; LIB,	done
1  2009
1  2010	    052A  C3			 L5E45:	  DB 0c3h
1  2011	    052B  0000e				 DW  O_CALHL
1  2012
1  2013	    052D			 L5E48:	 ; PROCEDURE ClrEol;
1  2014	    052D  21				 DB 21h
1  2015	    052E  034C				 DW _L0299		 ; LIB,	done
1  2016	    0530  18 F8				  DB 18h,( L5E45)-$-1			; CALL HL
1  2017
1  2018	    0532			 L5E4D:	 ; PROCEDURE NormVideo;
1  2019						 ; PROCEDURE HighVideo;
1  2020	    0532  21				 DB 21h
1  2021	    0533  0337				 DW _L0284		 ; LIB,	done
1  2022	    0535  18 F3				  DB 18h,( L5E45)-$-1			; CALL HL
1  2023
1  2024	    0537			 L5E52:	 ; PROCEDURE LowVideo;
1  2025	    0537  21				 DB 21h
1  2026	    0538  031E				 DW _L026B		 ; LIB,	done
1  2027	    053A  18 EE				  DB 18h,( L5E45)-$-1			; CALL HL
1  2028
1  2029	    053C			 L5E57:	 ; PROCEDURE InsLine;
1  2030	    053C  21				 DB 21h
1  2031	    053D  0315				 DW _L0262		 ; LIB,	done
1  2032	    053F  18 E9				  DB 18h,( L5E45)-$-1			; CALL HL
1  2033
1  2034	    0541			 L5E5C:	 ; PROCEDURE DelLine;
1  2035	    0541  21				  DB 21h
1  2036	    0542  030C				 DW _L0259		 ; LIB,	done
1  2037	    0544  18 E4				  DB 18h,( L5E45)-$-1			; CALL HL
1  2038
1  2039	    0546			 P_ERROREXIT:
1  2040						  ; PROCEDURE ErrorExit;
1  2041
1  2042	    0546  CD				  DB 0cdh
1  2043	    0547  0000e				 DW  L6F1B		   ; match('('), if present
1  2044	    0549  20 06				  DB 20h,(P_ERROREXIT1)-$-1	    ; jump if '(' not matched
1  2045
1  2046	    054B  CD				  DB 0cdh
1  2047	    054C  0000e				 DW  L5EA2		   ; parse integer, longint or real expression
1  2048
1  2049	    054E  CD				  DB 0cdh
1  2050	    054F  0000e				 DW  L6F6E		   ; match(')')
1  2051
1  2052	    0551			 P_ERROREXIT1:
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 37
msx_asm\tur_slib.ASM



1  2053	    0551  21				  DB 21h
1  2054	    0552  286F				 DW _ERROREXIT
1  2055	    0554  C3				  DB 0c3h
1  2056	    0555  0000e				 DW  O_CALHL
1  2057
1  2058	    0557			 L5E61:	  ; PROCEDURE Exit;
1  2059	    0557  11				  DB 11h
1  2060	    0558  0000				 DW 0000		 ;
1  2061	    055A  C3				  DB 0c3h
1  2062	    055B  0000e				 DW  L5639
1  2063
1  2064	    055D			 L5E67:	 ; PROCEDURE Halt;
1  2065	    055D  21				 DB 21h
1  2066	    055E  27FD				 DW _L20D4		 ; LIB,	done
1  2067	    0560  C3				 DB 0c3h
1  2068	    0561  0000e				 DW  O_JPHL
1  2069
1  2070	    0563			 L5E6D:	  ; PROCEDURE Port(Port: INTEGER);
1  2071	    0563  CD				  DB 0cdh
1  2072	    0564  0000e				 DW  L5E8E		   ; parse array index,	':=', integer expr.
1  2073
1  2074	    0566  CD				 DB 0cdh
1  2075	    0567  0000e				 DW  O_CODE
1  2076	    0569  03				 DB 3
1  2077	    056A  C1				 DB 0C1H		 ; POP BC
1  2078	    056B  ED 69				 DB 0EDH,69H		 ; OUT (C),L
1  2079
1  2080	    056D  C9				 DB 0c9h
1  2081
1  2082	    056E			 L5E78:	  ; StackPtr:= INTEGER;
1  2083	    056E  CD				 DB 0cdh
1  2084	    056F  0000e				 DW  L6F7E		 ; match(':=')
1  2085	    0571  CD				  DB 0cdh
1  2086	    0572  0000e				 DW  L5E97		   ; parse integer expression
1  2087
1  2088	    0574  CD				 DB 0cdh
1  2089	    0575  0000e				 DW  O_CODE
1  2090	    0577  01				 DB 1
1  2091	    0578  F9				 DB 0F9H		 ; LD SP,HL
1  2092
1  2093	    0579  C9				 DB 0c9h
1  2094
1  2095	    057A			 L6360:	  ; FUNCTION Sqr(I: INTEGER): INTEGER;
1  2096						  ; FUNCTION Sqr(L: LONGINT): LONGINT;
1  2097						 ; FUNCTION Sqr(R: REAL): REAL;
1  2098	    057A  CD				  DB 0cdh
1  2099	    057B  0000e				 DW  L65E7		   ; parse integer, longint or real expression
1  2100
1  2101	    057D  21				 DB 21h
1  2102	    057E  090F				 DW _L06F3		 ; LIB,	Sqr(I: INTEGER): INTEGER;
1  2103	    0580  78				 DB 78h
1  2104	    0581  FE 0A				  DB 0feh, 00AH			   ; type = INTEGER ?
1  2105	    0583  28 0A				  DB 28h,(L636E)-$-1		     ; jump if type = INTEGER
1  2106
1  2107	    0585  21				  DB 21h
1  2108	    0586  0A94				 DW _L_SQR
1  2109	    0588  FE 0E				  DB 0feh, 00EH			   ; type = LONGINT ?
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 38
msx_asm\tur_slib.ASM



1  2110	    058A  28 03				  DB 28h,(L636E)-$-1		     ; jump if type = LONGINT
1  2111
1  2112	    058C  21				 DB 21h
1  2113	    058D  0F20				 DW _L09F7		 ; LIB,	Sqr(R: REAL): REAL;
1  2114
1  2115	    058F  C3			 L636E:	 DB 0c3h
1  2116	    0590  0000e				 DW  O_CALHL
1  2117
1  2118	    0592			 L6371:	  ; FUNCTION Abs(I: INTEGER): INTEGER;
1  2119						 ; FUNCTION Abs(R: REAL): REAL;
1  2120						  ; FUNCTION Abs(L: LONGINT): LONGINT;
1  2121	    0592  CD				  DB 0cdh
1  2122	    0593  0000e				 DW  L65E7		   ; parse integer, longint or real expression
1  2123	    0595  78				 DB 78h
1  2124	    0596  FE 0A				  DB 0feh, 00AH			   ; type = INTEGER ?
1  2125	    0598  28 0B				 DB 28h,(L6380)-$-1
1  2126
1  2127	    059A  FE 0E				  DB 0feh, 00EH			   ; type = LONGINT ?
1  2128	    059C  28 0C				  DB 28h,(L63801)-$-1
1  2129
1  2130						  ; code for REAL
1  2131	    059E  CD				 DB 0cdh
1  2132	    059F  0000e				 DW  O_CODE
1  2133	    05A1  02				 DB 2
1  2134	    05A2  CB B8				 DB 0CBH,0B8H		 ; RES 7,B
1  2135
1  2136	    05A4  C9				 DB 0c9h
1  2137
1  2138	    05A5			 L6380:	 ; FUNCTION Abs(I: INTEGER): INTEGER;
1  2139	    05A5  21				 DB 21h
1  2140	    05A6  09E2				 DW _L0780		 ; LIB,	absolute HL, done
1  2141	    05A8  18 5E				 DB 18h,( L63CF)-$-1
1  2142
1  2143	    05AA			 L63801:  ; FUNCTION Abs(L: LONGINT): LONGINT;
1  2144	    05AA  21				  DB 21h
1  2145	    05AB  0A61				 DW _L_ABS
1  2146	    05AD  06 0E				  DB 06h,0EH		       ; return	type = LONGINT
1  2147	    05AF  C3				  DB 0c3h
1  2148	    05B0  0000e				 DW  O_CALHL
1  2149
1  2150	    05B2			 L6385:	  ; FUNCTION Sqrt(R: REAL): REAL;
1  2151	    05B2  21				 DB 21h
1  2152	    05B3  11BA				 DW _L0C46		 ; LIB,	clear
1  2153	    05B5  18 21				  DB 18h,( L63AB)-$-1
1  2154
1  2155	    05B7			 L638A:	  ; FUNCTION Sin(R: REAL): REAL;
1  2156	    05B7  21				 DB 21h
1  2157	    05B8  11FB				 DW _L0C87		 ; LIB,	clear
1  2158	    05BA  18 1C				 DB 18h,( L63AB)-$-1
1  2159
1  2160	    05BC			 L638F:	  ; FUNCTION Cos(R: REAL): REAL;
1  2161	    05BC  21				 DB 21h
1  2162	    05BD  11F3				 DW _L0C7F		 ; LIB,	clear
1  2163	    05BF  18 17				 DB 18h,( L63AB)-$-1
1  2164
1  2165	    05C1			 L6394:	  ; FUNCTION ArcTan(R: REAL): REAL;
1  2166	    05C1  21				 DB 21h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 39
msx_asm\tur_slib.ASM



1  2167	    05C2  13BA				 DW _L0E46		 ; LIB,	clear
1  2168	    05C4  18 12				 DB 18h,( L63AB)-$-1
1  2169
1  2170	    05C6			 L6399:	  ; FUNCTION Ln(R: REAL): REAL;
1  2171	    05C6  21				 DB 21h
1  2172	    05C7  129F				 DW _L0D2B		 ; LIB,	clear
1  2173	    05C9  18 0D				 DB 18h,( L63AB)-$-1
1  2174
1  2175	    05CB			 L639E:	  ; FUNCTION Exp(R: REAL): REAL;
1  2176	    05CB  21				 DB 21h
1  2177	    05CC  132A				 DW _L0DB6		 ; LIB,	clear
1  2178	    05CE  18 08				 DB 18h,( L63AB)-$-1
1  2179
1  2180	    05D0			 L63A3:	  ; FUNCTION Int(R: REAL): REAL;
1  2181	    05D0  21				 DB 21h
1  2182	    05D1  1171				 DW _L0BFD		 ; LIB,	clear
1  2183	    05D3  18 03				 DB 18h,( L63AB)-$-1
1  2184
1  2185	    05D5			 L63A8:	  ; FUNCTION Frac(R: REAL): REAL;
1  2186	    05D5  21				 DB 21h
1  2187	    05D6  11A8				 DW _L0C34		 ; LIB,	clear
1  2188
1  2189	    05D8  E5			 L63AB:	 DB 0e5h
1  2190	    05D9  CD				  DB 0cdh
1  2191	    05DA  0000e				 DW  L65E7		   ; parse integer, longint or real expression
1  2192
1  2193	    05DC  78				 DB 78h
1  2194	    05DD  FE 09				  DB 0feh, 009H			   ; type = REAL ?
1  2195	    05DF  28 0D				  DB 28h,(L63AD)-$-1		     ; jump if type = REAL
1  2196
1  2197	    05E1  21				 DB 21h
1  2198	    05E2  1581				 DW _L1008		 ; LIB,	convert	integer	HL to float HLDEBC
1  2199	    05E4  FE 0A				  DB 0feh, 00AH			   ; type = INTEGER ?
1  2200	    05E6  28 03				  DB 28h,(L63AC)-$-1		     ; jump if type = INTEGER
1  2201
1  2202	    05E8  21				  DB 21h
1  2203	    05E9  15A0				 DW _L_R		 ; LONGINT to REAL conversion
1  2204
1  2205	    05EB  CD			 L63AC:	  DB 0cdh
1  2206	    05EC  0000e				 DW  O_CALHL
1  2207
1  2208	    05EE			 L63AD:
1  2209	    05EE  E1				 DB 0e1h
1  2210	    05EF  06 09				 DB 06h,9
1  2211	    05F1  C3				 DB 0c3h
1  2212	    05F2  0000e				 DW  O_CALHL
1  2213
1  2214	    05F4			 L63BE:	  ; FUNCTION Trunc(R: REAL): INTEGER;
1  2215	    05F4  21				 DB 21h
1  2216	    05F5  1552				 DW _L0FDE		 ; LIB,	float HLDEBC to	int HL,	clear
1  2217	    05F7  18 03				 DB 18h,( L63C6)-$-1
1  2218
1  2219	    05F9			 L63C3:	  ; FUNCTION Round(R: REAL): INTEGER;
1  2220	    05F9  21				 DB 21h
1  2221	    05FA  1544				 DW _L0FD0		 ; LIB,	clear
1  2222
1  2223	    05FC  E5			 L63C6:	  DB 0e5h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 40
msx_asm\tur_slib.ASM



1  2224	    05FD  CD				  DB 0cdh
1  2225	    05FE  0000e				 DW  L65E7		   ; parse integer, longint or real expression
1  2226	    0600  E1				 DB 0e1h
1  2227	    0601  78				 DB 78h
1  2228	    0602  FE 0A				 DB 0feh, 00AH			 ; integer ?
1  2229	    0604  C8				  DB 0c8h		       ; yes, return
1  2230
1  2231	    0605  FE 0E				  DB 0feh, 00EH			   ; longint ?
1  2232	    0607  C8				  DB 0c8h		       ; yes, return
1  2233
1  2234	    0608  06 0A			 L63CF:	 DB 06h,00AH
1  2235	    060A  C3				 DB 0c3h
1  2236	    060B  0000e				 DW  O_CALHL
1  2237
1  2238	    060D			 L63D4:	  ; FUNCTION Succ(X: SCALAR): SCALAR;
1  2239	    060D  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2240	    060F  CD				  DB 0cdh
1  2241	    0610  0000e				 DW  L65EF		   ; match('('), simple	expression, match(')')
1  2242
1  2243	    0612  78				  DB 78h
1  2244	    0613  FE 0E				  DB 0feh, 0EH			   ; type = LONGINT ?
1  2245	    0615  20 06				  DB 20h,(L63D5)-$-1		    ; jump if not
1  2246
1  2247	    0617  21				  DB 21h
1  2248	    0618  087C				 DW _L_SUCC
1  2249	    061A  C3				  DB 0c3h
1  2250	    061B  0000e				 DW  O_CALHL
1  2251
1  2252	    061D			 L63D5:
1  2253	    061D  3E 23				  DB 3eh,023H		       ; opcode: INC HL
1  2254	    061F  C3				  DB 0c3h
1  2255	    0620  0000e				 DW  O_BYTE
1  2256
1  2257	    0622			 L63D7:	  ; FUNCTION Pred(X: SCALAR) : SCALAR;
1  2258	    0622  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2259	    0624  CD				  DB 0cdh
1  2260	    0625  0000e				 DW  L65EF		   ; match('('), simple	expression, match(')')
1  2261
1  2262	    0627  78				  DB 78h
1  2263	    0628  FE 0E				  DB 0feh, 0EH			   ; type = LONGINT ?
1  2264	    062A  20 06				  DB 20h,(L63D8)-$-1		    ; jump if not
1  2265
1  2266	    062C  21				  DB 21h
1  2267	    062D  0873				 DW _L_PRED
1  2268	    062F  C3				  DB 0c3h
1  2269	    0630  0000e				 DW  O_CALHL
1  2270
1  2271	    0632			 L63D8:
1  2272	    0632  3E 2B				  DB 3eh,2BH		       ; opcode: DEC HL
1  2273	    0634  C3				 DB 0c3h
1  2274	    0635  0000e				 DW  O_BYTE
1  2275
1  2276	    0637			 L63E1:	  ; FUNCTION Low(I: INTEGER): INTEGER;
1  2277						  ; FUNCTION Low(L: LONGINT): INTEGER;
1  2278	    0637  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2279	    0639  CD				  DB 0cdh
1  2280	    063A  0000e				 DW  PARSE_O_IL_C
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 41
msx_asm\tur_slib.ASM



1  2281					 ;	   CALL	L65DE		      ;	parse '(', integer expression and ')'
1  2282
1  2283	    063C  78				  DB 78h
1  2284	    063D  FE 0E				  DB 0feh, 0EH			   ; type = LONGINT ?
1  2285
1  2286	    063F  20 03				  DB 20h,(L63E2)-$-1		    ; jump if not LONGINT
1  2287
1  2288	    0641  06 0A				  DB 06h,0AH		       ; no code generation
1  2289									     ; return type = INTEGER
1  2290	    0643  C9				  DB 0c9h
1  2291
1  2292	    0644			 L63E2:
1  2293	    0644  CD				  DB 0cdh
1  2294	    0645  0000e				 DW  O_CODE
1  2295	    0647  02				 DB 2
1  2296	    0648  26 00				 DB 26H,00H		 ; LD H,0
1  2297
1  2298						  ; return same	type
1  2299	    064A  C9				  DB 0c9h
1  2300
1  2301	    064B			 L63EB:	 ; FUNCTION Hi(I: INTEGER): INTEGER;
1  2302						  ; FUNCTION Hi(L: LONGINT): INTEGER;
1  2303	    064B  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2304	    064D  CD				  DB 0cdh
1  2305	    064E  0000e				 DW  PARSE_O_IL_C
1  2306					 ;	   CALL	L65DE		      ;	parse '(', integer expression and ')'
1  2307
1  2308	    0650  78				  DB 78h
1  2309	    0651  FE 0E				  DB 0feh, 0EH			   ; type = LONGINT ?
1  2310
1  2311	    0653  20 07				  DB 20h,(L63EC)-$-1		    ; jump if not LONGINT
1  2312
1  2313	    0655  06 0A				  DB 06h,0AH		       ; return	type = INTEGER
1  2314	    0657  3E EB				  DB 3eh,0EBH		       ; opcode: EX DE,HL
1  2315	    0659  C3				  DB 0c3h
1  2316	    065A  0000e				 DW  O_BYTE
1  2317
1  2318	    065C			 L63EC:
1  2319	    065C  CD				 DB 0cdh
1  2320	    065D  0000e				 DW  O_CODE
1  2321	    065F  03				 DB 3
1  2322	    0660  6C				 DB 6CH			 ; LD L,H
1  2323	    0661  26 00				 DB 26H,00H		 ; LD H,0
1  2324
1  2325						  ; return same	type
1  2326	    0663  C9				 DB 0c9h
1  2327
1  2328	    0664			 L63F6:	 ; FUNCTION Swap(I: INTEGER): INTEGER;
1  2329	    0664  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2330	    0666  CD				  DB 0cdh
1  2331	    0667  0000e				 DW  PARSE_O_IL_C
1  2332
1  2333	    0669  78				  DB 78h
1  2334	    066A  FE 0E				  DB 0feh, 0EH			   ; type = LONGINT ?
1  2335
1  2336	    066C  20 05				  DB 20h,(L63F7)-$-1		    ; jump if not LONGINT
1  2337
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 42
msx_asm\tur_slib.ASM



1  2338	    066E  3E EB				  DB 3eh,0EBH		       ; opcode: EX DE,HL
1  2339	    0670  C3				  DB 0c3h
1  2340	    0671  0000e				 DW  O_BYTE		     ; output code and return same type
1  2341
1  2342	    0673			 L63F7:
1  2343	    0673  CD				 DB 0cdh
1  2344	    0674  0000e				 DW  O_CODE
1  2345	    0676  03				 DB 3
1  2346	    0677  7D				 DB 7DH			 ; LD A,L
1  2347	    0678  6C				 DB 6CH			 ; LD L,H
1  2348	    0679  67				 DB 67H			 ; LD H,A
1  2349
1  2350	    067A  C9				 DB 0c9h
1  2351
1  2352	    067B			 L6401:	  ; FUNCTION Odd(I: INTEGER): BOOLEAN;
1  2353	    067B  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2354	    067D  CD				  DB 0cdh
1  2355	    067E  0000e				 DW  PARSE_O_IL_C
1  2356					 ;	   CALL	L65DE		      ;	parse '(', integer expression and ')'
1  2357
1  2358	    0680  21				  DB 21h
1  2359	    0681  09ED				 DW _L078B		 ; LIB,	make integer HL	a boolean, clear
1  2360
1  2361	    0683  06 0B			 L6407:	  DB 06h,00BH
1  2362	    0685  C3				  DB 0c3h
1  2363	    0686  0000e				 DW  O_CALHL
1  2364
1  2365	    0688			 L640C:	  ; FUNCTION KeyPressed: BOOLEAN;
1  2366	    0688  21				  DB 21h
1  2367	    0689  0168				 DW _CONSTPTR		 ; LIB
1  2368	    068B  18 F6				 DB 18h,( L6407)-$-1
1  2369
1  2370	    068D			 L6411:	  ; Function Ord(X: SCALAR): INTEGER;
1  2371	    068D  CD				 DB 0cdh
1  2372	    068E  0000e				 DW  L6F66		 ; match('(')
1  2373	    0690  3E 0A				  DB 3eh,0AH		       ; A = default type = INTEGER
1  2374	    0692  CD				  DB 0cdh
1  2375	    0693  0000e				 DW  L5EE8		   ; parse expression
1  2376	    0695  CD				 DB 0cdh
1  2377	    0696  0000e				 DW  L6F6E		 ; match(')')
1  2378	    0698  78				 DB 78h
1  2379	    0699  FE 04				  DB 0feh, 4			   ; POINTER type ?
1  2380	    069B  28 03				  DB 28h,(L6422)-$-1		     ; jump if POINTER type
1  2381
1  2382	    069D  CD				  DB 0cdh
1  2383	    069E  0000e				 DW  L5EBE		   ; check for a simple	type expression
1  2384
1  2385	    06A0  06 0A			 L6422:	  DB 06h,00AH
1  2386	    06A2  C9				 DB 0c9h
1  2387
1  2388	    06A3			 L6425:	  ; FUNCTION Chr(I: INTEGER): CHAR;
1  2389						  ; FUNCTION Chr(L: LONGINT): CHAR;
1  2390	    06A3  3E FF				  DB 3eh,0FFH		       ; type =	smart
1  2391	    06A5  CD				  DB 0cdh
1  2392	    06A6  0000e				 DW  PARSE_O_IL_C
1  2393					 ;	   CALL	L65DE		      ;	parse '(', integer expression and ')'
1  2394
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 43
msx_asm\tur_slib.ASM



1  2395	    06A8  06 0C				 DB 06h,00CH
1  2396	    06AA  C9				 DB 0c9h
1  2397
1  2398	    06AB			 L642B:	  ; Function Ptr(I: INTEGER): POINTER;
1  2399	    06AB  CD				  DB 0cdh
1  2400	    06AC  0000e				 DW  PARSE_O_IL_C
1  2401					 ;	   CALL	L65DE		      ;	parse '(', integer expression and ')'
1  2402
1  2403	    06AE  21				  DB 21h
1  2404	    06AF  0000				 DW 0000
1  2405	    06B1  22				 DB 22h
1  2406	    06B2  0000e				 DW L7B8B
1  2407	    06B4  06 04				  DB 06h,4		       ; return	POINTER	type
1  2408	    06B6  C9				 DB 0c9h
1  2409
1  2410	    06B7			 L6437:	  ; FUNCTION UpCase(Ch:	CHAR): CHAR;
1  2411	    06B7  3E 0C				  DB 3eh,0CH		       ; A = default expression	= CHARC
1  2412	    06B9  CD				 DB 0cdh
1  2413	    06BA  0000e				 DW  L65EF
1  2414	    06BC  06 0C				 DB 06h,00CH
1  2415	    06BE  21				 DB 21h
1  2416	    06BF  26EC				 DW _L1FE4		 ; LIB,	clear
1  2417	    06C1  C3				  DB 0c3h
1  2418	    06C2  0000e				 DW  O_CALHL
1  2419
1  2420	    06C4			 L6441:	  ; FUNCTION Length(S: STRING):	INTEGER;
1  2421	    06C4  CD				 DB 0cdh
1  2422	    06C5  0000e				 DW  L6F66		 ; match('(')
1  2423	    06C7  21				 DB 21h
1  2424	    06C8  0DCC				 DW _L08A3		 ; LIB,	clear
1  2425
1  2426	    06CA  E5			 L6447:	  DB 0e5h
1  2427	    06CB  CD				  DB 0cdh
1  2428	    06CC  0000e				 DW  L5ED0		   ; parse string expression
1  2429	    06CE  CD				 DB 0cdh
1  2430	    06CF  0000e				 DW  L6F6E		 ; match(')')
1  2431	    06D1  E1				 DB 0e1h
1  2432	    06D2  C3				 DB 0c3h
1  2433	    06D3  0608r				 DW  L63CF
1  2434
1  2435	    06D5			 L6452:	  ; FUNCTION Pos(Pattern, Source: STRING): INTEGER;
1  2436	    06D5  CD				 DB 0cdh
1  2437	    06D6  0000e				 DW  L6F66		 ; match('(')
1  2438	    06D8  CD				  DB 0cdh
1  2439	    06D9  0000e				 DW  L5ED0		   ; parse string expression
1  2440	    06DB  CD				  DB 0cdh
1  2441	    06DC  0000e				 DW  L6F5E		   ; match(',')
1  2442	    06DE  21				 DB 21h
1  2443	    06DF  0DDB				 DW _L08B2		 ; LIB,	clear
1  2444	    06E1  18 E7				 DB 18h,( L6447)-$-1
1  2445
1  2446	    06E3			 L6460:	  ; FUNCTION Copy(S: STRING; Pos, Len: INTEGER): STRING;
1  2447	    06E3  CD				 DB 0cdh
1  2448	    06E4  0000e				 DW  L6F66		 ; match('(')
1  2449	    06E6  CD				  DB 0cdh
1  2450	    06E7  0000e				 DW  L5ED0		   ; parse string expression
1  2451	    06E9  CD				  DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 44
msx_asm\tur_slib.ASM



1  2452	    06EA  0000e				 DW  L6F5E		   ; match(',')
1  2453	    06EC  CD				  DB 0cdh
1  2454	    06ED  0000e				 DW  L5E97		   ; parse integer expression
1  2455	    06EF  CD				  DB 0cdh
1  2456	    06F0  0000e				 DW  L6F5E		   ; match(',')
1  2457	    06F2  CD				 DB 0cdh
1  2458	    06F3  0000e				 DW  O_PSHHL
1  2459	    06F5  CD				  DB 0cdh
1  2460	    06F6  0000e				 DW  L5E97		   ; parse integer expression
1  2461	    06F8  CD				 DB 0cdh
1  2462	    06F9  0000e				 DW  L6F6E		 ; match(')')
1  2463	    06FB  21				 DB 21h
1  2464	    06FC  0D94				 DW _L086B		 ; LIB,	clear
1  2465	    06FE  CD				 DB 0cdh
1  2466	    06FF  0000e				 DW  O_CALHL
1  2467
1  2468	    0701  06 08			 L647E:	 DB 06h,8
1  2469	    0703  C9				 DB 0c9h
1  2470
1  2471	    0704			 L6481:	  ; FUNCTION Concat(S1,S2,...,Sn: STRING);
1  2472	    0704  CD				 DB 0cdh
1  2473	    0705  0000e				 DW  L6F66		 ; match('(')
1  2474	    0707  CD				  DB 0cdh
1  2475	    0708  0000e				 DW  L5ED0		   ; parse string expression
1  2476	    070A  CD			 L6487:	 DB 0cdh
1  2477	    070B  0000e				 DW  L6F13		 ; match(','), if present
1  2478	    070D  20 0B				 DB 20h,(L6497)-$-1		 ; jump	if ',' not matched
1  2479	    070F  CD				  DB 0cdh
1  2480	    0710  0000e				 DW  L5ED0		   ; parse string expression
1  2481	    0712  21				 DB 21h
1  2482	    0713  0D66				 DW _L083D		 ; LIB,	clear
1  2483	    0715  CD				 DB 0cdh
1  2484	    0716  0000e				 DW  O_CALHL
1  2485	    0718  18 F0				 DB 18h,( L6487)-$-1
1  2486
1  2487	    071A  CD			 L6497:	 DB 0cdh
1  2488	    071B  0000e				 DW  L6F6E		 ; match(')')
1  2489	    071D  18 E2				 DB 18h,( L647E)-$-1
1  2490
1  2491	    071F			 L649C:	  ; FUNCTION ParamCount: INTEGER;
1  2492	    071F  21				 DB 21h
1  2493	    0720  26A3				 DW _L1F9B		 ; LIB,	clear
1  2494	    0722  18 1E				 DB 18h,( L64BF)-$-1
1  2495
1  2496	    0724			 L64A1:	  ; FUNCTION ParamStr(N: INTEGER): STRING;
1  2497	    0724  CD				  DB 0cdh
1  2498	    0725  0000e				 DW  L65DE		   ; parse '(',	integer	expression and ')'
1  2499
1  2500	    0727  21				 DB 21h
1  2501	    0728  2685				 DW _L1F7D		 ; LIB,	clear
1  2502	    072A  06 08				 DB 06h,8
1  2503	    072C  C3				 DB 0c3h
1  2504	    072D  0000e				 DW  O_CALHL
1  2505
1  2506	    072F			 L64AC:	  ; FUNCTION Random(Range: INTEGER): INTEGER;
1  2507						 ; FUNCTION Random: REAL;
1  2508	    072F  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 45
msx_asm\tur_slib.ASM



1  2509	    0730  0000e				 DW  L6F1B		 ; match('('), if present
1  2510	    0732  21				 DB 21h
1  2511	    0733  1528				 DW _L0FB4		 ; LIB,	clear
1  2512	    0735  06 09				 DB 06h,9			 ; assume REAL type
1  2513	    0737  20 0B				 DB 20h,(L64C1)-$-1		 ; jump	if '(' not matched
1  2514
1  2515	    0739  CD				  DB 0cdh
1  2516	    073A  0000e				 DW  L5E97		   ; parse integer expression
1  2517	    073C  CD				 DB 0cdh
1  2518	    073D  0000e				 DW  L6F6E		 ; match(')')
1  2519	    073F  21				 DB 21h
1  2520	    0740  0999				 DW _L073B		 ; LIB,	clear
1  2521
1  2522	    0742  06 0A			 L64BF:	 DB 06h,00AH		 ; INTEGER type
1  2523
1  2524	    0744  C3			 L64C1:	 DB 0c3h
1  2525	    0745  0000e				 DW  O_CALHL
1  2526
1  2527	    0747			 L64C4:	  ; FUNCTION IOresult: BYTE (BOOLEAN in	manual ?)
1  2528	    0747  21				 DB 21h
1  2529	    0748  26F9				 DW _L1FF1		 ; LIB,	clear
1  2530	    074A  18 F6				 DB 18h,( L64BF)-$-1
1  2531
1  2532	    074C			 L64C9:	  ; FUNCTION Eof(VAR F:	FILE): BOOLEAN;
1  2533	    074C  CD				 DB 0cdh
1  2534	    074D  0000e				 DW  L65F7
1  2535
1  2536	    074F  21				 DB 21h
1  2537	    0750  0758r				 DW L6615		 ; table of three file types
1  2538	    0752  CD				 DB 0cdh
1  2539	    0753  0000e				 DW  L59E9		 ; generate call for file IO
1  2540	    0755  06 0B			 L64D2:	  DB 06h,00BH		       ; returns BOOLEAN type
1  2541	    0757  C9				 DB 0c9h
1  2542
1  2543	    0758  2014			 L6615:	  DW _L1A49		     ; LIB, Eof, typed file,   type 5
1  2544	    075A  1E73				  DW _L17E6		     ; LIB, Eof, text,	       type 6
1  2545	    075C  2014				 DW _L1A49		 ; LIB,	Eof, untyped file, type	7
1  2546
1  2547	    075E			 L64D5:	  ; FUNCTION SeekEof(VAR F: TEXT): BOOLEAN;
1  2548	    075E  21				 DB 21h
1  2549	    075F  1E6E				 DW _L17E1		 ; LIB,	clear
1  2550	    0761  18 08				 DB 18h,( L64E2)-$-1
1  2551
1  2552	    0763			 L64DA:	  ; FUNCTION SeekEoln(VAR F: TEXT): BOOLEAN;
1  2553	    0763  21				 DB 21h
1  2554	    0764  1E64				 DW _L17D7		 ; LIB,	clear
1  2555	    0766  18 03				 DB 18h,( L64E2)-$-1
1  2556
1  2557	    0768			 L64DF:	  ; FUNCTION Eoln(VAR F: TEXT):	BOOLEAN;
1  2558	    0768  21				 DB 21h
1  2559	    0769  1E69				 DW _L17DC		 ; LIB,	clear
1  2560
1  2561	    076B  E5			 L64E2:	 DB 0e5h
1  2562	    076C  CD				 DB 0cdh
1  2563	    076D  0000e				 DW  L65F7
1  2564
1  2565	    076F  FE 06				 DB 0feh, 6			 ; text	file ?
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 46
msx_asm\tur_slib.ASM



1  2566
1  2567	    0771  CD				 DB 0cdh
1  2568	    0772  0000e				 DW  L72DA		 ; NonZero --> error
1  2569	    0774  23				 DB 23H			 ; error 35: Textfile expected
1  2570
1  2571	    0775  E1				 DB 0e1h
1  2572	    0776  CD				 DB 0cdh
1  2573	    0777  0000e				 DW  O_CALHL
1  2574	    0779  18 DA				 DB 18h,( L64D2)-$-1
1  2575
1  2576	    077B			 L64F2:	  ; FUNCTION FilePos(VAR F: FILE OF TYPE): INTEGER;
1  2577						 ; FUNCTION FilePos(VAR	F: FILE): INTEGER;
1  2578	    077B  21				 DB 21h
1  2579	    077C  2028				 DW _L1A55		 ; LIB,	clear
1  2580	    077E  11				 DB 11h
1  2581	    077F  2028				 DW _L1A55		 ; LIB,	clear
1  2582	    0781  18 06				  DB 18h,( L6500)-$-1
1  2583
1  2584	    0783			 L64FA:	  ; FUNCTION FileSize(VAR F: FILE OF TYPE): INTEGER;
1  2585						 ; FUNCTION FileSize(var F: FILE): INTEGER;
1  2586	    0783  21				 DB 21h
1  2587	    0784  203F				 DW _L1A5D		 ; LIB,	clear
1  2588	    0786  11				 DB 11h
1  2589	    0787  203F				 DW _L1A5D		 ; LIB,	clear
1  2590
1  2591	    0789  E5			 L6500:	 DB 0e5h
1  2592	    078A  D5				 DB 0d5h
1  2593	    078B  CD				  DB 0cdh
1  2594	    078C  0000e				 DW  L65F7
1  2595	    078E  D1				 DB 0d1h
1  2596	    078F  E1				 DB 0e1h
1  2597	    0790  FE 06				 DB 0feh, 6			 ; text	file ?
1  2598
1  2599	    0792  CD				 DB 0cdh
1  2600	    0793  0000e				 DW  L72D4		 ; Zero	--> error
1  2601	    0795  3F				 DB 3FH			 ; error 63: Textfiles are not allowed here
1  2602
1  2603	    0796  FE 05				 DB 0feh, 5			 ; typed file ?
1  2604	    0798  28 03				  DB 28h,(L7FA9)-$-1 ; 33e,L 64BF		  ; jump if typed file
1  2605	    079A  EB				 DB 0ebh
1  2606	    079B  18 00				  DB 18h,( L7FA9)-$-1 ;	33e, L64BF
1  2607
1  2608					 ; 33e
1  2609	    079D			 L7FA9:
1  2610	    079D  06 0E				  DB 06h,0EH		       ; LONGINT type
1  2611	    079F  C3				  DB 0c3h
1  2612	    07A0  0000e				 DW  O_CALHL
1  2613					 ; 33e
1  2614
1  2615	    07A2			 L6514:	  ; FUNCTION MemAvail: INTEGER;
1  2616	    07A2  21				 DB 21h
1  2617	    07A3  2528				 DW _L1E3D		 ; LIB,	clear
1  2618	    07A5  18 9B				 DB 18h,( L64BF)-$-1
1  2619
1  2620	    07A7			 L6519:	  ; FUNCTION MaxAvail: INTEGER;
1  2621	    07A7  21				 DB 21h
1  2622	    07A8  252F				 DW _L1E44		 ; LIB,	clear
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 47
msx_asm\tur_slib.ASM



1  2623	    07AA  18 96				 DB 18h,( L64BF)-$-1
1  2624
1  2625	    07AC			 L651E:	  ; PROCEDURE Bios(Func,Param: INTEGER);
1  2626	    07AC  3E AF				 DB 3eh,0AFH		 ; LD A,XOR A
1  2627	    07AE  18 01				 DB 18h,( L6520)-$-1
1  2628
1  2629	    07B0			 L651F:	 ; FUNCTION Bios(Func,Param: INTEGER): BYTE;
1  2630	    07B0  AF				 DB 0afh
1  2631	    07B1  F5			 L6520:	 DB 0f5h		 ; save	flag for FUNCTION/PROCEDURE
1  2632	    07B2  CD				 DB 0cdh
1  2633	    07B3  0000e				 DW  L6F66		 ; match('(')
1  2634	    07B5  CD				  DB 0cdh
1  2635	    07B6  0000e				 DW  L5E97		   ; parse integer expression
1  2636
1  2637	    07B8  CD				 DB 0cdh
1  2638	    07B9  0000e				 DW  O_PSHHL		 ; push	Func
1  2639
1  2640	    07BB  CD				 DB 0cdh
1  2641	    07BC  0000e				 DW  L6F13		 ; match(','), if present
1  2642	    07BE  20 09				  DB 20h,(L6538)-$-1		    ; jump if ',' not matched
1  2643
1  2644	    07C0  CD				  DB 0cdh
1  2645	    07C1  0000e				 DW  L5E97		   ; parse integer expression
1  2646
1  2647						 ; BC =	Param
1  2648	    07C3  CD				 DB 0cdh
1  2649	    07C4  0000e				 DW  O_CODE
1  2650	    07C6  02				 DB 2
1  2651	    07C7  44				 DB 44H			 ; LD B,H
1  2652	    07C8  4D				 DB 4DH			 ; LD C,L
1  2653
1  2654	    07C9  CD			 L6538:	 DB 0cdh
1  2655	    07CA  0000e				 DW  O_CODE
1  2656	    07CC  01				 DB 1
1  2657	    07CD  D1				 DB 0D1H		 ; POP DE, E = Func
1  2658
1  2659	    07CE  21				 DB 21h
1  2660	    07CF  26F2				 DW _L1FEA		 ; LIB,	clear
1  2661	    07D1  C3				  DB 0c3h
1  2662	    07D2  0000e				 DW  L6540
1  2663
1  2664	    07D4			 L6553:	  ; PROCEDURE Bdos(Func,Param: INTEGER);
1  2665	    07D4  3E AF				 DB 3eh,0AFH		 ; LD A,XOR A
1  2666	    07D6  18 01				 DB 18h,( L6555)-$-1
1  2667
1  2668	    07D8			 L6554:	 ; FUNCTION Bdos(Func,Param: INTEGER): BYTE;
1  2669	    07D8  AF				 DB 0afh
1  2670	    07D9  F5			 L6555:	 DB 0f5h		 ; save	flag for FUNCTION/PROCEDURE
1  2671	    07DA  CD				 DB 0cdh
1  2672	    07DB  0000e				 DW  L6F66		 ; match('(')
1  2673	    07DD  CD				  DB 0cdh
1  2674	    07DE  0000e				 DW  L5E97		   ; parse integer expression
1  2675
1  2676	    07E0  CD				 DB 0cdh
1  2677	    07E1  0000e				 DW  O_PSHHL		 ; push	function number	in L
1  2678
1  2679	    07E3  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 48
msx_asm\tur_slib.ASM



1  2680	    07E4  0000e				 DW  L6F13		 ; match(','), if present
1  2681	    07E6  20 08				 DB 20h,(L656C)-$-1		 ; jump	if ',' not matched
1  2682	    07E8  CD				  DB 0cdh
1  2683	    07E9  0000e				 DW  L5E97		   ; parse integer expression
1  2684
1  2685	    07EB  CD				 DB 0cdh
1  2686	    07EC  0000e				 DW  O_CODE
1  2687	    07EE  01				 DB 1
1  2688	    07EF  EB				 DB 0EBH		 ; EX DE,HL
1  2689
1  2690	    07F0  CD			 L656C:	 DB 0cdh
1  2691	    07F1  0000e				 DW  O_CODE
1  2692	    07F3  01				 DB 1
1  2693	    07F4  C1				 DB 0C1H		 ; POP BC, restore function number in C
1  2694
1  2695	    07F5  21				 DB 21h
1  2696	    07F6  0005				 DW 0005H
1  2697	    07F8  C3				  DB 0c3h
1  2698	    07F9  0000e				 DW  L6540		     ; output: CALL 0005H
1  2699
1  2700	    07FB			 L6576:	  ; FUNCTION ADDR(VAR Variable): INTEGER;
1  2701	    07FB  CD				 DB 0cdh
1  2702	    07FC  0000e				 DW  L6F66		 ; match('(')
1  2703	    07FE  01				 DB 01h
1  2704	    07FF  0500				 DW 500H
1  2705	    0801  CD				 DB 0cdh
1  2706	    0802  0000e				 DW  L6E54		 ; check if current in id list
1  2707	    0804  28 08				 DB 28h,(L6589)-$-1
1  2708	    0806  01				 DB 01h
1  2709	    0807  0600				 DW 600H
1  2710	    0809  CD				 DB 0cdh
1  2711	    080A  0000e				 DW  L6E54		 ; check if current in id list
1  2712	    080C  20 0B				 DB 20h,(L6594)-$-1
1  2713
1  2714	    080E  2B			 L6589:	  DB 2bh
1  2715	    080F  2B				 DB 2bh
1  2716	    0810  56				 DB 56h
1  2717	    0811  2B				 DB 2bh
1  2718	    0812  5E				 DB 5eh
1  2719	    0813  EB				 DB 0ebh
1  2720
1  2721	    0814  CD			 L658F:	  DB 0cdh
1  2722	    0815  0000e				 DW  O_LDHL
1  2723	    0817  18 03				 DB 18h,( L6597)-$-1
1  2724
1  2725	    0819  CD			 L6594:	  DB 0cdh
1  2726	    081A  0000e				 DW  L677F		   ; parse var parameter
1  2727	    081C  CD			 L6597:	 DB 0cdh
1  2728	    081D  0000e				 DW  L6F6E		 ; match(')')
1  2729	    081F  06 0A				 DB 06h,00AH
1  2730	    0821  C9				 DB 0c9h
1  2731
1  2732	    0822			 L659D:	 ; FUNCTION SizeOf(VAR Variable): INTEGER;
1  2733	    0822  CD				 DB 0cdh
1  2734	    0823  0000e				 DW  L6F66		 ; match('(')
1  2735	    0825  01				 DB 01h
1  2736	    0826  0300				 DW 300H
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 49
msx_asm\tur_slib.ASM



1  2737	    0828  CD				 DB 0cdh
1  2738	    0829  0000e				 DW  L6E54		 ; check if current in id list,	types
1  2739	    082B  20 09				 DB 20h,(L65B1)-$-1
1  2740	    082D  56				 DB 56h
1  2741	    082E  2B				 DB 2bh
1  2742	    082F  5E				 DB 5eh
1  2743	    0830  EB				 DB 0ebh
1  2744	    0831  CD				 DB 0cdh
1  2745	    0832  0000e				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  2746	    0834  18 09				 DB 18h,( L65BA)-$-1
1  2747
1  2748	    0836  FD E5			 L65B1:	  DB 0fdh,0e5h
1  2749	    0838  CD				  DB 0cdh
1  2750	    0839  0000e				 DW  L677F		   ; parse var parameter
1  2751	    083B  E1				 DB 0e1h
1  2752	    083C  CD				 DB 0cdh
1  2753	    083D  0000e				 DW  L6CC2
1  2754
1  2755	    083F  2A			 L65BA:	  DB 02ah
1  2756	    0840  0000e				 DW L7B62	       ; HL = size of variable
1  2757	    0842  18 D0				 DB 18h,( L658F)-$-1
1  2758
1  2759	    0844			 L65BF:	  ; FUNCTION Port(N: INTEGER): BYTE;
1  2760	    0844  CD				  DB 0cdh
1  2761	    0845  0000e				 DW  L65D5		   ; parse an array index
1  2762
1  2763	    0847  CD				 DB 0cdh
1  2764	    0848  0000e				 DW  O_CODE
1  2765	    084A  03				 DB 3
1  2766	    084B  4D				 DB 4DH			 ; LD C,L
1  2767	    084C  ED 68				 DB 0EDH,68H		 ; IN L,(C)
1  2768
1  2769	    084E  C9				 DB 0c9h
1  2770
1  2771	    084F			 L65CA:	 ; FUNCTION StackPtr: INTEGER
1  2772						 ; returns stackptr value
1  2773
1  2774	    084F  CD				 DB 0cdh
1  2775	    0850  0000e				 DW  O_CODE
1  2776	    0852  04				 DB 4
1  2777	    0853  21 00	00			 DB 21H,00H,00H		 ; LD HL,0000
1  2778	    0856  39				 DB 39H			 ; ADD HL,SP
1  2779
1  2780	    0857  06 0A				 DB 06h,00AH		 ; result = integer
1  2781	    0859  C9				 DB 0c9h
1  2782
1  2783	    085A			 P_DOSERRORHANDLERON:
1  2784	    085A  21				  DB 21h
1  2785	    085B  2884				 DW _DOSERRORHANDLERON
1  2786	    085D  C3				  DB 0c3h
1  2787	    085E  0000e				 DW  O_CALHL
1  2788
1  2789	    0860			 P_DOSERRORHANDLEROFF:
1  2790	    0860  21				  DB 21h
1  2791	    0861  2887				 DW _DOSERRORHANDLEROFF
1  2792	    0863  C3				  DB 0c3h
1  2793	    0864  0000e				 DW  O_CALHL
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 50
msx_asm\tur_slib.ASM



1  2794
1  2795	    0866			 L7638:	  ; Procedure's
1  2796						  DC 'FWRITELN'
2  2797
2  2798		  =000A				 strsize sizestr <'FWRITELN'>
2  2799		  =0000				 pos = 0
2  2800
2  2801						 irpc parameter,'FWRITELN'
2  2802							 pos = pos + 1
2  2803
2  2804							 if pos	EQ strsize - 1
2  2805							 db '&parameter' + 80h
2  2806							 endif
2  2807
2  2808							 if pos	GT 1
2  2809								 if pos	LT strsize -1
2  2810									 db '&parameter'
2  2811								 endif
2  2812							 endif
2  2813
2  2814						 endm
3  2815		  =0001					 pos = pos + 1
3  2816
3  2817
3  2818
3  2819		  =0002					 pos = pos + 1
3  2820
3  2821
3  2822	    0866  46							 db 'F'
3  2823
3  2824		  =0003					 pos = pos + 1
3  2825
3  2826
3  2827	    0867  57							 db 'W'
3  2828
3  2829		  =0004					 pos = pos + 1
3  2830
3  2831
3  2832	    0868  52							 db 'R'
3  2833
3  2834		  =0005					 pos = pos + 1
3  2835
3  2836
3  2837	    0869  49							 db 'I'
3  2838
3  2839		  =0006					 pos = pos + 1
3  2840
3  2841
3  2842	    086A  54							 db 'T'
3  2843
3  2844		  =0007					 pos = pos + 1
3  2845
3  2846
3  2847	    086B  45							 db 'E'
3  2848
3  2849		  =0008					 pos = pos + 1
3  2850
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 51
msx_asm\tur_slib.ASM



3  2851
3  2852	    086C  4C							 db 'L'
3  2853
3  2854		  =0009					 pos = pos + 1
3  2855
3  2856	    086D  CE					 db 'N'	+ 80h
3  2857
3  2858
3  2859		  =000A					 pos = pos + 1
3  2860
3  2861
3  2862
2  2863
1  2864	    086E  01AEr				  DW L5AE7		     ; Fast WRITELN
1  2865
1  2866						  DC 'WRITELN'		     ; 1x list
2  2867
2  2868		  =0009				 strsize sizestr <'WRITELN'>
2  2869		  =0000				 pos = 0
2  2870
2  2871						 irpc parameter,'WRITELN'
2  2872							 pos = pos + 1
2  2873
2  2874							 if pos	EQ strsize - 1
2  2875							 db '&parameter' + 80h
2  2876							 endif
2  2877
2  2878							 if pos	GT 1
2  2879								 if pos	LT strsize -1
2  2880									 db '&parameter'
2  2881								 endif
2  2882							 endif
2  2883
2  2884						 endm
3  2885		  =0001					 pos = pos + 1
3  2886
3  2887
3  2888
3  2889		  =0002					 pos = pos + 1
3  2890
3  2891
3  2892	    0870  57							 db 'W'
3  2893
3  2894		  =0003					 pos = pos + 1
3  2895
3  2896
3  2897	    0871  52							 db 'R'
3  2898
3  2899		  =0004					 pos = pos + 1
3  2900
3  2901
3  2902	    0872  49							 db 'I'
3  2903
3  2904		  =0005					 pos = pos + 1
3  2905
3  2906
3  2907	    0873  54							 db 'T'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 52
msx_asm\tur_slib.ASM



3  2908
3  2909		  =0006					 pos = pos + 1
3  2910
3  2911
3  2912	    0874  45							 db 'E'
3  2913
3  2914		  =0007					 pos = pos + 1
3  2915
3  2916
3  2917	    0875  4C							 db 'L'
3  2918
3  2919		  =0008					 pos = pos + 1
3  2920
3  2921	    0876  CE					 db 'N'	+ 80h
3  2922
3  2923
3  2924		  =0009					 pos = pos + 1
3  2925
3  2926
3  2927
2  2928
1  2929	    0877  01B2r				  DW L5AE71
1  2930
1  2931						  DC 'FWRITE'
2  2932
2  2933		  =0008				 strsize sizestr <'FWRITE'>
2  2934		  =0000				 pos = 0
2  2935
2  2936						 irpc parameter,'FWRITE'
2  2937							 pos = pos + 1
2  2938
2  2939							 if pos	EQ strsize - 1
2  2940							 db '&parameter' + 80h
2  2941							 endif
2  2942
2  2943							 if pos	GT 1
2  2944								 if pos	LT strsize -1
2  2945									 db '&parameter'
2  2946								 endif
2  2947							 endif
2  2948
2  2949						 endm
3  2950		  =0001					 pos = pos + 1
3  2951
3  2952
3  2953
3  2954		  =0002					 pos = pos + 1
3  2955
3  2956
3  2957	    0879  46							 db 'F'
3  2958
3  2959		  =0003					 pos = pos + 1
3  2960
3  2961
3  2962	    087A  57							 db 'W'
3  2963
3  2964		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 53
msx_asm\tur_slib.ASM



3  2965
3  2966
3  2967	    087B  52							 db 'R'
3  2968
3  2969		  =0005					 pos = pos + 1
3  2970
3  2971
3  2972	    087C  49							 db 'I'
3  2973
3  2974		  =0006					 pos = pos + 1
3  2975
3  2976
3  2977	    087D  54							 db 'T'
3  2978
3  2979		  =0007					 pos = pos + 1
3  2980
3  2981	    087E  C5					 db 'E'	+ 80h
3  2982
3  2983
3  2984		  =0008					 pos = pos + 1
3  2985
3  2986
3  2987
2  2988
1  2989	    087F  01BAr				  DW L5AE8		     ; Fast WRITE
1  2990
1  2991						  DC 'WRITE'
2  2992
2  2993		  =0007				 strsize sizestr <'WRITE'>
2  2994		  =0000				 pos = 0
2  2995
2  2996						 irpc parameter,'WRITE'
2  2997							 pos = pos + 1
2  2998
2  2999							 if pos	EQ strsize - 1
2  3000							 db '&parameter' + 80h
2  3001							 endif
2  3002
2  3003							 if pos	GT 1
2  3004								 if pos	LT strsize -1
2  3005									 db '&parameter'
2  3006								 endif
2  3007							 endif
2  3008
2  3009						 endm
3  3010		  =0001					 pos = pos + 1
3  3011
3  3012
3  3013
3  3014		  =0002					 pos = pos + 1
3  3015
3  3016
3  3017	    0881  57							 db 'W'
3  3018
3  3019		  =0003					 pos = pos + 1
3  3020
3  3021
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 54
msx_asm\tur_slib.ASM



3  3022	    0882  52							 db 'R'
3  3023
3  3024		  =0004					 pos = pos + 1
3  3025
3  3026
3  3027	    0883  49							 db 'I'
3  3028
3  3029		  =0005					 pos = pos + 1
3  3030
3  3031
3  3032	    0884  54							 db 'T'
3  3033
3  3034		  =0006					 pos = pos + 1
3  3035
3  3036	    0885  C5					 db 'E'	+ 80h
3  3037
3  3038
3  3039		  =0007					 pos = pos + 1
3  3040
3  3041
3  3042
2  3043
1  3044	    0886  01BEr				  DW L5AE81
1  3045
1  3046						 DC 'READLN'
2  3047
2  3048		  =0008				 strsize sizestr <'READLN'>
2  3049		  =0000				 pos = 0
2  3050
2  3051						 irpc parameter,'READLN'
2  3052							 pos = pos + 1
2  3053
2  3054							 if pos	EQ strsize - 1
2  3055							 db '&parameter' + 80h
2  3056							 endif
2  3057
2  3058							 if pos	GT 1
2  3059								 if pos	LT strsize -1
2  3060									 db '&parameter'
2  3061								 endif
2  3062							 endif
2  3063
2  3064						 endm
3  3065		  =0001					 pos = pos + 1
3  3066
3  3067
3  3068
3  3069		  =0002					 pos = pos + 1
3  3070
3  3071
3  3072	    0888  52							 db 'R'
3  3073
3  3074		  =0003					 pos = pos + 1
3  3075
3  3076
3  3077	    0889  45							 db 'E'
3  3078
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 55
msx_asm\tur_slib.ASM



3  3079		  =0004					 pos = pos + 1
3  3080
3  3081
3  3082	    088A  41							 db 'A'
3  3083
3  3084		  =0005					 pos = pos + 1
3  3085
3  3086
3  3087	    088B  44							 db 'D'
3  3088
3  3089		  =0006					 pos = pos + 1
3  3090
3  3091
3  3092	    088C  4C							 db 'L'
3  3093
3  3094		  =0007					 pos = pos + 1
3  3095
3  3096	    088D  CE					 db 'N'	+ 80h
3  3097
3  3098
3  3099		  =0008					 pos = pos + 1
3  3100
3  3101
3  3102
2  3103
1  3104	    088E  00EFr				  DW L5A32
1  3105
1  3106						 DC 'READ'
2  3107
2  3108		  =0006				 strsize sizestr <'READ'>
2  3109		  =0000				 pos = 0
2  3110
2  3111						 irpc parameter,'READ'
2  3112							 pos = pos + 1
2  3113
2  3114							 if pos	EQ strsize - 1
2  3115							 db '&parameter' + 80h
2  3116							 endif
2  3117
2  3118							 if pos	GT 1
2  3119								 if pos	LT strsize -1
2  3120									 db '&parameter'
2  3121								 endif
2  3122							 endif
2  3123
2  3124						 endm
3  3125		  =0001					 pos = pos + 1
3  3126
3  3127
3  3128
3  3129		  =0002					 pos = pos + 1
3  3130
3  3131
3  3132	    0890  52							 db 'R'
3  3133
3  3134		  =0003					 pos = pos + 1
3  3135
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 56
msx_asm\tur_slib.ASM



3  3136
3  3137	    0891  45							 db 'E'
3  3138
3  3139		  =0004					 pos = pos + 1
3  3140
3  3141
3  3142	    0892  41							 db 'A'
3  3143
3  3144		  =0005					 pos = pos + 1
3  3145
3  3146	    0893  C4					 db 'D'	+ 80h
3  3147
3  3148
3  3149		  =0006					 pos = pos + 1
3  3150
3  3151
3  3152
2  3153
1  3154	    0894  00F3r				  DW L5A33
1  3155
1  3156						 DC 'DELETE'
2  3157
2  3158		  =0008				 strsize sizestr <'DELETE'>
2  3159		  =0000				 pos = 0
2  3160
2  3161						 irpc parameter,'DELETE'
2  3162							 pos = pos + 1
2  3163
2  3164							 if pos	EQ strsize - 1
2  3165							 db '&parameter' + 80h
2  3166							 endif
2  3167
2  3168							 if pos	GT 1
2  3169								 if pos	LT strsize -1
2  3170									 db '&parameter'
2  3171								 endif
2  3172							 endif
2  3173
2  3174						 endm
3  3175		  =0001					 pos = pos + 1
3  3176
3  3177
3  3178
3  3179		  =0002					 pos = pos + 1
3  3180
3  3181
3  3182	    0896  44							 db 'D'
3  3183
3  3184		  =0003					 pos = pos + 1
3  3185
3  3186
3  3187	    0897  45							 db 'E'
3  3188
3  3189		  =0004					 pos = pos + 1
3  3190
3  3191
3  3192	    0898  4C							 db 'L'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 57
msx_asm\tur_slib.ASM



3  3193
3  3194		  =0005					 pos = pos + 1
3  3195
3  3196
3  3197	    0899  45							 db 'E'
3  3198
3  3199		  =0006					 pos = pos + 1
3  3200
3  3201
3  3202	    089A  54							 db 'T'
3  3203
3  3204		  =0007					 pos = pos + 1
3  3205
3  3206	    089B  C5					 db 'E'	+ 80h
3  3207
3  3208
3  3209		  =0008					 pos = pos + 1
3  3210
3  3211
3  3212
2  3213
1  3214	    089C  033Er				  DW L5C66		     ; OK
1  3215
1  3216						 DC 'INSERT'
2  3217
2  3218		  =0008				 strsize sizestr <'INSERT'>
2  3219		  =0000				 pos = 0
2  3220
2  3221						 irpc parameter,'INSERT'
2  3222							 pos = pos + 1
2  3223
2  3224							 if pos	EQ strsize - 1
2  3225							 db '&parameter' + 80h
2  3226							 endif
2  3227
2  3228							 if pos	GT 1
2  3229								 if pos	LT strsize -1
2  3230									 db '&parameter'
2  3231								 endif
2  3232							 endif
2  3233
2  3234						 endm
3  3235		  =0001					 pos = pos + 1
3  3236
3  3237
3  3238
3  3239		  =0002					 pos = pos + 1
3  3240
3  3241
3  3242	    089E  49							 db 'I'
3  3243
3  3244		  =0003					 pos = pos + 1
3  3245
3  3246
3  3247	    089F  4E							 db 'N'
3  3248
3  3249		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 58
msx_asm\tur_slib.ASM



3  3250
3  3251
3  3252	    08A0  53							 db 'S'
3  3253
3  3254		  =0005					 pos = pos + 1
3  3255
3  3256
3  3257	    08A1  45							 db 'E'
3  3258
3  3259		  =0006					 pos = pos + 1
3  3260
3  3261
3  3262	    08A2  52							 db 'R'
3  3263
3  3264		  =0007					 pos = pos + 1
3  3265
3  3266	    08A3  D4					 db 'T'	+ 80h
3  3267
3  3268
3  3269		  =0008					 pos = pos + 1
3  3270
3  3271
3  3272
2  3273
1  3274	    08A4  035Fr				  DW L5C87
1  3275
1  3276						 DC 'ASSIGN'		    ; OK
2  3277
2  3278		  =0008				 strsize sizestr <'ASSIGN'>
2  3279		  =0000				 pos = 0
2  3280
2  3281						 irpc parameter,'ASSIGN'
2  3282							 pos = pos + 1
2  3283
2  3284							 if pos	EQ strsize - 1
2  3285							 db '&parameter' + 80h
2  3286							 endif
2  3287
2  3288							 if pos	GT 1
2  3289								 if pos	LT strsize -1
2  3290									 db '&parameter'
2  3291								 endif
2  3292							 endif
2  3293
2  3294						 endm
3  3295		  =0001					 pos = pos + 1
3  3296
3  3297
3  3298
3  3299		  =0002					 pos = pos + 1
3  3300
3  3301
3  3302	    08A6  41							 db 'A'
3  3303
3  3304		  =0003					 pos = pos + 1
3  3305
3  3306
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 59
msx_asm\tur_slib.ASM



3  3307	    08A7  53							 db 'S'
3  3308
3  3309		  =0004					 pos = pos + 1
3  3310
3  3311
3  3312	    08A8  53							 db 'S'
3  3313
3  3314		  =0005					 pos = pos + 1
3  3315
3  3316
3  3317	    08A9  49							 db 'I'
3  3318
3  3319		  =0006					 pos = pos + 1
3  3320
3  3321
3  3322	    08AA  47							 db 'G'
3  3323
3  3324		  =0007					 pos = pos + 1
3  3325
3  3326	    08AB  CE					 db 'N'	+ 80h
3  3327
3  3328
3  3329		  =0008					 pos = pos + 1
3  3330
3  3331
3  3332
2  3333
1  3334	    08AC  0013r				  DW L5943
1  3335
1  3336						 DC 'RESET'
2  3337
2  3338		  =0007				 strsize sizestr <'RESET'>
2  3339		  =0000				 pos = 0
2  3340
2  3341						 irpc parameter,'RESET'
2  3342							 pos = pos + 1
2  3343
2  3344							 if pos	EQ strsize - 1
2  3345							 db '&parameter' + 80h
2  3346							 endif
2  3347
2  3348							 if pos	GT 1
2  3349								 if pos	LT strsize -1
2  3350									 db '&parameter'
2  3351								 endif
2  3352							 endif
2  3353
2  3354						 endm
3  3355		  =0001					 pos = pos + 1
3  3356
3  3357
3  3358
3  3359		  =0002					 pos = pos + 1
3  3360
3  3361
3  3362	    08AE  52							 db 'R'
3  3363
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 60
msx_asm\tur_slib.ASM



3  3364		  =0003					 pos = pos + 1
3  3365
3  3366
3  3367	    08AF  45							 db 'E'
3  3368
3  3369		  =0004					 pos = pos + 1
3  3370
3  3371
3  3372	    08B0  53							 db 'S'
3  3373
3  3374		  =0005					 pos = pos + 1
3  3375
3  3376
3  3377	    08B1  45							 db 'E'
3  3378
3  3379		  =0006					 pos = pos + 1
3  3380
3  3381	    08B2  D4					 db 'T'	+ 80h
3  3382
3  3383
3  3384		  =0007					 pos = pos + 1
3  3385
3  3386
3  3387
2  3388
1  3389	    08B3  009Br				  DW L59B9		     ; OK
1  3390
1  3391						 DC 'REWRITE'
2  3392
2  3393		  =0009				 strsize sizestr <'REWRITE'>
2  3394		  =0000				 pos = 0
2  3395
2  3396						 irpc parameter,'REWRITE'
2  3397							 pos = pos + 1
2  3398
2  3399							 if pos	EQ strsize - 1
2  3400							 db '&parameter' + 80h
2  3401							 endif
2  3402
2  3403							 if pos	GT 1
2  3404								 if pos	LT strsize -1
2  3405									 db '&parameter'
2  3406								 endif
2  3407							 endif
2  3408
2  3409						 endm
3  3410		  =0001					 pos = pos + 1
3  3411
3  3412
3  3413
3  3414		  =0002					 pos = pos + 1
3  3415
3  3416
3  3417	    08B5  52							 db 'R'
3  3418
3  3419		  =0003					 pos = pos + 1
3  3420
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 61
msx_asm\tur_slib.ASM



3  3421
3  3422	    08B6  45							 db 'E'
3  3423
3  3424		  =0004					 pos = pos + 1
3  3425
3  3426
3  3427	    08B7  57							 db 'W'
3  3428
3  3429		  =0005					 pos = pos + 1
3  3430
3  3431
3  3432	    08B8  52							 db 'R'
3  3433
3  3434		  =0006					 pos = pos + 1
3  3435
3  3436
3  3437	    08B9  49							 db 'I'
3  3438
3  3439		  =0007					 pos = pos + 1
3  3440
3  3441
3  3442	    08BA  54							 db 'T'
3  3443
3  3444		  =0008					 pos = pos + 1
3  3445
3  3446	    08BB  C5					 db 'E'	+ 80h
3  3447
3  3448
3  3449		  =0009					 pos = pos + 1
3  3450
3  3451
3  3452
2  3453
1  3454	    08BC  00A0r				  DW L59BE		     ; OK
1  3455
1  3456						 DC 'CLOSE'
2  3457
2  3458		  =0007				 strsize sizestr <'CLOSE'>
2  3459		  =0000				 pos = 0
2  3460
2  3461						 irpc parameter,'CLOSE'
2  3462							 pos = pos + 1
2  3463
2  3464							 if pos	EQ strsize - 1
2  3465							 db '&parameter' + 80h
2  3466							 endif
2  3467
2  3468							 if pos	GT 1
2  3469								 if pos	LT strsize -1
2  3470									 db '&parameter'
2  3471								 endif
2  3472							 endif
2  3473
2  3474						 endm
3  3475		  =0001					 pos = pos + 1
3  3476
3  3477
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 62
msx_asm\tur_slib.ASM



3  3478
3  3479		  =0002					 pos = pos + 1
3  3480
3  3481
3  3482	    08BE  43							 db 'C'
3  3483
3  3484		  =0003					 pos = pos + 1
3  3485
3  3486
3  3487	    08BF  4C							 db 'L'
3  3488
3  3489		  =0004					 pos = pos + 1
3  3490
3  3491
3  3492	    08C0  4F							 db 'O'
3  3493
3  3494		  =0005					 pos = pos + 1
3  3495
3  3496
3  3497	    08C1  53							 db 'S'
3  3498
3  3499		  =0006					 pos = pos + 1
3  3500
3  3501	    08C2  C5					 db 'E'	+ 80h
3  3502
3  3503
3  3504		  =0007					 pos = pos + 1
3  3505
3  3506
3  3507
2  3508
1  3509	    08C3  00E0r				  DW L59DB		     ; OK
1  3510
1  3511						 DC 'ERASE'
2  3512
2  3513		  =0007				 strsize sizestr <'ERASE'>
2  3514		  =0000				 pos = 0
2  3515
2  3516						 irpc parameter,'ERASE'
2  3517							 pos = pos + 1
2  3518
2  3519							 if pos	EQ strsize - 1
2  3520							 db '&parameter' + 80h
2  3521							 endif
2  3522
2  3523							 if pos	GT 1
2  3524								 if pos	LT strsize -1
2  3525									 db '&parameter'
2  3526								 endif
2  3527							 endif
2  3528
2  3529						 endm
3  3530		  =0001					 pos = pos + 1
3  3531
3  3532
3  3533
3  3534		  =0002					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 63
msx_asm\tur_slib.ASM



3  3535
3  3536
3  3537	    08C5  45							 db 'E'
3  3538
3  3539		  =0003					 pos = pos + 1
3  3540
3  3541
3  3542	    08C6  52							 db 'R'
3  3543
3  3544		  =0004					 pos = pos + 1
3  3545
3  3546
3  3547	    08C7  41							 db 'A'
3  3548
3  3549		  =0005					 pos = pos + 1
3  3550
3  3551
3  3552	    08C8  53							 db 'S'
3  3553
3  3554		  =0006					 pos = pos + 1
3  3555
3  3556	    08C9  C5					 db 'E'	+ 80h
3  3557
3  3558
3  3559		  =0007					 pos = pos + 1
3  3560
3  3561
3  3562
2  3563
1  3564	    08CA  0052r				  DW L5971		     ; OK
1  3565
1  3566						 DC 'RENAME'
2  3567
2  3568		  =0008				 strsize sizestr <'RENAME'>
2  3569		  =0000				 pos = 0
2  3570
2  3571						 irpc parameter,'RENAME'
2  3572							 pos = pos + 1
2  3573
2  3574							 if pos	EQ strsize - 1
2  3575							 db '&parameter' + 80h
2  3576							 endif
2  3577
2  3578							 if pos	GT 1
2  3579								 if pos	LT strsize -1
2  3580									 db '&parameter'
2  3581								 endif
2  3582							 endif
2  3583
2  3584						 endm
3  3585		  =0001					 pos = pos + 1
3  3586
3  3587
3  3588
3  3589		  =0002					 pos = pos + 1
3  3590
3  3591
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 64
msx_asm\tur_slib.ASM



3  3592	    08CC  52							 db 'R'
3  3593
3  3594		  =0003					 pos = pos + 1
3  3595
3  3596
3  3597	    08CD  45							 db 'E'
3  3598
3  3599		  =0004					 pos = pos + 1
3  3600
3  3601
3  3602	    08CE  4E							 db 'N'
3  3603
3  3604		  =0005					 pos = pos + 1
3  3605
3  3606
3  3607	    08CF  41							 db 'A'
3  3608
3  3609		  =0006					 pos = pos + 1
3  3610
3  3611
3  3612	    08D0  4D							 db 'M'
3  3613
3  3614		  =0007					 pos = pos + 1
3  3615
3  3616	    08D1  C5					 db 'E'	+ 80h
3  3617
3  3618
3  3619		  =0008					 pos = pos + 1
3  3620
3  3621
3  3622
2  3623
1  3624	    08D2  0034r				  DW L5966		     ; OK
1  3625
1  3626						  DC 'RENAMEFILE'	     ; OK
2  3627
2  3628		  =000C				 strsize sizestr <'RENAMEFILE'>
2  3629		  =0000				 pos = 0
2  3630
2  3631						 irpc parameter,'RENAMEFILE'
2  3632							 pos = pos + 1
2  3633
2  3634							 if pos	EQ strsize - 1
2  3635							 db '&parameter' + 80h
2  3636							 endif
2  3637
2  3638							 if pos	GT 1
2  3639								 if pos	LT strsize -1
2  3640									 db '&parameter'
2  3641								 endif
2  3642							 endif
2  3643
2  3644						 endm
3  3645		  =0001					 pos = pos + 1
3  3646
3  3647
3  3648
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 65
msx_asm\tur_slib.ASM



3  3649		  =0002					 pos = pos + 1
3  3650
3  3651
3  3652	    08D4  52							 db 'R'
3  3653
3  3654		  =0003					 pos = pos + 1
3  3655
3  3656
3  3657	    08D5  45							 db 'E'
3  3658
3  3659		  =0004					 pos = pos + 1
3  3660
3  3661
3  3662	    08D6  4E							 db 'N'
3  3663
3  3664		  =0005					 pos = pos + 1
3  3665
3  3666
3  3667	    08D7  41							 db 'A'
3  3668
3  3669		  =0006					 pos = pos + 1
3  3670
3  3671
3  3672	    08D8  4D							 db 'M'
3  3673
3  3674		  =0007					 pos = pos + 1
3  3675
3  3676
3  3677	    08D9  45							 db 'E'
3  3678
3  3679		  =0008					 pos = pos + 1
3  3680
3  3681
3  3682	    08DA  46							 db 'F'
3  3683
3  3684		  =0009					 pos = pos + 1
3  3685
3  3686
3  3687	    08DB  49							 db 'I'
3  3688
3  3689		  =000A					 pos = pos + 1
3  3690
3  3691
3  3692	    08DC  4C							 db 'L'
3  3693
3  3694		  =000B					 pos = pos + 1
3  3695
3  3696	    08DD  C5					 db 'E'	+ 80h
3  3697
3  3698
3  3699		  =000C					 pos = pos + 1
3  3700
3  3701
3  3702
2  3703
1  3704	    08DE  0040r				  DW P_RENAMEFILE
1  3705
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 66
msx_asm\tur_slib.ASM



1  3706						 DC 'SEEK'
2  3707
2  3708		  =0006				 strsize sizestr <'SEEK'>
2  3709		  =0000				 pos = 0
2  3710
2  3711						 irpc parameter,'SEEK'
2  3712							 pos = pos + 1
2  3713
2  3714							 if pos	EQ strsize - 1
2  3715							 db '&parameter' + 80h
2  3716							 endif
2  3717
2  3718							 if pos	GT 1
2  3719								 if pos	LT strsize -1
2  3720									 db '&parameter'
2  3721								 endif
2  3722							 endif
2  3723
2  3724						 endm
3  3725		  =0001					 pos = pos + 1
3  3726
3  3727
3  3728
3  3729		  =0002					 pos = pos + 1
3  3730
3  3731
3  3732	    08E0  53							 db 'S'
3  3733
3  3734		  =0003					 pos = pos + 1
3  3735
3  3736
3  3737	    08E1  45							 db 'E'
3  3738
3  3739		  =0004					 pos = pos + 1
3  3740
3  3741
3  3742	    08E2  45							 db 'E'
3  3743
3  3744		  =0005					 pos = pos + 1
3  3745
3  3746	    08E3  CB					 db 'K'	+ 80h
3  3747
3  3748
3  3749		  =0006					 pos = pos + 1
3  3750
3  3751
3  3752
2  3753
1  3754	    08E4  006Er				  DW L598C		     ; OK
1  3755
1  3756						  DC 'GETMEM'
2  3757
2  3758		  =0008				 strsize sizestr <'GETMEM'>
2  3759		  =0000				 pos = 0
2  3760
2  3761						 irpc parameter,'GETMEM'
2  3762							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 67
msx_asm\tur_slib.ASM



2  3763
2  3764							 if pos	EQ strsize - 1
2  3765							 db '&parameter' + 80h
2  3766							 endif
2  3767
2  3768							 if pos	GT 1
2  3769								 if pos	LT strsize -1
2  3770									 db '&parameter'
2  3771								 endif
2  3772							 endif
2  3773
2  3774						 endm
3  3775		  =0001					 pos = pos + 1
3  3776
3  3777
3  3778
3  3779		  =0002					 pos = pos + 1
3  3780
3  3781
3  3782	    08E6  47							 db 'G'
3  3783
3  3784		  =0003					 pos = pos + 1
3  3785
3  3786
3  3787	    08E7  45							 db 'E'
3  3788
3  3789		  =0004					 pos = pos + 1
3  3790
3  3791
3  3792	    08E8  54							 db 'T'
3  3793
3  3794		  =0005					 pos = pos + 1
3  3795
3  3796
3  3797	    08E9  4D							 db 'M'
3  3798
3  3799		  =0006					 pos = pos + 1
3  3800
3  3801
3  3802	    08EA  45							 db 'E'
3  3803
3  3804		  =0007					 pos = pos + 1
3  3805
3  3806	    08EB  CD					 db 'M'	+ 80h
3  3807
3  3808
3  3809		  =0008					 pos = pos + 1
3  3810
3  3811
3  3812
2  3813
1  3814	    08EC  04ABr				  DW L5D94		     ; OK
1  3815
1  3816						 DC 'NEW'
2  3817
2  3818		  =0005				 strsize sizestr <'NEW'>
2  3819		  =0000				 pos = 0
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 68
msx_asm\tur_slib.ASM



2  3820
2  3821						 irpc parameter,'NEW'
2  3822							 pos = pos + 1
2  3823
2  3824							 if pos	EQ strsize - 1
2  3825							 db '&parameter' + 80h
2  3826							 endif
2  3827
2  3828							 if pos	GT 1
2  3829								 if pos	LT strsize -1
2  3830									 db '&parameter'
2  3831								 endif
2  3832							 endif
2  3833
2  3834						 endm
3  3835		  =0001					 pos = pos + 1
3  3836
3  3837
3  3838
3  3839		  =0002					 pos = pos + 1
3  3840
3  3841
3  3842	    08EE  4E							 db 'N'
3  3843
3  3844		  =0003					 pos = pos + 1
3  3845
3  3846
3  3847	    08EF  45							 db 'E'
3  3848
3  3849		  =0004					 pos = pos + 1
3  3850
3  3851	    08F0  D7					 db 'W'	+ 80h
3  3852
3  3853
3  3854		  =0005					 pos = pos + 1
3  3855
3  3856
3  3857
2  3858
1  3859	    08F1  04B6r				  DW L5D9F		     ; OK
1  3860
1  3861						 DC 'FREEMEM'
2  3862
2  3863		  =0009				 strsize sizestr <'FREEMEM'>
2  3864		  =0000				 pos = 0
2  3865
2  3866						 irpc parameter,'FREEMEM'
2  3867							 pos = pos + 1
2  3868
2  3869							 if pos	EQ strsize - 1
2  3870							 db '&parameter' + 80h
2  3871							 endif
2  3872
2  3873							 if pos	GT 1
2  3874								 if pos	LT strsize -1
2  3875									 db '&parameter'
2  3876								 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 69
msx_asm\tur_slib.ASM



2  3877							 endif
2  3878
2  3879						 endm
3  3880		  =0001					 pos = pos + 1
3  3881
3  3882
3  3883
3  3884		  =0002					 pos = pos + 1
3  3885
3  3886
3  3887	    08F3  46							 db 'F'
3  3888
3  3889		  =0003					 pos = pos + 1
3  3890
3  3891
3  3892	    08F4  52							 db 'R'
3  3893
3  3894		  =0004					 pos = pos + 1
3  3895
3  3896
3  3897	    08F5  45							 db 'E'
3  3898
3  3899		  =0005					 pos = pos + 1
3  3900
3  3901
3  3902	    08F6  45							 db 'E'
3  3903
3  3904		  =0006					 pos = pos + 1
3  3905
3  3906
3  3907	    08F7  4D							 db 'M'
3  3908
3  3909		  =0007					 pos = pos + 1
3  3910
3  3911
3  3912	    08F8  45							 db 'E'
3  3913
3  3914		  =0008					 pos = pos + 1
3  3915
3  3916	    08F9  CD					 db 'M'	+ 80h
3  3917
3  3918
3  3919		  =0009					 pos = pos + 1
3  3920
3  3921
3  3922
2  3923
1  3924	    08FA  04CBr				  DW L5DB4		     ; OK
1  3925
1  3926						  DC 'DISPOSE'
2  3927
2  3928		  =0009				 strsize sizestr <'DISPOSE'>
2  3929		  =0000				 pos = 0
2  3930
2  3931						 irpc parameter,'DISPOSE'
2  3932							 pos = pos + 1
2  3933
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 70
msx_asm\tur_slib.ASM



2  3934							 if pos	EQ strsize - 1
2  3935							 db '&parameter' + 80h
2  3936							 endif
2  3937
2  3938							 if pos	GT 1
2  3939								 if pos	LT strsize -1
2  3940									 db '&parameter'
2  3941								 endif
2  3942							 endif
2  3943
2  3944						 endm
3  3945		  =0001					 pos = pos + 1
3  3946
3  3947
3  3948
3  3949		  =0002					 pos = pos + 1
3  3950
3  3951
3  3952	    08FC  44							 db 'D'
3  3953
3  3954		  =0003					 pos = pos + 1
3  3955
3  3956
3  3957	    08FD  49							 db 'I'
3  3958
3  3959		  =0004					 pos = pos + 1
3  3960
3  3961
3  3962	    08FE  53							 db 'S'
3  3963
3  3964		  =0005					 pos = pos + 1
3  3965
3  3966
3  3967	    08FF  50							 db 'P'
3  3968
3  3969		  =0006					 pos = pos + 1
3  3970
3  3971
3  3972	    0900  4F							 db 'O'
3  3973
3  3974		  =0007					 pos = pos + 1
3  3975
3  3976
3  3977	    0901  53							 db 'S'
3  3978
3  3979		  =0008					 pos = pos + 1
3  3980
3  3981	    0902  C5					 db 'E'	+ 80h
3  3982
3  3983
3  3984		  =0009					 pos = pos + 1
3  3985
3  3986
3  3987
2  3988
1  3989	    0903  04D6r				  DW L5DBF		     ; OK
1  3990
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 71
msx_asm\tur_slib.ASM



1  3991						  DC 'MARK'
2  3992
2  3993		  =0006				 strsize sizestr <'MARK'>
2  3994		  =0000				 pos = 0
2  3995
2  3996						 irpc parameter,'MARK'
2  3997							 pos = pos + 1
2  3998
2  3999							 if pos	EQ strsize - 1
2  4000							 db '&parameter' + 80h
2  4001							 endif
2  4002
2  4003							 if pos	GT 1
2  4004								 if pos	LT strsize -1
2  4005									 db '&parameter'
2  4006								 endif
2  4007							 endif
2  4008
2  4009						 endm
3  4010		  =0001					 pos = pos + 1
3  4011
3  4012
3  4013
3  4014		  =0002					 pos = pos + 1
3  4015
3  4016
3  4017	    0905  4D							 db 'M'
3  4018
3  4019		  =0003					 pos = pos + 1
3  4020
3  4021
3  4022	    0906  41							 db 'A'
3  4023
3  4024		  =0004					 pos = pos + 1
3  4025
3  4026
3  4027	    0907  52							 db 'R'
3  4028
3  4029		  =0005					 pos = pos + 1
3  4030
3  4031	    0908  CB					 db 'K'	+ 80h
3  4032
3  4033
3  4034		  =0006					 pos = pos + 1
3  4035
3  4036
3  4037
2  4038
1  4039	    0909  04EBr				  DW L5DD4		     ; OK
1  4040
1  4041						  DC 'RELEASE'
2  4042
2  4043		  =0009				 strsize sizestr <'RELEASE'>
2  4044		  =0000				 pos = 0
2  4045
2  4046						 irpc parameter,'RELEASE'
2  4047							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 72
msx_asm\tur_slib.ASM



2  4048
2  4049							 if pos	EQ strsize - 1
2  4050							 db '&parameter' + 80h
2  4051							 endif
2  4052
2  4053							 if pos	GT 1
2  4054								 if pos	LT strsize -1
2  4055									 db '&parameter'
2  4056								 endif
2  4057							 endif
2  4058
2  4059						 endm
3  4060		  =0001					 pos = pos + 1
3  4061
3  4062
3  4063
3  4064		  =0002					 pos = pos + 1
3  4065
3  4066
3  4067	    090B  52							 db 'R'
3  4068
3  4069		  =0003					 pos = pos + 1
3  4070
3  4071
3  4072	    090C  45							 db 'E'
3  4073
3  4074		  =0004					 pos = pos + 1
3  4075
3  4076
3  4077	    090D  4C							 db 'L'
3  4078
3  4079		  =0005					 pos = pos + 1
3  4080
3  4081
3  4082	    090E  45							 db 'E'
3  4083
3  4084		  =0006					 pos = pos + 1
3  4085
3  4086
3  4087	    090F  41							 db 'A'
3  4088
3  4089		  =0007					 pos = pos + 1
3  4090
3  4091
3  4092	    0910  53							 db 'S'
3  4093
3  4094		  =0008					 pos = pos + 1
3  4095
3  4096	    0911  C5					 db 'E'	+ 80h
3  4097
3  4098
3  4099		  =0009					 pos = pos + 1
3  4100
3  4101
3  4102
2  4103
1  4104	    0912  04F0r				  DW L5DD9		     ; OK
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 73
msx_asm\tur_slib.ASM



1  4105
1  4106						 DC 'OVRDRIVE'
2  4107
2  4108		  =000A				 strsize sizestr <'OVRDRIVE'>
2  4109		  =0000				 pos = 0
2  4110
2  4111						 irpc parameter,'OVRDRIVE'
2  4112							 pos = pos + 1
2  4113
2  4114							 if pos	EQ strsize - 1
2  4115							 db '&parameter' + 80h
2  4116							 endif
2  4117
2  4118							 if pos	GT 1
2  4119								 if pos	LT strsize -1
2  4120									 db '&parameter'
2  4121								 endif
2  4122							 endif
2  4123
2  4124						 endm
3  4125		  =0001					 pos = pos + 1
3  4126
3  4127
3  4128
3  4129		  =0002					 pos = pos + 1
3  4130
3  4131
3  4132	    0914  4F							 db 'O'
3  4133
3  4134		  =0003					 pos = pos + 1
3  4135
3  4136
3  4137	    0915  56							 db 'V'
3  4138
3  4139		  =0004					 pos = pos + 1
3  4140
3  4141
3  4142	    0916  52							 db 'R'
3  4143
3  4144		  =0005					 pos = pos + 1
3  4145
3  4146
3  4147	    0917  44							 db 'D'
3  4148
3  4149		  =0006					 pos = pos + 1
3  4150
3  4151
3  4152	    0918  52							 db 'R'
3  4153
3  4154		  =0007					 pos = pos + 1
3  4155
3  4156
3  4157	    0919  49							 db 'I'
3  4158
3  4159		  =0008					 pos = pos + 1
3  4160
3  4161
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 74
msx_asm\tur_slib.ASM



3  4162	    091A  56							 db 'V'
3  4163
3  4164		  =0009					 pos = pos + 1
3  4165
3  4166	    091B  C5					 db 'E'	+ 80h
3  4167
3  4168
3  4169		  =000A					 pos = pos + 1
3  4170
3  4171
3  4172
2  4173
1  4174	    091C  0511r				  DW L5DF9		     ; OK
1  4175
1  4176						 DC 'CRTINIT'
2  4177
2  4178		  =0009				 strsize sizestr <'CRTINIT'>
2  4179		  =0000				 pos = 0
2  4180
2  4181						 irpc parameter,'CRTINIT'
2  4182							 pos = pos + 1
2  4183
2  4184							 if pos	EQ strsize - 1
2  4185							 db '&parameter' + 80h
2  4186							 endif
2  4187
2  4188							 if pos	GT 1
2  4189								 if pos	LT strsize -1
2  4190									 db '&parameter'
2  4191								 endif
2  4192							 endif
2  4193
2  4194						 endm
3  4195		  =0001					 pos = pos + 1
3  4196
3  4197
3  4198
3  4199		  =0002					 pos = pos + 1
3  4200
3  4201
3  4202	    091E  43							 db 'C'
3  4203
3  4204		  =0003					 pos = pos + 1
3  4205
3  4206
3  4207	    091F  52							 db 'R'
3  4208
3  4209		  =0004					 pos = pos + 1
3  4210
3  4211
3  4212	    0920  54							 db 'T'
3  4213
3  4214		  =0005					 pos = pos + 1
3  4215
3  4216
3  4217	    0921  49							 db 'I'
3  4218
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 75
msx_asm\tur_slib.ASM



3  4219		  =0006					 pos = pos + 1
3  4220
3  4221
3  4222	    0922  4E							 db 'N'
3  4223
3  4224		  =0007					 pos = pos + 1
3  4225
3  4226
3  4227	    0923  49							 db 'I'
3  4228
3  4229		  =0008					 pos = pos + 1
3  4230
3  4231	    0924  D4					 db 'T'	+ 80h
3  4232
3  4233
3  4234		  =0009					 pos = pos + 1
3  4235
3  4236
3  4237
2  4238
1  4239	    0925  051Dr				  DW L5E38		     ; OK
1  4240
1  4241						 DC 'CRTEXIT'
2  4242
2  4243		  =0009				 strsize sizestr <'CRTEXIT'>
2  4244		  =0000				 pos = 0
2  4245
2  4246						 irpc parameter,'CRTEXIT'
2  4247							 pos = pos + 1
2  4248
2  4249							 if pos	EQ strsize - 1
2  4250							 db '&parameter' + 80h
2  4251							 endif
2  4252
2  4253							 if pos	GT 1
2  4254								 if pos	LT strsize -1
2  4255									 db '&parameter'
2  4256								 endif
2  4257							 endif
2  4258
2  4259						 endm
3  4260		  =0001					 pos = pos + 1
3  4261
3  4262
3  4263
3  4264		  =0002					 pos = pos + 1
3  4265
3  4266
3  4267	    0927  43							 db 'C'
3  4268
3  4269		  =0003					 pos = pos + 1
3  4270
3  4271
3  4272	    0928  52							 db 'R'
3  4273
3  4274		  =0004					 pos = pos + 1
3  4275
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 76
msx_asm\tur_slib.ASM



3  4276
3  4277	    0929  54							 db 'T'
3  4278
3  4279		  =0005					 pos = pos + 1
3  4280
3  4281
3  4282	    092A  45							 db 'E'
3  4283
3  4284		  =0006					 pos = pos + 1
3  4285
3  4286
3  4287	    092B  58							 db 'X'
3  4288
3  4289		  =0007					 pos = pos + 1
3  4290
3  4291
3  4292	    092C  49							 db 'I'
3  4293
3  4294		  =0008					 pos = pos + 1
3  4295
3  4296	    092D  D4					 db 'T'	+ 80h
3  4297
3  4298
3  4299		  =0009					 pos = pos + 1
3  4300
3  4301
3  4302
2  4303
1  4304	    092E  0522r				  DW L5E3D		     ; OK
1  4305
1  4306						 DC 'GOTOXY'
2  4307
2  4308		  =0008				 strsize sizestr <'GOTOXY'>
2  4309		  =0000				 pos = 0
2  4310
2  4311						 irpc parameter,'GOTOXY'
2  4312							 pos = pos + 1
2  4313
2  4314							 if pos	EQ strsize - 1
2  4315							 db '&parameter' + 80h
2  4316							 endif
2  4317
2  4318							 if pos	GT 1
2  4319								 if pos	LT strsize -1
2  4320									 db '&parameter'
2  4321								 endif
2  4322							 endif
2  4323
2  4324						 endm
3  4325		  =0001					 pos = pos + 1
3  4326
3  4327
3  4328
3  4329		  =0002					 pos = pos + 1
3  4330
3  4331
3  4332	    0930  47							 db 'G'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 77
msx_asm\tur_slib.ASM



3  4333
3  4334		  =0003					 pos = pos + 1
3  4335
3  4336
3  4337	    0931  4F							 db 'O'
3  4338
3  4339		  =0004					 pos = pos + 1
3  4340
3  4341
3  4342	    0932  54							 db 'T'
3  4343
3  4344		  =0005					 pos = pos + 1
3  4345
3  4346
3  4347	    0933  4F							 db 'O'
3  4348
3  4349		  =0006					 pos = pos + 1
3  4350
3  4351
3  4352	    0934  58							 db 'X'
3  4353
3  4354		  =0007					 pos = pos + 1
3  4355
3  4356	    0935  D9					 db 'Y'	+ 80h
3  4357
3  4358
3  4359		  =0008					 pos = pos + 1
3  4360
3  4361
3  4362
2  4363
1  4364	    0936  0458r				  DW L5D6D		     ; OK
1  4365
1  4366						 DC 'CLRSCR'
2  4367
2  4368		  =0008				 strsize sizestr <'CLRSCR'>
2  4369		  =0000				 pos = 0
2  4370
2  4371						 irpc parameter,'CLRSCR'
2  4372							 pos = pos + 1
2  4373
2  4374							 if pos	EQ strsize - 1
2  4375							 db '&parameter' + 80h
2  4376							 endif
2  4377
2  4378							 if pos	GT 1
2  4379								 if pos	LT strsize -1
2  4380									 db '&parameter'
2  4381								 endif
2  4382							 endif
2  4383
2  4384						 endm
3  4385		  =0001					 pos = pos + 1
3  4386
3  4387
3  4388
3  4389		  =0002					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 78
msx_asm\tur_slib.ASM



3  4390
3  4391
3  4392	    0938  43							 db 'C'
3  4393
3  4394		  =0003					 pos = pos + 1
3  4395
3  4396
3  4397	    0939  4C							 db 'L'
3  4398
3  4399		  =0004					 pos = pos + 1
3  4400
3  4401
3  4402	    093A  52							 db 'R'
3  4403
3  4404		  =0005					 pos = pos + 1
3  4405
3  4406
3  4407	    093B  53							 db 'S'
3  4408
3  4409		  =0006					 pos = pos + 1
3  4410
3  4411
3  4412	    093C  43							 db 'C'
3  4413
3  4414		  =0007					 pos = pos + 1
3  4415
3  4416	    093D  D2					 db 'R'	+ 80h
3  4417
3  4418
3  4419		  =0008					 pos = pos + 1
3  4420
3  4421
3  4422
2  4423
1  4424	    093E  0527r				  DW L5E42		     ; OK
1  4425
1  4426						 DC 'CLREOL'
2  4427
2  4428		  =0008				 strsize sizestr <'CLREOL'>
2  4429		  =0000				 pos = 0
2  4430
2  4431						 irpc parameter,'CLREOL'
2  4432							 pos = pos + 1
2  4433
2  4434							 if pos	EQ strsize - 1
2  4435							 db '&parameter' + 80h
2  4436							 endif
2  4437
2  4438							 if pos	GT 1
2  4439								 if pos	LT strsize -1
2  4440									 db '&parameter'
2  4441								 endif
2  4442							 endif
2  4443
2  4444						 endm
3  4445		  =0001					 pos = pos + 1
3  4446
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 79
msx_asm\tur_slib.ASM



3  4447
3  4448
3  4449		  =0002					 pos = pos + 1
3  4450
3  4451
3  4452	    0940  43							 db 'C'
3  4453
3  4454		  =0003					 pos = pos + 1
3  4455
3  4456
3  4457	    0941  4C							 db 'L'
3  4458
3  4459		  =0004					 pos = pos + 1
3  4460
3  4461
3  4462	    0942  52							 db 'R'
3  4463
3  4464		  =0005					 pos = pos + 1
3  4465
3  4466
3  4467	    0943  45							 db 'E'
3  4468
3  4469		  =0006					 pos = pos + 1
3  4470
3  4471
3  4472	    0944  4F							 db 'O'
3  4473
3  4474		  =0007					 pos = pos + 1
3  4475
3  4476	    0945  CC					 db 'L'	+ 80h
3  4477
3  4478
3  4479		  =0008					 pos = pos + 1
3  4480
3  4481
3  4482
2  4483
1  4484	    0946  052Dr				  DW L5E48		     ; OK
1  4485
1  4486						 DC 'NORMVIDEO'
2  4487
2  4488		  =000B				 strsize sizestr <'NORMVIDEO'>
2  4489		  =0000				 pos = 0
2  4490
2  4491						 irpc parameter,'NORMVIDEO'
2  4492							 pos = pos + 1
2  4493
2  4494							 if pos	EQ strsize - 1
2  4495							 db '&parameter' + 80h
2  4496							 endif
2  4497
2  4498							 if pos	GT 1
2  4499								 if pos	LT strsize -1
2  4500									 db '&parameter'
2  4501								 endif
2  4502							 endif
2  4503
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 80
msx_asm\tur_slib.ASM



2  4504						 endm
3  4505		  =0001					 pos = pos + 1
3  4506
3  4507
3  4508
3  4509		  =0002					 pos = pos + 1
3  4510
3  4511
3  4512	    0948  4E							 db 'N'
3  4513
3  4514		  =0003					 pos = pos + 1
3  4515
3  4516
3  4517	    0949  4F							 db 'O'
3  4518
3  4519		  =0004					 pos = pos + 1
3  4520
3  4521
3  4522	    094A  52							 db 'R'
3  4523
3  4524		  =0005					 pos = pos + 1
3  4525
3  4526
3  4527	    094B  4D							 db 'M'
3  4528
3  4529		  =0006					 pos = pos + 1
3  4530
3  4531
3  4532	    094C  56							 db 'V'
3  4533
3  4534		  =0007					 pos = pos + 1
3  4535
3  4536
3  4537	    094D  49							 db 'I'
3  4538
3  4539		  =0008					 pos = pos + 1
3  4540
3  4541
3  4542	    094E  44							 db 'D'
3  4543
3  4544		  =0009					 pos = pos + 1
3  4545
3  4546
3  4547	    094F  45							 db 'E'
3  4548
3  4549		  =000A					 pos = pos + 1
3  4550
3  4551	    0950  CF					 db 'O'	+ 80h
3  4552
3  4553
3  4554		  =000B					 pos = pos + 1
3  4555
3  4556
3  4557
2  4558
1  4559	    0951  0532r				  DW L5E4D		     ; OK
1  4560
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 81
msx_asm\tur_slib.ASM



1  4561						 DC 'HIGHVIDEO'
2  4562
2  4563		  =000B				 strsize sizestr <'HIGHVIDEO'>
2  4564		  =0000				 pos = 0
2  4565
2  4566						 irpc parameter,'HIGHVIDEO'
2  4567							 pos = pos + 1
2  4568
2  4569							 if pos	EQ strsize - 1
2  4570							 db '&parameter' + 80h
2  4571							 endif
2  4572
2  4573							 if pos	GT 1
2  4574								 if pos	LT strsize -1
2  4575									 db '&parameter'
2  4576								 endif
2  4577							 endif
2  4578
2  4579						 endm
3  4580		  =0001					 pos = pos + 1
3  4581
3  4582
3  4583
3  4584		  =0002					 pos = pos + 1
3  4585
3  4586
3  4587	    0953  48							 db 'H'
3  4588
3  4589		  =0003					 pos = pos + 1
3  4590
3  4591
3  4592	    0954  49							 db 'I'
3  4593
3  4594		  =0004					 pos = pos + 1
3  4595
3  4596
3  4597	    0955  47							 db 'G'
3  4598
3  4599		  =0005					 pos = pos + 1
3  4600
3  4601
3  4602	    0956  48							 db 'H'
3  4603
3  4604		  =0006					 pos = pos + 1
3  4605
3  4606
3  4607	    0957  56							 db 'V'
3  4608
3  4609		  =0007					 pos = pos + 1
3  4610
3  4611
3  4612	    0958  49							 db 'I'
3  4613
3  4614		  =0008					 pos = pos + 1
3  4615
3  4616
3  4617	    0959  44							 db 'D'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 82
msx_asm\tur_slib.ASM



3  4618
3  4619		  =0009					 pos = pos + 1
3  4620
3  4621
3  4622	    095A  45							 db 'E'
3  4623
3  4624		  =000A					 pos = pos + 1
3  4625
3  4626	    095B  CF					 db 'O'	+ 80h
3  4627
3  4628
3  4629		  =000B					 pos = pos + 1
3  4630
3  4631
3  4632
2  4633
1  4634	    095C  0532r				  DW L5E4D		     ; OK
1  4635
1  4636						 DC 'LOWVIDEO'
2  4637
2  4638		  =000A				 strsize sizestr <'LOWVIDEO'>
2  4639		  =0000				 pos = 0
2  4640
2  4641						 irpc parameter,'LOWVIDEO'
2  4642							 pos = pos + 1
2  4643
2  4644							 if pos	EQ strsize - 1
2  4645							 db '&parameter' + 80h
2  4646							 endif
2  4647
2  4648							 if pos	GT 1
2  4649								 if pos	LT strsize -1
2  4650									 db '&parameter'
2  4651								 endif
2  4652							 endif
2  4653
2  4654						 endm
3  4655		  =0001					 pos = pos + 1
3  4656
3  4657
3  4658
3  4659		  =0002					 pos = pos + 1
3  4660
3  4661
3  4662	    095E  4C							 db 'L'
3  4663
3  4664		  =0003					 pos = pos + 1
3  4665
3  4666
3  4667	    095F  4F							 db 'O'
3  4668
3  4669		  =0004					 pos = pos + 1
3  4670
3  4671
3  4672	    0960  57							 db 'W'
3  4673
3  4674		  =0005					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 83
msx_asm\tur_slib.ASM



3  4675
3  4676
3  4677	    0961  56							 db 'V'
3  4678
3  4679		  =0006					 pos = pos + 1
3  4680
3  4681
3  4682	    0962  49							 db 'I'
3  4683
3  4684		  =0007					 pos = pos + 1
3  4685
3  4686
3  4687	    0963  44							 db 'D'
3  4688
3  4689		  =0008					 pos = pos + 1
3  4690
3  4691
3  4692	    0964  45							 db 'E'
3  4693
3  4694		  =0009					 pos = pos + 1
3  4695
3  4696	    0965  CF					 db 'O'	+ 80h
3  4697
3  4698
3  4699		  =000A					 pos = pos + 1
3  4700
3  4701
3  4702
2  4703
1  4704	    0966  0537r				  DW L5E52		     ; OK
1  4705
1  4706						 DC 'INSLINE'
2  4707
2  4708		  =0009				 strsize sizestr <'INSLINE'>
2  4709		  =0000				 pos = 0
2  4710
2  4711						 irpc parameter,'INSLINE'
2  4712							 pos = pos + 1
2  4713
2  4714							 if pos	EQ strsize - 1
2  4715							 db '&parameter' + 80h
2  4716							 endif
2  4717
2  4718							 if pos	GT 1
2  4719								 if pos	LT strsize -1
2  4720									 db '&parameter'
2  4721								 endif
2  4722							 endif
2  4723
2  4724						 endm
3  4725		  =0001					 pos = pos + 1
3  4726
3  4727
3  4728
3  4729		  =0002					 pos = pos + 1
3  4730
3  4731
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 84
msx_asm\tur_slib.ASM



3  4732	    0968  49							 db 'I'
3  4733
3  4734		  =0003					 pos = pos + 1
3  4735
3  4736
3  4737	    0969  4E							 db 'N'
3  4738
3  4739		  =0004					 pos = pos + 1
3  4740
3  4741
3  4742	    096A  53							 db 'S'
3  4743
3  4744		  =0005					 pos = pos + 1
3  4745
3  4746
3  4747	    096B  4C							 db 'L'
3  4748
3  4749		  =0006					 pos = pos + 1
3  4750
3  4751
3  4752	    096C  49							 db 'I'
3  4753
3  4754		  =0007					 pos = pos + 1
3  4755
3  4756
3  4757	    096D  4E							 db 'N'
3  4758
3  4759		  =0008					 pos = pos + 1
3  4760
3  4761	    096E  C5					 db 'E'	+ 80h
3  4762
3  4763
3  4764		  =0009					 pos = pos + 1
3  4765
3  4766
3  4767
2  4768
1  4769	    096F  053Cr				  DW L5E57		     ; OK
1  4770
1  4771						 DC 'DELLINE'
2  4772
2  4773		  =0009				 strsize sizestr <'DELLINE'>
2  4774		  =0000				 pos = 0
2  4775
2  4776						 irpc parameter,'DELLINE'
2  4777							 pos = pos + 1
2  4778
2  4779							 if pos	EQ strsize - 1
2  4780							 db '&parameter' + 80h
2  4781							 endif
2  4782
2  4783							 if pos	GT 1
2  4784								 if pos	LT strsize -1
2  4785									 db '&parameter'
2  4786								 endif
2  4787							 endif
2  4788
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 85
msx_asm\tur_slib.ASM



2  4789						 endm
3  4790		  =0001					 pos = pos + 1
3  4791
3  4792
3  4793
3  4794		  =0002					 pos = pos + 1
3  4795
3  4796
3  4797	    0971  44							 db 'D'
3  4798
3  4799		  =0003					 pos = pos + 1
3  4800
3  4801
3  4802	    0972  45							 db 'E'
3  4803
3  4804		  =0004					 pos = pos + 1
3  4805
3  4806
3  4807	    0973  4C							 db 'L'
3  4808
3  4809		  =0005					 pos = pos + 1
3  4810
3  4811
3  4812	    0974  4C							 db 'L'
3  4813
3  4814		  =0006					 pos = pos + 1
3  4815
3  4816
3  4817	    0975  49							 db 'I'
3  4818
3  4819		  =0007					 pos = pos + 1
3  4820
3  4821
3  4822	    0976  4E							 db 'N'
3  4823
3  4824		  =0008					 pos = pos + 1
3  4825
3  4826	    0977  C5					 db 'E'	+ 80h
3  4827
3  4828
3  4829		  =0009					 pos = pos + 1
3  4830
3  4831
3  4832
2  4833
1  4834	    0978  0541r				  DW L5E5C		     ; OK
1  4835
1  4836						 DC 'DELAY'
2  4837
2  4838		  =0007				 strsize sizestr <'DELAY'>
2  4839		  =0000				 pos = 0
2  4840
2  4841						 irpc parameter,'DELAY'
2  4842							 pos = pos + 1
2  4843
2  4844							 if pos	EQ strsize - 1
2  4845							 db '&parameter' + 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 86
msx_asm\tur_slib.ASM



2  4846							 endif
2  4847
2  4848							 if pos	GT 1
2  4849								 if pos	LT strsize -1
2  4850									 db '&parameter'
2  4851								 endif
2  4852							 endif
2  4853
2  4854						 endm
3  4855		  =0001					 pos = pos + 1
3  4856
3  4857
3  4858
3  4859		  =0002					 pos = pos + 1
3  4860
3  4861
3  4862	    097A  44							 db 'D'
3  4863
3  4864		  =0003					 pos = pos + 1
3  4865
3  4866
3  4867	    097B  45							 db 'E'
3  4868
3  4869		  =0004					 pos = pos + 1
3  4870
3  4871
3  4872	    097C  4C							 db 'L'
3  4873
3  4874		  =0005					 pos = pos + 1
3  4875
3  4876
3  4877	    097D  41							 db 'A'
3  4878
3  4879		  =0006					 pos = pos + 1
3  4880
3  4881	    097E  D9					 db 'Y'	+ 80h
3  4882
3  4883
3  4884		  =0007					 pos = pos + 1
3  4885
3  4886
3  4887
2  4888
1  4889	    097F  046Ar				  DW L5D89		     ; OK
1  4890
1  4891						 DC 'BLOCKREAD'
2  4892
2  4893		  =000B				 strsize sizestr <'BLOCKREAD'>
2  4894		  =0000				 pos = 0
2  4895
2  4896						 irpc parameter,'BLOCKREAD'
2  4897							 pos = pos + 1
2  4898
2  4899							 if pos	EQ strsize - 1
2  4900							 db '&parameter' + 80h
2  4901							 endif
2  4902
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 87
msx_asm\tur_slib.ASM



2  4903							 if pos	GT 1
2  4904								 if pos	LT strsize -1
2  4905									 db '&parameter'
2  4906								 endif
2  4907							 endif
2  4908
2  4909						 endm
3  4910		  =0001					 pos = pos + 1
3  4911
3  4912
3  4913
3  4914		  =0002					 pos = pos + 1
3  4915
3  4916
3  4917	    0981  42							 db 'B'
3  4918
3  4919		  =0003					 pos = pos + 1
3  4920
3  4921
3  4922	    0982  4C							 db 'L'
3  4923
3  4924		  =0004					 pos = pos + 1
3  4925
3  4926
3  4927	    0983  4F							 db 'O'
3  4928
3  4929		  =0005					 pos = pos + 1
3  4930
3  4931
3  4932	    0984  43							 db 'C'
3  4933
3  4934		  =0006					 pos = pos + 1
3  4935
3  4936
3  4937	    0985  4B							 db 'K'
3  4938
3  4939		  =0007					 pos = pos + 1
3  4940
3  4941
3  4942	    0986  52							 db 'R'
3  4943
3  4944		  =0008					 pos = pos + 1
3  4945
3  4946
3  4947	    0987  45							 db 'E'
3  4948
3  4949		  =0009					 pos = pos + 1
3  4950
3  4951
3  4952	    0988  41							 db 'A'
3  4953
3  4954		  =000A					 pos = pos + 1
3  4955
3  4956	    0989  C4					 db 'D'	+ 80h
3  4957
3  4958
3  4959		  =000B					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 88
msx_asm\tur_slib.ASM



3  4960
3  4961
3  4962
2  4963
1  4964	    098A  02EEr				  DW L5C16		     ; OK
1  4965
1  4966						 DC 'BLOCKWRITE'
2  4967
2  4968		  =000C				 strsize sizestr <'BLOCKWRITE'>
2  4969		  =0000				 pos = 0
2  4970
2  4971						 irpc parameter,'BLOCKWRITE'
2  4972							 pos = pos + 1
2  4973
2  4974							 if pos	EQ strsize - 1
2  4975							 db '&parameter' + 80h
2  4976							 endif
2  4977
2  4978							 if pos	GT 1
2  4979								 if pos	LT strsize -1
2  4980									 db '&parameter'
2  4981								 endif
2  4982							 endif
2  4983
2  4984						 endm
3  4985		  =0001					 pos = pos + 1
3  4986
3  4987
3  4988
3  4989		  =0002					 pos = pos + 1
3  4990
3  4991
3  4992	    098C  42							 db 'B'
3  4993
3  4994		  =0003					 pos = pos + 1
3  4995
3  4996
3  4997	    098D  4C							 db 'L'
3  4998
3  4999		  =0004					 pos = pos + 1
3  5000
3  5001
3  5002	    098E  4F							 db 'O'
3  5003
3  5004		  =0005					 pos = pos + 1
3  5005
3  5006
3  5007	    098F  43							 db 'C'
3  5008
3  5009		  =0006					 pos = pos + 1
3  5010
3  5011
3  5012	    0990  4B							 db 'K'
3  5013
3  5014		  =0007					 pos = pos + 1
3  5015
3  5016
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 89
msx_asm\tur_slib.ASM



3  5017	    0991  57							 db 'W'
3  5018
3  5019		  =0008					 pos = pos + 1
3  5020
3  5021
3  5022	    0992  52							 db 'R'
3  5023
3  5024		  =0009					 pos = pos + 1
3  5025
3  5026
3  5027	    0993  49							 db 'I'
3  5028
3  5029		  =000A					 pos = pos + 1
3  5030
3  5031
3  5032	    0994  54							 db 'T'
3  5033
3  5034		  =000B					 pos = pos + 1
3  5035
3  5036	    0995  C5					 db 'E'	+ 80h
3  5037
3  5038
3  5039		  =000C					 pos = pos + 1
3  5040
3  5041
3  5042
2  5043
1  5044	    0996  02F6r				  DW L5C1E		     ; OK
1  5045
1  5046						 DC 'RANDOMIZE'
2  5047
2  5048		  =000B				 strsize sizestr <'RANDOMIZE'>
2  5049		  =0000				 pos = 0
2  5050
2  5051						 irpc parameter,'RANDOMIZE'
2  5052							 pos = pos + 1
2  5053
2  5054							 if pos	EQ strsize - 1
2  5055							 db '&parameter' + 80h
2  5056							 endif
2  5057
2  5058							 if pos	GT 1
2  5059								 if pos	LT strsize -1
2  5060									 db '&parameter'
2  5061								 endif
2  5062							 endif
2  5063
2  5064						 endm
3  5065		  =0001					 pos = pos + 1
3  5066
3  5067
3  5068
3  5069		  =0002					 pos = pos + 1
3  5070
3  5071
3  5072	    0998  52							 db 'R'
3  5073
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 90
msx_asm\tur_slib.ASM



3  5074		  =0003					 pos = pos + 1
3  5075
3  5076
3  5077	    0999  41							 db 'A'
3  5078
3  5079		  =0004					 pos = pos + 1
3  5080
3  5081
3  5082	    099A  4E							 db 'N'
3  5083
3  5084		  =0005					 pos = pos + 1
3  5085
3  5086
3  5087	    099B  44							 db 'D'
3  5088
3  5089		  =0006					 pos = pos + 1
3  5090
3  5091
3  5092	    099C  4F							 db 'O'
3  5093
3  5094		  =0007					 pos = pos + 1
3  5095
3  5096
3  5097	    099D  4D							 db 'M'
3  5098
3  5099		  =0008					 pos = pos + 1
3  5100
3  5101
3  5102	    099E  49							 db 'I'
3  5103
3  5104		  =0009					 pos = pos + 1
3  5105
3  5106
3  5107	    099F  5A							 db 'Z'
3  5108
3  5109		  =000A					 pos = pos + 1
3  5110
3  5111	    09A0  C5					 db 'E'	+ 80h
3  5112
3  5113
3  5114		  =000B					 pos = pos + 1
3  5115
3  5116
3  5117
2  5118
1  5119	    09A1  0464r				  DW L5D83		     ; OK
1  5120
1  5121						 DC 'MOVE'
2  5122
2  5123		  =0006				 strsize sizestr <'MOVE'>
2  5124		  =0000				 pos = 0
2  5125
2  5126						 irpc parameter,'MOVE'
2  5127							 pos = pos + 1
2  5128
2  5129							 if pos	EQ strsize - 1
2  5130							 db '&parameter' + 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 91
msx_asm\tur_slib.ASM



2  5131							 endif
2  5132
2  5133							 if pos	GT 1
2  5134								 if pos	LT strsize -1
2  5135									 db '&parameter'
2  5136								 endif
2  5137							 endif
2  5138
2  5139						 endm
3  5140		  =0001					 pos = pos + 1
3  5141
3  5142
3  5143
3  5144		  =0002					 pos = pos + 1
3  5145
3  5146
3  5147	    09A3  4D							 db 'M'
3  5148
3  5149		  =0003					 pos = pos + 1
3  5150
3  5151
3  5152	    09A4  4F							 db 'O'
3  5153
3  5154		  =0004					 pos = pos + 1
3  5155
3  5156
3  5157	    09A5  56							 db 'V'
3  5158
3  5159		  =0005					 pos = pos + 1
3  5160
3  5161	    09A6  C5					 db 'E'	+ 80h
3  5162
3  5163
3  5164		  =0006					 pos = pos + 1
3  5165
3  5166
3  5167
2  5168
1  5169	    09A7  0476r				  DW L5E05		     ; OK
1  5170
1  5171						 DC 'FILLCHAR'
2  5172
2  5173		  =000A				 strsize sizestr <'FILLCHAR'>
2  5174		  =0000				 pos = 0
2  5175
2  5176						 irpc parameter,'FILLCHAR'
2  5177							 pos = pos + 1
2  5178
2  5179							 if pos	EQ strsize - 1
2  5180							 db '&parameter' + 80h
2  5181							 endif
2  5182
2  5183							 if pos	GT 1
2  5184								 if pos	LT strsize -1
2  5185									 db '&parameter'
2  5186								 endif
2  5187							 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 92
msx_asm\tur_slib.ASM



2  5188
2  5189						 endm
3  5190		  =0001					 pos = pos + 1
3  5191
3  5192
3  5193
3  5194		  =0002					 pos = pos + 1
3  5195
3  5196
3  5197	    09A9  46							 db 'F'
3  5198
3  5199		  =0003					 pos = pos + 1
3  5200
3  5201
3  5202	    09AA  49							 db 'I'
3  5203
3  5204		  =0004					 pos = pos + 1
3  5205
3  5206
3  5207	    09AB  4C							 db 'L'
3  5208
3  5209		  =0005					 pos = pos + 1
3  5210
3  5211
3  5212	    09AC  4C							 db 'L'
3  5213
3  5214		  =0006					 pos = pos + 1
3  5215
3  5216
3  5217	    09AD  43							 db 'C'
3  5218
3  5219		  =0007					 pos = pos + 1
3  5220
3  5221
3  5222	    09AE  48							 db 'H'
3  5223
3  5224		  =0008					 pos = pos + 1
3  5225
3  5226
3  5227	    09AF  41							 db 'A'
3  5228
3  5229		  =0009					 pos = pos + 1
3  5230
3  5231	    09B0  D2					 db 'R'	+ 80h
3  5232
3  5233
3  5234		  =000A					 pos = pos + 1
3  5235
3  5236
3  5237
2  5238
1  5239	    09B1  048Br				  DW L5E1A		     ; OK
1  5240
1  5241						  DC 'ERROREXIT'
2  5242
2  5243		  =000B				 strsize sizestr <'ERROREXIT'>
2  5244		  =0000				 pos = 0
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 93
msx_asm\tur_slib.ASM



2  5245
2  5246						 irpc parameter,'ERROREXIT'
2  5247							 pos = pos + 1
2  5248
2  5249							 if pos	EQ strsize - 1
2  5250							 db '&parameter' + 80h
2  5251							 endif
2  5252
2  5253							 if pos	GT 1
2  5254								 if pos	LT strsize -1
2  5255									 db '&parameter'
2  5256								 endif
2  5257							 endif
2  5258
2  5259						 endm
3  5260		  =0001					 pos = pos + 1
3  5261
3  5262
3  5263
3  5264		  =0002					 pos = pos + 1
3  5265
3  5266
3  5267	    09B3  45							 db 'E'
3  5268
3  5269		  =0003					 pos = pos + 1
3  5270
3  5271
3  5272	    09B4  52							 db 'R'
3  5273
3  5274		  =0004					 pos = pos + 1
3  5275
3  5276
3  5277	    09B5  52							 db 'R'
3  5278
3  5279		  =0005					 pos = pos + 1
3  5280
3  5281
3  5282	    09B6  4F							 db 'O'
3  5283
3  5284		  =0006					 pos = pos + 1
3  5285
3  5286
3  5287	    09B7  52							 db 'R'
3  5288
3  5289		  =0007					 pos = pos + 1
3  5290
3  5291
3  5292	    09B8  45							 db 'E'
3  5293
3  5294		  =0008					 pos = pos + 1
3  5295
3  5296
3  5297	    09B9  58							 db 'X'
3  5298
3  5299		  =0009					 pos = pos + 1
3  5300
3  5301
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 94
msx_asm\tur_slib.ASM



3  5302	    09BA  49							 db 'I'
3  5303
3  5304		  =000A					 pos = pos + 1
3  5305
3  5306	    09BB  D4					 db 'T'	+ 80h
3  5307
3  5308
3  5309		  =000B					 pos = pos + 1
3  5310
3  5311
3  5312
2  5313
1  5314	    09BC  0546r				  DW P_ERROREXIT	     ; ??
1  5315
1  5316						 DC 'EXIT'
2  5317
2  5318		  =0006				 strsize sizestr <'EXIT'>
2  5319		  =0000				 pos = 0
2  5320
2  5321						 irpc parameter,'EXIT'
2  5322							 pos = pos + 1
2  5323
2  5324							 if pos	EQ strsize - 1
2  5325							 db '&parameter' + 80h
2  5326							 endif
2  5327
2  5328							 if pos	GT 1
2  5329								 if pos	LT strsize -1
2  5330									 db '&parameter'
2  5331								 endif
2  5332							 endif
2  5333
2  5334						 endm
3  5335		  =0001					 pos = pos + 1
3  5336
3  5337
3  5338
3  5339		  =0002					 pos = pos + 1
3  5340
3  5341
3  5342	    09BE  45							 db 'E'
3  5343
3  5344		  =0003					 pos = pos + 1
3  5345
3  5346
3  5347	    09BF  58							 db 'X'
3  5348
3  5349		  =0004					 pos = pos + 1
3  5350
3  5351
3  5352	    09C0  49							 db 'I'
3  5353
3  5354		  =0005					 pos = pos + 1
3  5355
3  5356	    09C1  D4					 db 'T'	+ 80h
3  5357
3  5358
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 95
msx_asm\tur_slib.ASM



3  5359		  =0006					 pos = pos + 1
3  5360
3  5361
3  5362
2  5363
1  5364	    09C2  0557r				  DW L5E61		     ; OK
1  5365
1  5366						 DC 'HALT'
2  5367
2  5368		  =0006				 strsize sizestr <'HALT'>
2  5369		  =0000				 pos = 0
2  5370
2  5371						 irpc parameter,'HALT'
2  5372							 pos = pos + 1
2  5373
2  5374							 if pos	EQ strsize - 1
2  5375							 db '&parameter' + 80h
2  5376							 endif
2  5377
2  5378							 if pos	GT 1
2  5379								 if pos	LT strsize -1
2  5380									 db '&parameter'
2  5381								 endif
2  5382							 endif
2  5383
2  5384						 endm
3  5385		  =0001					 pos = pos + 1
3  5386
3  5387
3  5388
3  5389		  =0002					 pos = pos + 1
3  5390
3  5391
3  5392	    09C4  48							 db 'H'
3  5393
3  5394		  =0003					 pos = pos + 1
3  5395
3  5396
3  5397	    09C5  41							 db 'A'
3  5398
3  5399		  =0004					 pos = pos + 1
3  5400
3  5401
3  5402	    09C6  4C							 db 'L'
3  5403
3  5404		  =0005					 pos = pos + 1
3  5405
3  5406	    09C7  D4					 db 'T'	+ 80h
3  5407
3  5408
3  5409		  =0006					 pos = pos + 1
3  5410
3  5411
3  5412
2  5413
1  5414	    09C8  055Dr				  DW L5E67		     ; OK
1  5415
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 96
msx_asm\tur_slib.ASM



1  5416						  DC 'PORT'
2  5417
2  5418		  =0006				 strsize sizestr <'PORT'>
2  5419		  =0000				 pos = 0
2  5420
2  5421						 irpc parameter,'PORT'
2  5422							 pos = pos + 1
2  5423
2  5424							 if pos	EQ strsize - 1
2  5425							 db '&parameter' + 80h
2  5426							 endif
2  5427
2  5428							 if pos	GT 1
2  5429								 if pos	LT strsize -1
2  5430									 db '&parameter'
2  5431								 endif
2  5432							 endif
2  5433
2  5434						 endm
3  5435		  =0001					 pos = pos + 1
3  5436
3  5437
3  5438
3  5439		  =0002					 pos = pos + 1
3  5440
3  5441
3  5442	    09CA  50							 db 'P'
3  5443
3  5444		  =0003					 pos = pos + 1
3  5445
3  5446
3  5447	    09CB  4F							 db 'O'
3  5448
3  5449		  =0004					 pos = pos + 1
3  5450
3  5451
3  5452	    09CC  52							 db 'R'
3  5453
3  5454		  =0005					 pos = pos + 1
3  5455
3  5456	    09CD  D4					 db 'T'	+ 80h
3  5457
3  5458
3  5459		  =0006					 pos = pos + 1
3  5460
3  5461
3  5462
2  5463
1  5464	    09CE  0563r				  DW L5E6D		     ; OK
1  5465
1  5466						 DC 'STACKPTR'		    ; stackptr assignment
2  5467
2  5468		  =000A				 strsize sizestr <'STACKPTR'>
2  5469		  =0000				 pos = 0
2  5470
2  5471						 irpc parameter,'STACKPTR'
2  5472							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 97
msx_asm\tur_slib.ASM



2  5473
2  5474							 if pos	EQ strsize - 1
2  5475							 db '&parameter' + 80h
2  5476							 endif
2  5477
2  5478							 if pos	GT 1
2  5479								 if pos	LT strsize -1
2  5480									 db '&parameter'
2  5481								 endif
2  5482							 endif
2  5483
2  5484						 endm
3  5485		  =0001					 pos = pos + 1
3  5486
3  5487
3  5488
3  5489		  =0002					 pos = pos + 1
3  5490
3  5491
3  5492	    09D0  53							 db 'S'
3  5493
3  5494		  =0003					 pos = pos + 1
3  5495
3  5496
3  5497	    09D1  54							 db 'T'
3  5498
3  5499		  =0004					 pos = pos + 1
3  5500
3  5501
3  5502	    09D2  41							 db 'A'
3  5503
3  5504		  =0005					 pos = pos + 1
3  5505
3  5506
3  5507	    09D3  43							 db 'C'
3  5508
3  5509		  =0006					 pos = pos + 1
3  5510
3  5511
3  5512	    09D4  4B							 db 'K'
3  5513
3  5514		  =0007					 pos = pos + 1
3  5515
3  5516
3  5517	    09D5  50							 db 'P'
3  5518
3  5519		  =0008					 pos = pos + 1
3  5520
3  5521
3  5522	    09D6  54							 db 'T'
3  5523
3  5524		  =0009					 pos = pos + 1
3  5525
3  5526	    09D7  D2					 db 'R'	+ 80h
3  5527
3  5528
3  5529		  =000A					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 98
msx_asm\tur_slib.ASM



3  5530
3  5531
3  5532
2  5533
1  5534	    09D8  056Er				  DW L5E78		     ; OK
1  5535
1  5536						 DC 'FLUSH'
2  5537
2  5538		  =0007				 strsize sizestr <'FLUSH'>
2  5539		  =0000				 pos = 0
2  5540
2  5541						 irpc parameter,'FLUSH'
2  5542							 pos = pos + 1
2  5543
2  5544							 if pos	EQ strsize - 1
2  5545							 db '&parameter' + 80h
2  5546							 endif
2  5547
2  5548							 if pos	GT 1
2  5549								 if pos	LT strsize -1
2  5550									 db '&parameter'
2  5551								 endif
2  5552							 endif
2  5553
2  5554						 endm
3  5555		  =0001					 pos = pos + 1
3  5556
3  5557
3  5558
3  5559		  =0002					 pos = pos + 1
3  5560
3  5561
3  5562	    09DA  46							 db 'F'
3  5563
3  5564		  =0003					 pos = pos + 1
3  5565
3  5566
3  5567	    09DB  4C							 db 'L'
3  5568
3  5569		  =0004					 pos = pos + 1
3  5570
3  5571
3  5572	    09DC  55							 db 'U'
3  5573
3  5574		  =0005					 pos = pos + 1
3  5575
3  5576
3  5577	    09DD  53							 db 'S'
3  5578
3  5579		  =0006					 pos = pos + 1
3  5580
3  5581	    09DE  C8					 db 'H'	+ 80h
3  5582
3  5583
3  5584		  =0007					 pos = pos + 1
3  5585
3  5586
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 99
msx_asm\tur_slib.ASM



3  5587
2  5588
1  5589	    09DF  008Dr				  DW L59AB		     ; OK
1  5590
1  5591						 DC 'EXECUTE'
2  5592
2  5593		  =0009				 strsize sizestr <'EXECUTE'>
2  5594		  =0000				 pos = 0
2  5595
2  5596						 irpc parameter,'EXECUTE'
2  5597							 pos = pos + 1
2  5598
2  5599							 if pos	EQ strsize - 1
2  5600							 db '&parameter' + 80h
2  5601							 endif
2  5602
2  5603							 if pos	GT 1
2  5604								 if pos	LT strsize -1
2  5605									 db '&parameter'
2  5606								 endif
2  5607							 endif
2  5608
2  5609						 endm
3  5610		  =0001					 pos = pos + 1
3  5611
3  5612
3  5613
3  5614		  =0002					 pos = pos + 1
3  5615
3  5616
3  5617	    09E1  45							 db 'E'
3  5618
3  5619		  =0003					 pos = pos + 1
3  5620
3  5621
3  5622	    09E2  58							 db 'X'
3  5623
3  5624		  =0004					 pos = pos + 1
3  5625
3  5626
3  5627	    09E3  45							 db 'E'
3  5628
3  5629		  =0005					 pos = pos + 1
3  5630
3  5631
3  5632	    09E4  43							 db 'C'
3  5633
3  5634		  =0006					 pos = pos + 1
3  5635
3  5636
3  5637	    09E5  55							 db 'U'
3  5638
3  5639		  =0007					 pos = pos + 1
3  5640
3  5641
3  5642	    09E6  54							 db 'T'
3  5643
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 100
msx_asm\tur_slib.ASM



3  5644		  =0008					 pos = pos + 1
3  5645
3  5646	    09E7  C5					 db 'E'	+ 80h
3  5647
3  5648
3  5649		  =0009					 pos = pos + 1
3  5650
3  5651
3  5652
2  5653
1  5654	    09E8  0060r				  DW L597E		     ; OK
1  5655
1  5656						 DC 'CHAIN'
2  5657
2  5658		  =0007				 strsize sizestr <'CHAIN'>
2  5659		  =0000				 pos = 0
2  5660
2  5661						 irpc parameter,'CHAIN'
2  5662							 pos = pos + 1
2  5663
2  5664							 if pos	EQ strsize - 1
2  5665							 db '&parameter' + 80h
2  5666							 endif
2  5667
2  5668							 if pos	GT 1
2  5669								 if pos	LT strsize -1
2  5670									 db '&parameter'
2  5671								 endif
2  5672							 endif
2  5673
2  5674						 endm
3  5675		  =0001					 pos = pos + 1
3  5676
3  5677
3  5678
3  5679		  =0002					 pos = pos + 1
3  5680
3  5681
3  5682	    09EA  43							 db 'C'
3  5683
3  5684		  =0003					 pos = pos + 1
3  5685
3  5686
3  5687	    09EB  48							 db 'H'
3  5688
3  5689		  =0004					 pos = pos + 1
3  5690
3  5691
3  5692	    09EC  41							 db 'A'
3  5693
3  5694		  =0005					 pos = pos + 1
3  5695
3  5696
3  5697	    09ED  49							 db 'I'
3  5698
3  5699		  =0006					 pos = pos + 1
3  5700
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 101
msx_asm\tur_slib.ASM



3  5701	    09EE  CE					 db 'N'	+ 80h
3  5702
3  5703
3  5704		  =0007					 pos = pos + 1
3  5705
3  5706
3  5707
2  5708
1  5709	    09EF  005Br				  DW L5979		     ; OK
1  5710
1  5711						 DC 'STR'
2  5712
2  5713		  =0005				 strsize sizestr <'STR'>
2  5714		  =0000				 pos = 0
2  5715
2  5716						 irpc parameter,'STR'
2  5717							 pos = pos + 1
2  5718
2  5719							 if pos	EQ strsize - 1
2  5720							 db '&parameter' + 80h
2  5721							 endif
2  5722
2  5723							 if pos	GT 1
2  5724								 if pos	LT strsize -1
2  5725									 db '&parameter'
2  5726								 endif
2  5727							 endif
2  5728
2  5729						 endm
3  5730		  =0001					 pos = pos + 1
3  5731
3  5732
3  5733
3  5734		  =0002					 pos = pos + 1
3  5735
3  5736
3  5737	    09F1  53							 db 'S'
3  5738
3  5739		  =0003					 pos = pos + 1
3  5740
3  5741
3  5742	    09F2  54							 db 'T'
3  5743
3  5744		  =0004					 pos = pos + 1
3  5745
3  5746	    09F3  D2					 db 'R'	+ 80h
3  5747
3  5748
3  5749		  =0005					 pos = pos + 1
3  5750
3  5751
3  5752
2  5753
1  5754	    09F4  0385r				  DW L5CBA		     ; OK
1  5755
1  5756						 DC 'VAL'
2  5757
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 102
msx_asm\tur_slib.ASM



2  5758		  =0005				 strsize sizestr <'VAL'>
2  5759		  =0000				 pos = 0
2  5760
2  5761						 irpc parameter,'VAL'
2  5762							 pos = pos + 1
2  5763
2  5764							 if pos	EQ strsize - 1
2  5765							 db '&parameter' + 80h
2  5766							 endif
2  5767
2  5768							 if pos	GT 1
2  5769								 if pos	LT strsize -1
2  5770									 db '&parameter'
2  5771								 endif
2  5772							 endif
2  5773
2  5774						 endm
3  5775		  =0001					 pos = pos + 1
3  5776
3  5777
3  5778
3  5779		  =0002					 pos = pos + 1
3  5780
3  5781
3  5782	    09F6  56							 db 'V'
3  5783
3  5784		  =0003					 pos = pos + 1
3  5785
3  5786
3  5787	    09F7  41							 db 'A'
3  5788
3  5789		  =0004					 pos = pos + 1
3  5790
3  5791	    09F8  CC					 db 'L'	+ 80h
3  5792
3  5793
3  5794		  =0005					 pos = pos + 1
3  5795
3  5796
3  5797
2  5798
1  5799	    09F9  0402r				  DW L5D22		     ; OK
1  5800
1  5801						 DC 'BDOS'
2  5802
2  5803		  =0006				 strsize sizestr <'BDOS'>
2  5804		  =0000				 pos = 0
2  5805
2  5806						 irpc parameter,'BDOS'
2  5807							 pos = pos + 1
2  5808
2  5809							 if pos	EQ strsize - 1
2  5810							 db '&parameter' + 80h
2  5811							 endif
2  5812
2  5813							 if pos	GT 1
2  5814								 if pos	LT strsize -1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 103
msx_asm\tur_slib.ASM



2  5815									 db '&parameter'
2  5816								 endif
2  5817							 endif
2  5818
2  5819						 endm
3  5820		  =0001					 pos = pos + 1
3  5821
3  5822
3  5823
3  5824		  =0002					 pos = pos + 1
3  5825
3  5826
3  5827	    09FB  42							 db 'B'
3  5828
3  5829		  =0003					 pos = pos + 1
3  5830
3  5831
3  5832	    09FC  44							 db 'D'
3  5833
3  5834		  =0004					 pos = pos + 1
3  5835
3  5836
3  5837	    09FD  4F							 db 'O'
3  5838
3  5839		  =0005					 pos = pos + 1
3  5840
3  5841	    09FE  D3					 db 'S'	+ 80h
3  5842
3  5843
3  5844		  =0006					 pos = pos + 1
3  5845
3  5846
3  5847
2  5848
1  5849	    09FF  07D4r				  DW L6553		     ; OK
1  5850
1  5851						 DC 'BIOS'
2  5852
2  5853		  =0006				 strsize sizestr <'BIOS'>
2  5854		  =0000				 pos = 0
2  5855
2  5856						 irpc parameter,'BIOS'
2  5857							 pos = pos + 1
2  5858
2  5859							 if pos	EQ strsize - 1
2  5860							 db '&parameter' + 80h
2  5861							 endif
2  5862
2  5863							 if pos	GT 1
2  5864								 if pos	LT strsize -1
2  5865									 db '&parameter'
2  5866								 endif
2  5867							 endif
2  5868
2  5869						 endm
3  5870		  =0001					 pos = pos + 1
3  5871
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 104
msx_asm\tur_slib.ASM



3  5872
3  5873
3  5874		  =0002					 pos = pos + 1
3  5875
3  5876
3  5877	    0A01  42							 db 'B'
3  5878
3  5879		  =0003					 pos = pos + 1
3  5880
3  5881
3  5882	    0A02  49							 db 'I'
3  5883
3  5884		  =0004					 pos = pos + 1
3  5885
3  5886
3  5887	    0A03  4F							 db 'O'
3  5888
3  5889		  =0005					 pos = pos + 1
3  5890
3  5891	    0A04  D3					 db 'S'	+ 80h
3  5892
3  5893
3  5894		  =0006					 pos = pos + 1
3  5895
3  5896
3  5897
2  5898
1  5899	    0A05  07ACr				  DW L651E		     ; OK
1  5900
1  5901						  DC 'DOSERRORHANDLERON'
2  5902
2  5903		  =0013				 strsize sizestr <'DOSERRORHANDLERON'>
2  5904		  =0000				 pos = 0
2  5905
2  5906						 irpc parameter,'DOSERRORHANDLERON'
2  5907							 pos = pos + 1
2  5908
2  5909							 if pos	EQ strsize - 1
2  5910							 db '&parameter' + 80h
2  5911							 endif
2  5912
2  5913							 if pos	GT 1
2  5914								 if pos	LT strsize -1
2  5915									 db '&parameter'
2  5916								 endif
2  5917							 endif
2  5918
2  5919						 endm
3  5920		  =0001					 pos = pos + 1
3  5921
3  5922
3  5923
3  5924		  =0002					 pos = pos + 1
3  5925
3  5926
3  5927	    0A07  44							 db 'D'
3  5928
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 105
msx_asm\tur_slib.ASM



3  5929		  =0003					 pos = pos + 1
3  5930
3  5931
3  5932	    0A08  4F							 db 'O'
3  5933
3  5934		  =0004					 pos = pos + 1
3  5935
3  5936
3  5937	    0A09  53							 db 'S'
3  5938
3  5939		  =0005					 pos = pos + 1
3  5940
3  5941
3  5942	    0A0A  45							 db 'E'
3  5943
3  5944		  =0006					 pos = pos + 1
3  5945
3  5946
3  5947	    0A0B  52							 db 'R'
3  5948
3  5949		  =0007					 pos = pos + 1
3  5950
3  5951
3  5952	    0A0C  52							 db 'R'
3  5953
3  5954		  =0008					 pos = pos + 1
3  5955
3  5956
3  5957	    0A0D  4F							 db 'O'
3  5958
3  5959		  =0009					 pos = pos + 1
3  5960
3  5961
3  5962	    0A0E  52							 db 'R'
3  5963
3  5964		  =000A					 pos = pos + 1
3  5965
3  5966
3  5967	    0A0F  48							 db 'H'
3  5968
3  5969		  =000B					 pos = pos + 1
3  5970
3  5971
3  5972	    0A10  41							 db 'A'
3  5973
3  5974		  =000C					 pos = pos + 1
3  5975
3  5976
3  5977	    0A11  4E							 db 'N'
3  5978
3  5979		  =000D					 pos = pos + 1
3  5980
3  5981
3  5982	    0A12  44							 db 'D'
3  5983
3  5984		  =000E					 pos = pos + 1
3  5985
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 106
msx_asm\tur_slib.ASM



3  5986
3  5987	    0A13  4C							 db 'L'
3  5988
3  5989		  =000F					 pos = pos + 1
3  5990
3  5991
3  5992	    0A14  45							 db 'E'
3  5993
3  5994		  =0010					 pos = pos + 1
3  5995
3  5996
3  5997	    0A15  52							 db 'R'
3  5998
3  5999		  =0011					 pos = pos + 1
3  6000
3  6001
3  6002	    0A16  4F							 db 'O'
3  6003
3  6004		  =0012					 pos = pos + 1
3  6005
3  6006	    0A17  CE					 db 'N'	+ 80h
3  6007
3  6008
3  6009		  =0013					 pos = pos + 1
3  6010
3  6011
3  6012
2  6013
1  6014	    0A18  085Ar				  DW P_DOSERRORHANDLERON
1  6015
1  6016						  DC 'DOSERRORHANDLEROFF'
2  6017
2  6018		  =0014				 strsize sizestr <'DOSERRORHANDLEROFF'>
2  6019		  =0000				 pos = 0
2  6020
2  6021						 irpc parameter,'DOSERRORHANDLEROFF'
2  6022							 pos = pos + 1
2  6023
2  6024							 if pos	EQ strsize - 1
2  6025							 db '&parameter' + 80h
2  6026							 endif
2  6027
2  6028							 if pos	GT 1
2  6029								 if pos	LT strsize -1
2  6030									 db '&parameter'
2  6031								 endif
2  6032							 endif
2  6033
2  6034						 endm
3  6035		  =0001					 pos = pos + 1
3  6036
3  6037
3  6038
3  6039		  =0002					 pos = pos + 1
3  6040
3  6041
3  6042	    0A1A  44							 db 'D'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 107
msx_asm\tur_slib.ASM



3  6043
3  6044		  =0003					 pos = pos + 1
3  6045
3  6046
3  6047	    0A1B  4F							 db 'O'
3  6048
3  6049		  =0004					 pos = pos + 1
3  6050
3  6051
3  6052	    0A1C  53							 db 'S'
3  6053
3  6054		  =0005					 pos = pos + 1
3  6055
3  6056
3  6057	    0A1D  45							 db 'E'
3  6058
3  6059		  =0006					 pos = pos + 1
3  6060
3  6061
3  6062	    0A1E  52							 db 'R'
3  6063
3  6064		  =0007					 pos = pos + 1
3  6065
3  6066
3  6067	    0A1F  52							 db 'R'
3  6068
3  6069		  =0008					 pos = pos + 1
3  6070
3  6071
3  6072	    0A20  4F							 db 'O'
3  6073
3  6074		  =0009					 pos = pos + 1
3  6075
3  6076
3  6077	    0A21  52							 db 'R'
3  6078
3  6079		  =000A					 pos = pos + 1
3  6080
3  6081
3  6082	    0A22  48							 db 'H'
3  6083
3  6084		  =000B					 pos = pos + 1
3  6085
3  6086
3  6087	    0A23  41							 db 'A'
3  6088
3  6089		  =000C					 pos = pos + 1
3  6090
3  6091
3  6092	    0A24  4E							 db 'N'
3  6093
3  6094		  =000D					 pos = pos + 1
3  6095
3  6096
3  6097	    0A25  44							 db 'D'
3  6098
3  6099		  =000E					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 108
msx_asm\tur_slib.ASM



3  6100
3  6101
3  6102	    0A26  4C							 db 'L'
3  6103
3  6104		  =000F					 pos = pos + 1
3  6105
3  6106
3  6107	    0A27  45							 db 'E'
3  6108
3  6109		  =0010					 pos = pos + 1
3  6110
3  6111
3  6112	    0A28  52							 db 'R'
3  6113
3  6114		  =0011					 pos = pos + 1
3  6115
3  6116
3  6117	    0A29  4F							 db 'O'
3  6118
3  6119		  =0012					 pos = pos + 1
3  6120
3  6121
3  6122	    0A2A  46							 db 'F'
3  6123
3  6124		  =0013					 pos = pos + 1
3  6125
3  6126	    0A2B  C6					 db 'F'	+ 80h
3  6127
3  6128
3  6129		  =0014					 pos = pos + 1
3  6130
3  6131
3  6132
2  6133
1  6134	    0A2C  0860r				  DW P_DOSERRORHANDLEROFF
1  6135
1  6136						  ; GIOS Procedures
1  6137						  DC 'DELETEFILE'
2  6138
2  6139		  =000C				 strsize sizestr <'DELETEFILE'>
2  6140		  =0000				 pos = 0
2  6141
2  6142						 irpc parameter,'DELETEFILE'
2  6143							 pos = pos + 1
2  6144
2  6145							 if pos	EQ strsize - 1
2  6146							 db '&parameter' + 80h
2  6147							 endif
2  6148
2  6149							 if pos	GT 1
2  6150								 if pos	LT strsize -1
2  6151									 db '&parameter'
2  6152								 endif
2  6153							 endif
2  6154
2  6155						 endm
3  6156		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 109
msx_asm\tur_slib.ASM



3  6157
3  6158
3  6159
3  6160		  =0002					 pos = pos + 1
3  6161
3  6162
3  6163	    0A2E  44							 db 'D'
3  6164
3  6165		  =0003					 pos = pos + 1
3  6166
3  6167
3  6168	    0A2F  45							 db 'E'
3  6169
3  6170		  =0004					 pos = pos + 1
3  6171
3  6172
3  6173	    0A30  4C							 db 'L'
3  6174
3  6175		  =0005					 pos = pos + 1
3  6176
3  6177
3  6178	    0A31  45							 db 'E'
3  6179
3  6180		  =0006					 pos = pos + 1
3  6181
3  6182
3  6183	    0A32  54							 db 'T'
3  6184
3  6185		  =0007					 pos = pos + 1
3  6186
3  6187
3  6188	    0A33  45							 db 'E'
3  6189
3  6190		  =0008					 pos = pos + 1
3  6191
3  6192
3  6193	    0A34  46							 db 'F'
3  6194
3  6195		  =0009					 pos = pos + 1
3  6196
3  6197
3  6198	    0A35  49							 db 'I'
3  6199
3  6200		  =000A					 pos = pos + 1
3  6201
3  6202
3  6203	    0A36  4C							 db 'L'
3  6204
3  6205		  =000B					 pos = pos + 1
3  6206
3  6207	    0A37  C5					 db 'E'	+ 80h
3  6208
3  6209
3  6210		  =000C					 pos = pos + 1
3  6211
3  6212
3  6213
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 110
msx_asm\tur_slib.ASM



2  6214
1  6215	    0A38  0000e				  DW P_DELETEFILE
1  6216
1  6217						  DC 'DEFINEPICTURE'
2  6218
2  6219		  =000F				 strsize sizestr <'DEFINEPICTURE'>
2  6220		  =0000				 pos = 0
2  6221
2  6222						 irpc parameter,'DEFINEPICTURE'
2  6223							 pos = pos + 1
2  6224
2  6225							 if pos	EQ strsize - 1
2  6226							 db '&parameter' + 80h
2  6227							 endif
2  6228
2  6229							 if pos	GT 1
2  6230								 if pos	LT strsize -1
2  6231									 db '&parameter'
2  6232								 endif
2  6233							 endif
2  6234
2  6235						 endm
3  6236		  =0001					 pos = pos + 1
3  6237
3  6238
3  6239
3  6240		  =0002					 pos = pos + 1
3  6241
3  6242
3  6243	    0A3A  44							 db 'D'
3  6244
3  6245		  =0003					 pos = pos + 1
3  6246
3  6247
3  6248	    0A3B  45							 db 'E'
3  6249
3  6250		  =0004					 pos = pos + 1
3  6251
3  6252
3  6253	    0A3C  46							 db 'F'
3  6254
3  6255		  =0005					 pos = pos + 1
3  6256
3  6257
3  6258	    0A3D  49							 db 'I'
3  6259
3  6260		  =0006					 pos = pos + 1
3  6261
3  6262
3  6263	    0A3E  4E							 db 'N'
3  6264
3  6265		  =0007					 pos = pos + 1
3  6266
3  6267
3  6268	    0A3F  45							 db 'E'
3  6269
3  6270		  =0008					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 111
msx_asm\tur_slib.ASM



3  6271
3  6272
3  6273	    0A40  50							 db 'P'
3  6274
3  6275		  =0009					 pos = pos + 1
3  6276
3  6277
3  6278	    0A41  49							 db 'I'
3  6279
3  6280		  =000A					 pos = pos + 1
3  6281
3  6282
3  6283	    0A42  43							 db 'C'
3  6284
3  6285		  =000B					 pos = pos + 1
3  6286
3  6287
3  6288	    0A43  54							 db 'T'
3  6289
3  6290		  =000C					 pos = pos + 1
3  6291
3  6292
3  6293	    0A44  55							 db 'U'
3  6294
3  6295		  =000D					 pos = pos + 1
3  6296
3  6297
3  6298	    0A45  52							 db 'R'
3  6299
3  6300		  =000E					 pos = pos + 1
3  6301
3  6302	    0A46  C5					 db 'E'	+ 80h
3  6303
3  6304
3  6305		  =000F					 pos = pos + 1
3  6306
3  6307
3  6308
2  6309
1  6310	    0A47  0000e				  DW P_DEFINEPICTURE
1  6311
1  6312						  DC 'PFILLSHAPE'
2  6313
2  6314		  =000C				 strsize sizestr <'PFILLSHAPE'>
2  6315		  =0000				 pos = 0
2  6316
2  6317						 irpc parameter,'PFILLSHAPE'
2  6318							 pos = pos + 1
2  6319
2  6320							 if pos	EQ strsize - 1
2  6321							 db '&parameter' + 80h
2  6322							 endif
2  6323
2  6324							 if pos	GT 1
2  6325								 if pos	LT strsize -1
2  6326									 db '&parameter'
2  6327								 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 112
msx_asm\tur_slib.ASM



2  6328							 endif
2  6329
2  6330						 endm
3  6331		  =0001					 pos = pos + 1
3  6332
3  6333
3  6334
3  6335		  =0002					 pos = pos + 1
3  6336
3  6337
3  6338	    0A49  50							 db 'P'
3  6339
3  6340		  =0003					 pos = pos + 1
3  6341
3  6342
3  6343	    0A4A  46							 db 'F'
3  6344
3  6345		  =0004					 pos = pos + 1
3  6346
3  6347
3  6348	    0A4B  49							 db 'I'
3  6349
3  6350		  =0005					 pos = pos + 1
3  6351
3  6352
3  6353	    0A4C  4C							 db 'L'
3  6354
3  6355		  =0006					 pos = pos + 1
3  6356
3  6357
3  6358	    0A4D  4C							 db 'L'
3  6359
3  6360		  =0007					 pos = pos + 1
3  6361
3  6362
3  6363	    0A4E  53							 db 'S'
3  6364
3  6365		  =0008					 pos = pos + 1
3  6366
3  6367
3  6368	    0A4F  48							 db 'H'
3  6369
3  6370		  =0009					 pos = pos + 1
3  6371
3  6372
3  6373	    0A50  41							 db 'A'
3  6374
3  6375		  =000A					 pos = pos + 1
3  6376
3  6377
3  6378	    0A51  50							 db 'P'
3  6379
3  6380		  =000B					 pos = pos + 1
3  6381
3  6382	    0A52  C5					 db 'E'	+ 80h
3  6383
3  6384
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 113
msx_asm\tur_slib.ASM



3  6385		  =000C					 pos = pos + 1
3  6386
3  6387
3  6388
2  6389
1  6390	    0A53  0000e				  DW P_PFILLSHAPE
1  6391
1  6392						  DC 'PPAINT'
2  6393
2  6394		  =0008				 strsize sizestr <'PPAINT'>
2  6395		  =0000				 pos = 0
2  6396
2  6397						 irpc parameter,'PPAINT'
2  6398							 pos = pos + 1
2  6399
2  6400							 if pos	EQ strsize - 1
2  6401							 db '&parameter' + 80h
2  6402							 endif
2  6403
2  6404							 if pos	GT 1
2  6405								 if pos	LT strsize -1
2  6406									 db '&parameter'
2  6407								 endif
2  6408							 endif
2  6409
2  6410						 endm
3  6411		  =0001					 pos = pos + 1
3  6412
3  6413
3  6414
3  6415		  =0002					 pos = pos + 1
3  6416
3  6417
3  6418	    0A55  50							 db 'P'
3  6419
3  6420		  =0003					 pos = pos + 1
3  6421
3  6422
3  6423	    0A56  50							 db 'P'
3  6424
3  6425		  =0004					 pos = pos + 1
3  6426
3  6427
3  6428	    0A57  41							 db 'A'
3  6429
3  6430		  =0005					 pos = pos + 1
3  6431
3  6432
3  6433	    0A58  49							 db 'I'
3  6434
3  6435		  =0006					 pos = pos + 1
3  6436
3  6437
3  6438	    0A59  4E							 db 'N'
3  6439
3  6440		  =0007					 pos = pos + 1
3  6441
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 114
msx_asm\tur_slib.ASM



3  6442	    0A5A  D4					 db 'T'	+ 80h
3  6443
3  6444
3  6445		  =0008					 pos = pos + 1
3  6446
3  6447
3  6448
2  6449
1  6450	    0A5B  0000e				  DW P_PPAINT
1  6451
1  6452						  DC 'MEMEXPAND'
2  6453
2  6454		  =000B				 strsize sizestr <'MEMEXPAND'>
2  6455		  =0000				 pos = 0
2  6456
2  6457						 irpc parameter,'MEMEXPAND'
2  6458							 pos = pos + 1
2  6459
2  6460							 if pos	EQ strsize - 1
2  6461							 db '&parameter' + 80h
2  6462							 endif
2  6463
2  6464							 if pos	GT 1
2  6465								 if pos	LT strsize -1
2  6466									 db '&parameter'
2  6467								 endif
2  6468							 endif
2  6469
2  6470						 endm
3  6471		  =0001					 pos = pos + 1
3  6472
3  6473
3  6474
3  6475		  =0002					 pos = pos + 1
3  6476
3  6477
3  6478	    0A5D  4D							 db 'M'
3  6479
3  6480		  =0003					 pos = pos + 1
3  6481
3  6482
3  6483	    0A5E  45							 db 'E'
3  6484
3  6485		  =0004					 pos = pos + 1
3  6486
3  6487
3  6488	    0A5F  4D							 db 'M'
3  6489
3  6490		  =0005					 pos = pos + 1
3  6491
3  6492
3  6493	    0A60  45							 db 'E'
3  6494
3  6495		  =0006					 pos = pos + 1
3  6496
3  6497
3  6498	    0A61  58							 db 'X'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 115
msx_asm\tur_slib.ASM



3  6499
3  6500		  =0007					 pos = pos + 1
3  6501
3  6502
3  6503	    0A62  50							 db 'P'
3  6504
3  6505		  =0008					 pos = pos + 1
3  6506
3  6507
3  6508	    0A63  41							 db 'A'
3  6509
3  6510		  =0009					 pos = pos + 1
3  6511
3  6512
3  6513	    0A64  4E							 db 'N'
3  6514
3  6515		  =000A					 pos = pos + 1
3  6516
3  6517	    0A65  C4					 db 'D'	+ 80h
3  6518
3  6519
3  6520		  =000B					 pos = pos + 1
3  6521
3  6522
3  6523
2  6524
1  6525	    0A66  0000e				  DW P_MEMEXPAND
1  6526
1  6527						  DC 'MEMTOVRAM'
2  6528
2  6529		  =000B				 strsize sizestr <'MEMTOVRAM'>
2  6530		  =0000				 pos = 0
2  6531
2  6532						 irpc parameter,'MEMTOVRAM'
2  6533							 pos = pos + 1
2  6534
2  6535							 if pos	EQ strsize - 1
2  6536							 db '&parameter' + 80h
2  6537							 endif
2  6538
2  6539							 if pos	GT 1
2  6540								 if pos	LT strsize -1
2  6541									 db '&parameter'
2  6542								 endif
2  6543							 endif
2  6544
2  6545						 endm
3  6546		  =0001					 pos = pos + 1
3  6547
3  6548
3  6549
3  6550		  =0002					 pos = pos + 1
3  6551
3  6552
3  6553	    0A68  4D							 db 'M'
3  6554
3  6555		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 116
msx_asm\tur_slib.ASM



3  6556
3  6557
3  6558	    0A69  45							 db 'E'
3  6559
3  6560		  =0004					 pos = pos + 1
3  6561
3  6562
3  6563	    0A6A  4D							 db 'M'
3  6564
3  6565		  =0005					 pos = pos + 1
3  6566
3  6567
3  6568	    0A6B  54							 db 'T'
3  6569
3  6570		  =0006					 pos = pos + 1
3  6571
3  6572
3  6573	    0A6C  4F							 db 'O'
3  6574
3  6575		  =0007					 pos = pos + 1
3  6576
3  6577
3  6578	    0A6D  56							 db 'V'
3  6579
3  6580		  =0008					 pos = pos + 1
3  6581
3  6582
3  6583	    0A6E  52							 db 'R'
3  6584
3  6585		  =0009					 pos = pos + 1
3  6586
3  6587
3  6588	    0A6F  41							 db 'A'
3  6589
3  6590		  =000A					 pos = pos + 1
3  6591
3  6592	    0A70  CD					 db 'M'	+ 80h
3  6593
3  6594
3  6595		  =000B					 pos = pos + 1
3  6596
3  6597
3  6598
2  6599
1  6600	    0A71  0000e				  DW P_MEMTOVRAM
1  6601
1  6602						  DC 'MEMLOADPICTURE'
2  6603
2  6604		  =0010				 strsize sizestr <'MEMLOADPICTURE'>
2  6605		  =0000				 pos = 0
2  6606
2  6607						 irpc parameter,'MEMLOADPICTURE'
2  6608							 pos = pos + 1
2  6609
2  6610							 if pos	EQ strsize - 1
2  6611							 db '&parameter' + 80h
2  6612							 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 117
msx_asm\tur_slib.ASM



2  6613
2  6614							 if pos	GT 1
2  6615								 if pos	LT strsize -1
2  6616									 db '&parameter'
2  6617								 endif
2  6618							 endif
2  6619
2  6620						 endm
3  6621		  =0001					 pos = pos + 1
3  6622
3  6623
3  6624
3  6625		  =0002					 pos = pos + 1
3  6626
3  6627
3  6628	    0A73  4D							 db 'M'
3  6629
3  6630		  =0003					 pos = pos + 1
3  6631
3  6632
3  6633	    0A74  45							 db 'E'
3  6634
3  6635		  =0004					 pos = pos + 1
3  6636
3  6637
3  6638	    0A75  4D							 db 'M'
3  6639
3  6640		  =0005					 pos = pos + 1
3  6641
3  6642
3  6643	    0A76  4C							 db 'L'
3  6644
3  6645		  =0006					 pos = pos + 1
3  6646
3  6647
3  6648	    0A77  4F							 db 'O'
3  6649
3  6650		  =0007					 pos = pos + 1
3  6651
3  6652
3  6653	    0A78  41							 db 'A'
3  6654
3  6655		  =0008					 pos = pos + 1
3  6656
3  6657
3  6658	    0A79  44							 db 'D'
3  6659
3  6660		  =0009					 pos = pos + 1
3  6661
3  6662
3  6663	    0A7A  50							 db 'P'
3  6664
3  6665		  =000A					 pos = pos + 1
3  6666
3  6667
3  6668	    0A7B  49							 db 'I'
3  6669
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 118
msx_asm\tur_slib.ASM



3  6670		  =000B					 pos = pos + 1
3  6671
3  6672
3  6673	    0A7C  43							 db 'C'
3  6674
3  6675		  =000C					 pos = pos + 1
3  6676
3  6677
3  6678	    0A7D  54							 db 'T'
3  6679
3  6680		  =000D					 pos = pos + 1
3  6681
3  6682
3  6683	    0A7E  55							 db 'U'
3  6684
3  6685		  =000E					 pos = pos + 1
3  6686
3  6687
3  6688	    0A7F  52							 db 'R'
3  6689
3  6690		  =000F					 pos = pos + 1
3  6691
3  6692	    0A80  C5					 db 'E'	+ 80h
3  6693
3  6694
3  6695		  =0010					 pos = pos + 1
3  6696
3  6697
3  6698
2  6699
1  6700	    0A81  0000e				  DW P_MEMLOADPICTURE
1  6701
1  6702					 ;	   DC 'MEMUNCRUNCH'
1  6703					 ;	   DW P_MEMUNCRUNCH
1  6704
1  6705						  DC 'MEMSAVEPICTURE'
2  6706
2  6707		  =0010				 strsize sizestr <'MEMSAVEPICTURE'>
2  6708		  =0000				 pos = 0
2  6709
2  6710						 irpc parameter,'MEMSAVEPICTURE'
2  6711							 pos = pos + 1
2  6712
2  6713							 if pos	EQ strsize - 1
2  6714							 db '&parameter' + 80h
2  6715							 endif
2  6716
2  6717							 if pos	GT 1
2  6718								 if pos	LT strsize -1
2  6719									 db '&parameter'
2  6720								 endif
2  6721							 endif
2  6722
2  6723						 endm
3  6724		  =0001					 pos = pos + 1
3  6725
3  6726
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 119
msx_asm\tur_slib.ASM



3  6727
3  6728		  =0002					 pos = pos + 1
3  6729
3  6730
3  6731	    0A83  4D							 db 'M'
3  6732
3  6733		  =0003					 pos = pos + 1
3  6734
3  6735
3  6736	    0A84  45							 db 'E'
3  6737
3  6738		  =0004					 pos = pos + 1
3  6739
3  6740
3  6741	    0A85  4D							 db 'M'
3  6742
3  6743		  =0005					 pos = pos + 1
3  6744
3  6745
3  6746	    0A86  53							 db 'S'
3  6747
3  6748		  =0006					 pos = pos + 1
3  6749
3  6750
3  6751	    0A87  41							 db 'A'
3  6752
3  6753		  =0007					 pos = pos + 1
3  6754
3  6755
3  6756	    0A88  56							 db 'V'
3  6757
3  6758		  =0008					 pos = pos + 1
3  6759
3  6760
3  6761	    0A89  45							 db 'E'
3  6762
3  6763		  =0009					 pos = pos + 1
3  6764
3  6765
3  6766	    0A8A  50							 db 'P'
3  6767
3  6768		  =000A					 pos = pos + 1
3  6769
3  6770
3  6771	    0A8B  49							 db 'I'
3  6772
3  6773		  =000B					 pos = pos + 1
3  6774
3  6775
3  6776	    0A8C  43							 db 'C'
3  6777
3  6778		  =000C					 pos = pos + 1
3  6779
3  6780
3  6781	    0A8D  54							 db 'T'
3  6782
3  6783		  =000D					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 120
msx_asm\tur_slib.ASM



3  6784
3  6785
3  6786	    0A8E  55							 db 'U'
3  6787
3  6788		  =000E					 pos = pos + 1
3  6789
3  6790
3  6791	    0A8F  52							 db 'R'
3  6792
3  6793		  =000F					 pos = pos + 1
3  6794
3  6795	    0A90  C5					 db 'E'	+ 80h
3  6796
3  6797
3  6798		  =0010					 pos = pos + 1
3  6799
3  6800
3  6801
2  6802
1  6803	    0A91  0000e				  DW P_MEMSAVEPICTURE
1  6804
1  6805						  DC 'SETCLIPPING'
2  6806
2  6807		  =000D				 strsize sizestr <'SETCLIPPING'>
2  6808		  =0000				 pos = 0
2  6809
2  6810						 irpc parameter,'SETCLIPPING'
2  6811							 pos = pos + 1
2  6812
2  6813							 if pos	EQ strsize - 1
2  6814							 db '&parameter' + 80h
2  6815							 endif
2  6816
2  6817							 if pos	GT 1
2  6818								 if pos	LT strsize -1
2  6819									 db '&parameter'
2  6820								 endif
2  6821							 endif
2  6822
2  6823						 endm
3  6824		  =0001					 pos = pos + 1
3  6825
3  6826
3  6827
3  6828		  =0002					 pos = pos + 1
3  6829
3  6830
3  6831	    0A93  53							 db 'S'
3  6832
3  6833		  =0003					 pos = pos + 1
3  6834
3  6835
3  6836	    0A94  45							 db 'E'
3  6837
3  6838		  =0004					 pos = pos + 1
3  6839
3  6840
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 121
msx_asm\tur_slib.ASM



3  6841	    0A95  54							 db 'T'
3  6842
3  6843		  =0005					 pos = pos + 1
3  6844
3  6845
3  6846	    0A96  43							 db 'C'
3  6847
3  6848		  =0006					 pos = pos + 1
3  6849
3  6850
3  6851	    0A97  4C							 db 'L'
3  6852
3  6853		  =0007					 pos = pos + 1
3  6854
3  6855
3  6856	    0A98  49							 db 'I'
3  6857
3  6858		  =0008					 pos = pos + 1
3  6859
3  6860
3  6861	    0A99  50							 db 'P'
3  6862
3  6863		  =0009					 pos = pos + 1
3  6864
3  6865
3  6866	    0A9A  50							 db 'P'
3  6867
3  6868		  =000A					 pos = pos + 1
3  6869
3  6870
3  6871	    0A9B  49							 db 'I'
3  6872
3  6873		  =000B					 pos = pos + 1
3  6874
3  6875
3  6876	    0A9C  4E							 db 'N'
3  6877
3  6878		  =000C					 pos = pos + 1
3  6879
3  6880	    0A9D  C7					 db 'G'	+ 80h
3  6881
3  6882
3  6883		  =000D					 pos = pos + 1
3  6884
3  6885
3  6886
2  6887
1  6888	    0A9E  0000e				  DW P_SETCLIPPING
1  6889
1  6890						  DC 'SETVIEWPORT'
2  6891
2  6892		  =000D				 strsize sizestr <'SETVIEWPORT'>
2  6893		  =0000				 pos = 0
2  6894
2  6895						 irpc parameter,'SETVIEWPORT'
2  6896							 pos = pos + 1
2  6897
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 122
msx_asm\tur_slib.ASM



2  6898							 if pos	EQ strsize - 1
2  6899							 db '&parameter' + 80h
2  6900							 endif
2  6901
2  6902							 if pos	GT 1
2  6903								 if pos	LT strsize -1
2  6904									 db '&parameter'
2  6905								 endif
2  6906							 endif
2  6907
2  6908						 endm
3  6909		  =0001					 pos = pos + 1
3  6910
3  6911
3  6912
3  6913		  =0002					 pos = pos + 1
3  6914
3  6915
3  6916	    0AA0  53							 db 'S'
3  6917
3  6918		  =0003					 pos = pos + 1
3  6919
3  6920
3  6921	    0AA1  45							 db 'E'
3  6922
3  6923		  =0004					 pos = pos + 1
3  6924
3  6925
3  6926	    0AA2  54							 db 'T'
3  6927
3  6928		  =0005					 pos = pos + 1
3  6929
3  6930
3  6931	    0AA3  56							 db 'V'
3  6932
3  6933		  =0006					 pos = pos + 1
3  6934
3  6935
3  6936	    0AA4  49							 db 'I'
3  6937
3  6938		  =0007					 pos = pos + 1
3  6939
3  6940
3  6941	    0AA5  45							 db 'E'
3  6942
3  6943		  =0008					 pos = pos + 1
3  6944
3  6945
3  6946	    0AA6  57							 db 'W'
3  6947
3  6948		  =0009					 pos = pos + 1
3  6949
3  6950
3  6951	    0AA7  50							 db 'P'
3  6952
3  6953		  =000A					 pos = pos + 1
3  6954
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 123
msx_asm\tur_slib.ASM



3  6955
3  6956	    0AA8  4F							 db 'O'
3  6957
3  6958		  =000B					 pos = pos + 1
3  6959
3  6960
3  6961	    0AA9  52							 db 'R'
3  6962
3  6963		  =000C					 pos = pos + 1
3  6964
3  6965	    0AAA  D4					 db 'T'	+ 80h
3  6966
3  6967
3  6968		  =000D					 pos = pos + 1
3  6969
3  6970
3  6971
2  6972
1  6973	    0AAB  0000e				  DW P_SETVIEWPORT
1  6974
1  6975						  DC 'GETVIEWPORT'
2  6976
2  6977		  =000D				 strsize sizestr <'GETVIEWPORT'>
2  6978		  =0000				 pos = 0
2  6979
2  6980						 irpc parameter,'GETVIEWPORT'
2  6981							 pos = pos + 1
2  6982
2  6983							 if pos	EQ strsize - 1
2  6984							 db '&parameter' + 80h
2  6985							 endif
2  6986
2  6987							 if pos	GT 1
2  6988								 if pos	LT strsize -1
2  6989									 db '&parameter'
2  6990								 endif
2  6991							 endif
2  6992
2  6993						 endm
3  6994		  =0001					 pos = pos + 1
3  6995
3  6996
3  6997
3  6998		  =0002					 pos = pos + 1
3  6999
3  7000
3  7001	    0AAD  47							 db 'G'
3  7002
3  7003		  =0003					 pos = pos + 1
3  7004
3  7005
3  7006	    0AAE  45							 db 'E'
3  7007
3  7008		  =0004					 pos = pos + 1
3  7009
3  7010
3  7011	    0AAF  54							 db 'T'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 124
msx_asm\tur_slib.ASM



3  7012
3  7013		  =0005					 pos = pos + 1
3  7014
3  7015
3  7016	    0AB0  56							 db 'V'
3  7017
3  7018		  =0006					 pos = pos + 1
3  7019
3  7020
3  7021	    0AB1  49							 db 'I'
3  7022
3  7023		  =0007					 pos = pos + 1
3  7024
3  7025
3  7026	    0AB2  45							 db 'E'
3  7027
3  7028		  =0008					 pos = pos + 1
3  7029
3  7030
3  7031	    0AB3  57							 db 'W'
3  7032
3  7033		  =0009					 pos = pos + 1
3  7034
3  7035
3  7036	    0AB4  50							 db 'P'
3  7037
3  7038		  =000A					 pos = pos + 1
3  7039
3  7040
3  7041	    0AB5  4F							 db 'O'
3  7042
3  7043		  =000B					 pos = pos + 1
3  7044
3  7045
3  7046	    0AB6  52							 db 'R'
3  7047
3  7048		  =000C					 pos = pos + 1
3  7049
3  7050	    0AB7  D4					 db 'T'	+ 80h
3  7051
3  7052
3  7053		  =000D					 pos = pos + 1
3  7054
3  7055
3  7056
2  7057
1  7058	    0AB8  0000e				  DW P_GETVIEWPORT
1  7059
1  7060						  DC 'MEMCOPY'
2  7061
2  7062		  =0009				 strsize sizestr <'MEMCOPY'>
2  7063		  =0000				 pos = 0
2  7064
2  7065						 irpc parameter,'MEMCOPY'
2  7066							 pos = pos + 1
2  7067
2  7068							 if pos	EQ strsize - 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 125
msx_asm\tur_slib.ASM



2  7069							 db '&parameter' + 80h
2  7070							 endif
2  7071
2  7072							 if pos	GT 1
2  7073								 if pos	LT strsize -1
2  7074									 db '&parameter'
2  7075								 endif
2  7076							 endif
2  7077
2  7078						 endm
3  7079		  =0001					 pos = pos + 1
3  7080
3  7081
3  7082
3  7083		  =0002					 pos = pos + 1
3  7084
3  7085
3  7086	    0ABA  4D							 db 'M'
3  7087
3  7088		  =0003					 pos = pos + 1
3  7089
3  7090
3  7091	    0ABB  45							 db 'E'
3  7092
3  7093		  =0004					 pos = pos + 1
3  7094
3  7095
3  7096	    0ABC  4D							 db 'M'
3  7097
3  7098		  =0005					 pos = pos + 1
3  7099
3  7100
3  7101	    0ABD  43							 db 'C'
3  7102
3  7103		  =0006					 pos = pos + 1
3  7104
3  7105
3  7106	    0ABE  4F							 db 'O'
3  7107
3  7108		  =0007					 pos = pos + 1
3  7109
3  7110
3  7111	    0ABF  50							 db 'P'
3  7112
3  7113		  =0008					 pos = pos + 1
3  7114
3  7115	    0AC0  D9					 db 'Y'	+ 80h
3  7116
3  7117
3  7118		  =0009					 pos = pos + 1
3  7119
3  7120
3  7121
2  7122
1  7123	    0AC1  0000e				  DW P_MEMCOPY
1  7124
1  7125						  DC 'BLOAD'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 126
msx_asm\tur_slib.ASM



2  7126
2  7127		  =0007				 strsize sizestr <'BLOAD'>
2  7128		  =0000				 pos = 0
2  7129
2  7130						 irpc parameter,'BLOAD'
2  7131							 pos = pos + 1
2  7132
2  7133							 if pos	EQ strsize - 1
2  7134							 db '&parameter' + 80h
2  7135							 endif
2  7136
2  7137							 if pos	GT 1
2  7138								 if pos	LT strsize -1
2  7139									 db '&parameter'
2  7140								 endif
2  7141							 endif
2  7142
2  7143						 endm
3  7144		  =0001					 pos = pos + 1
3  7145
3  7146
3  7147
3  7148		  =0002					 pos = pos + 1
3  7149
3  7150
3  7151	    0AC3  42							 db 'B'
3  7152
3  7153		  =0003					 pos = pos + 1
3  7154
3  7155
3  7156	    0AC4  4C							 db 'L'
3  7157
3  7158		  =0004					 pos = pos + 1
3  7159
3  7160
3  7161	    0AC5  4F							 db 'O'
3  7162
3  7163		  =0005					 pos = pos + 1
3  7164
3  7165
3  7166	    0AC6  41							 db 'A'
3  7167
3  7168		  =0006					 pos = pos + 1
3  7169
3  7170	    0AC7  C4					 db 'D'	+ 80h
3  7171
3  7172
3  7173		  =0007					 pos = pos + 1
3  7174
3  7175
3  7176
2  7177
1  7178	    0AC8  0000e				  DW P_BLOAD
1  7179
1  7180						  DC 'BSAVE'
2  7181
2  7182		  =0007				 strsize sizestr <'BSAVE'>
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 127
msx_asm\tur_slib.ASM



2  7183		  =0000				 pos = 0
2  7184
2  7185						 irpc parameter,'BSAVE'
2  7186							 pos = pos + 1
2  7187
2  7188							 if pos	EQ strsize - 1
2  7189							 db '&parameter' + 80h
2  7190							 endif
2  7191
2  7192							 if pos	GT 1
2  7193								 if pos	LT strsize -1
2  7194									 db '&parameter'
2  7195								 endif
2  7196							 endif
2  7197
2  7198						 endm
3  7199		  =0001					 pos = pos + 1
3  7200
3  7201
3  7202
3  7203		  =0002					 pos = pos + 1
3  7204
3  7205
3  7206	    0ACA  42							 db 'B'
3  7207
3  7208		  =0003					 pos = pos + 1
3  7209
3  7210
3  7211	    0ACB  53							 db 'S'
3  7212
3  7213		  =0004					 pos = pos + 1
3  7214
3  7215
3  7216	    0ACC  41							 db 'A'
3  7217
3  7218		  =0005					 pos = pos + 1
3  7219
3  7220
3  7221	    0ACD  56							 db 'V'
3  7222
3  7223		  =0006					 pos = pos + 1
3  7224
3  7225	    0ACE  C5					 db 'E'	+ 80h
3  7226
3  7227
3  7228		  =0007					 pos = pos + 1
3  7229
3  7230
3  7231
2  7232
1  7233	    0ACF  0000e				  DW P_BSAVE
1  7234
1  7235						  DC 'CHANGECOLOR'
2  7236
2  7237		  =000D				 strsize sizestr <'CHANGECOLOR'>
2  7238		  =0000				 pos = 0
2  7239
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 128
msx_asm\tur_slib.ASM



2  7240						 irpc parameter,'CHANGECOLOR'
2  7241							 pos = pos + 1
2  7242
2  7243							 if pos	EQ strsize - 1
2  7244							 db '&parameter' + 80h
2  7245							 endif
2  7246
2  7247							 if pos	GT 1
2  7248								 if pos	LT strsize -1
2  7249									 db '&parameter'
2  7250								 endif
2  7251							 endif
2  7252
2  7253						 endm
3  7254		  =0001					 pos = pos + 1
3  7255
3  7256
3  7257
3  7258		  =0002					 pos = pos + 1
3  7259
3  7260
3  7261	    0AD1  43							 db 'C'
3  7262
3  7263		  =0003					 pos = pos + 1
3  7264
3  7265
3  7266	    0AD2  48							 db 'H'
3  7267
3  7268		  =0004					 pos = pos + 1
3  7269
3  7270
3  7271	    0AD3  41							 db 'A'
3  7272
3  7273		  =0005					 pos = pos + 1
3  7274
3  7275
3  7276	    0AD4  4E							 db 'N'
3  7277
3  7278		  =0006					 pos = pos + 1
3  7279
3  7280
3  7281	    0AD5  47							 db 'G'
3  7282
3  7283		  =0007					 pos = pos + 1
3  7284
3  7285
3  7286	    0AD6  45							 db 'E'
3  7287
3  7288		  =0008					 pos = pos + 1
3  7289
3  7290
3  7291	    0AD7  43							 db 'C'
3  7292
3  7293		  =0009					 pos = pos + 1
3  7294
3  7295
3  7296	    0AD8  4F							 db 'O'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 129
msx_asm\tur_slib.ASM



3  7297
3  7298		  =000A					 pos = pos + 1
3  7299
3  7300
3  7301	    0AD9  4C							 db 'L'
3  7302
3  7303		  =000B					 pos = pos + 1
3  7304
3  7305
3  7306	    0ADA  4F							 db 'O'
3  7307
3  7308		  =000C					 pos = pos + 1
3  7309
3  7310	    0ADB  D2					 db 'R'	+ 80h
3  7311
3  7312
3  7313		  =000D					 pos = pos + 1
3  7314
3  7315
3  7316
2  7317
1  7318	    0ADC  0000e				  DW P_CHANGECOLOR
1  7319
1  7320						  DC 'CHANGESCREEN'
2  7321
2  7322		  =000E				 strsize sizestr <'CHANGESCREEN'>
2  7323		  =0000				 pos = 0
2  7324
2  7325						 irpc parameter,'CHANGESCREEN'
2  7326							 pos = pos + 1
2  7327
2  7328							 if pos	EQ strsize - 1
2  7329							 db '&parameter' + 80h
2  7330							 endif
2  7331
2  7332							 if pos	GT 1
2  7333								 if pos	LT strsize -1
2  7334									 db '&parameter'
2  7335								 endif
2  7336							 endif
2  7337
2  7338						 endm
3  7339		  =0001					 pos = pos + 1
3  7340
3  7341
3  7342
3  7343		  =0002					 pos = pos + 1
3  7344
3  7345
3  7346	    0ADE  43							 db 'C'
3  7347
3  7348		  =0003					 pos = pos + 1
3  7349
3  7350
3  7351	    0ADF  48							 db 'H'
3  7352
3  7353		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 130
msx_asm\tur_slib.ASM



3  7354
3  7355
3  7356	    0AE0  41							 db 'A'
3  7357
3  7358		  =0005					 pos = pos + 1
3  7359
3  7360
3  7361	    0AE1  4E							 db 'N'
3  7362
3  7363		  =0006					 pos = pos + 1
3  7364
3  7365
3  7366	    0AE2  47							 db 'G'
3  7367
3  7368		  =0007					 pos = pos + 1
3  7369
3  7370
3  7371	    0AE3  45							 db 'E'
3  7372
3  7373		  =0008					 pos = pos + 1
3  7374
3  7375
3  7376	    0AE4  53							 db 'S'
3  7377
3  7378		  =0009					 pos = pos + 1
3  7379
3  7380
3  7381	    0AE5  43							 db 'C'
3  7382
3  7383		  =000A					 pos = pos + 1
3  7384
3  7385
3  7386	    0AE6  52							 db 'R'
3  7387
3  7388		  =000B					 pos = pos + 1
3  7389
3  7390
3  7391	    0AE7  45							 db 'E'
3  7392
3  7393		  =000C					 pos = pos + 1
3  7394
3  7395
3  7396	    0AE8  45							 db 'E'
3  7397
3  7398		  =000D					 pos = pos + 1
3  7399
3  7400	    0AE9  CE					 db 'N'	+ 80h
3  7401
3  7402
3  7403		  =000E					 pos = pos + 1
3  7404
3  7405
3  7406
2  7407
1  7408	    0AEA  0000e				  DW P_CHANGESCREEN
1  7409
1  7410						  DC 'CIRCLE'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 131
msx_asm\tur_slib.ASM



2  7411
2  7412		  =0008				 strsize sizestr <'CIRCLE'>
2  7413		  =0000				 pos = 0
2  7414
2  7415						 irpc parameter,'CIRCLE'
2  7416							 pos = pos + 1
2  7417
2  7418							 if pos	EQ strsize - 1
2  7419							 db '&parameter' + 80h
2  7420							 endif
2  7421
2  7422							 if pos	GT 1
2  7423								 if pos	LT strsize -1
2  7424									 db '&parameter'
2  7425								 endif
2  7426							 endif
2  7427
2  7428						 endm
3  7429		  =0001					 pos = pos + 1
3  7430
3  7431
3  7432
3  7433		  =0002					 pos = pos + 1
3  7434
3  7435
3  7436	    0AEC  43							 db 'C'
3  7437
3  7438		  =0003					 pos = pos + 1
3  7439
3  7440
3  7441	    0AED  49							 db 'I'
3  7442
3  7443		  =0004					 pos = pos + 1
3  7444
3  7445
3  7446	    0AEE  52							 db 'R'
3  7447
3  7448		  =0005					 pos = pos + 1
3  7449
3  7450
3  7451	    0AEF  43							 db 'C'
3  7452
3  7453		  =0006					 pos = pos + 1
3  7454
3  7455
3  7456	    0AF0  4C							 db 'L'
3  7457
3  7458		  =0007					 pos = pos + 1
3  7459
3  7460	    0AF1  C5					 db 'E'	+ 80h
3  7461
3  7462
3  7463		  =0008					 pos = pos + 1
3  7464
3  7465
3  7466
2  7467
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 132
msx_asm\tur_slib.ASM



1  7468	    0AF2  0000e				  DW P_CIRCLE
1  7469
1  7470						  DC 'CLEARMEM'
2  7471
2  7472		  =000A				 strsize sizestr <'CLEARMEM'>
2  7473		  =0000				 pos = 0
2  7474
2  7475						 irpc parameter,'CLEARMEM'
2  7476							 pos = pos + 1
2  7477
2  7478							 if pos	EQ strsize - 1
2  7479							 db '&parameter' + 80h
2  7480							 endif
2  7481
2  7482							 if pos	GT 1
2  7483								 if pos	LT strsize -1
2  7484									 db '&parameter'
2  7485								 endif
2  7486							 endif
2  7487
2  7488						 endm
3  7489		  =0001					 pos = pos + 1
3  7490
3  7491
3  7492
3  7493		  =0002					 pos = pos + 1
3  7494
3  7495
3  7496	    0AF4  43							 db 'C'
3  7497
3  7498		  =0003					 pos = pos + 1
3  7499
3  7500
3  7501	    0AF5  4C							 db 'L'
3  7502
3  7503		  =0004					 pos = pos + 1
3  7504
3  7505
3  7506	    0AF6  45							 db 'E'
3  7507
3  7508		  =0005					 pos = pos + 1
3  7509
3  7510
3  7511	    0AF7  41							 db 'A'
3  7512
3  7513		  =0006					 pos = pos + 1
3  7514
3  7515
3  7516	    0AF8  52							 db 'R'
3  7517
3  7518		  =0007					 pos = pos + 1
3  7519
3  7520
3  7521	    0AF9  4D							 db 'M'
3  7522
3  7523		  =0008					 pos = pos + 1
3  7524
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 133
msx_asm\tur_slib.ASM



3  7525
3  7526	    0AFA  45							 db 'E'
3  7527
3  7528		  =0009					 pos = pos + 1
3  7529
3  7530	    0AFB  CD					 db 'M'	+ 80h
3  7531
3  7532
3  7533		  =000A					 pos = pos + 1
3  7534
3  7535
3  7536
2  7537
1  7538	    0AFC  0000e				  DW P_CLEARMEM
1  7539
1  7540						  DC 'DATE'
2  7541
2  7542		  =0006				 strsize sizestr <'DATE'>
2  7543		  =0000				 pos = 0
2  7544
2  7545						 irpc parameter,'DATE'
2  7546							 pos = pos + 1
2  7547
2  7548							 if pos	EQ strsize - 1
2  7549							 db '&parameter' + 80h
2  7550							 endif
2  7551
2  7552							 if pos	GT 1
2  7553								 if pos	LT strsize -1
2  7554									 db '&parameter'
2  7555								 endif
2  7556							 endif
2  7557
2  7558						 endm
3  7559		  =0001					 pos = pos + 1
3  7560
3  7561
3  7562
3  7563		  =0002					 pos = pos + 1
3  7564
3  7565
3  7566	    0AFE  44							 db 'D'
3  7567
3  7568		  =0003					 pos = pos + 1
3  7569
3  7570
3  7571	    0AFF  41							 db 'A'
3  7572
3  7573		  =0004					 pos = pos + 1
3  7574
3  7575
3  7576	    0B00  54							 db 'T'
3  7577
3  7578		  =0005					 pos = pos + 1
3  7579
3  7580	    0B01  C5					 db 'E'	+ 80h
3  7581
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 134
msx_asm\tur_slib.ASM



3  7582
3  7583		  =0006					 pos = pos + 1
3  7584
3  7585
3  7586
2  7587
1  7588	    0B02  0000e				  DW P_DATE
1  7589
1  7590						  DC 'DISPLAYPAGE'
2  7591
2  7592		  =000D				 strsize sizestr <'DISPLAYPAGE'>
2  7593		  =0000				 pos = 0
2  7594
2  7595						 irpc parameter,'DISPLAYPAGE'
2  7596							 pos = pos + 1
2  7597
2  7598							 if pos	EQ strsize - 1
2  7599							 db '&parameter' + 80h
2  7600							 endif
2  7601
2  7602							 if pos	GT 1
2  7603								 if pos	LT strsize -1
2  7604									 db '&parameter'
2  7605								 endif
2  7606							 endif
2  7607
2  7608						 endm
3  7609		  =0001					 pos = pos + 1
3  7610
3  7611
3  7612
3  7613		  =0002					 pos = pos + 1
3  7614
3  7615
3  7616	    0B04  44							 db 'D'
3  7617
3  7618		  =0003					 pos = pos + 1
3  7619
3  7620
3  7621	    0B05  49							 db 'I'
3  7622
3  7623		  =0004					 pos = pos + 1
3  7624
3  7625
3  7626	    0B06  53							 db 'S'
3  7627
3  7628		  =0005					 pos = pos + 1
3  7629
3  7630
3  7631	    0B07  50							 db 'P'
3  7632
3  7633		  =0006					 pos = pos + 1
3  7634
3  7635
3  7636	    0B08  4C							 db 'L'
3  7637
3  7638		  =0007					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 135
msx_asm\tur_slib.ASM



3  7639
3  7640
3  7641	    0B09  41							 db 'A'
3  7642
3  7643		  =0008					 pos = pos + 1
3  7644
3  7645
3  7646	    0B0A  59							 db 'Y'
3  7647
3  7648		  =0009					 pos = pos + 1
3  7649
3  7650
3  7651	    0B0B  50							 db 'P'
3  7652
3  7653		  =000A					 pos = pos + 1
3  7654
3  7655
3  7656	    0B0C  41							 db 'A'
3  7657
3  7658		  =000B					 pos = pos + 1
3  7659
3  7660
3  7661	    0B0D  47							 db 'G'
3  7662
3  7663		  =000C					 pos = pos + 1
3  7664
3  7665	    0B0E  C5					 db 'E'	+ 80h
3  7666
3  7667
3  7668		  =000D					 pos = pos + 1
3  7669
3  7670
3  7671
2  7672
1  7673	    0B0F  0000e				  DW P_DISPLAYPAGE
1  7674
1  7675						  DC 'ELLIPSE'		      ;	name not completely English !
2  7676
2  7677		  =0009				 strsize sizestr <'ELLIPSE'>
2  7678		  =0000				 pos = 0
2  7679
2  7680						 irpc parameter,'ELLIPSE'
2  7681							 pos = pos + 1
2  7682
2  7683							 if pos	EQ strsize - 1
2  7684							 db '&parameter' + 80h
2  7685							 endif
2  7686
2  7687							 if pos	GT 1
2  7688								 if pos	LT strsize -1
2  7689									 db '&parameter'
2  7690								 endif
2  7691							 endif
2  7692
2  7693						 endm
3  7694		  =0001					 pos = pos + 1
3  7695
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 136
msx_asm\tur_slib.ASM



3  7696
3  7697
3  7698		  =0002					 pos = pos + 1
3  7699
3  7700
3  7701	    0B11  45							 db 'E'
3  7702
3  7703		  =0003					 pos = pos + 1
3  7704
3  7705
3  7706	    0B12  4C							 db 'L'
3  7707
3  7708		  =0004					 pos = pos + 1
3  7709
3  7710
3  7711	    0B13  4C							 db 'L'
3  7712
3  7713		  =0005					 pos = pos + 1
3  7714
3  7715
3  7716	    0B14  49							 db 'I'
3  7717
3  7718		  =0006					 pos = pos + 1
3  7719
3  7720
3  7721	    0B15  50							 db 'P'
3  7722
3  7723		  =0007					 pos = pos + 1
3  7724
3  7725
3  7726	    0B16  53							 db 'S'
3  7727
3  7728		  =0008					 pos = pos + 1
3  7729
3  7730	    0B17  C5					 db 'E'	+ 80h
3  7731
3  7732
3  7733		  =0009					 pos = pos + 1
3  7734
3  7735
3  7736
2  7737
1  7738	    0B18  0000e				  DW P_ELLIPSE
1  7739
1  7740						  DC 'EXPAND'
2  7741
2  7742		  =0008				 strsize sizestr <'EXPAND'>
2  7743		  =0000				 pos = 0
2  7744
2  7745						 irpc parameter,'EXPAND'
2  7746							 pos = pos + 1
2  7747
2  7748							 if pos	EQ strsize - 1
2  7749							 db '&parameter' + 80h
2  7750							 endif
2  7751
2  7752							 if pos	GT 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 137
msx_asm\tur_slib.ASM



2  7753								 if pos	LT strsize -1
2  7754									 db '&parameter'
2  7755								 endif
2  7756							 endif
2  7757
2  7758						 endm
3  7759		  =0001					 pos = pos + 1
3  7760
3  7761
3  7762
3  7763		  =0002					 pos = pos + 1
3  7764
3  7765
3  7766	    0B1A  45							 db 'E'
3  7767
3  7768		  =0003					 pos = pos + 1
3  7769
3  7770
3  7771	    0B1B  58							 db 'X'
3  7772
3  7773		  =0004					 pos = pos + 1
3  7774
3  7775
3  7776	    0B1C  50							 db 'P'
3  7777
3  7778		  =0005					 pos = pos + 1
3  7779
3  7780
3  7781	    0B1D  41							 db 'A'
3  7782
3  7783		  =0006					 pos = pos + 1
3  7784
3  7785
3  7786	    0B1E  4E							 db 'N'
3  7787
3  7788		  =0007					 pos = pos + 1
3  7789
3  7790	    0B1F  C4					 db 'D'	+ 80h
3  7791
3  7792
3  7793		  =0008					 pos = pos + 1
3  7794
3  7795
3  7796
2  7797
1  7798	    0B20  0000e				  DW P_EXPAND
1  7799
1  7800						  DC 'FASTBOX'
2  7801
2  7802		  =0009				 strsize sizestr <'FASTBOX'>
2  7803		  =0000				 pos = 0
2  7804
2  7805						 irpc parameter,'FASTBOX'
2  7806							 pos = pos + 1
2  7807
2  7808							 if pos	EQ strsize - 1
2  7809							 db '&parameter' + 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 138
msx_asm\tur_slib.ASM



2  7810							 endif
2  7811
2  7812							 if pos	GT 1
2  7813								 if pos	LT strsize -1
2  7814									 db '&parameter'
2  7815								 endif
2  7816							 endif
2  7817
2  7818						 endm
3  7819		  =0001					 pos = pos + 1
3  7820
3  7821
3  7822
3  7823		  =0002					 pos = pos + 1
3  7824
3  7825
3  7826	    0B22  46							 db 'F'
3  7827
3  7828		  =0003					 pos = pos + 1
3  7829
3  7830
3  7831	    0B23  41							 db 'A'
3  7832
3  7833		  =0004					 pos = pos + 1
3  7834
3  7835
3  7836	    0B24  53							 db 'S'
3  7837
3  7838		  =0005					 pos = pos + 1
3  7839
3  7840
3  7841	    0B25  54							 db 'T'
3  7842
3  7843		  =0006					 pos = pos + 1
3  7844
3  7845
3  7846	    0B26  42							 db 'B'
3  7847
3  7848		  =0007					 pos = pos + 1
3  7849
3  7850
3  7851	    0B27  4F							 db 'O'
3  7852
3  7853		  =0008					 pos = pos + 1
3  7854
3  7855	    0B28  D8					 db 'X'	+ 80h
3  7856
3  7857
3  7858		  =0009					 pos = pos + 1
3  7859
3  7860
3  7861
2  7862
1  7863	    0B29  0000e				  DW P_FASTBOX
1  7864
1  7865						  DC 'FASTCOPY'
2  7866
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 139
msx_asm\tur_slib.ASM



2  7867		  =000A				 strsize sizestr <'FASTCOPY'>
2  7868		  =0000				 pos = 0
2  7869
2  7870						 irpc parameter,'FASTCOPY'
2  7871							 pos = pos + 1
2  7872
2  7873							 if pos	EQ strsize - 1
2  7874							 db '&parameter' + 80h
2  7875							 endif
2  7876
2  7877							 if pos	GT 1
2  7878								 if pos	LT strsize -1
2  7879									 db '&parameter'
2  7880								 endif
2  7881							 endif
2  7882
2  7883						 endm
3  7884		  =0001					 pos = pos + 1
3  7885
3  7886
3  7887
3  7888		  =0002					 pos = pos + 1
3  7889
3  7890
3  7891	    0B2B  46							 db 'F'
3  7892
3  7893		  =0003					 pos = pos + 1
3  7894
3  7895
3  7896	    0B2C  41							 db 'A'
3  7897
3  7898		  =0004					 pos = pos + 1
3  7899
3  7900
3  7901	    0B2D  53							 db 'S'
3  7902
3  7903		  =0005					 pos = pos + 1
3  7904
3  7905
3  7906	    0B2E  54							 db 'T'
3  7907
3  7908		  =0006					 pos = pos + 1
3  7909
3  7910
3  7911	    0B2F  43							 db 'C'
3  7912
3  7913		  =0007					 pos = pos + 1
3  7914
3  7915
3  7916	    0B30  4F							 db 'O'
3  7917
3  7918		  =0008					 pos = pos + 1
3  7919
3  7920
3  7921	    0B31  50							 db 'P'
3  7922
3  7923		  =0009					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 140
msx_asm\tur_slib.ASM



3  7924
3  7925	    0B32  D9					 db 'Y'	+ 80h
3  7926
3  7927
3  7928		  =000A					 pos = pos + 1
3  7929
3  7930
3  7931
2  7932
1  7933	    0B33  0000e				  DW P_FASTCOPY
1  7934
1  7935						  DC 'FILLBOX'
2  7936
2  7937		  =0009				 strsize sizestr <'FILLBOX'>
2  7938		  =0000				 pos = 0
2  7939
2  7940						 irpc parameter,'FILLBOX'
2  7941							 pos = pos + 1
2  7942
2  7943							 if pos	EQ strsize - 1
2  7944							 db '&parameter' + 80h
2  7945							 endif
2  7946
2  7947							 if pos	GT 1
2  7948								 if pos	LT strsize -1
2  7949									 db '&parameter'
2  7950								 endif
2  7951							 endif
2  7952
2  7953						 endm
3  7954		  =0001					 pos = pos + 1
3  7955
3  7956
3  7957
3  7958		  =0002					 pos = pos + 1
3  7959
3  7960
3  7961	    0B35  46							 db 'F'
3  7962
3  7963		  =0003					 pos = pos + 1
3  7964
3  7965
3  7966	    0B36  49							 db 'I'
3  7967
3  7968		  =0004					 pos = pos + 1
3  7969
3  7970
3  7971	    0B37  4C							 db 'L'
3  7972
3  7973		  =0005					 pos = pos + 1
3  7974
3  7975
3  7976	    0B38  4C							 db 'L'
3  7977
3  7978		  =0006					 pos = pos + 1
3  7979
3  7980
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 141
msx_asm\tur_slib.ASM



3  7981	    0B39  42							 db 'B'
3  7982
3  7983		  =0007					 pos = pos + 1
3  7984
3  7985
3  7986	    0B3A  4F							 db 'O'
3  7987
3  7988		  =0008					 pos = pos + 1
3  7989
3  7990	    0B3B  D8					 db 'X'	+ 80h
3  7991
3  7992
3  7993		  =0009					 pos = pos + 1
3  7994
3  7995
3  7996
2  7997
1  7998	    0B3C  0000e				  DW P_FILLBOX
1  7999
1  8000						  DC 'FILLSHAPE'
2  8001
2  8002		  =000B				 strsize sizestr <'FILLSHAPE'>
2  8003		  =0000				 pos = 0
2  8004
2  8005						 irpc parameter,'FILLSHAPE'
2  8006							 pos = pos + 1
2  8007
2  8008							 if pos	EQ strsize - 1
2  8009							 db '&parameter' + 80h
2  8010							 endif
2  8011
2  8012							 if pos	GT 1
2  8013								 if pos	LT strsize -1
2  8014									 db '&parameter'
2  8015								 endif
2  8016							 endif
2  8017
2  8018						 endm
3  8019		  =0001					 pos = pos + 1
3  8020
3  8021
3  8022
3  8023		  =0002					 pos = pos + 1
3  8024
3  8025
3  8026	    0B3E  46							 db 'F'
3  8027
3  8028		  =0003					 pos = pos + 1
3  8029
3  8030
3  8031	    0B3F  49							 db 'I'
3  8032
3  8033		  =0004					 pos = pos + 1
3  8034
3  8035
3  8036	    0B40  4C							 db 'L'
3  8037
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 142
msx_asm\tur_slib.ASM



3  8038		  =0005					 pos = pos + 1
3  8039
3  8040
3  8041	    0B41  4C							 db 'L'
3  8042
3  8043		  =0006					 pos = pos + 1
3  8044
3  8045
3  8046	    0B42  53							 db 'S'
3  8047
3  8048		  =0007					 pos = pos + 1
3  8049
3  8050
3  8051	    0B43  48							 db 'H'
3  8052
3  8053		  =0008					 pos = pos + 1
3  8054
3  8055
3  8056	    0B44  41							 db 'A'
3  8057
3  8058		  =0009					 pos = pos + 1
3  8059
3  8060
3  8061	    0B45  50							 db 'P'
3  8062
3  8063		  =000A					 pos = pos + 1
3  8064
3  8065	    0B46  C5					 db 'E'	+ 80h
3  8066
3  8067
3  8068		  =000B					 pos = pos + 1
3  8069
3  8070
3  8071
2  8072
1  8073	    0B47  0000e				  DW P_FILLSHAPE
1  8074
1  8075						  DC 'FILLSPRITE'
2  8076
2  8077		  =000C				 strsize sizestr <'FILLSPRITE'>
2  8078		  =0000				 pos = 0
2  8079
2  8080						 irpc parameter,'FILLSPRITE'
2  8081							 pos = pos + 1
2  8082
2  8083							 if pos	EQ strsize - 1
2  8084							 db '&parameter' + 80h
2  8085							 endif
2  8086
2  8087							 if pos	GT 1
2  8088								 if pos	LT strsize -1
2  8089									 db '&parameter'
2  8090								 endif
2  8091							 endif
2  8092
2  8093						 endm
3  8094		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 143
msx_asm\tur_slib.ASM



3  8095
3  8096
3  8097
3  8098		  =0002					 pos = pos + 1
3  8099
3  8100
3  8101	    0B49  46							 db 'F'
3  8102
3  8103		  =0003					 pos = pos + 1
3  8104
3  8105
3  8106	    0B4A  49							 db 'I'
3  8107
3  8108		  =0004					 pos = pos + 1
3  8109
3  8110
3  8111	    0B4B  4C							 db 'L'
3  8112
3  8113		  =0005					 pos = pos + 1
3  8114
3  8115
3  8116	    0B4C  4C							 db 'L'
3  8117
3  8118		  =0006					 pos = pos + 1
3  8119
3  8120
3  8121	    0B4D  53							 db 'S'
3  8122
3  8123		  =0007					 pos = pos + 1
3  8124
3  8125
3  8126	    0B4E  50							 db 'P'
3  8127
3  8128		  =0008					 pos = pos + 1
3  8129
3  8130
3  8131	    0B4F  52							 db 'R'
3  8132
3  8133		  =0009					 pos = pos + 1
3  8134
3  8135
3  8136	    0B50  49							 db 'I'
3  8137
3  8138		  =000A					 pos = pos + 1
3  8139
3  8140
3  8141	    0B51  54							 db 'T'
3  8142
3  8143		  =000B					 pos = pos + 1
3  8144
3  8145	    0B52  C5					 db 'E'	+ 80h
3  8146
3  8147
3  8148		  =000C					 pos = pos + 1
3  8149
3  8150
3  8151
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 144
msx_asm\tur_slib.ASM



2  8152
1  8153	    0B53  0000e				  DW P_FILLSPRITE
1  8154
1  8155						  DC 'GCOPY'
2  8156
2  8157		  =0007				 strsize sizestr <'GCOPY'>
2  8158		  =0000				 pos = 0
2  8159
2  8160						 irpc parameter,'GCOPY'
2  8161							 pos = pos + 1
2  8162
2  8163							 if pos	EQ strsize - 1
2  8164							 db '&parameter' + 80h
2  8165							 endif
2  8166
2  8167							 if pos	GT 1
2  8168								 if pos	LT strsize -1
2  8169									 db '&parameter'
2  8170								 endif
2  8171							 endif
2  8172
2  8173						 endm
3  8174		  =0001					 pos = pos + 1
3  8175
3  8176
3  8177
3  8178		  =0002					 pos = pos + 1
3  8179
3  8180
3  8181	    0B55  47							 db 'G'
3  8182
3  8183		  =0003					 pos = pos + 1
3  8184
3  8185
3  8186	    0B56  43							 db 'C'
3  8187
3  8188		  =0004					 pos = pos + 1
3  8189
3  8190
3  8191	    0B57  4F							 db 'O'
3  8192
3  8193		  =0005					 pos = pos + 1
3  8194
3  8195
3  8196	    0B58  50							 db 'P'
3  8197
3  8198		  =0006					 pos = pos + 1
3  8199
3  8200	    0B59  D9					 db 'Y'	+ 80h
3  8201
3  8202
3  8203		  =0007					 pos = pos + 1
3  8204
3  8205
3  8206
2  8207
1  8208	    0B5A  0000e				  DW P_GCOPY
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 145
msx_asm\tur_slib.ASM



1  8209
1  8210						  DC 'GETDOSVERSION'
2  8211
2  8212		  =000F				 strsize sizestr <'GETDOSVERSION'>
2  8213		  =0000				 pos = 0
2  8214
2  8215						 irpc parameter,'GETDOSVERSION'
2  8216							 pos = pos + 1
2  8217
2  8218							 if pos	EQ strsize - 1
2  8219							 db '&parameter' + 80h
2  8220							 endif
2  8221
2  8222							 if pos	GT 1
2  8223								 if pos	LT strsize -1
2  8224									 db '&parameter'
2  8225								 endif
2  8226							 endif
2  8227
2  8228						 endm
3  8229		  =0001					 pos = pos + 1
3  8230
3  8231
3  8232
3  8233		  =0002					 pos = pos + 1
3  8234
3  8235
3  8236	    0B5C  47							 db 'G'
3  8237
3  8238		  =0003					 pos = pos + 1
3  8239
3  8240
3  8241	    0B5D  45							 db 'E'
3  8242
3  8243		  =0004					 pos = pos + 1
3  8244
3  8245
3  8246	    0B5E  54							 db 'T'
3  8247
3  8248		  =0005					 pos = pos + 1
3  8249
3  8250
3  8251	    0B5F  44							 db 'D'
3  8252
3  8253		  =0006					 pos = pos + 1
3  8254
3  8255
3  8256	    0B60  4F							 db 'O'
3  8257
3  8258		  =0007					 pos = pos + 1
3  8259
3  8260
3  8261	    0B61  53							 db 'S'
3  8262
3  8263		  =0008					 pos = pos + 1
3  8264
3  8265
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 146
msx_asm\tur_slib.ASM



3  8266	    0B62  56							 db 'V'
3  8267
3  8268		  =0009					 pos = pos + 1
3  8269
3  8270
3  8271	    0B63  45							 db 'E'
3  8272
3  8273		  =000A					 pos = pos + 1
3  8274
3  8275
3  8276	    0B64  52							 db 'R'
3  8277
3  8278		  =000B					 pos = pos + 1
3  8279
3  8280
3  8281	    0B65  53							 db 'S'
3  8282
3  8283		  =000C					 pos = pos + 1
3  8284
3  8285
3  8286	    0B66  49							 db 'I'
3  8287
3  8288		  =000D					 pos = pos + 1
3  8289
3  8290
3  8291	    0B67  4F							 db 'O'
3  8292
3  8293		  =000E					 pos = pos + 1
3  8294
3  8295	    0B68  CE					 db 'N'	+ 80h
3  8296
3  8297
3  8298		  =000F					 pos = pos + 1
3  8299
3  8300
3  8301
2  8302
1  8303	    0B69  0000e				  DW P_GETDOSVERSION
1  8304
1  8305						  DC 'LINE'
2  8306
2  8307		  =0006				 strsize sizestr <'LINE'>
2  8308		  =0000				 pos = 0
2  8309
2  8310						 irpc parameter,'LINE'
2  8311							 pos = pos + 1
2  8312
2  8313							 if pos	EQ strsize - 1
2  8314							 db '&parameter' + 80h
2  8315							 endif
2  8316
2  8317							 if pos	GT 1
2  8318								 if pos	LT strsize -1
2  8319									 db '&parameter'
2  8320								 endif
2  8321							 endif
2  8322
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 147
msx_asm\tur_slib.ASM



2  8323						 endm
3  8324		  =0001					 pos = pos + 1
3  8325
3  8326
3  8327
3  8328		  =0002					 pos = pos + 1
3  8329
3  8330
3  8331	    0B6B  4C							 db 'L'
3  8332
3  8333		  =0003					 pos = pos + 1
3  8334
3  8335
3  8336	    0B6C  49							 db 'I'
3  8337
3  8338		  =0004					 pos = pos + 1
3  8339
3  8340
3  8341	    0B6D  4E							 db 'N'
3  8342
3  8343		  =0005					 pos = pos + 1
3  8344
3  8345	    0B6E  C5					 db 'E'	+ 80h
3  8346
3  8347
3  8348		  =0006					 pos = pos + 1
3  8349
3  8350
3  8351
2  8352
1  8353	    0B6F  0000e				  DW P_LINE
1  8354
1  8355						  DC 'LOADPICTURE'
2  8356
2  8357		  =000D				 strsize sizestr <'LOADPICTURE'>
2  8358		  =0000				 pos = 0
2  8359
2  8360						 irpc parameter,'LOADPICTURE'
2  8361							 pos = pos + 1
2  8362
2  8363							 if pos	EQ strsize - 1
2  8364							 db '&parameter' + 80h
2  8365							 endif
2  8366
2  8367							 if pos	GT 1
2  8368								 if pos	LT strsize -1
2  8369									 db '&parameter'
2  8370								 endif
2  8371							 endif
2  8372
2  8373						 endm
3  8374		  =0001					 pos = pos + 1
3  8375
3  8376
3  8377
3  8378		  =0002					 pos = pos + 1
3  8379
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 148
msx_asm\tur_slib.ASM



3  8380
3  8381	    0B71  4C							 db 'L'
3  8382
3  8383		  =0003					 pos = pos + 1
3  8384
3  8385
3  8386	    0B72  4F							 db 'O'
3  8387
3  8388		  =0004					 pos = pos + 1
3  8389
3  8390
3  8391	    0B73  41							 db 'A'
3  8392
3  8393		  =0005					 pos = pos + 1
3  8394
3  8395
3  8396	    0B74  44							 db 'D'
3  8397
3  8398		  =0006					 pos = pos + 1
3  8399
3  8400
3  8401	    0B75  50							 db 'P'
3  8402
3  8403		  =0007					 pos = pos + 1
3  8404
3  8405
3  8406	    0B76  49							 db 'I'
3  8407
3  8408		  =0008					 pos = pos + 1
3  8409
3  8410
3  8411	    0B77  43							 db 'C'
3  8412
3  8413		  =0009					 pos = pos + 1
3  8414
3  8415
3  8416	    0B78  54							 db 'T'
3  8417
3  8418		  =000A					 pos = pos + 1
3  8419
3  8420
3  8421	    0B79  55							 db 'U'
3  8422
3  8423		  =000B					 pos = pos + 1
3  8424
3  8425
3  8426	    0B7A  52							 db 'R'
3  8427
3  8428		  =000C					 pos = pos + 1
3  8429
3  8430	    0B7B  C5					 db 'E'	+ 80h
3  8431
3  8432
3  8433		  =000D					 pos = pos + 1
3  8434
3  8435
3  8436
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 149
msx_asm\tur_slib.ASM



2  8437
1  8438	    0B7C  0000e				  DW P_LOADPICTURE
1  8439
1  8440						  DC 'LOADVRAM'
2  8441
2  8442		  =000A				 strsize sizestr <'LOADVRAM'>
2  8443		  =0000				 pos = 0
2  8444
2  8445						 irpc parameter,'LOADVRAM'
2  8446							 pos = pos + 1
2  8447
2  8448							 if pos	EQ strsize - 1
2  8449							 db '&parameter' + 80h
2  8450							 endif
2  8451
2  8452							 if pos	GT 1
2  8453								 if pos	LT strsize -1
2  8454									 db '&parameter'
2  8455								 endif
2  8456							 endif
2  8457
2  8458						 endm
3  8459		  =0001					 pos = pos + 1
3  8460
3  8461
3  8462
3  8463		  =0002					 pos = pos + 1
3  8464
3  8465
3  8466	    0B7E  4C							 db 'L'
3  8467
3  8468		  =0003					 pos = pos + 1
3  8469
3  8470
3  8471	    0B7F  4F							 db 'O'
3  8472
3  8473		  =0004					 pos = pos + 1
3  8474
3  8475
3  8476	    0B80  41							 db 'A'
3  8477
3  8478		  =0005					 pos = pos + 1
3  8479
3  8480
3  8481	    0B81  44							 db 'D'
3  8482
3  8483		  =0006					 pos = pos + 1
3  8484
3  8485
3  8486	    0B82  56							 db 'V'
3  8487
3  8488		  =0007					 pos = pos + 1
3  8489
3  8490
3  8491	    0B83  52							 db 'R'
3  8492
3  8493		  =0008					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 150
msx_asm\tur_slib.ASM



3  8494
3  8495
3  8496	    0B84  41							 db 'A'
3  8497
3  8498		  =0009					 pos = pos + 1
3  8499
3  8500	    0B85  CD					 db 'M'	+ 80h
3  8501
3  8502
3  8503		  =000A					 pos = pos + 1
3  8504
3  8505
3  8506
2  8507
1  8508	    0B86  0000e				  DW P_LOADVRAM
1  8509
1  8510						  DC 'MEMREADFILE'
2  8511
2  8512		  =000D				 strsize sizestr <'MEMREADFILE'>
2  8513		  =0000				 pos = 0
2  8514
2  8515						 irpc parameter,'MEMREADFILE'
2  8516							 pos = pos + 1
2  8517
2  8518							 if pos	EQ strsize - 1
2  8519							 db '&parameter' + 80h
2  8520							 endif
2  8521
2  8522							 if pos	GT 1
2  8523								 if pos	LT strsize -1
2  8524									 db '&parameter'
2  8525								 endif
2  8526							 endif
2  8527
2  8528						 endm
3  8529		  =0001					 pos = pos + 1
3  8530
3  8531
3  8532
3  8533		  =0002					 pos = pos + 1
3  8534
3  8535
3  8536	    0B88  4D							 db 'M'
3  8537
3  8538		  =0003					 pos = pos + 1
3  8539
3  8540
3  8541	    0B89  45							 db 'E'
3  8542
3  8543		  =0004					 pos = pos + 1
3  8544
3  8545
3  8546	    0B8A  4D							 db 'M'
3  8547
3  8548		  =0005					 pos = pos + 1
3  8549
3  8550
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 151
msx_asm\tur_slib.ASM



3  8551	    0B8B  52							 db 'R'
3  8552
3  8553		  =0006					 pos = pos + 1
3  8554
3  8555
3  8556	    0B8C  45							 db 'E'
3  8557
3  8558		  =0007					 pos = pos + 1
3  8559
3  8560
3  8561	    0B8D  41							 db 'A'
3  8562
3  8563		  =0008					 pos = pos + 1
3  8564
3  8565
3  8566	    0B8E  44							 db 'D'
3  8567
3  8568		  =0009					 pos = pos + 1
3  8569
3  8570
3  8571	    0B8F  46							 db 'F'
3  8572
3  8573		  =000A					 pos = pos + 1
3  8574
3  8575
3  8576	    0B90  49							 db 'I'
3  8577
3  8578		  =000B					 pos = pos + 1
3  8579
3  8580
3  8581	    0B91  4C							 db 'L'
3  8582
3  8583		  =000C					 pos = pos + 1
3  8584
3  8585	    0B92  C5					 db 'E'	+ 80h
3  8586
3  8587
3  8588		  =000D					 pos = pos + 1
3  8589
3  8590
3  8591
2  8592
1  8593	    0B93  0000e				  DW P_MEMREADFILE
1  8594
1  8595						  DC 'MEMWRITEFILE'
2  8596
2  8597		  =000E				 strsize sizestr <'MEMWRITEFILE'>
2  8598		  =0000				 pos = 0
2  8599
2  8600						 irpc parameter,'MEMWRITEFILE'
2  8601							 pos = pos + 1
2  8602
2  8603							 if pos	EQ strsize - 1
2  8604							 db '&parameter' + 80h
2  8605							 endif
2  8606
2  8607							 if pos	GT 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 152
msx_asm\tur_slib.ASM



2  8608								 if pos	LT strsize -1
2  8609									 db '&parameter'
2  8610								 endif
2  8611							 endif
2  8612
2  8613						 endm
3  8614		  =0001					 pos = pos + 1
3  8615
3  8616
3  8617
3  8618		  =0002					 pos = pos + 1
3  8619
3  8620
3  8621	    0B95  4D							 db 'M'
3  8622
3  8623		  =0003					 pos = pos + 1
3  8624
3  8625
3  8626	    0B96  45							 db 'E'
3  8627
3  8628		  =0004					 pos = pos + 1
3  8629
3  8630
3  8631	    0B97  4D							 db 'M'
3  8632
3  8633		  =0005					 pos = pos + 1
3  8634
3  8635
3  8636	    0B98  57							 db 'W'
3  8637
3  8638		  =0006					 pos = pos + 1
3  8639
3  8640
3  8641	    0B99  52							 db 'R'
3  8642
3  8643		  =0007					 pos = pos + 1
3  8644
3  8645
3  8646	    0B9A  49							 db 'I'
3  8647
3  8648		  =0008					 pos = pos + 1
3  8649
3  8650
3  8651	    0B9B  54							 db 'T'
3  8652
3  8653		  =0009					 pos = pos + 1
3  8654
3  8655
3  8656	    0B9C  45							 db 'E'
3  8657
3  8658		  =000A					 pos = pos + 1
3  8659
3  8660
3  8661	    0B9D  46							 db 'F'
3  8662
3  8663		  =000B					 pos = pos + 1
3  8664
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 153
msx_asm\tur_slib.ASM



3  8665
3  8666	    0B9E  49							 db 'I'
3  8667
3  8668		  =000C					 pos = pos + 1
3  8669
3  8670
3  8671	    0B9F  4C							 db 'L'
3  8672
3  8673		  =000D					 pos = pos + 1
3  8674
3  8675	    0BA0  C5					 db 'E'	+ 80h
3  8676
3  8677
3  8678		  =000E					 pos = pos + 1
3  8679
3  8680
3  8681
2  8682
1  8683	    0BA1  0000e				  DW P_MEMWRITEFILE
1  8684
1  8685						  DC 'MEMAPPENDFILE'
2  8686
2  8687		  =000F				 strsize sizestr <'MEMAPPENDFILE'>
2  8688		  =0000				 pos = 0
2  8689
2  8690						 irpc parameter,'MEMAPPENDFILE'
2  8691							 pos = pos + 1
2  8692
2  8693							 if pos	EQ strsize - 1
2  8694							 db '&parameter' + 80h
2  8695							 endif
2  8696
2  8697							 if pos	GT 1
2  8698								 if pos	LT strsize -1
2  8699									 db '&parameter'
2  8700								 endif
2  8701							 endif
2  8702
2  8703						 endm
3  8704		  =0001					 pos = pos + 1
3  8705
3  8706
3  8707
3  8708		  =0002					 pos = pos + 1
3  8709
3  8710
3  8711	    0BA3  4D							 db 'M'
3  8712
3  8713		  =0003					 pos = pos + 1
3  8714
3  8715
3  8716	    0BA4  45							 db 'E'
3  8717
3  8718		  =0004					 pos = pos + 1
3  8719
3  8720
3  8721	    0BA5  4D							 db 'M'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 154
msx_asm\tur_slib.ASM



3  8722
3  8723		  =0005					 pos = pos + 1
3  8724
3  8725
3  8726	    0BA6  41							 db 'A'
3  8727
3  8728		  =0006					 pos = pos + 1
3  8729
3  8730
3  8731	    0BA7  50							 db 'P'
3  8732
3  8733		  =0007					 pos = pos + 1
3  8734
3  8735
3  8736	    0BA8  50							 db 'P'
3  8737
3  8738		  =0008					 pos = pos + 1
3  8739
3  8740
3  8741	    0BA9  45							 db 'E'
3  8742
3  8743		  =0009					 pos = pos + 1
3  8744
3  8745
3  8746	    0BAA  4E							 db 'N'
3  8747
3  8748		  =000A					 pos = pos + 1
3  8749
3  8750
3  8751	    0BAB  44							 db 'D'
3  8752
3  8753		  =000B					 pos = pos + 1
3  8754
3  8755
3  8756	    0BAC  46							 db 'F'
3  8757
3  8758		  =000C					 pos = pos + 1
3  8759
3  8760
3  8761	    0BAD  49							 db 'I'
3  8762
3  8763		  =000D					 pos = pos + 1
3  8764
3  8765
3  8766	    0BAE  4C							 db 'L'
3  8767
3  8768		  =000E					 pos = pos + 1
3  8769
3  8770	    0BAF  C5					 db 'E'	+ 80h
3  8771
3  8772
3  8773		  =000F					 pos = pos + 1
3  8774
3  8775
3  8776
2  8777
1  8778	    0BB0  0000e				  DW P_MEMAPPENDFILE
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 155
msx_asm\tur_slib.ASM



1  8779
1  8780						  DC 'MOVEVRAM'
2  8781
2  8782		  =000A				 strsize sizestr <'MOVEVRAM'>
2  8783		  =0000				 pos = 0
2  8784
2  8785						 irpc parameter,'MOVEVRAM'
2  8786							 pos = pos + 1
2  8787
2  8788							 if pos	EQ strsize - 1
2  8789							 db '&parameter' + 80h
2  8790							 endif
2  8791
2  8792							 if pos	GT 1
2  8793								 if pos	LT strsize -1
2  8794									 db '&parameter'
2  8795								 endif
2  8796							 endif
2  8797
2  8798						 endm
3  8799		  =0001					 pos = pos + 1
3  8800
3  8801
3  8802
3  8803		  =0002					 pos = pos + 1
3  8804
3  8805
3  8806	    0BB2  4D							 db 'M'
3  8807
3  8808		  =0003					 pos = pos + 1
3  8809
3  8810
3  8811	    0BB3  4F							 db 'O'
3  8812
3  8813		  =0004					 pos = pos + 1
3  8814
3  8815
3  8816	    0BB4  56							 db 'V'
3  8817
3  8818		  =0005					 pos = pos + 1
3  8819
3  8820
3  8821	    0BB5  45							 db 'E'
3  8822
3  8823		  =0006					 pos = pos + 1
3  8824
3  8825
3  8826	    0BB6  56							 db 'V'
3  8827
3  8828		  =0007					 pos = pos + 1
3  8829
3  8830
3  8831	    0BB7  52							 db 'R'
3  8832
3  8833		  =0008					 pos = pos + 1
3  8834
3  8835
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 156
msx_asm\tur_slib.ASM



3  8836	    0BB8  41							 db 'A'
3  8837
3  8838		  =0009					 pos = pos + 1
3  8839
3  8840	    0BB9  CD					 db 'M'	+ 80h
3  8841
3  8842
3  8843		  =000A					 pos = pos + 1
3  8844
3  8845
3  8846
2  8847
1  8848	    0BBA  0000e				  DW P_MOVEVRAM
1  8849
1  8850						  DC 'PAINT'
2  8851
2  8852		  =0007				 strsize sizestr <'PAINT'>
2  8853		  =0000				 pos = 0
2  8854
2  8855						 irpc parameter,'PAINT'
2  8856							 pos = pos + 1
2  8857
2  8858							 if pos	EQ strsize - 1
2  8859							 db '&parameter' + 80h
2  8860							 endif
2  8861
2  8862							 if pos	GT 1
2  8863								 if pos	LT strsize -1
2  8864									 db '&parameter'
2  8865								 endif
2  8866							 endif
2  8867
2  8868						 endm
3  8869		  =0001					 pos = pos + 1
3  8870
3  8871
3  8872
3  8873		  =0002					 pos = pos + 1
3  8874
3  8875
3  8876	    0BBC  50							 db 'P'
3  8877
3  8878		  =0003					 pos = pos + 1
3  8879
3  8880
3  8881	    0BBD  41							 db 'A'
3  8882
3  8883		  =0004					 pos = pos + 1
3  8884
3  8885
3  8886	    0BBE  49							 db 'I'
3  8887
3  8888		  =0005					 pos = pos + 1
3  8889
3  8890
3  8891	    0BBF  4E							 db 'N'
3  8892
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 157
msx_asm\tur_slib.ASM



3  8893		  =0006					 pos = pos + 1
3  8894
3  8895	    0BC0  D4					 db 'T'	+ 80h
3  8896
3  8897
3  8898		  =0007					 pos = pos + 1
3  8899
3  8900
3  8901
2  8902
1  8903	    0BC1  0000e				  DW P_PAINT
1  8904
1  8905						  DC 'PSET'
2  8906
2  8907		  =0006				 strsize sizestr <'PSET'>
2  8908		  =0000				 pos = 0
2  8909
2  8910						 irpc parameter,'PSET'
2  8911							 pos = pos + 1
2  8912
2  8913							 if pos	EQ strsize - 1
2  8914							 db '&parameter' + 80h
2  8915							 endif
2  8916
2  8917							 if pos	GT 1
2  8918								 if pos	LT strsize -1
2  8919									 db '&parameter'
2  8920								 endif
2  8921							 endif
2  8922
2  8923						 endm
3  8924		  =0001					 pos = pos + 1
3  8925
3  8926
3  8927
3  8928		  =0002					 pos = pos + 1
3  8929
3  8930
3  8931	    0BC3  50							 db 'P'
3  8932
3  8933		  =0003					 pos = pos + 1
3  8934
3  8935
3  8936	    0BC4  53							 db 'S'
3  8937
3  8938		  =0004					 pos = pos + 1
3  8939
3  8940
3  8941	    0BC5  45							 db 'E'
3  8942
3  8943		  =0005					 pos = pos + 1
3  8944
3  8945	    0BC6  D4					 db 'T'	+ 80h
3  8946
3  8947
3  8948		  =0006					 pos = pos + 1
3  8949
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 158
msx_asm\tur_slib.ASM



3  8950
3  8951
2  8952
1  8953	    0BC7  0000e				  DW P_PSET
1  8954
1  8955						  DC 'PUTSPRITE'
2  8956
2  8957		  =000B				 strsize sizestr <'PUTSPRITE'>
2  8958		  =0000				 pos = 0
2  8959
2  8960						 irpc parameter,'PUTSPRITE'
2  8961							 pos = pos + 1
2  8962
2  8963							 if pos	EQ strsize - 1
2  8964							 db '&parameter' + 80h
2  8965							 endif
2  8966
2  8967							 if pos	GT 1
2  8968								 if pos	LT strsize -1
2  8969									 db '&parameter'
2  8970								 endif
2  8971							 endif
2  8972
2  8973						 endm
3  8974		  =0001					 pos = pos + 1
3  8975
3  8976
3  8977
3  8978		  =0002					 pos = pos + 1
3  8979
3  8980
3  8981	    0BC9  50							 db 'P'
3  8982
3  8983		  =0003					 pos = pos + 1
3  8984
3  8985
3  8986	    0BCA  55							 db 'U'
3  8987
3  8988		  =0004					 pos = pos + 1
3  8989
3  8990
3  8991	    0BCB  54							 db 'T'
3  8992
3  8993		  =0005					 pos = pos + 1
3  8994
3  8995
3  8996	    0BCC  53							 db 'S'
3  8997
3  8998		  =0006					 pos = pos + 1
3  8999
3  9000
3  9001	    0BCD  50							 db 'P'
3  9002
3  9003		  =0007					 pos = pos + 1
3  9004
3  9005
3  9006	    0BCE  52							 db 'R'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 159
msx_asm\tur_slib.ASM



3  9007
3  9008		  =0008					 pos = pos + 1
3  9009
3  9010
3  9011	    0BCF  49							 db 'I'
3  9012
3  9013		  =0009					 pos = pos + 1
3  9014
3  9015
3  9016	    0BD0  54							 db 'T'
3  9017
3  9018		  =000A					 pos = pos + 1
3  9019
3  9020	    0BD1  C5					 db 'E'	+ 80h
3  9021
3  9022
3  9023		  =000B					 pos = pos + 1
3  9024
3  9025
3  9026
2  9027
1  9028	    0BD2  0000e				  DW P_PUTSPRITE
1  9029
1  9030						  DC 'READMEM'
2  9031
2  9032		  =0009				 strsize sizestr <'READMEM'>
2  9033		  =0000				 pos = 0
2  9034
2  9035						 irpc parameter,'READMEM'
2  9036							 pos = pos + 1
2  9037
2  9038							 if pos	EQ strsize - 1
2  9039							 db '&parameter' + 80h
2  9040							 endif
2  9041
2  9042							 if pos	GT 1
2  9043								 if pos	LT strsize -1
2  9044									 db '&parameter'
2  9045								 endif
2  9046							 endif
2  9047
2  9048						 endm
3  9049		  =0001					 pos = pos + 1
3  9050
3  9051
3  9052
3  9053		  =0002					 pos = pos + 1
3  9054
3  9055
3  9056	    0BD4  52							 db 'R'
3  9057
3  9058		  =0003					 pos = pos + 1
3  9059
3  9060
3  9061	    0BD5  45							 db 'E'
3  9062
3  9063		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 160
msx_asm\tur_slib.ASM



3  9064
3  9065
3  9066	    0BD6  41							 db 'A'
3  9067
3  9068		  =0005					 pos = pos + 1
3  9069
3  9070
3  9071	    0BD7  44							 db 'D'
3  9072
3  9073		  =0006					 pos = pos + 1
3  9074
3  9075
3  9076	    0BD8  4D							 db 'M'
3  9077
3  9078		  =0007					 pos = pos + 1
3  9079
3  9080
3  9081	    0BD9  45							 db 'E'
3  9082
3  9083		  =0008					 pos = pos + 1
3  9084
3  9085	    0BDA  CD					 db 'M'	+ 80h
3  9086
3  9087
3  9088		  =0009					 pos = pos + 1
3  9089
3  9090
3  9091
2  9092
1  9093	    0BDB  0000e				  DW P_READMEM
1  9094
1  9095						  DC 'READSECTOR'
2  9096
2  9097		  =000C				 strsize sizestr <'READSECTOR'>
2  9098		  =0000				 pos = 0
2  9099
2  9100						 irpc parameter,'READSECTOR'
2  9101							 pos = pos + 1
2  9102
2  9103							 if pos	EQ strsize - 1
2  9104							 db '&parameter' + 80h
2  9105							 endif
2  9106
2  9107							 if pos	GT 1
2  9108								 if pos	LT strsize -1
2  9109									 db '&parameter'
2  9110								 endif
2  9111							 endif
2  9112
2  9113						 endm
3  9114		  =0001					 pos = pos + 1
3  9115
3  9116
3  9117
3  9118		  =0002					 pos = pos + 1
3  9119
3  9120
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 161
msx_asm\tur_slib.ASM



3  9121	    0BDD  52							 db 'R'
3  9122
3  9123		  =0003					 pos = pos + 1
3  9124
3  9125
3  9126	    0BDE  45							 db 'E'
3  9127
3  9128		  =0004					 pos = pos + 1
3  9129
3  9130
3  9131	    0BDF  41							 db 'A'
3  9132
3  9133		  =0005					 pos = pos + 1
3  9134
3  9135
3  9136	    0BE0  44							 db 'D'
3  9137
3  9138		  =0006					 pos = pos + 1
3  9139
3  9140
3  9141	    0BE1  53							 db 'S'
3  9142
3  9143		  =0007					 pos = pos + 1
3  9144
3  9145
3  9146	    0BE2  45							 db 'E'
3  9147
3  9148		  =0008					 pos = pos + 1
3  9149
3  9150
3  9151	    0BE3  43							 db 'C'
3  9152
3  9153		  =0009					 pos = pos + 1
3  9154
3  9155
3  9156	    0BE4  54							 db 'T'
3  9157
3  9158		  =000A					 pos = pos + 1
3  9159
3  9160
3  9161	    0BE5  4F							 db 'O'
3  9162
3  9163		  =000B					 pos = pos + 1
3  9164
3  9165	    0BE6  D2					 db 'R'	+ 80h
3  9166
3  9167
3  9168		  =000C					 pos = pos + 1
3  9169
3  9170
3  9171
2  9172
1  9173	    0BE7  0000e				  DW P_READSECTOR
1  9174
1  9175						  DC 'SAVEPICTURE'
2  9176
2  9177		  =000D				 strsize sizestr <'SAVEPICTURE'>
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 162
msx_asm\tur_slib.ASM



2  9178		  =0000				 pos = 0
2  9179
2  9180						 irpc parameter,'SAVEPICTURE'
2  9181							 pos = pos + 1
2  9182
2  9183							 if pos	EQ strsize - 1
2  9184							 db '&parameter' + 80h
2  9185							 endif
2  9186
2  9187							 if pos	GT 1
2  9188								 if pos	LT strsize -1
2  9189									 db '&parameter'
2  9190								 endif
2  9191							 endif
2  9192
2  9193						 endm
3  9194		  =0001					 pos = pos + 1
3  9195
3  9196
3  9197
3  9198		  =0002					 pos = pos + 1
3  9199
3  9200
3  9201	    0BE9  53							 db 'S'
3  9202
3  9203		  =0003					 pos = pos + 1
3  9204
3  9205
3  9206	    0BEA  41							 db 'A'
3  9207
3  9208		  =0004					 pos = pos + 1
3  9209
3  9210
3  9211	    0BEB  56							 db 'V'
3  9212
3  9213		  =0005					 pos = pos + 1
3  9214
3  9215
3  9216	    0BEC  45							 db 'E'
3  9217
3  9218		  =0006					 pos = pos + 1
3  9219
3  9220
3  9221	    0BED  50							 db 'P'
3  9222
3  9223		  =0007					 pos = pos + 1
3  9224
3  9225
3  9226	    0BEE  49							 db 'I'
3  9227
3  9228		  =0008					 pos = pos + 1
3  9229
3  9230
3  9231	    0BEF  43							 db 'C'
3  9232
3  9233		  =0009					 pos = pos + 1
3  9234
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 163
msx_asm\tur_slib.ASM



3  9235
3  9236	    0BF0  54							 db 'T'
3  9237
3  9238		  =000A					 pos = pos + 1
3  9239
3  9240
3  9241	    0BF1  55							 db 'U'
3  9242
3  9243		  =000B					 pos = pos + 1
3  9244
3  9245
3  9246	    0BF2  52							 db 'R'
3  9247
3  9248		  =000C					 pos = pos + 1
3  9249
3  9250	    0BF3  C5					 db 'E'	+ 80h
3  9251
3  9252
3  9253		  =000D					 pos = pos + 1
3  9254
3  9255
3  9256
2  9257
1  9258	    0BF4  0000e				  DW P_SAVEPICTURE
1  9259
1  9260					 ;	   DC 'SAVEVRAM'
1  9261					 ;	   DW P_SAVEVRAM
1  9262
1  9263						  DC 'SCREEN'
2  9264
2  9265		  =0008				 strsize sizestr <'SCREEN'>
2  9266		  =0000				 pos = 0
2  9267
2  9268						 irpc parameter,'SCREEN'
2  9269							 pos = pos + 1
2  9270
2  9271							 if pos	EQ strsize - 1
2  9272							 db '&parameter' + 80h
2  9273							 endif
2  9274
2  9275							 if pos	GT 1
2  9276								 if pos	LT strsize -1
2  9277									 db '&parameter'
2  9278								 endif
2  9279							 endif
2  9280
2  9281						 endm
3  9282		  =0001					 pos = pos + 1
3  9283
3  9284
3  9285
3  9286		  =0002					 pos = pos + 1
3  9287
3  9288
3  9289	    0BF6  53							 db 'S'
3  9290
3  9291		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 164
msx_asm\tur_slib.ASM



3  9292
3  9293
3  9294	    0BF7  43							 db 'C'
3  9295
3  9296		  =0004					 pos = pos + 1
3  9297
3  9298
3  9299	    0BF8  52							 db 'R'
3  9300
3  9301		  =0005					 pos = pos + 1
3  9302
3  9303
3  9304	    0BF9  45							 db 'E'
3  9305
3  9306		  =0006					 pos = pos + 1
3  9307
3  9308
3  9309	    0BFA  45							 db 'E'
3  9310
3  9311		  =0007					 pos = pos + 1
3  9312
3  9313	    0BFB  CE					 db 'N'	+ 80h
3  9314
3  9315
3  9316		  =0008					 pos = pos + 1
3  9317
3  9318
3  9319
2  9320
1  9321	    0BFC  0000e				  DW P_SCREEN
1  9322
1  9323						  DC 'SCREENOFF'
2  9324
2  9325		  =000B				 strsize sizestr <'SCREENOFF'>
2  9326		  =0000				 pos = 0
2  9327
2  9328						 irpc parameter,'SCREENOFF'
2  9329							 pos = pos + 1
2  9330
2  9331							 if pos	EQ strsize - 1
2  9332							 db '&parameter' + 80h
2  9333							 endif
2  9334
2  9335							 if pos	GT 1
2  9336								 if pos	LT strsize -1
2  9337									 db '&parameter'
2  9338								 endif
2  9339							 endif
2  9340
2  9341						 endm
3  9342		  =0001					 pos = pos + 1
3  9343
3  9344
3  9345
3  9346		  =0002					 pos = pos + 1
3  9347
3  9348
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 165
msx_asm\tur_slib.ASM



3  9349	    0BFE  53							 db 'S'
3  9350
3  9351		  =0003					 pos = pos + 1
3  9352
3  9353
3  9354	    0BFF  43							 db 'C'
3  9355
3  9356		  =0004					 pos = pos + 1
3  9357
3  9358
3  9359	    0C00  52							 db 'R'
3  9360
3  9361		  =0005					 pos = pos + 1
3  9362
3  9363
3  9364	    0C01  45							 db 'E'
3  9365
3  9366		  =0006					 pos = pos + 1
3  9367
3  9368
3  9369	    0C02  45							 db 'E'
3  9370
3  9371		  =0007					 pos = pos + 1
3  9372
3  9373
3  9374	    0C03  4E							 db 'N'
3  9375
3  9376		  =0008					 pos = pos + 1
3  9377
3  9378
3  9379	    0C04  4F							 db 'O'
3  9380
3  9381		  =0009					 pos = pos + 1
3  9382
3  9383
3  9384	    0C05  46							 db 'F'
3  9385
3  9386		  =000A					 pos = pos + 1
3  9387
3  9388	    0C06  C6					 db 'F'	+ 80h
3  9389
3  9390
3  9391		  =000B					 pos = pos + 1
3  9392
3  9393
3  9394
2  9395
1  9396	    0C07  0000e				  DW P_SCREENOFF
1  9397
1  9398						  DC 'SCREENON'
2  9399
2  9400		  =000A				 strsize sizestr <'SCREENON'>
2  9401		  =0000				 pos = 0
2  9402
2  9403						 irpc parameter,'SCREENON'
2  9404							 pos = pos + 1
2  9405
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 166
msx_asm\tur_slib.ASM



2  9406							 if pos	EQ strsize - 1
2  9407							 db '&parameter' + 80h
2  9408							 endif
2  9409
2  9410							 if pos	GT 1
2  9411								 if pos	LT strsize -1
2  9412									 db '&parameter'
2  9413								 endif
2  9414							 endif
2  9415
2  9416						 endm
3  9417		  =0001					 pos = pos + 1
3  9418
3  9419
3  9420
3  9421		  =0002					 pos = pos + 1
3  9422
3  9423
3  9424	    0C09  53							 db 'S'
3  9425
3  9426		  =0003					 pos = pos + 1
3  9427
3  9428
3  9429	    0C0A  43							 db 'C'
3  9430
3  9431		  =0004					 pos = pos + 1
3  9432
3  9433
3  9434	    0C0B  52							 db 'R'
3  9435
3  9436		  =0005					 pos = pos + 1
3  9437
3  9438
3  9439	    0C0C  45							 db 'E'
3  9440
3  9441		  =0006					 pos = pos + 1
3  9442
3  9443
3  9444	    0C0D  45							 db 'E'
3  9445
3  9446		  =0007					 pos = pos + 1
3  9447
3  9448
3  9449	    0C0E  4E							 db 'N'
3  9450
3  9451		  =0008					 pos = pos + 1
3  9452
3  9453
3  9454	    0C0F  4F							 db 'O'
3  9455
3  9456		  =0009					 pos = pos + 1
3  9457
3  9458	    0C10  CE					 db 'N'	+ 80h
3  9459
3  9460
3  9461		  =000A					 pos = pos + 1
3  9462
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 167
msx_asm\tur_slib.ASM



3  9463
3  9464
2  9465
1  9466	    0C11  0000e				  DW P_SCREENON
1  9467
1  9468						  DC 'SETCHANNEL'
2  9469
2  9470		  =000C				 strsize sizestr <'SETCHANNEL'>
2  9471		  =0000				 pos = 0
2  9472
2  9473						 irpc parameter,'SETCHANNEL'
2  9474							 pos = pos + 1
2  9475
2  9476							 if pos	EQ strsize - 1
2  9477							 db '&parameter' + 80h
2  9478							 endif
2  9479
2  9480							 if pos	GT 1
2  9481								 if pos	LT strsize -1
2  9482									 db '&parameter'
2  9483								 endif
2  9484							 endif
2  9485
2  9486						 endm
3  9487		  =0001					 pos = pos + 1
3  9488
3  9489
3  9490
3  9491		  =0002					 pos = pos + 1
3  9492
3  9493
3  9494	    0C13  53							 db 'S'
3  9495
3  9496		  =0003					 pos = pos + 1
3  9497
3  9498
3  9499	    0C14  45							 db 'E'
3  9500
3  9501		  =0004					 pos = pos + 1
3  9502
3  9503
3  9504	    0C15  54							 db 'T'
3  9505
3  9506		  =0005					 pos = pos + 1
3  9507
3  9508
3  9509	    0C16  43							 db 'C'
3  9510
3  9511		  =0006					 pos = pos + 1
3  9512
3  9513
3  9514	    0C17  48							 db 'H'
3  9515
3  9516		  =0007					 pos = pos + 1
3  9517
3  9518
3  9519	    0C18  41							 db 'A'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 168
msx_asm\tur_slib.ASM



3  9520
3  9521		  =0008					 pos = pos + 1
3  9522
3  9523
3  9524	    0C19  4E							 db 'N'
3  9525
3  9526		  =0009					 pos = pos + 1
3  9527
3  9528
3  9529	    0C1A  4E							 db 'N'
3  9530
3  9531		  =000A					 pos = pos + 1
3  9532
3  9533
3  9534	    0C1B  45							 db 'E'
3  9535
3  9536		  =000B					 pos = pos + 1
3  9537
3  9538	    0C1C  CC					 db 'L'	+ 80h
3  9539
3  9540
3  9541		  =000C					 pos = pos + 1
3  9542
3  9543
3  9544
2  9545
1  9546	    0C1D  0000e				  DW P_SETCHANNEL
1  9547
1  9548						  DC 'SOUND'
2  9549
2  9550		  =0007				 strsize sizestr <'SOUND'>
2  9551		  =0000				 pos = 0
2  9552
2  9553						 irpc parameter,'SOUND'
2  9554							 pos = pos + 1
2  9555
2  9556							 if pos	EQ strsize - 1
2  9557							 db '&parameter' + 80h
2  9558							 endif
2  9559
2  9560							 if pos	GT 1
2  9561								 if pos	LT strsize -1
2  9562									 db '&parameter'
2  9563								 endif
2  9564							 endif
2  9565
2  9566						 endm
3  9567		  =0001					 pos = pos + 1
3  9568
3  9569
3  9570
3  9571		  =0002					 pos = pos + 1
3  9572
3  9573
3  9574	    0C1F  53							 db 'S'
3  9575
3  9576		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 169
msx_asm\tur_slib.ASM



3  9577
3  9578
3  9579	    0C20  4F							 db 'O'
3  9580
3  9581		  =0004					 pos = pos + 1
3  9582
3  9583
3  9584	    0C21  55							 db 'U'
3  9585
3  9586		  =0005					 pos = pos + 1
3  9587
3  9588
3  9589	    0C22  4E							 db 'N'
3  9590
3  9591		  =0006					 pos = pos + 1
3  9592
3  9593	    0C23  C4					 db 'D'	+ 80h
3  9594
3  9595
3  9596		  =0007					 pos = pos + 1
3  9597
3  9598
3  9599
2  9600
1  9601	    0C24  0000e				  DW P_SOUND
1  9602
1  9603						  DC 'SPRITEATTRIBUTEADDRESS'
2  9604
2  9605		  =0018				 strsize sizestr <'SPRITEATTRIBUTEADDRESS'>
2  9606		  =0000				 pos = 0
2  9607
2  9608						 irpc parameter,'SPRITEATTRIBUTEADDRESS'
2  9609							 pos = pos + 1
2  9610
2  9611							 if pos	EQ strsize - 1
2  9612							 db '&parameter' + 80h
2  9613							 endif
2  9614
2  9615							 if pos	GT 1
2  9616								 if pos	LT strsize -1
2  9617									 db '&parameter'
2  9618								 endif
2  9619							 endif
2  9620
2  9621						 endm
3  9622		  =0001					 pos = pos + 1
3  9623
3  9624
3  9625
3  9626		  =0002					 pos = pos + 1
3  9627
3  9628
3  9629	    0C26  53							 db 'S'
3  9630
3  9631		  =0003					 pos = pos + 1
3  9632
3  9633
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 170
msx_asm\tur_slib.ASM



3  9634	    0C27  50							 db 'P'
3  9635
3  9636		  =0004					 pos = pos + 1
3  9637
3  9638
3  9639	    0C28  52							 db 'R'
3  9640
3  9641		  =0005					 pos = pos + 1
3  9642
3  9643
3  9644	    0C29  49							 db 'I'
3  9645
3  9646		  =0006					 pos = pos + 1
3  9647
3  9648
3  9649	    0C2A  54							 db 'T'
3  9650
3  9651		  =0007					 pos = pos + 1
3  9652
3  9653
3  9654	    0C2B  45							 db 'E'
3  9655
3  9656		  =0008					 pos = pos + 1
3  9657
3  9658
3  9659	    0C2C  41							 db 'A'
3  9660
3  9661		  =0009					 pos = pos + 1
3  9662
3  9663
3  9664	    0C2D  54							 db 'T'
3  9665
3  9666		  =000A					 pos = pos + 1
3  9667
3  9668
3  9669	    0C2E  54							 db 'T'
3  9670
3  9671		  =000B					 pos = pos + 1
3  9672
3  9673
3  9674	    0C2F  52							 db 'R'
3  9675
3  9676		  =000C					 pos = pos + 1
3  9677
3  9678
3  9679	    0C30  49							 db 'I'
3  9680
3  9681		  =000D					 pos = pos + 1
3  9682
3  9683
3  9684	    0C31  42							 db 'B'
3  9685
3  9686		  =000E					 pos = pos + 1
3  9687
3  9688
3  9689	    0C32  55							 db 'U'
3  9690
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 171
msx_asm\tur_slib.ASM



3  9691		  =000F					 pos = pos + 1
3  9692
3  9693
3  9694	    0C33  54							 db 'T'
3  9695
3  9696		  =0010					 pos = pos + 1
3  9697
3  9698
3  9699	    0C34  45							 db 'E'
3  9700
3  9701		  =0011					 pos = pos + 1
3  9702
3  9703
3  9704	    0C35  41							 db 'A'
3  9705
3  9706		  =0012					 pos = pos + 1
3  9707
3  9708
3  9709	    0C36  44							 db 'D'
3  9710
3  9711		  =0013					 pos = pos + 1
3  9712
3  9713
3  9714	    0C37  44							 db 'D'
3  9715
3  9716		  =0014					 pos = pos + 1
3  9717
3  9718
3  9719	    0C38  52							 db 'R'
3  9720
3  9721		  =0015					 pos = pos + 1
3  9722
3  9723
3  9724	    0C39  45							 db 'E'
3  9725
3  9726		  =0016					 pos = pos + 1
3  9727
3  9728
3  9729	    0C3A  53							 db 'S'
3  9730
3  9731		  =0017					 pos = pos + 1
3  9732
3  9733	    0C3B  D3					 db 'S'	+ 80h
3  9734
3  9735
3  9736		  =0018					 pos = pos + 1
3  9737
3  9738
3  9739
2  9740
1  9741	    0C3C  0000e				  DW P_SPRITEATTRIBUTEADDRESS
1  9742
1  9743						  DC 'SPRITECOLOR'
2  9744
2  9745		  =000D				 strsize sizestr <'SPRITECOLOR'>
2  9746		  =0000				 pos = 0
2  9747
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 172
msx_asm\tur_slib.ASM



2  9748						 irpc parameter,'SPRITECOLOR'
2  9749							 pos = pos + 1
2  9750
2  9751							 if pos	EQ strsize - 1
2  9752							 db '&parameter' + 80h
2  9753							 endif
2  9754
2  9755							 if pos	GT 1
2  9756								 if pos	LT strsize -1
2  9757									 db '&parameter'
2  9758								 endif
2  9759							 endif
2  9760
2  9761						 endm
3  9762		  =0001					 pos = pos + 1
3  9763
3  9764
3  9765
3  9766		  =0002					 pos = pos + 1
3  9767
3  9768
3  9769	    0C3E  53							 db 'S'
3  9770
3  9771		  =0003					 pos = pos + 1
3  9772
3  9773
3  9774	    0C3F  50							 db 'P'
3  9775
3  9776		  =0004					 pos = pos + 1
3  9777
3  9778
3  9779	    0C40  52							 db 'R'
3  9780
3  9781		  =0005					 pos = pos + 1
3  9782
3  9783
3  9784	    0C41  49							 db 'I'
3  9785
3  9786		  =0006					 pos = pos + 1
3  9787
3  9788
3  9789	    0C42  54							 db 'T'
3  9790
3  9791		  =0007					 pos = pos + 1
3  9792
3  9793
3  9794	    0C43  45							 db 'E'
3  9795
3  9796		  =0008					 pos = pos + 1
3  9797
3  9798
3  9799	    0C44  43							 db 'C'
3  9800
3  9801		  =0009					 pos = pos + 1
3  9802
3  9803
3  9804	    0C45  4F							 db 'O'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 173
msx_asm\tur_slib.ASM



3  9805
3  9806		  =000A					 pos = pos + 1
3  9807
3  9808
3  9809	    0C46  4C							 db 'L'
3  9810
3  9811		  =000B					 pos = pos + 1
3  9812
3  9813
3  9814	    0C47  4F							 db 'O'
3  9815
3  9816		  =000C					 pos = pos + 1
3  9817
3  9818	    0C48  D2					 db 'R'	+ 80h
3  9819
3  9820
3  9821		  =000D					 pos = pos + 1
3  9822
3  9823
3  9824
2  9825
1  9826	    0C49  0000e				  DW P_SPRITECOLOR
1  9827
1  9828						  DC 'SPRITEPATTERN'
2  9829
2  9830		  =000F				 strsize sizestr <'SPRITEPATTERN'>
2  9831		  =0000				 pos = 0
2  9832
2  9833						 irpc parameter,'SPRITEPATTERN'
2  9834							 pos = pos + 1
2  9835
2  9836							 if pos	EQ strsize - 1
2  9837							 db '&parameter' + 80h
2  9838							 endif
2  9839
2  9840							 if pos	GT 1
2  9841								 if pos	LT strsize -1
2  9842									 db '&parameter'
2  9843								 endif
2  9844							 endif
2  9845
2  9846						 endm
3  9847		  =0001					 pos = pos + 1
3  9848
3  9849
3  9850
3  9851		  =0002					 pos = pos + 1
3  9852
3  9853
3  9854	    0C4B  53							 db 'S'
3  9855
3  9856		  =0003					 pos = pos + 1
3  9857
3  9858
3  9859	    0C4C  50							 db 'P'
3  9860
3  9861		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 174
msx_asm\tur_slib.ASM



3  9862
3  9863
3  9864	    0C4D  52							 db 'R'
3  9865
3  9866		  =0005					 pos = pos + 1
3  9867
3  9868
3  9869	    0C4E  49							 db 'I'
3  9870
3  9871		  =0006					 pos = pos + 1
3  9872
3  9873
3  9874	    0C4F  54							 db 'T'
3  9875
3  9876		  =0007					 pos = pos + 1
3  9877
3  9878
3  9879	    0C50  45							 db 'E'
3  9880
3  9881		  =0008					 pos = pos + 1
3  9882
3  9883
3  9884	    0C51  50							 db 'P'
3  9885
3  9886		  =0009					 pos = pos + 1
3  9887
3  9888
3  9889	    0C52  41							 db 'A'
3  9890
3  9891		  =000A					 pos = pos + 1
3  9892
3  9893
3  9894	    0C53  54							 db 'T'
3  9895
3  9896		  =000B					 pos = pos + 1
3  9897
3  9898
3  9899	    0C54  54							 db 'T'
3  9900
3  9901		  =000C					 pos = pos + 1
3  9902
3  9903
3  9904	    0C55  45							 db 'E'
3  9905
3  9906		  =000D					 pos = pos + 1
3  9907
3  9908
3  9909	    0C56  52							 db 'R'
3  9910
3  9911		  =000E					 pos = pos + 1
3  9912
3  9913	    0C57  CE					 db 'N'	+ 80h
3  9914
3  9915
3  9916		  =000F					 pos = pos + 1
3  9917
3  9918
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 175
msx_asm\tur_slib.ASM



3  9919
2  9920
1  9921	    0C58  0000e				  DW P_SPRITEPATTERN
1  9922
1  9923						  DC 'SPRITEPATTERNADDRESS'
2  9924
2  9925		  =0016				 strsize sizestr <'SPRITEPATTERNADDRESS'>
2  9926		  =0000				 pos = 0
2  9927
2  9928						 irpc parameter,'SPRITEPATTERNADDRESS'
2  9929							 pos = pos + 1
2  9930
2  9931							 if pos	EQ strsize - 1
2  9932							 db '&parameter' + 80h
2  9933							 endif
2  9934
2  9935							 if pos	GT 1
2  9936								 if pos	LT strsize -1
2  9937									 db '&parameter'
2  9938								 endif
2  9939							 endif
2  9940
2  9941						 endm
3  9942		  =0001					 pos = pos + 1
3  9943
3  9944
3  9945
3  9946		  =0002					 pos = pos + 1
3  9947
3  9948
3  9949	    0C5A  53							 db 'S'
3  9950
3  9951		  =0003					 pos = pos + 1
3  9952
3  9953
3  9954	    0C5B  50							 db 'P'
3  9955
3  9956		  =0004					 pos = pos + 1
3  9957
3  9958
3  9959	    0C5C  52							 db 'R'
3  9960
3  9961		  =0005					 pos = pos + 1
3  9962
3  9963
3  9964	    0C5D  49							 db 'I'
3  9965
3  9966		  =0006					 pos = pos + 1
3  9967
3  9968
3  9969	    0C5E  54							 db 'T'
3  9970
3  9971		  =0007					 pos = pos + 1
3  9972
3  9973
3  9974	    0C5F  45							 db 'E'
3  9975
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 176
msx_asm\tur_slib.ASM



3  9976		  =0008					 pos = pos + 1
3  9977
3  9978
3  9979	    0C60  50							 db 'P'
3  9980
3  9981		  =0009					 pos = pos + 1
3  9982
3  9983
3  9984	    0C61  41							 db 'A'
3  9985
3  9986		  =000A					 pos = pos + 1
3  9987
3  9988
3  9989	    0C62  54							 db 'T'
3  9990
3  9991		  =000B					 pos = pos + 1
3  9992
3  9993
3  9994	    0C63  54							 db 'T'
3  9995
3  9996		  =000C					 pos = pos + 1
3  9997
3  9998
3  9999	    0C64  45							 db 'E'
3 10000
3 10001		  =000D					 pos = pos + 1
3 10002
3 10003
3 10004	    0C65  52							 db 'R'
3 10005
3 10006		  =000E					 pos = pos + 1
3 10007
3 10008
3 10009	    0C66  4E							 db 'N'
3 10010
3 10011		  =000F					 pos = pos + 1
3 10012
3 10013
3 10014	    0C67  41							 db 'A'
3 10015
3 10016		  =0010					 pos = pos + 1
3 10017
3 10018
3 10019	    0C68  44							 db 'D'
3 10020
3 10021		  =0011					 pos = pos + 1
3 10022
3 10023
3 10024	    0C69  44							 db 'D'
3 10025
3 10026		  =0012					 pos = pos + 1
3 10027
3 10028
3 10029	    0C6A  52							 db 'R'
3 10030
3 10031		  =0013					 pos = pos + 1
3 10032
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 177
msx_asm\tur_slib.ASM



3 10033
3 10034	    0C6B  45							 db 'E'
3 10035
3 10036		  =0014					 pos = pos + 1
3 10037
3 10038
3 10039	    0C6C  53							 db 'S'
3 10040
3 10041		  =0015					 pos = pos + 1
3 10042
3 10043	    0C6D  D3					 db 'S'	+ 80h
3 10044
3 10045
3 10046		  =0016					 pos = pos + 1
3 10047
3 10048
3 10049
2 10050
1 10051	    0C6E  0000e				  DW P_SPRITEPATTERNADDRESS
1 10052
1 10053						  DC 'SPRITESIZE'
2 10054
2 10055		  =000C				 strsize sizestr <'SPRITESIZE'>
2 10056		  =0000				 pos = 0
2 10057
2 10058						 irpc parameter,'SPRITESIZE'
2 10059							 pos = pos + 1
2 10060
2 10061							 if pos	EQ strsize - 1
2 10062							 db '&parameter' + 80h
2 10063							 endif
2 10064
2 10065							 if pos	GT 1
2 10066								 if pos	LT strsize -1
2 10067									 db '&parameter'
2 10068								 endif
2 10069							 endif
2 10070
2 10071						 endm
3 10072		  =0001					 pos = pos + 1
3 10073
3 10074
3 10075
3 10076		  =0002					 pos = pos + 1
3 10077
3 10078
3 10079	    0C70  53							 db 'S'
3 10080
3 10081		  =0003					 pos = pos + 1
3 10082
3 10083
3 10084	    0C71  50							 db 'P'
3 10085
3 10086		  =0004					 pos = pos + 1
3 10087
3 10088
3 10089	    0C72  52							 db 'R'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 178
msx_asm\tur_slib.ASM



3 10090
3 10091		  =0005					 pos = pos + 1
3 10092
3 10093
3 10094	    0C73  49							 db 'I'
3 10095
3 10096		  =0006					 pos = pos + 1
3 10097
3 10098
3 10099	    0C74  54							 db 'T'
3 10100
3 10101		  =0007					 pos = pos + 1
3 10102
3 10103
3 10104	    0C75  45							 db 'E'
3 10105
3 10106		  =0008					 pos = pos + 1
3 10107
3 10108
3 10109	    0C76  53							 db 'S'
3 10110
3 10111		  =0009					 pos = pos + 1
3 10112
3 10113
3 10114	    0C77  49							 db 'I'
3 10115
3 10116		  =000A					 pos = pos + 1
3 10117
3 10118
3 10119	    0C78  5A							 db 'Z'
3 10120
3 10121		  =000B					 pos = pos + 1
3 10122
3 10123	    0C79  C5					 db 'E'	+ 80h
3 10124
3 10125
3 10126		  =000C					 pos = pos + 1
3 10127
3 10128
3 10129
2 10130
1 10131	    0C7A  0000e				  DW P_SPRITESIZE
1 10132
1 10133						  DC 'SPRITESOFF'
2 10134
2 10135		  =000C				 strsize sizestr <'SPRITESOFF'>
2 10136		  =0000				 pos = 0
2 10137
2 10138						 irpc parameter,'SPRITESOFF'
2 10139							 pos = pos + 1
2 10140
2 10141							 if pos	EQ strsize - 1
2 10142							 db '&parameter' + 80h
2 10143							 endif
2 10144
2 10145							 if pos	GT 1
2 10146								 if pos	LT strsize -1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 179
msx_asm\tur_slib.ASM



2 10147									 db '&parameter'
2 10148								 endif
2 10149							 endif
2 10150
2 10151						 endm
3 10152		  =0001					 pos = pos + 1
3 10153
3 10154
3 10155
3 10156		  =0002					 pos = pos + 1
3 10157
3 10158
3 10159	    0C7C  53							 db 'S'
3 10160
3 10161		  =0003					 pos = pos + 1
3 10162
3 10163
3 10164	    0C7D  50							 db 'P'
3 10165
3 10166		  =0004					 pos = pos + 1
3 10167
3 10168
3 10169	    0C7E  52							 db 'R'
3 10170
3 10171		  =0005					 pos = pos + 1
3 10172
3 10173
3 10174	    0C7F  49							 db 'I'
3 10175
3 10176		  =0006					 pos = pos + 1
3 10177
3 10178
3 10179	    0C80  54							 db 'T'
3 10180
3 10181		  =0007					 pos = pos + 1
3 10182
3 10183
3 10184	    0C81  45							 db 'E'
3 10185
3 10186		  =0008					 pos = pos + 1
3 10187
3 10188
3 10189	    0C82  53							 db 'S'
3 10190
3 10191		  =0009					 pos = pos + 1
3 10192
3 10193
3 10194	    0C83  4F							 db 'O'
3 10195
3 10196		  =000A					 pos = pos + 1
3 10197
3 10198
3 10199	    0C84  46							 db 'F'
3 10200
3 10201		  =000B					 pos = pos + 1
3 10202
3 10203	    0C85  C6					 db 'F'	+ 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 180
msx_asm\tur_slib.ASM



3 10204
3 10205
3 10206		  =000C					 pos = pos + 1
3 10207
3 10208
3 10209
2 10210
1 10211	    0C86  0000e				  DW P_SPRITESOFF
1 10212
1 10213						  DC 'SPRITESON'
2 10214
2 10215		  =000B				 strsize sizestr <'SPRITESON'>
2 10216		  =0000				 pos = 0
2 10217
2 10218						 irpc parameter,'SPRITESON'
2 10219							 pos = pos + 1
2 10220
2 10221							 if pos	EQ strsize - 1
2 10222							 db '&parameter' + 80h
2 10223							 endif
2 10224
2 10225							 if pos	GT 1
2 10226								 if pos	LT strsize -1
2 10227									 db '&parameter'
2 10228								 endif
2 10229							 endif
2 10230
2 10231						 endm
3 10232		  =0001					 pos = pos + 1
3 10233
3 10234
3 10235
3 10236		  =0002					 pos = pos + 1
3 10237
3 10238
3 10239	    0C88  53							 db 'S'
3 10240
3 10241		  =0003					 pos = pos + 1
3 10242
3 10243
3 10244	    0C89  50							 db 'P'
3 10245
3 10246		  =0004					 pos = pos + 1
3 10247
3 10248
3 10249	    0C8A  52							 db 'R'
3 10250
3 10251		  =0005					 pos = pos + 1
3 10252
3 10253
3 10254	    0C8B  49							 db 'I'
3 10255
3 10256		  =0006					 pos = pos + 1
3 10257
3 10258
3 10259	    0C8C  54							 db 'T'
3 10260
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 181
msx_asm\tur_slib.ASM



3 10261		  =0007					 pos = pos + 1
3 10262
3 10263
3 10264	    0C8D  45							 db 'E'
3 10265
3 10266		  =0008					 pos = pos + 1
3 10267
3 10268
3 10269	    0C8E  53							 db 'S'
3 10270
3 10271		  =0009					 pos = pos + 1
3 10272
3 10273
3 10274	    0C8F  4F							 db 'O'
3 10275
3 10276		  =000A					 pos = pos + 1
3 10277
3 10278	    0C90  CE					 db 'N'	+ 80h
3 10279
3 10280
3 10281		  =000B					 pos = pos + 1
3 10282
3 10283
3 10284
2 10285
1 10286	    0C91  0000e				  DW P_SPRITESON
1 10287
1 10288						  DC 'TIME'
2 10289
2 10290		  =0006				 strsize sizestr <'TIME'>
2 10291		  =0000				 pos = 0
2 10292
2 10293						 irpc parameter,'TIME'
2 10294							 pos = pos + 1
2 10295
2 10296							 if pos	EQ strsize - 1
2 10297							 db '&parameter' + 80h
2 10298							 endif
2 10299
2 10300							 if pos	GT 1
2 10301								 if pos	LT strsize -1
2 10302									 db '&parameter'
2 10303								 endif
2 10304							 endif
2 10305
2 10306						 endm
3 10307		  =0001					 pos = pos + 1
3 10308
3 10309
3 10310
3 10311		  =0002					 pos = pos + 1
3 10312
3 10313
3 10314	    0C93  54							 db 'T'
3 10315
3 10316		  =0003					 pos = pos + 1
3 10317
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 182
msx_asm\tur_slib.ASM



3 10318
3 10319	    0C94  49							 db 'I'
3 10320
3 10321		  =0004					 pos = pos + 1
3 10322
3 10323
3 10324	    0C95  4D							 db 'M'
3 10325
3 10326		  =0005					 pos = pos + 1
3 10327
3 10328	    0C96  C5					 db 'E'	+ 80h
3 10329
3 10330
3 10331		  =0006					 pos = pos + 1
3 10332
3 10333
3 10334
2 10335
1 10336	    0C97  0000e				  DW P_TIME
1 10337
1 10338					 ;	   DC 'UNCRUNCH'
1 10339					 ;	   DW P_UNCRUNCH
1 10340
1 10341						  DC 'VPOKE'
2 10342
2 10343		  =0007				 strsize sizestr <'VPOKE'>
2 10344		  =0000				 pos = 0
2 10345
2 10346						 irpc parameter,'VPOKE'
2 10347							 pos = pos + 1
2 10348
2 10349							 if pos	EQ strsize - 1
2 10350							 db '&parameter' + 80h
2 10351							 endif
2 10352
2 10353							 if pos	GT 1
2 10354								 if pos	LT strsize -1
2 10355									 db '&parameter'
2 10356								 endif
2 10357							 endif
2 10358
2 10359						 endm
3 10360		  =0001					 pos = pos + 1
3 10361
3 10362
3 10363
3 10364		  =0002					 pos = pos + 1
3 10365
3 10366
3 10367	    0C99  56							 db 'V'
3 10368
3 10369		  =0003					 pos = pos + 1
3 10370
3 10371
3 10372	    0C9A  50							 db 'P'
3 10373
3 10374		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 183
msx_asm\tur_slib.ASM



3 10375
3 10376
3 10377	    0C9B  4F							 db 'O'
3 10378
3 10379		  =0005					 pos = pos + 1
3 10380
3 10381
3 10382	    0C9C  4B							 db 'K'
3 10383
3 10384		  =0006					 pos = pos + 1
3 10385
3 10386	    0C9D  C5					 db 'E'	+ 80h
3 10387
3 10388
3 10389		  =0007					 pos = pos + 1
3 10390
3 10391
3 10392
2 10393
1 10394	    0C9E  0000e				  DW P_VPOKE
1 10395
1 10396						  DC 'WAITVDP'
2 10397
2 10398		  =0009				 strsize sizestr <'WAITVDP'>
2 10399		  =0000				 pos = 0
2 10400
2 10401						 irpc parameter,'WAITVDP'
2 10402							 pos = pos + 1
2 10403
2 10404							 if pos	EQ strsize - 1
2 10405							 db '&parameter' + 80h
2 10406							 endif
2 10407
2 10408							 if pos	GT 1
2 10409								 if pos	LT strsize -1
2 10410									 db '&parameter'
2 10411								 endif
2 10412							 endif
2 10413
2 10414						 endm
3 10415		  =0001					 pos = pos + 1
3 10416
3 10417
3 10418
3 10419		  =0002					 pos = pos + 1
3 10420
3 10421
3 10422	    0CA0  57							 db 'W'
3 10423
3 10424		  =0003					 pos = pos + 1
3 10425
3 10426
3 10427	    0CA1  41							 db 'A'
3 10428
3 10429		  =0004					 pos = pos + 1
3 10430
3 10431
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 184
msx_asm\tur_slib.ASM



3 10432	    0CA2  49							 db 'I'
3 10433
3 10434		  =0005					 pos = pos + 1
3 10435
3 10436
3 10437	    0CA3  54							 db 'T'
3 10438
3 10439		  =0006					 pos = pos + 1
3 10440
3 10441
3 10442	    0CA4  56							 db 'V'
3 10443
3 10444		  =0007					 pos = pos + 1
3 10445
3 10446
3 10447	    0CA5  44							 db 'D'
3 10448
3 10449		  =0008					 pos = pos + 1
3 10450
3 10451	    0CA6  D0					 db 'P'	+ 80h
3 10452
3 10453
3 10454		  =0009					 pos = pos + 1
3 10455
3 10456
3 10457
2 10458
1 10459	    0CA7  0000e				  DW P_WAITVDP
1 10460
1 10461						  DC 'WRITEMEM'
2 10462
2 10463		  =000A				 strsize sizestr <'WRITEMEM'>
2 10464		  =0000				 pos = 0
2 10465
2 10466						 irpc parameter,'WRITEMEM'
2 10467							 pos = pos + 1
2 10468
2 10469							 if pos	EQ strsize - 1
2 10470							 db '&parameter' + 80h
2 10471							 endif
2 10472
2 10473							 if pos	GT 1
2 10474								 if pos	LT strsize -1
2 10475									 db '&parameter'
2 10476								 endif
2 10477							 endif
2 10478
2 10479						 endm
3 10480		  =0001					 pos = pos + 1
3 10481
3 10482
3 10483
3 10484		  =0002					 pos = pos + 1
3 10485
3 10486
3 10487	    0CA9  57							 db 'W'
3 10488
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 185
msx_asm\tur_slib.ASM



3 10489		  =0003					 pos = pos + 1
3 10490
3 10491
3 10492	    0CAA  52							 db 'R'
3 10493
3 10494		  =0004					 pos = pos + 1
3 10495
3 10496
3 10497	    0CAB  49							 db 'I'
3 10498
3 10499		  =0005					 pos = pos + 1
3 10500
3 10501
3 10502	    0CAC  54							 db 'T'
3 10503
3 10504		  =0006					 pos = pos + 1
3 10505
3 10506
3 10507	    0CAD  45							 db 'E'
3 10508
3 10509		  =0007					 pos = pos + 1
3 10510
3 10511
3 10512	    0CAE  4D							 db 'M'
3 10513
3 10514		  =0008					 pos = pos + 1
3 10515
3 10516
3 10517	    0CAF  45							 db 'E'
3 10518
3 10519		  =0009					 pos = pos + 1
3 10520
3 10521	    0CB0  CD					 db 'M'	+ 80h
3 10522
3 10523
3 10524		  =000A					 pos = pos + 1
3 10525
3 10526
3 10527
2 10528
1 10529	    0CB1  0000e				  DW P_WRITEMEM
1 10530
1 10531						  DC 'WRITESECTOR'
2 10532
2 10533		  =000D				 strsize sizestr <'WRITESECTOR'>
2 10534		  =0000				 pos = 0
2 10535
2 10536						 irpc parameter,'WRITESECTOR'
2 10537							 pos = pos + 1
2 10538
2 10539							 if pos	EQ strsize - 1
2 10540							 db '&parameter' + 80h
2 10541							 endif
2 10542
2 10543							 if pos	GT 1
2 10544								 if pos	LT strsize -1
2 10545									 db '&parameter'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 186
msx_asm\tur_slib.ASM



2 10546								 endif
2 10547							 endif
2 10548
2 10549						 endm
3 10550		  =0001					 pos = pos + 1
3 10551
3 10552
3 10553
3 10554		  =0002					 pos = pos + 1
3 10555
3 10556
3 10557	    0CB3  57							 db 'W'
3 10558
3 10559		  =0003					 pos = pos + 1
3 10560
3 10561
3 10562	    0CB4  52							 db 'R'
3 10563
3 10564		  =0004					 pos = pos + 1
3 10565
3 10566
3 10567	    0CB5  49							 db 'I'
3 10568
3 10569		  =0005					 pos = pos + 1
3 10570
3 10571
3 10572	    0CB6  54							 db 'T'
3 10573
3 10574		  =0006					 pos = pos + 1
3 10575
3 10576
3 10577	    0CB7  45							 db 'E'
3 10578
3 10579		  =0007					 pos = pos + 1
3 10580
3 10581
3 10582	    0CB8  53							 db 'S'
3 10583
3 10584		  =0008					 pos = pos + 1
3 10585
3 10586
3 10587	    0CB9  45							 db 'E'
3 10588
3 10589		  =0009					 pos = pos + 1
3 10590
3 10591
3 10592	    0CBA  43							 db 'C'
3 10593
3 10594		  =000A					 pos = pos + 1
3 10595
3 10596
3 10597	    0CBB  54							 db 'T'
3 10598
3 10599		  =000B					 pos = pos + 1
3 10600
3 10601
3 10602	    0CBC  4F							 db 'O'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 187
msx_asm\tur_slib.ASM



3 10603
3 10604		  =000C					 pos = pos + 1
3 10605
3 10606	    0CBD  D2					 db 'R'	+ 80h
3 10607
3 10608
3 10609		  =000D					 pos = pos + 1
3 10610
3 10611
3 10612
2 10613
1 10614	    0CBE  0000e				  DW P_WRITESECTOR
1 10615
1 10616						  DC 'WRITEVDP'
2 10617
2 10618		  =000A				 strsize sizestr <'WRITEVDP'>
2 10619		  =0000				 pos = 0
2 10620
2 10621						 irpc parameter,'WRITEVDP'
2 10622							 pos = pos + 1
2 10623
2 10624							 if pos	EQ strsize - 1
2 10625							 db '&parameter' + 80h
2 10626							 endif
2 10627
2 10628							 if pos	GT 1
2 10629								 if pos	LT strsize -1
2 10630									 db '&parameter'
2 10631								 endif
2 10632							 endif
2 10633
2 10634						 endm
3 10635		  =0001					 pos = pos + 1
3 10636
3 10637
3 10638
3 10639		  =0002					 pos = pos + 1
3 10640
3 10641
3 10642	    0CC0  57							 db 'W'
3 10643
3 10644		  =0003					 pos = pos + 1
3 10645
3 10646
3 10647	    0CC1  52							 db 'R'
3 10648
3 10649		  =0004					 pos = pos + 1
3 10650
3 10651
3 10652	    0CC2  49							 db 'I'
3 10653
3 10654		  =0005					 pos = pos + 1
3 10655
3 10656
3 10657	    0CC3  54							 db 'T'
3 10658
3 10659		  =0006					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 188
msx_asm\tur_slib.ASM



3 10660
3 10661
3 10662	    0CC4  45							 db 'E'
3 10663
3 10664		  =0007					 pos = pos + 1
3 10665
3 10666
3 10667	    0CC5  56							 db 'V'
3 10668
3 10669		  =0008					 pos = pos + 1
3 10670
3 10671
3 10672	    0CC6  44							 db 'D'
3 10673
3 10674		  =0009					 pos = pos + 1
3 10675
3 10676	    0CC7  D0					 db 'P'	+ 80h
3 10677
3 10678
3 10679		  =000A					 pos = pos + 1
3 10680
3 10681
3 10682
2 10683
1 10684	    0CC8  0000e				  DW P_WRITEVDP
1 10685
1 10686	    0CCA  00				  DB 0			     ; end of this table
1 10687
1 10688
1 10689	    0CCB			 L77B1:	  ; Functions
1 10690						  DC 'CHR'		     ; 1x list
2 10691
2 10692		  =0005				 strsize sizestr <'CHR'>
2 10693		  =0000				 pos = 0
2 10694
2 10695						 irpc parameter,'CHR'
2 10696							 pos = pos + 1
2 10697
2 10698							 if pos	EQ strsize - 1
2 10699							 db '&parameter' + 80h
2 10700							 endif
2 10701
2 10702							 if pos	GT 1
2 10703								 if pos	LT strsize -1
2 10704									 db '&parameter'
2 10705								 endif
2 10706							 endif
2 10707
2 10708						 endm
3 10709		  =0001					 pos = pos + 1
3 10710
3 10711
3 10712
3 10713		  =0002					 pos = pos + 1
3 10714
3 10715
3 10716	    0CCB  43							 db 'C'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 189
msx_asm\tur_slib.ASM



3 10717
3 10718		  =0003					 pos = pos + 1
3 10719
3 10720
3 10721	    0CCC  48							 db 'H'
3 10722
3 10723		  =0004					 pos = pos + 1
3 10724
3 10725	    0CCD  D2					 db 'R'	+ 80h
3 10726
3 10727
3 10728		  =0005					 pos = pos + 1
3 10729
3 10730
3 10731
2 10732
1 10733	    0CCE  06A3r				  DW L6425		     ; OK
1 10734
1 10735						 DC 'ORD'
2 10736
2 10737		  =0005				 strsize sizestr <'ORD'>
2 10738		  =0000				 pos = 0
2 10739
2 10740						 irpc parameter,'ORD'
2 10741							 pos = pos + 1
2 10742
2 10743							 if pos	EQ strsize - 1
2 10744							 db '&parameter' + 80h
2 10745							 endif
2 10746
2 10747							 if pos	GT 1
2 10748								 if pos	LT strsize -1
2 10749									 db '&parameter'
2 10750								 endif
2 10751							 endif
2 10752
2 10753						 endm
3 10754		  =0001					 pos = pos + 1
3 10755
3 10756
3 10757
3 10758		  =0002					 pos = pos + 1
3 10759
3 10760
3 10761	    0CD0  4F							 db 'O'
3 10762
3 10763		  =0003					 pos = pos + 1
3 10764
3 10765
3 10766	    0CD1  52							 db 'R'
3 10767
3 10768		  =0004					 pos = pos + 1
3 10769
3 10770	    0CD2  C4					 db 'D'	+ 80h
3 10771
3 10772
3 10773		  =0005					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 190
msx_asm\tur_slib.ASM



3 10774
3 10775
3 10776
2 10777
1 10778	    0CD3  068Dr				  DW L6411		     ; OK
1 10779
1 10780						 DC 'COPY'
2 10781
2 10782		  =0006				 strsize sizestr <'COPY'>
2 10783		  =0000				 pos = 0
2 10784
2 10785						 irpc parameter,'COPY'
2 10786							 pos = pos + 1
2 10787
2 10788							 if pos	EQ strsize - 1
2 10789							 db '&parameter' + 80h
2 10790							 endif
2 10791
2 10792							 if pos	GT 1
2 10793								 if pos	LT strsize -1
2 10794									 db '&parameter'
2 10795								 endif
2 10796							 endif
2 10797
2 10798						 endm
3 10799		  =0001					 pos = pos + 1
3 10800
3 10801
3 10802
3 10803		  =0002					 pos = pos + 1
3 10804
3 10805
3 10806	    0CD5  43							 db 'C'
3 10807
3 10808		  =0003					 pos = pos + 1
3 10809
3 10810
3 10811	    0CD6  4F							 db 'O'
3 10812
3 10813		  =0004					 pos = pos + 1
3 10814
3 10815
3 10816	    0CD7  50							 db 'P'
3 10817
3 10818		  =0005					 pos = pos + 1
3 10819
3 10820	    0CD8  D9					 db 'Y'	+ 80h
3 10821
3 10822
3 10823		  =0006					 pos = pos + 1
3 10824
3 10825
3 10826
2 10827
1 10828	    0CD9  06E3r				  DW L6460		     ; OK
1 10829
1 10830						 DC 'LENGTH'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 191
msx_asm\tur_slib.ASM



2 10831
2 10832		  =0008				 strsize sizestr <'LENGTH'>
2 10833		  =0000				 pos = 0
2 10834
2 10835						 irpc parameter,'LENGTH'
2 10836							 pos = pos + 1
2 10837
2 10838							 if pos	EQ strsize - 1
2 10839							 db '&parameter' + 80h
2 10840							 endif
2 10841
2 10842							 if pos	GT 1
2 10843								 if pos	LT strsize -1
2 10844									 db '&parameter'
2 10845								 endif
2 10846							 endif
2 10847
2 10848						 endm
3 10849		  =0001					 pos = pos + 1
3 10850
3 10851
3 10852
3 10853		  =0002					 pos = pos + 1
3 10854
3 10855
3 10856	    0CDB  4C							 db 'L'
3 10857
3 10858		  =0003					 pos = pos + 1
3 10859
3 10860
3 10861	    0CDC  45							 db 'E'
3 10862
3 10863		  =0004					 pos = pos + 1
3 10864
3 10865
3 10866	    0CDD  4E							 db 'N'
3 10867
3 10868		  =0005					 pos = pos + 1
3 10869
3 10870
3 10871	    0CDE  47							 db 'G'
3 10872
3 10873		  =0006					 pos = pos + 1
3 10874
3 10875
3 10876	    0CDF  54							 db 'T'
3 10877
3 10878		  =0007					 pos = pos + 1
3 10879
3 10880	    0CE0  C8					 db 'H'	+ 80h
3 10881
3 10882
3 10883		  =0008					 pos = pos + 1
3 10884
3 10885
3 10886
2 10887
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 192
msx_asm\tur_slib.ASM



1 10888	    0CE1  06C4r				  DW L6441		     ; OK
1 10889
1 10890						 DC 'POS'
2 10891
2 10892		  =0005				 strsize sizestr <'POS'>
2 10893		  =0000				 pos = 0
2 10894
2 10895						 irpc parameter,'POS'
2 10896							 pos = pos + 1
2 10897
2 10898							 if pos	EQ strsize - 1
2 10899							 db '&parameter' + 80h
2 10900							 endif
2 10901
2 10902							 if pos	GT 1
2 10903								 if pos	LT strsize -1
2 10904									 db '&parameter'
2 10905								 endif
2 10906							 endif
2 10907
2 10908						 endm
3 10909		  =0001					 pos = pos + 1
3 10910
3 10911
3 10912
3 10913		  =0002					 pos = pos + 1
3 10914
3 10915
3 10916	    0CE3  50							 db 'P'
3 10917
3 10918		  =0003					 pos = pos + 1
3 10919
3 10920
3 10921	    0CE4  4F							 db 'O'
3 10922
3 10923		  =0004					 pos = pos + 1
3 10924
3 10925	    0CE5  D3					 db 'S'	+ 80h
3 10926
3 10927
3 10928		  =0005					 pos = pos + 1
3 10929
3 10930
3 10931
2 10932
1 10933	    0CE6  06D5r				  DW L6452		     ; OK
1 10934
1 10935						 DC 'CONCAT'
2 10936
2 10937		  =0008				 strsize sizestr <'CONCAT'>
2 10938		  =0000				 pos = 0
2 10939
2 10940						 irpc parameter,'CONCAT'
2 10941							 pos = pos + 1
2 10942
2 10943							 if pos	EQ strsize - 1
2 10944							 db '&parameter' + 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 193
msx_asm\tur_slib.ASM



2 10945							 endif
2 10946
2 10947							 if pos	GT 1
2 10948								 if pos	LT strsize -1
2 10949									 db '&parameter'
2 10950								 endif
2 10951							 endif
2 10952
2 10953						 endm
3 10954		  =0001					 pos = pos + 1
3 10955
3 10956
3 10957
3 10958		  =0002					 pos = pos + 1
3 10959
3 10960
3 10961	    0CE8  43							 db 'C'
3 10962
3 10963		  =0003					 pos = pos + 1
3 10964
3 10965
3 10966	    0CE9  4F							 db 'O'
3 10967
3 10968		  =0004					 pos = pos + 1
3 10969
3 10970
3 10971	    0CEA  4E							 db 'N'
3 10972
3 10973		  =0005					 pos = pos + 1
3 10974
3 10975
3 10976	    0CEB  43							 db 'C'
3 10977
3 10978		  =0006					 pos = pos + 1
3 10979
3 10980
3 10981	    0CEC  41							 db 'A'
3 10982
3 10983		  =0007					 pos = pos + 1
3 10984
3 10985	    0CED  D4					 db 'T'	+ 80h
3 10986
3 10987
3 10988		  =0008					 pos = pos + 1
3 10989
3 10990
3 10991
2 10992
1 10993	    0CEE  0704r				  DW L6481		     ; OK
1 10994
1 10995						 DC 'SUCC'
2 10996
2 10997		  =0006				 strsize sizestr <'SUCC'>
2 10998		  =0000				 pos = 0
2 10999
2 11000						 irpc parameter,'SUCC'
2 11001							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 194
msx_asm\tur_slib.ASM



2 11002
2 11003							 if pos	EQ strsize - 1
2 11004							 db '&parameter' + 80h
2 11005							 endif
2 11006
2 11007							 if pos	GT 1
2 11008								 if pos	LT strsize -1
2 11009									 db '&parameter'
2 11010								 endif
2 11011							 endif
2 11012
2 11013						 endm
3 11014		  =0001					 pos = pos + 1
3 11015
3 11016
3 11017
3 11018		  =0002					 pos = pos + 1
3 11019
3 11020
3 11021	    0CF0  53							 db 'S'
3 11022
3 11023		  =0003					 pos = pos + 1
3 11024
3 11025
3 11026	    0CF1  55							 db 'U'
3 11027
3 11028		  =0004					 pos = pos + 1
3 11029
3 11030
3 11031	    0CF2  43							 db 'C'
3 11032
3 11033		  =0005					 pos = pos + 1
3 11034
3 11035	    0CF3  C3					 db 'C'	+ 80h
3 11036
3 11037
3 11038		  =0006					 pos = pos + 1
3 11039
3 11040
3 11041
2 11042
1 11043	    0CF4  060Dr				  DW L63D4		     ; OK
1 11044
1 11045						 DC 'PRED'
2 11046
2 11047		  =0006				 strsize sizestr <'PRED'>
2 11048		  =0000				 pos = 0
2 11049
2 11050						 irpc parameter,'PRED'
2 11051							 pos = pos + 1
2 11052
2 11053							 if pos	EQ strsize - 1
2 11054							 db '&parameter' + 80h
2 11055							 endif
2 11056
2 11057							 if pos	GT 1
2 11058								 if pos	LT strsize -1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 195
msx_asm\tur_slib.ASM



2 11059									 db '&parameter'
2 11060								 endif
2 11061							 endif
2 11062
2 11063						 endm
3 11064		  =0001					 pos = pos + 1
3 11065
3 11066
3 11067
3 11068		  =0002					 pos = pos + 1
3 11069
3 11070
3 11071	    0CF6  50							 db 'P'
3 11072
3 11073		  =0003					 pos = pos + 1
3 11074
3 11075
3 11076	    0CF7  52							 db 'R'
3 11077
3 11078		  =0004					 pos = pos + 1
3 11079
3 11080
3 11081	    0CF8  45							 db 'E'
3 11082
3 11083		  =0005					 pos = pos + 1
3 11084
3 11085	    0CF9  C4					 db 'D'	+ 80h
3 11086
3 11087
3 11088		  =0006					 pos = pos + 1
3 11089
3 11090
3 11091
2 11092
1 11093	    0CFA  0622r				  DW L63D7		     ; OK
1 11094
1 11095						 DC 'UPCASE'
2 11096
2 11097		  =0008				 strsize sizestr <'UPCASE'>
2 11098		  =0000				 pos = 0
2 11099
2 11100						 irpc parameter,'UPCASE'
2 11101							 pos = pos + 1
2 11102
2 11103							 if pos	EQ strsize - 1
2 11104							 db '&parameter' + 80h
2 11105							 endif
2 11106
2 11107							 if pos	GT 1
2 11108								 if pos	LT strsize -1
2 11109									 db '&parameter'
2 11110								 endif
2 11111							 endif
2 11112
2 11113						 endm
3 11114		  =0001					 pos = pos + 1
3 11115
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 196
msx_asm\tur_slib.ASM



3 11116
3 11117
3 11118		  =0002					 pos = pos + 1
3 11119
3 11120
3 11121	    0CFC  55							 db 'U'
3 11122
3 11123		  =0003					 pos = pos + 1
3 11124
3 11125
3 11126	    0CFD  50							 db 'P'
3 11127
3 11128		  =0004					 pos = pos + 1
3 11129
3 11130
3 11131	    0CFE  43							 db 'C'
3 11132
3 11133		  =0005					 pos = pos + 1
3 11134
3 11135
3 11136	    0CFF  41							 db 'A'
3 11137
3 11138		  =0006					 pos = pos + 1
3 11139
3 11140
3 11141	    0D00  53							 db 'S'
3 11142
3 11143		  =0007					 pos = pos + 1
3 11144
3 11145	    0D01  C5					 db 'E'	+ 80h
3 11146
3 11147
3 11148		  =0008					 pos = pos + 1
3 11149
3 11150
3 11151
2 11152
1 11153	    0D02  06B7r				  DW L6437		     ; OK
1 11154
1 11155						 DC 'TRUNC'
2 11156
2 11157		  =0007				 strsize sizestr <'TRUNC'>
2 11158		  =0000				 pos = 0
2 11159
2 11160						 irpc parameter,'TRUNC'
2 11161							 pos = pos + 1
2 11162
2 11163							 if pos	EQ strsize - 1
2 11164							 db '&parameter' + 80h
2 11165							 endif
2 11166
2 11167							 if pos	GT 1
2 11168								 if pos	LT strsize -1
2 11169									 db '&parameter'
2 11170								 endif
2 11171							 endif
2 11172
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 197
msx_asm\tur_slib.ASM



2 11173						 endm
3 11174		  =0001					 pos = pos + 1
3 11175
3 11176
3 11177
3 11178		  =0002					 pos = pos + 1
3 11179
3 11180
3 11181	    0D04  54							 db 'T'
3 11182
3 11183		  =0003					 pos = pos + 1
3 11184
3 11185
3 11186	    0D05  52							 db 'R'
3 11187
3 11188		  =0004					 pos = pos + 1
3 11189
3 11190
3 11191	    0D06  55							 db 'U'
3 11192
3 11193		  =0005					 pos = pos + 1
3 11194
3 11195
3 11196	    0D07  4E							 db 'N'
3 11197
3 11198		  =0006					 pos = pos + 1
3 11199
3 11200	    0D08  C3					 db 'C'	+ 80h
3 11201
3 11202
3 11203		  =0007					 pos = pos + 1
3 11204
3 11205
3 11206
2 11207
1 11208	    0D09  05F4r				  DW L63BE		     ; OK
1 11209
1 11210						 DC 'ROUND'
2 11211
2 11212		  =0007				 strsize sizestr <'ROUND'>
2 11213		  =0000				 pos = 0
2 11214
2 11215						 irpc parameter,'ROUND'
2 11216							 pos = pos + 1
2 11217
2 11218							 if pos	EQ strsize - 1
2 11219							 db '&parameter' + 80h
2 11220							 endif
2 11221
2 11222							 if pos	GT 1
2 11223								 if pos	LT strsize -1
2 11224									 db '&parameter'
2 11225								 endif
2 11226							 endif
2 11227
2 11228						 endm
3 11229		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 198
msx_asm\tur_slib.ASM



3 11230
3 11231
3 11232
3 11233		  =0002					 pos = pos + 1
3 11234
3 11235
3 11236	    0D0B  52							 db 'R'
3 11237
3 11238		  =0003					 pos = pos + 1
3 11239
3 11240
3 11241	    0D0C  4F							 db 'O'
3 11242
3 11243		  =0004					 pos = pos + 1
3 11244
3 11245
3 11246	    0D0D  55							 db 'U'
3 11247
3 11248		  =0005					 pos = pos + 1
3 11249
3 11250
3 11251	    0D0E  4E							 db 'N'
3 11252
3 11253		  =0006					 pos = pos + 1
3 11254
3 11255	    0D0F  C4					 db 'D'	+ 80h
3 11256
3 11257
3 11258		  =0007					 pos = pos + 1
3 11259
3 11260
3 11261
2 11262
1 11263	    0D10  05F9r				  DW L63C3		     ; OK
1 11264
1 11265						 DC 'ODD'
2 11266
2 11267		  =0005				 strsize sizestr <'ODD'>
2 11268		  =0000				 pos = 0
2 11269
2 11270						 irpc parameter,'ODD'
2 11271							 pos = pos + 1
2 11272
2 11273							 if pos	EQ strsize - 1
2 11274							 db '&parameter' + 80h
2 11275							 endif
2 11276
2 11277							 if pos	GT 1
2 11278								 if pos	LT strsize -1
2 11279									 db '&parameter'
2 11280								 endif
2 11281							 endif
2 11282
2 11283						 endm
3 11284		  =0001					 pos = pos + 1
3 11285
3 11286
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 199
msx_asm\tur_slib.ASM



3 11287
3 11288		  =0002					 pos = pos + 1
3 11289
3 11290
3 11291	    0D12  4F							 db 'O'
3 11292
3 11293		  =0003					 pos = pos + 1
3 11294
3 11295
3 11296	    0D13  44							 db 'D'
3 11297
3 11298		  =0004					 pos = pos + 1
3 11299
3 11300	    0D14  C4					 db 'D'	+ 80h
3 11301
3 11302
3 11303		  =0005					 pos = pos + 1
3 11304
3 11305
3 11306
2 11307
1 11308	    0D15  067Br				  DW L6401		     ; OK
1 11309
1 11310						  DC 'ABS'
2 11311
2 11312		  =0005				 strsize sizestr <'ABS'>
2 11313		  =0000				 pos = 0
2 11314
2 11315						 irpc parameter,'ABS'
2 11316							 pos = pos + 1
2 11317
2 11318							 if pos	EQ strsize - 1
2 11319							 db '&parameter' + 80h
2 11320							 endif
2 11321
2 11322							 if pos	GT 1
2 11323								 if pos	LT strsize -1
2 11324									 db '&parameter'
2 11325								 endif
2 11326							 endif
2 11327
2 11328						 endm
3 11329		  =0001					 pos = pos + 1
3 11330
3 11331
3 11332
3 11333		  =0002					 pos = pos + 1
3 11334
3 11335
3 11336	    0D17  41							 db 'A'
3 11337
3 11338		  =0003					 pos = pos + 1
3 11339
3 11340
3 11341	    0D18  42							 db 'B'
3 11342
3 11343		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 200
msx_asm\tur_slib.ASM



3 11344
3 11345	    0D19  D3					 db 'S'	+ 80h
3 11346
3 11347
3 11348		  =0005					 pos = pos + 1
3 11349
3 11350
3 11351
2 11352
1 11353	    0D1A  0592r				  DW L6371		     ; OK
1 11354
1 11355						 DC 'SQR'
2 11356
2 11357		  =0005				 strsize sizestr <'SQR'>
2 11358		  =0000				 pos = 0
2 11359
2 11360						 irpc parameter,'SQR'
2 11361							 pos = pos + 1
2 11362
2 11363							 if pos	EQ strsize - 1
2 11364							 db '&parameter' + 80h
2 11365							 endif
2 11366
2 11367							 if pos	GT 1
2 11368								 if pos	LT strsize -1
2 11369									 db '&parameter'
2 11370								 endif
2 11371							 endif
2 11372
2 11373						 endm
3 11374		  =0001					 pos = pos + 1
3 11375
3 11376
3 11377
3 11378		  =0002					 pos = pos + 1
3 11379
3 11380
3 11381	    0D1C  53							 db 'S'
3 11382
3 11383		  =0003					 pos = pos + 1
3 11384
3 11385
3 11386	    0D1D  51							 db 'Q'
3 11387
3 11388		  =0004					 pos = pos + 1
3 11389
3 11390	    0D1E  D2					 db 'R'	+ 80h
3 11391
3 11392
3 11393		  =0005					 pos = pos + 1
3 11394
3 11395
3 11396
2 11397
1 11398	    0D1F  057Ar				  DW L6360		     ; OK
1 11399
1 11400						 DC 'SQRT'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 201
msx_asm\tur_slib.ASM



2 11401
2 11402		  =0006				 strsize sizestr <'SQRT'>
2 11403		  =0000				 pos = 0
2 11404
2 11405						 irpc parameter,'SQRT'
2 11406							 pos = pos + 1
2 11407
2 11408							 if pos	EQ strsize - 1
2 11409							 db '&parameter' + 80h
2 11410							 endif
2 11411
2 11412							 if pos	GT 1
2 11413								 if pos	LT strsize -1
2 11414									 db '&parameter'
2 11415								 endif
2 11416							 endif
2 11417
2 11418						 endm
3 11419		  =0001					 pos = pos + 1
3 11420
3 11421
3 11422
3 11423		  =0002					 pos = pos + 1
3 11424
3 11425
3 11426	    0D21  53							 db 'S'
3 11427
3 11428		  =0003					 pos = pos + 1
3 11429
3 11430
3 11431	    0D22  51							 db 'Q'
3 11432
3 11433		  =0004					 pos = pos + 1
3 11434
3 11435
3 11436	    0D23  52							 db 'R'
3 11437
3 11438		  =0005					 pos = pos + 1
3 11439
3 11440	    0D24  D4					 db 'T'	+ 80h
3 11441
3 11442
3 11443		  =0006					 pos = pos + 1
3 11444
3 11445
3 11446
2 11447
1 11448	    0D25  05B2r				  DW L6385		     ; OK
1 11449
1 11450						 DC 'SIN'
2 11451
2 11452		  =0005				 strsize sizestr <'SIN'>
2 11453		  =0000				 pos = 0
2 11454
2 11455						 irpc parameter,'SIN'
2 11456							 pos = pos + 1
2 11457
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 202
msx_asm\tur_slib.ASM



2 11458							 if pos	EQ strsize - 1
2 11459							 db '&parameter' + 80h
2 11460							 endif
2 11461
2 11462							 if pos	GT 1
2 11463								 if pos	LT strsize -1
2 11464									 db '&parameter'
2 11465								 endif
2 11466							 endif
2 11467
2 11468						 endm
3 11469		  =0001					 pos = pos + 1
3 11470
3 11471
3 11472
3 11473		  =0002					 pos = pos + 1
3 11474
3 11475
3 11476	    0D27  53							 db 'S'
3 11477
3 11478		  =0003					 pos = pos + 1
3 11479
3 11480
3 11481	    0D28  49							 db 'I'
3 11482
3 11483		  =0004					 pos = pos + 1
3 11484
3 11485	    0D29  CE					 db 'N'	+ 80h
3 11486
3 11487
3 11488		  =0005					 pos = pos + 1
3 11489
3 11490
3 11491
2 11492
1 11493	    0D2A  05B7r				  DW L638A		     ; OK
1 11494
1 11495						 DC 'COS'
2 11496
2 11497		  =0005				 strsize sizestr <'COS'>
2 11498		  =0000				 pos = 0
2 11499
2 11500						 irpc parameter,'COS'
2 11501							 pos = pos + 1
2 11502
2 11503							 if pos	EQ strsize - 1
2 11504							 db '&parameter' + 80h
2 11505							 endif
2 11506
2 11507							 if pos	GT 1
2 11508								 if pos	LT strsize -1
2 11509									 db '&parameter'
2 11510								 endif
2 11511							 endif
2 11512
2 11513						 endm
3 11514		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 203
msx_asm\tur_slib.ASM



3 11515
3 11516
3 11517
3 11518		  =0002					 pos = pos + 1
3 11519
3 11520
3 11521	    0D2C  43							 db 'C'
3 11522
3 11523		  =0003					 pos = pos + 1
3 11524
3 11525
3 11526	    0D2D  4F							 db 'O'
3 11527
3 11528		  =0004					 pos = pos + 1
3 11529
3 11530	    0D2E  D3					 db 'S'	+ 80h
3 11531
3 11532
3 11533		  =0005					 pos = pos + 1
3 11534
3 11535
3 11536
2 11537
1 11538	    0D2F  05BCr				  DW L638F		     ; OK
1 11539
1 11540						 DC 'ARCTAN'
2 11541
2 11542		  =0008				 strsize sizestr <'ARCTAN'>
2 11543		  =0000				 pos = 0
2 11544
2 11545						 irpc parameter,'ARCTAN'
2 11546							 pos = pos + 1
2 11547
2 11548							 if pos	EQ strsize - 1
2 11549							 db '&parameter' + 80h
2 11550							 endif
2 11551
2 11552							 if pos	GT 1
2 11553								 if pos	LT strsize -1
2 11554									 db '&parameter'
2 11555								 endif
2 11556							 endif
2 11557
2 11558						 endm
3 11559		  =0001					 pos = pos + 1
3 11560
3 11561
3 11562
3 11563		  =0002					 pos = pos + 1
3 11564
3 11565
3 11566	    0D31  41							 db 'A'
3 11567
3 11568		  =0003					 pos = pos + 1
3 11569
3 11570
3 11571	    0D32  52							 db 'R'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 204
msx_asm\tur_slib.ASM



3 11572
3 11573		  =0004					 pos = pos + 1
3 11574
3 11575
3 11576	    0D33  43							 db 'C'
3 11577
3 11578		  =0005					 pos = pos + 1
3 11579
3 11580
3 11581	    0D34  54							 db 'T'
3 11582
3 11583		  =0006					 pos = pos + 1
3 11584
3 11585
3 11586	    0D35  41							 db 'A'
3 11587
3 11588		  =0007					 pos = pos + 1
3 11589
3 11590	    0D36  CE					 db 'N'	+ 80h
3 11591
3 11592
3 11593		  =0008					 pos = pos + 1
3 11594
3 11595
3 11596
2 11597
1 11598	    0D37  05C1r				  DW L6394		     ; OK
1 11599
1 11600						 DC 'LN'
2 11601
2 11602		  =0004				 strsize sizestr <'LN'>
2 11603		  =0000				 pos = 0
2 11604
2 11605						 irpc parameter,'LN'
2 11606							 pos = pos + 1
2 11607
2 11608							 if pos	EQ strsize - 1
2 11609							 db '&parameter' + 80h
2 11610							 endif
2 11611
2 11612							 if pos	GT 1
2 11613								 if pos	LT strsize -1
2 11614									 db '&parameter'
2 11615								 endif
2 11616							 endif
2 11617
2 11618						 endm
3 11619		  =0001					 pos = pos + 1
3 11620
3 11621
3 11622
3 11623		  =0002					 pos = pos + 1
3 11624
3 11625
3 11626	    0D39  4C							 db 'L'
3 11627
3 11628		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 205
msx_asm\tur_slib.ASM



3 11629
3 11630	    0D3A  CE					 db 'N'	+ 80h
3 11631
3 11632
3 11633		  =0004					 pos = pos + 1
3 11634
3 11635
3 11636
2 11637
1 11638	    0D3B  05C6r				  DW L6399		     ; OK
1 11639
1 11640						 DC 'EXP'
2 11641
2 11642		  =0005				 strsize sizestr <'EXP'>
2 11643		  =0000				 pos = 0
2 11644
2 11645						 irpc parameter,'EXP'
2 11646							 pos = pos + 1
2 11647
2 11648							 if pos	EQ strsize - 1
2 11649							 db '&parameter' + 80h
2 11650							 endif
2 11651
2 11652							 if pos	GT 1
2 11653								 if pos	LT strsize -1
2 11654									 db '&parameter'
2 11655								 endif
2 11656							 endif
2 11657
2 11658						 endm
3 11659		  =0001					 pos = pos + 1
3 11660
3 11661
3 11662
3 11663		  =0002					 pos = pos + 1
3 11664
3 11665
3 11666	    0D3D  45							 db 'E'
3 11667
3 11668		  =0003					 pos = pos + 1
3 11669
3 11670
3 11671	    0D3E  58							 db 'X'
3 11672
3 11673		  =0004					 pos = pos + 1
3 11674
3 11675	    0D3F  D0					 db 'P'	+ 80h
3 11676
3 11677
3 11678		  =0005					 pos = pos + 1
3 11679
3 11680
3 11681
2 11682
1 11683	    0D40  05CBr				  DW L639E		     ; OK
1 11684
1 11685						  DC 'INT'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 206
msx_asm\tur_slib.ASM



2 11686
2 11687		  =0005				 strsize sizestr <'INT'>
2 11688		  =0000				 pos = 0
2 11689
2 11690						 irpc parameter,'INT'
2 11691							 pos = pos + 1
2 11692
2 11693							 if pos	EQ strsize - 1
2 11694							 db '&parameter' + 80h
2 11695							 endif
2 11696
2 11697							 if pos	GT 1
2 11698								 if pos	LT strsize -1
2 11699									 db '&parameter'
2 11700								 endif
2 11701							 endif
2 11702
2 11703						 endm
3 11704		  =0001					 pos = pos + 1
3 11705
3 11706
3 11707
3 11708		  =0002					 pos = pos + 1
3 11709
3 11710
3 11711	    0D42  49							 db 'I'
3 11712
3 11713		  =0003					 pos = pos + 1
3 11714
3 11715
3 11716	    0D43  4E							 db 'N'
3 11717
3 11718		  =0004					 pos = pos + 1
3 11719
3 11720	    0D44  D4					 db 'T'	+ 80h
3 11721
3 11722
3 11723		  =0005					 pos = pos + 1
3 11724
3 11725
3 11726
2 11727
1 11728	    0D45  05D0r				  DW L63A3		     ; OK
1 11729
1 11730						  DC 'FRAC'
2 11731
2 11732		  =0006				 strsize sizestr <'FRAC'>
2 11733		  =0000				 pos = 0
2 11734
2 11735						 irpc parameter,'FRAC'
2 11736							 pos = pos + 1
2 11737
2 11738							 if pos	EQ strsize - 1
2 11739							 db '&parameter' + 80h
2 11740							 endif
2 11741
2 11742							 if pos	GT 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 207
msx_asm\tur_slib.ASM



2 11743								 if pos	LT strsize -1
2 11744									 db '&parameter'
2 11745								 endif
2 11746							 endif
2 11747
2 11748						 endm
3 11749		  =0001					 pos = pos + 1
3 11750
3 11751
3 11752
3 11753		  =0002					 pos = pos + 1
3 11754
3 11755
3 11756	    0D47  46							 db 'F'
3 11757
3 11758		  =0003					 pos = pos + 1
3 11759
3 11760
3 11761	    0D48  52							 db 'R'
3 11762
3 11763		  =0004					 pos = pos + 1
3 11764
3 11765
3 11766	    0D49  41							 db 'A'
3 11767
3 11768		  =0005					 pos = pos + 1
3 11769
3 11770	    0D4A  C3					 db 'C'	+ 80h
3 11771
3 11772
3 11773		  =0006					 pos = pos + 1
3 11774
3 11775
3 11776
2 11777
1 11778	    0D4B  05D5r				  DW L63A8		     ; OK
1 11779
1 11780						 DC 'RANDOM'
2 11781
2 11782		  =0008				 strsize sizestr <'RANDOM'>
2 11783		  =0000				 pos = 0
2 11784
2 11785						 irpc parameter,'RANDOM'
2 11786							 pos = pos + 1
2 11787
2 11788							 if pos	EQ strsize - 1
2 11789							 db '&parameter' + 80h
2 11790							 endif
2 11791
2 11792							 if pos	GT 1
2 11793								 if pos	LT strsize -1
2 11794									 db '&parameter'
2 11795								 endif
2 11796							 endif
2 11797
2 11798						 endm
3 11799		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 208
msx_asm\tur_slib.ASM



3 11800
3 11801
3 11802
3 11803		  =0002					 pos = pos + 1
3 11804
3 11805
3 11806	    0D4D  52							 db 'R'
3 11807
3 11808		  =0003					 pos = pos + 1
3 11809
3 11810
3 11811	    0D4E  41							 db 'A'
3 11812
3 11813		  =0004					 pos = pos + 1
3 11814
3 11815
3 11816	    0D4F  4E							 db 'N'
3 11817
3 11818		  =0005					 pos = pos + 1
3 11819
3 11820
3 11821	    0D50  44							 db 'D'
3 11822
3 11823		  =0006					 pos = pos + 1
3 11824
3 11825
3 11826	    0D51  4F							 db 'O'
3 11827
3 11828		  =0007					 pos = pos + 1
3 11829
3 11830	    0D52  CD					 db 'M'	+ 80h
3 11831
3 11832
3 11833		  =0008					 pos = pos + 1
3 11834
3 11835
3 11836
2 11837
1 11838	    0D53  072Fr				  DW L64AC		     ; OK
1 11839
1 11840						 DC 'PARAMCOUNT'
2 11841
2 11842		  =000C				 strsize sizestr <'PARAMCOUNT'>
2 11843		  =0000				 pos = 0
2 11844
2 11845						 irpc parameter,'PARAMCOUNT'
2 11846							 pos = pos + 1
2 11847
2 11848							 if pos	EQ strsize - 1
2 11849							 db '&parameter' + 80h
2 11850							 endif
2 11851
2 11852							 if pos	GT 1
2 11853								 if pos	LT strsize -1
2 11854									 db '&parameter'
2 11855								 endif
2 11856							 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 209
msx_asm\tur_slib.ASM



2 11857
2 11858						 endm
3 11859		  =0001					 pos = pos + 1
3 11860
3 11861
3 11862
3 11863		  =0002					 pos = pos + 1
3 11864
3 11865
3 11866	    0D55  50							 db 'P'
3 11867
3 11868		  =0003					 pos = pos + 1
3 11869
3 11870
3 11871	    0D56  41							 db 'A'
3 11872
3 11873		  =0004					 pos = pos + 1
3 11874
3 11875
3 11876	    0D57  52							 db 'R'
3 11877
3 11878		  =0005					 pos = pos + 1
3 11879
3 11880
3 11881	    0D58  41							 db 'A'
3 11882
3 11883		  =0006					 pos = pos + 1
3 11884
3 11885
3 11886	    0D59  4D							 db 'M'
3 11887
3 11888		  =0007					 pos = pos + 1
3 11889
3 11890
3 11891	    0D5A  43							 db 'C'
3 11892
3 11893		  =0008					 pos = pos + 1
3 11894
3 11895
3 11896	    0D5B  4F							 db 'O'
3 11897
3 11898		  =0009					 pos = pos + 1
3 11899
3 11900
3 11901	    0D5C  55							 db 'U'
3 11902
3 11903		  =000A					 pos = pos + 1
3 11904
3 11905
3 11906	    0D5D  4E							 db 'N'
3 11907
3 11908		  =000B					 pos = pos + 1
3 11909
3 11910	    0D5E  D4					 db 'T'	+ 80h
3 11911
3 11912
3 11913		  =000C					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 210
msx_asm\tur_slib.ASM



3 11914
3 11915
3 11916
2 11917
1 11918	    0D5F  071Fr				  DW L649C		     ; OK
1 11919
1 11920						 DC 'PARAMSTR'
2 11921
2 11922		  =000A				 strsize sizestr <'PARAMSTR'>
2 11923		  =0000				 pos = 0
2 11924
2 11925						 irpc parameter,'PARAMSTR'
2 11926							 pos = pos + 1
2 11927
2 11928							 if pos	EQ strsize - 1
2 11929							 db '&parameter' + 80h
2 11930							 endif
2 11931
2 11932							 if pos	GT 1
2 11933								 if pos	LT strsize -1
2 11934									 db '&parameter'
2 11935								 endif
2 11936							 endif
2 11937
2 11938						 endm
3 11939		  =0001					 pos = pos + 1
3 11940
3 11941
3 11942
3 11943		  =0002					 pos = pos + 1
3 11944
3 11945
3 11946	    0D61  50							 db 'P'
3 11947
3 11948		  =0003					 pos = pos + 1
3 11949
3 11950
3 11951	    0D62  41							 db 'A'
3 11952
3 11953		  =0004					 pos = pos + 1
3 11954
3 11955
3 11956	    0D63  52							 db 'R'
3 11957
3 11958		  =0005					 pos = pos + 1
3 11959
3 11960
3 11961	    0D64  41							 db 'A'
3 11962
3 11963		  =0006					 pos = pos + 1
3 11964
3 11965
3 11966	    0D65  4D							 db 'M'
3 11967
3 11968		  =0007					 pos = pos + 1
3 11969
3 11970
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 211
msx_asm\tur_slib.ASM



3 11971	    0D66  53							 db 'S'
3 11972
3 11973		  =0008					 pos = pos + 1
3 11974
3 11975
3 11976	    0D67  54							 db 'T'
3 11977
3 11978		  =0009					 pos = pos + 1
3 11979
3 11980	    0D68  D2					 db 'R'	+ 80h
3 11981
3 11982
3 11983		  =000A					 pos = pos + 1
3 11984
3 11985
3 11986
2 11987
1 11988	    0D69  0724r				  DW L64A1		     ; OK
1 11989
1 11990						 DC 'LO'
2 11991
2 11992		  =0004				 strsize sizestr <'LO'>
2 11993		  =0000				 pos = 0
2 11994
2 11995						 irpc parameter,'LO'
2 11996							 pos = pos + 1
2 11997
2 11998							 if pos	EQ strsize - 1
2 11999							 db '&parameter' + 80h
2 12000							 endif
2 12001
2 12002							 if pos	GT 1
2 12003								 if pos	LT strsize -1
2 12004									 db '&parameter'
2 12005								 endif
2 12006							 endif
2 12007
2 12008						 endm
3 12009		  =0001					 pos = pos + 1
3 12010
3 12011
3 12012
3 12013		  =0002					 pos = pos + 1
3 12014
3 12015
3 12016	    0D6B  4C							 db 'L'
3 12017
3 12018		  =0003					 pos = pos + 1
3 12019
3 12020	    0D6C  CF					 db 'O'	+ 80h
3 12021
3 12022
3 12023		  =0004					 pos = pos + 1
3 12024
3 12025
3 12026
2 12027
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 212
msx_asm\tur_slib.ASM



1 12028	    0D6D  0637r				  DW L63E1		     ; OK
1 12029
1 12030						 DC 'HI'
2 12031
2 12032		  =0004				 strsize sizestr <'HI'>
2 12033		  =0000				 pos = 0
2 12034
2 12035						 irpc parameter,'HI'
2 12036							 pos = pos + 1
2 12037
2 12038							 if pos	EQ strsize - 1
2 12039							 db '&parameter' + 80h
2 12040							 endif
2 12041
2 12042							 if pos	GT 1
2 12043								 if pos	LT strsize -1
2 12044									 db '&parameter'
2 12045								 endif
2 12046							 endif
2 12047
2 12048						 endm
3 12049		  =0001					 pos = pos + 1
3 12050
3 12051
3 12052
3 12053		  =0002					 pos = pos + 1
3 12054
3 12055
3 12056	    0D6F  48							 db 'H'
3 12057
3 12058		  =0003					 pos = pos + 1
3 12059
3 12060	    0D70  C9					 db 'I'	+ 80h
3 12061
3 12062
3 12063		  =0004					 pos = pos + 1
3 12064
3 12065
3 12066
2 12067
1 12068	    0D71  064Br				  DW L63EB		     ; OK
1 12069
1 12070						  DC 'SWAP'
2 12071
2 12072		  =0006				 strsize sizestr <'SWAP'>
2 12073		  =0000				 pos = 0
2 12074
2 12075						 irpc parameter,'SWAP'
2 12076							 pos = pos + 1
2 12077
2 12078							 if pos	EQ strsize - 1
2 12079							 db '&parameter' + 80h
2 12080							 endif
2 12081
2 12082							 if pos	GT 1
2 12083								 if pos	LT strsize -1
2 12084									 db '&parameter'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 213
msx_asm\tur_slib.ASM



2 12085								 endif
2 12086							 endif
2 12087
2 12088						 endm
3 12089		  =0001					 pos = pos + 1
3 12090
3 12091
3 12092
3 12093		  =0002					 pos = pos + 1
3 12094
3 12095
3 12096	    0D73  53							 db 'S'
3 12097
3 12098		  =0003					 pos = pos + 1
3 12099
3 12100
3 12101	    0D74  57							 db 'W'
3 12102
3 12103		  =0004					 pos = pos + 1
3 12104
3 12105
3 12106	    0D75  41							 db 'A'
3 12107
3 12108		  =0005					 pos = pos + 1
3 12109
3 12110	    0D76  D0					 db 'P'	+ 80h
3 12111
3 12112
3 12113		  =0006					 pos = pos + 1
3 12114
3 12115
3 12116
2 12117
1 12118	    0D77  0664r				  DW L63F6		     ; OK
1 12119
1 12120						 DC 'PTR'
2 12121
2 12122		  =0005				 strsize sizestr <'PTR'>
2 12123		  =0000				 pos = 0
2 12124
2 12125						 irpc parameter,'PTR'
2 12126							 pos = pos + 1
2 12127
2 12128							 if pos	EQ strsize - 1
2 12129							 db '&parameter' + 80h
2 12130							 endif
2 12131
2 12132							 if pos	GT 1
2 12133								 if pos	LT strsize -1
2 12134									 db '&parameter'
2 12135								 endif
2 12136							 endif
2 12137
2 12138						 endm
3 12139		  =0001					 pos = pos + 1
3 12140
3 12141
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 214
msx_asm\tur_slib.ASM



3 12142
3 12143		  =0002					 pos = pos + 1
3 12144
3 12145
3 12146	    0D79  50							 db 'P'
3 12147
3 12148		  =0003					 pos = pos + 1
3 12149
3 12150
3 12151	    0D7A  54							 db 'T'
3 12152
3 12153		  =0004					 pos = pos + 1
3 12154
3 12155	    0D7B  D2					 db 'R'	+ 80h
3 12156
3 12157
3 12158		  =0005					 pos = pos + 1
3 12159
3 12160
3 12161
2 12162
1 12163	    0D7C  06ABr				  DW L642B		     ; OK
1 12164
1 12165						 DC 'IORESULT'
2 12166
2 12167		  =000A				 strsize sizestr <'IORESULT'>
2 12168		  =0000				 pos = 0
2 12169
2 12170						 irpc parameter,'IORESULT'
2 12171							 pos = pos + 1
2 12172
2 12173							 if pos	EQ strsize - 1
2 12174							 db '&parameter' + 80h
2 12175							 endif
2 12176
2 12177							 if pos	GT 1
2 12178								 if pos	LT strsize -1
2 12179									 db '&parameter'
2 12180								 endif
2 12181							 endif
2 12182
2 12183						 endm
3 12184		  =0001					 pos = pos + 1
3 12185
3 12186
3 12187
3 12188		  =0002					 pos = pos + 1
3 12189
3 12190
3 12191	    0D7E  49							 db 'I'
3 12192
3 12193		  =0003					 pos = pos + 1
3 12194
3 12195
3 12196	    0D7F  4F							 db 'O'
3 12197
3 12198		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 215
msx_asm\tur_slib.ASM



3 12199
3 12200
3 12201	    0D80  52							 db 'R'
3 12202
3 12203		  =0005					 pos = pos + 1
3 12204
3 12205
3 12206	    0D81  45							 db 'E'
3 12207
3 12208		  =0006					 pos = pos + 1
3 12209
3 12210
3 12211	    0D82  53							 db 'S'
3 12212
3 12213		  =0007					 pos = pos + 1
3 12214
3 12215
3 12216	    0D83  55							 db 'U'
3 12217
3 12218		  =0008					 pos = pos + 1
3 12219
3 12220
3 12221	    0D84  4C							 db 'L'
3 12222
3 12223		  =0009					 pos = pos + 1
3 12224
3 12225	    0D85  D4					 db 'T'	+ 80h
3 12226
3 12227
3 12228		  =000A					 pos = pos + 1
3 12229
3 12230
3 12231
2 12232
1 12233	    0D86  0747r				  DW L64C4		     ; OK
1 12234
1 12235						 DC 'EOF'
2 12236
2 12237		  =0005				 strsize sizestr <'EOF'>
2 12238		  =0000				 pos = 0
2 12239
2 12240						 irpc parameter,'EOF'
2 12241							 pos = pos + 1
2 12242
2 12243							 if pos	EQ strsize - 1
2 12244							 db '&parameter' + 80h
2 12245							 endif
2 12246
2 12247							 if pos	GT 1
2 12248								 if pos	LT strsize -1
2 12249									 db '&parameter'
2 12250								 endif
2 12251							 endif
2 12252
2 12253						 endm
3 12254		  =0001					 pos = pos + 1
3 12255
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 216
msx_asm\tur_slib.ASM



3 12256
3 12257
3 12258		  =0002					 pos = pos + 1
3 12259
3 12260
3 12261	    0D88  45							 db 'E'
3 12262
3 12263		  =0003					 pos = pos + 1
3 12264
3 12265
3 12266	    0D89  4F							 db 'O'
3 12267
3 12268		  =0004					 pos = pos + 1
3 12269
3 12270	    0D8A  C6					 db 'F'	+ 80h
3 12271
3 12272
3 12273		  =0005					 pos = pos + 1
3 12274
3 12275
3 12276
2 12277
1 12278	    0D8B  074Cr				  DW L64C9		     ; OK
1 12279
1 12280						 DC 'EOLN'
2 12281
2 12282		  =0006				 strsize sizestr <'EOLN'>
2 12283		  =0000				 pos = 0
2 12284
2 12285						 irpc parameter,'EOLN'
2 12286							 pos = pos + 1
2 12287
2 12288							 if pos	EQ strsize - 1
2 12289							 db '&parameter' + 80h
2 12290							 endif
2 12291
2 12292							 if pos	GT 1
2 12293								 if pos	LT strsize -1
2 12294									 db '&parameter'
2 12295								 endif
2 12296							 endif
2 12297
2 12298						 endm
3 12299		  =0001					 pos = pos + 1
3 12300
3 12301
3 12302
3 12303		  =0002					 pos = pos + 1
3 12304
3 12305
3 12306	    0D8D  45							 db 'E'
3 12307
3 12308		  =0003					 pos = pos + 1
3 12309
3 12310
3 12311	    0D8E  4F							 db 'O'
3 12312
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 217
msx_asm\tur_slib.ASM



3 12313		  =0004					 pos = pos + 1
3 12314
3 12315
3 12316	    0D8F  4C							 db 'L'
3 12317
3 12318		  =0005					 pos = pos + 1
3 12319
3 12320	    0D90  CE					 db 'N'	+ 80h
3 12321
3 12322
3 12323		  =0006					 pos = pos + 1
3 12324
3 12325
3 12326
2 12327
1 12328	    0D91  0768r				  DW L64DF		     ; OK
1 12329
1 12330						 DC 'SEEKEOF'
2 12331
2 12332		  =0009				 strsize sizestr <'SEEKEOF'>
2 12333		  =0000				 pos = 0
2 12334
2 12335						 irpc parameter,'SEEKEOF'
2 12336							 pos = pos + 1
2 12337
2 12338							 if pos	EQ strsize - 1
2 12339							 db '&parameter' + 80h
2 12340							 endif
2 12341
2 12342							 if pos	GT 1
2 12343								 if pos	LT strsize -1
2 12344									 db '&parameter'
2 12345								 endif
2 12346							 endif
2 12347
2 12348						 endm
3 12349		  =0001					 pos = pos + 1
3 12350
3 12351
3 12352
3 12353		  =0002					 pos = pos + 1
3 12354
3 12355
3 12356	    0D93  53							 db 'S'
3 12357
3 12358		  =0003					 pos = pos + 1
3 12359
3 12360
3 12361	    0D94  45							 db 'E'
3 12362
3 12363		  =0004					 pos = pos + 1
3 12364
3 12365
3 12366	    0D95  45							 db 'E'
3 12367
3 12368		  =0005					 pos = pos + 1
3 12369
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 218
msx_asm\tur_slib.ASM



3 12370
3 12371	    0D96  4B							 db 'K'
3 12372
3 12373		  =0006					 pos = pos + 1
3 12374
3 12375
3 12376	    0D97  45							 db 'E'
3 12377
3 12378		  =0007					 pos = pos + 1
3 12379
3 12380
3 12381	    0D98  4F							 db 'O'
3 12382
3 12383		  =0008					 pos = pos + 1
3 12384
3 12385	    0D99  C6					 db 'F'	+ 80h
3 12386
3 12387
3 12388		  =0009					 pos = pos + 1
3 12389
3 12390
3 12391
2 12392
1 12393	    0D9A  075Er				  DW L64D5		     ; OK
1 12394
1 12395						 DC 'SEEKEOLN'
2 12396
2 12397		  =000A				 strsize sizestr <'SEEKEOLN'>
2 12398		  =0000				 pos = 0
2 12399
2 12400						 irpc parameter,'SEEKEOLN'
2 12401							 pos = pos + 1
2 12402
2 12403							 if pos	EQ strsize - 1
2 12404							 db '&parameter' + 80h
2 12405							 endif
2 12406
2 12407							 if pos	GT 1
2 12408								 if pos	LT strsize -1
2 12409									 db '&parameter'
2 12410								 endif
2 12411							 endif
2 12412
2 12413						 endm
3 12414		  =0001					 pos = pos + 1
3 12415
3 12416
3 12417
3 12418		  =0002					 pos = pos + 1
3 12419
3 12420
3 12421	    0D9C  53							 db 'S'
3 12422
3 12423		  =0003					 pos = pos + 1
3 12424
3 12425
3 12426	    0D9D  45							 db 'E'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 219
msx_asm\tur_slib.ASM



3 12427
3 12428		  =0004					 pos = pos + 1
3 12429
3 12430
3 12431	    0D9E  45							 db 'E'
3 12432
3 12433		  =0005					 pos = pos + 1
3 12434
3 12435
3 12436	    0D9F  4B							 db 'K'
3 12437
3 12438		  =0006					 pos = pos + 1
3 12439
3 12440
3 12441	    0DA0  45							 db 'E'
3 12442
3 12443		  =0007					 pos = pos + 1
3 12444
3 12445
3 12446	    0DA1  4F							 db 'O'
3 12447
3 12448		  =0008					 pos = pos + 1
3 12449
3 12450
3 12451	    0DA2  4C							 db 'L'
3 12452
3 12453		  =0009					 pos = pos + 1
3 12454
3 12455	    0DA3  CE					 db 'N'	+ 80h
3 12456
3 12457
3 12458		  =000A					 pos = pos + 1
3 12459
3 12460
3 12461
2 12462
1 12463	    0DA4  0763r				  DW L64DA		     ; OK
1 12464
1 12465						 DC 'FILESIZE'
2 12466
2 12467		  =000A				 strsize sizestr <'FILESIZE'>
2 12468		  =0000				 pos = 0
2 12469
2 12470						 irpc parameter,'FILESIZE'
2 12471							 pos = pos + 1
2 12472
2 12473							 if pos	EQ strsize - 1
2 12474							 db '&parameter' + 80h
2 12475							 endif
2 12476
2 12477							 if pos	GT 1
2 12478								 if pos	LT strsize -1
2 12479									 db '&parameter'
2 12480								 endif
2 12481							 endif
2 12482
2 12483						 endm
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 220
msx_asm\tur_slib.ASM



3 12484		  =0001					 pos = pos + 1
3 12485
3 12486
3 12487
3 12488		  =0002					 pos = pos + 1
3 12489
3 12490
3 12491	    0DA6  46							 db 'F'
3 12492
3 12493		  =0003					 pos = pos + 1
3 12494
3 12495
3 12496	    0DA7  49							 db 'I'
3 12497
3 12498		  =0004					 pos = pos + 1
3 12499
3 12500
3 12501	    0DA8  4C							 db 'L'
3 12502
3 12503		  =0005					 pos = pos + 1
3 12504
3 12505
3 12506	    0DA9  45							 db 'E'
3 12507
3 12508		  =0006					 pos = pos + 1
3 12509
3 12510
3 12511	    0DAA  53							 db 'S'
3 12512
3 12513		  =0007					 pos = pos + 1
3 12514
3 12515
3 12516	    0DAB  49							 db 'I'
3 12517
3 12518		  =0008					 pos = pos + 1
3 12519
3 12520
3 12521	    0DAC  5A							 db 'Z'
3 12522
3 12523		  =0009					 pos = pos + 1
3 12524
3 12525	    0DAD  C5					 db 'E'	+ 80h
3 12526
3 12527
3 12528		  =000A					 pos = pos + 1
3 12529
3 12530
3 12531
2 12532
1 12533	    0DAE  0783r				  DW L64FA		     ; OK
1 12534
1 12535						 DC 'FILEPOS'
2 12536
2 12537		  =0009				 strsize sizestr <'FILEPOS'>
2 12538		  =0000				 pos = 0
2 12539
2 12540						 irpc parameter,'FILEPOS'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 221
msx_asm\tur_slib.ASM



2 12541							 pos = pos + 1
2 12542
2 12543							 if pos	EQ strsize - 1
2 12544							 db '&parameter' + 80h
2 12545							 endif
2 12546
2 12547							 if pos	GT 1
2 12548								 if pos	LT strsize -1
2 12549									 db '&parameter'
2 12550								 endif
2 12551							 endif
2 12552
2 12553						 endm
3 12554		  =0001					 pos = pos + 1
3 12555
3 12556
3 12557
3 12558		  =0002					 pos = pos + 1
3 12559
3 12560
3 12561	    0DB0  46							 db 'F'
3 12562
3 12563		  =0003					 pos = pos + 1
3 12564
3 12565
3 12566	    0DB1  49							 db 'I'
3 12567
3 12568		  =0004					 pos = pos + 1
3 12569
3 12570
3 12571	    0DB2  4C							 db 'L'
3 12572
3 12573		  =0005					 pos = pos + 1
3 12574
3 12575
3 12576	    0DB3  45							 db 'E'
3 12577
3 12578		  =0006					 pos = pos + 1
3 12579
3 12580
3 12581	    0DB4  50							 db 'P'
3 12582
3 12583		  =0007					 pos = pos + 1
3 12584
3 12585
3 12586	    0DB5  4F							 db 'O'
3 12587
3 12588		  =0008					 pos = pos + 1
3 12589
3 12590	    0DB6  D3					 db 'S'	+ 80h
3 12591
3 12592
3 12593		  =0009					 pos = pos + 1
3 12594
3 12595
3 12596
2 12597
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 222
msx_asm\tur_slib.ASM



1 12598	    0DB7  077Br				  DW L64F2		     ; OK
1 12599
1 12600						 DC 'KEYPRESSED'
2 12601
2 12602		  =000C				 strsize sizestr <'KEYPRESSED'>
2 12603		  =0000				 pos = 0
2 12604
2 12605						 irpc parameter,'KEYPRESSED'
2 12606							 pos = pos + 1
2 12607
2 12608							 if pos	EQ strsize - 1
2 12609							 db '&parameter' + 80h
2 12610							 endif
2 12611
2 12612							 if pos	GT 1
2 12613								 if pos	LT strsize -1
2 12614									 db '&parameter'
2 12615								 endif
2 12616							 endif
2 12617
2 12618						 endm
3 12619		  =0001					 pos = pos + 1
3 12620
3 12621
3 12622
3 12623		  =0002					 pos = pos + 1
3 12624
3 12625
3 12626	    0DB9  4B							 db 'K'
3 12627
3 12628		  =0003					 pos = pos + 1
3 12629
3 12630
3 12631	    0DBA  45							 db 'E'
3 12632
3 12633		  =0004					 pos = pos + 1
3 12634
3 12635
3 12636	    0DBB  59							 db 'Y'
3 12637
3 12638		  =0005					 pos = pos + 1
3 12639
3 12640
3 12641	    0DBC  50							 db 'P'
3 12642
3 12643		  =0006					 pos = pos + 1
3 12644
3 12645
3 12646	    0DBD  52							 db 'R'
3 12647
3 12648		  =0007					 pos = pos + 1
3 12649
3 12650
3 12651	    0DBE  45							 db 'E'
3 12652
3 12653		  =0008					 pos = pos + 1
3 12654
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 223
msx_asm\tur_slib.ASM



3 12655
3 12656	    0DBF  53							 db 'S'
3 12657
3 12658		  =0009					 pos = pos + 1
3 12659
3 12660
3 12661	    0DC0  53							 db 'S'
3 12662
3 12663		  =000A					 pos = pos + 1
3 12664
3 12665
3 12666	    0DC1  45							 db 'E'
3 12667
3 12668		  =000B					 pos = pos + 1
3 12669
3 12670	    0DC2  C4					 db 'D'	+ 80h
3 12671
3 12672
3 12673		  =000C					 pos = pos + 1
3 12674
3 12675
3 12676
2 12677
1 12678	    0DC3  0688r				  DW L640C		     ; OK
1 12679
1 12680						 DC 'MEMAVAIL'
2 12681
2 12682		  =000A				 strsize sizestr <'MEMAVAIL'>
2 12683		  =0000				 pos = 0
2 12684
2 12685						 irpc parameter,'MEMAVAIL'
2 12686							 pos = pos + 1
2 12687
2 12688							 if pos	EQ strsize - 1
2 12689							 db '&parameter' + 80h
2 12690							 endif
2 12691
2 12692							 if pos	GT 1
2 12693								 if pos	LT strsize -1
2 12694									 db '&parameter'
2 12695								 endif
2 12696							 endif
2 12697
2 12698						 endm
3 12699		  =0001					 pos = pos + 1
3 12700
3 12701
3 12702
3 12703		  =0002					 pos = pos + 1
3 12704
3 12705
3 12706	    0DC5  4D							 db 'M'
3 12707
3 12708		  =0003					 pos = pos + 1
3 12709
3 12710
3 12711	    0DC6  45							 db 'E'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 224
msx_asm\tur_slib.ASM



3 12712
3 12713		  =0004					 pos = pos + 1
3 12714
3 12715
3 12716	    0DC7  4D							 db 'M'
3 12717
3 12718		  =0005					 pos = pos + 1
3 12719
3 12720
3 12721	    0DC8  41							 db 'A'
3 12722
3 12723		  =0006					 pos = pos + 1
3 12724
3 12725
3 12726	    0DC9  56							 db 'V'
3 12727
3 12728		  =0007					 pos = pos + 1
3 12729
3 12730
3 12731	    0DCA  41							 db 'A'
3 12732
3 12733		  =0008					 pos = pos + 1
3 12734
3 12735
3 12736	    0DCB  49							 db 'I'
3 12737
3 12738		  =0009					 pos = pos + 1
3 12739
3 12740	    0DCC  CC					 db 'L'	+ 80h
3 12741
3 12742
3 12743		  =000A					 pos = pos + 1
3 12744
3 12745
3 12746
2 12747
1 12748	    0DCD  07A2r				  DW L6514		     ; OK
1 12749
1 12750						 DC 'MAXAVAIL'
2 12751
2 12752		  =000A				 strsize sizestr <'MAXAVAIL'>
2 12753		  =0000				 pos = 0
2 12754
2 12755						 irpc parameter,'MAXAVAIL'
2 12756							 pos = pos + 1
2 12757
2 12758							 if pos	EQ strsize - 1
2 12759							 db '&parameter' + 80h
2 12760							 endif
2 12761
2 12762							 if pos	GT 1
2 12763								 if pos	LT strsize -1
2 12764									 db '&parameter'
2 12765								 endif
2 12766							 endif
2 12767
2 12768						 endm
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 225
msx_asm\tur_slib.ASM



3 12769		  =0001					 pos = pos + 1
3 12770
3 12771
3 12772
3 12773		  =0002					 pos = pos + 1
3 12774
3 12775
3 12776	    0DCF  4D							 db 'M'
3 12777
3 12778		  =0003					 pos = pos + 1
3 12779
3 12780
3 12781	    0DD0  41							 db 'A'
3 12782
3 12783		  =0004					 pos = pos + 1
3 12784
3 12785
3 12786	    0DD1  58							 db 'X'
3 12787
3 12788		  =0005					 pos = pos + 1
3 12789
3 12790
3 12791	    0DD2  41							 db 'A'
3 12792
3 12793		  =0006					 pos = pos + 1
3 12794
3 12795
3 12796	    0DD3  56							 db 'V'
3 12797
3 12798		  =0007					 pos = pos + 1
3 12799
3 12800
3 12801	    0DD4  41							 db 'A'
3 12802
3 12803		  =0008					 pos = pos + 1
3 12804
3 12805
3 12806	    0DD5  49							 db 'I'
3 12807
3 12808		  =0009					 pos = pos + 1
3 12809
3 12810	    0DD6  CC					 db 'L'	+ 80h
3 12811
3 12812
3 12813		  =000A					 pos = pos + 1
3 12814
3 12815
3 12816
2 12817
1 12818	    0DD7  07A7r				  DW L6519		     ; OK
1 12819
1 12820						 DC 'PORT'
2 12821
2 12822		  =0006				 strsize sizestr <'PORT'>
2 12823		  =0000				 pos = 0
2 12824
2 12825						 irpc parameter,'PORT'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 226
msx_asm\tur_slib.ASM



2 12826							 pos = pos + 1
2 12827
2 12828							 if pos	EQ strsize - 1
2 12829							 db '&parameter' + 80h
2 12830							 endif
2 12831
2 12832							 if pos	GT 1
2 12833								 if pos	LT strsize -1
2 12834									 db '&parameter'
2 12835								 endif
2 12836							 endif
2 12837
2 12838						 endm
3 12839		  =0001					 pos = pos + 1
3 12840
3 12841
3 12842
3 12843		  =0002					 pos = pos + 1
3 12844
3 12845
3 12846	    0DD9  50							 db 'P'
3 12847
3 12848		  =0003					 pos = pos + 1
3 12849
3 12850
3 12851	    0DDA  4F							 db 'O'
3 12852
3 12853		  =0004					 pos = pos + 1
3 12854
3 12855
3 12856	    0DDB  52							 db 'R'
3 12857
3 12858		  =0005					 pos = pos + 1
3 12859
3 12860	    0DDC  D4					 db 'T'	+ 80h
3 12861
3 12862
3 12863		  =0006					 pos = pos + 1
3 12864
3 12865
3 12866
2 12867
1 12868	    0DDD  0844r				  DW L65BF		     ; OK
1 12869
1 12870						 DC 'STACKPTR'		    ; stackptr value
2 12871
2 12872		  =000A				 strsize sizestr <'STACKPTR'>
2 12873		  =0000				 pos = 0
2 12874
2 12875						 irpc parameter,'STACKPTR'
2 12876							 pos = pos + 1
2 12877
2 12878							 if pos	EQ strsize - 1
2 12879							 db '&parameter' + 80h
2 12880							 endif
2 12881
2 12882							 if pos	GT 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 227
msx_asm\tur_slib.ASM



2 12883								 if pos	LT strsize -1
2 12884									 db '&parameter'
2 12885								 endif
2 12886							 endif
2 12887
2 12888						 endm
3 12889		  =0001					 pos = pos + 1
3 12890
3 12891
3 12892
3 12893		  =0002					 pos = pos + 1
3 12894
3 12895
3 12896	    0DDF  53							 db 'S'
3 12897
3 12898		  =0003					 pos = pos + 1
3 12899
3 12900
3 12901	    0DE0  54							 db 'T'
3 12902
3 12903		  =0004					 pos = pos + 1
3 12904
3 12905
3 12906	    0DE1  41							 db 'A'
3 12907
3 12908		  =0005					 pos = pos + 1
3 12909
3 12910
3 12911	    0DE2  43							 db 'C'
3 12912
3 12913		  =0006					 pos = pos + 1
3 12914
3 12915
3 12916	    0DE3  4B							 db 'K'
3 12917
3 12918		  =0007					 pos = pos + 1
3 12919
3 12920
3 12921	    0DE4  50							 db 'P'
3 12922
3 12923		  =0008					 pos = pos + 1
3 12924
3 12925
3 12926	    0DE5  54							 db 'T'
3 12927
3 12928		  =0009					 pos = pos + 1
3 12929
3 12930	    0DE6  D2					 db 'R'	+ 80h
3 12931
3 12932
3 12933		  =000A					 pos = pos + 1
3 12934
3 12935
3 12936
2 12937
1 12938	    0DE7  084Fr				  DW L65CA		     ; OK
1 12939
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 228
msx_asm\tur_slib.ASM



1 12940						 DC 'ADDR'
2 12941
2 12942		  =0006				 strsize sizestr <'ADDR'>
2 12943		  =0000				 pos = 0
2 12944
2 12945						 irpc parameter,'ADDR'
2 12946							 pos = pos + 1
2 12947
2 12948							 if pos	EQ strsize - 1
2 12949							 db '&parameter' + 80h
2 12950							 endif
2 12951
2 12952							 if pos	GT 1
2 12953								 if pos	LT strsize -1
2 12954									 db '&parameter'
2 12955								 endif
2 12956							 endif
2 12957
2 12958						 endm
3 12959		  =0001					 pos = pos + 1
3 12960
3 12961
3 12962
3 12963		  =0002					 pos = pos + 1
3 12964
3 12965
3 12966	    0DE9  41							 db 'A'
3 12967
3 12968		  =0003					 pos = pos + 1
3 12969
3 12970
3 12971	    0DEA  44							 db 'D'
3 12972
3 12973		  =0004					 pos = pos + 1
3 12974
3 12975
3 12976	    0DEB  44							 db 'D'
3 12977
3 12978		  =0005					 pos = pos + 1
3 12979
3 12980	    0DEC  D2					 db 'R'	+ 80h
3 12981
3 12982
3 12983		  =0006					 pos = pos + 1
3 12984
3 12985
3 12986
2 12987
1 12988	    0DED  07FBr				  DW L6576		     ; OK
1 12989
1 12990						 DC 'SIZEOF'		    ; OK
2 12991
2 12992		  =0008				 strsize sizestr <'SIZEOF'>
2 12993		  =0000				 pos = 0
2 12994
2 12995						 irpc parameter,'SIZEOF'
2 12996							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 229
msx_asm\tur_slib.ASM



2 12997
2 12998							 if pos	EQ strsize - 1
2 12999							 db '&parameter' + 80h
2 13000							 endif
2 13001
2 13002							 if pos	GT 1
2 13003								 if pos	LT strsize -1
2 13004									 db '&parameter'
2 13005								 endif
2 13006							 endif
2 13007
2 13008						 endm
3 13009		  =0001					 pos = pos + 1
3 13010
3 13011
3 13012
3 13013		  =0002					 pos = pos + 1
3 13014
3 13015
3 13016	    0DEF  53							 db 'S'
3 13017
3 13018		  =0003					 pos = pos + 1
3 13019
3 13020
3 13021	    0DF0  49							 db 'I'
3 13022
3 13023		  =0004					 pos = pos + 1
3 13024
3 13025
3 13026	    0DF1  5A							 db 'Z'
3 13027
3 13028		  =0005					 pos = pos + 1
3 13029
3 13030
3 13031	    0DF2  45							 db 'E'
3 13032
3 13033		  =0006					 pos = pos + 1
3 13034
3 13035
3 13036	    0DF3  4F							 db 'O'
3 13037
3 13038		  =0007					 pos = pos + 1
3 13039
3 13040	    0DF4  C6					 db 'F'	+ 80h
3 13041
3 13042
3 13043		  =0008					 pos = pos + 1
3 13044
3 13045
3 13046
2 13047
1 13048	    0DF5  0822r				  DW L659D
1 13049
1 13050						 DC 'BDOSHL'
2 13051
2 13052		  =0008				 strsize sizestr <'BDOSHL'>
2 13053		  =0000				 pos = 0
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 230
msx_asm\tur_slib.ASM



2 13054
2 13055						 irpc parameter,'BDOSHL'
2 13056							 pos = pos + 1
2 13057
2 13058							 if pos	EQ strsize - 1
2 13059							 db '&parameter' + 80h
2 13060							 endif
2 13061
2 13062							 if pos	GT 1
2 13063								 if pos	LT strsize -1
2 13064									 db '&parameter'
2 13065								 endif
2 13066							 endif
2 13067
2 13068						 endm
3 13069		  =0001					 pos = pos + 1
3 13070
3 13071
3 13072
3 13073		  =0002					 pos = pos + 1
3 13074
3 13075
3 13076	    0DF7  42							 db 'B'
3 13077
3 13078		  =0003					 pos = pos + 1
3 13079
3 13080
3 13081	    0DF8  44							 db 'D'
3 13082
3 13083		  =0004					 pos = pos + 1
3 13084
3 13085
3 13086	    0DF9  4F							 db 'O'
3 13087
3 13088		  =0005					 pos = pos + 1
3 13089
3 13090
3 13091	    0DFA  53							 db 'S'
3 13092
3 13093		  =0006					 pos = pos + 1
3 13094
3 13095
3 13096	    0DFB  48							 db 'H'
3 13097
3 13098		  =0007					 pos = pos + 1
3 13099
3 13100	    0DFC  CC					 db 'L'	+ 80h
3 13101
3 13102
3 13103		  =0008					 pos = pos + 1
3 13104
3 13105
3 13106
2 13107
1 13108	    0DFD  07D4r				  DW L6553		     ; OK
1 13109
1 13110						 DC 'BDOS'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 231
msx_asm\tur_slib.ASM



2 13111
2 13112		  =0006				 strsize sizestr <'BDOS'>
2 13113		  =0000				 pos = 0
2 13114
2 13115						 irpc parameter,'BDOS'
2 13116							 pos = pos + 1
2 13117
2 13118							 if pos	EQ strsize - 1
2 13119							 db '&parameter' + 80h
2 13120							 endif
2 13121
2 13122							 if pos	GT 1
2 13123								 if pos	LT strsize -1
2 13124									 db '&parameter'
2 13125								 endif
2 13126							 endif
2 13127
2 13128						 endm
3 13129		  =0001					 pos = pos + 1
3 13130
3 13131
3 13132
3 13133		  =0002					 pos = pos + 1
3 13134
3 13135
3 13136	    0DFF  42							 db 'B'
3 13137
3 13138		  =0003					 pos = pos + 1
3 13139
3 13140
3 13141	    0E00  44							 db 'D'
3 13142
3 13143		  =0004					 pos = pos + 1
3 13144
3 13145
3 13146	    0E01  4F							 db 'O'
3 13147
3 13148		  =0005					 pos = pos + 1
3 13149
3 13150	    0E02  D3					 db 'S'	+ 80h
3 13151
3 13152
3 13153		  =0006					 pos = pos + 1
3 13154
3 13155
3 13156
2 13157
1 13158	    0E03  07D8r				  DW L6554		     ; OK
1 13159
1 13160						 DC 'BIOSHL'
2 13161
2 13162		  =0008				 strsize sizestr <'BIOSHL'>
2 13163		  =0000				 pos = 0
2 13164
2 13165						 irpc parameter,'BIOSHL'
2 13166							 pos = pos + 1
2 13167
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 232
msx_asm\tur_slib.ASM



2 13168							 if pos	EQ strsize - 1
2 13169							 db '&parameter' + 80h
2 13170							 endif
2 13171
2 13172							 if pos	GT 1
2 13173								 if pos	LT strsize -1
2 13174									 db '&parameter'
2 13175								 endif
2 13176							 endif
2 13177
2 13178						 endm
3 13179		  =0001					 pos = pos + 1
3 13180
3 13181
3 13182
3 13183		  =0002					 pos = pos + 1
3 13184
3 13185
3 13186	    0E05  42							 db 'B'
3 13187
3 13188		  =0003					 pos = pos + 1
3 13189
3 13190
3 13191	    0E06  49							 db 'I'
3 13192
3 13193		  =0004					 pos = pos + 1
3 13194
3 13195
3 13196	    0E07  4F							 db 'O'
3 13197
3 13198		  =0005					 pos = pos + 1
3 13199
3 13200
3 13201	    0E08  53							 db 'S'
3 13202
3 13203		  =0006					 pos = pos + 1
3 13204
3 13205
3 13206	    0E09  48							 db 'H'
3 13207
3 13208		  =0007					 pos = pos + 1
3 13209
3 13210	    0E0A  CC					 db 'L'	+ 80h
3 13211
3 13212
3 13213		  =0008					 pos = pos + 1
3 13214
3 13215
3 13216
2 13217
1 13218	    0E0B  07ACr				  DW L651E		     ; OK
1 13219
1 13220						 DC 'BIOS'
2 13221
2 13222		  =0006				 strsize sizestr <'BIOS'>
2 13223		  =0000				 pos = 0
2 13224
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 233
msx_asm\tur_slib.ASM



2 13225						 irpc parameter,'BIOS'
2 13226							 pos = pos + 1
2 13227
2 13228							 if pos	EQ strsize - 1
2 13229							 db '&parameter' + 80h
2 13230							 endif
2 13231
2 13232							 if pos	GT 1
2 13233								 if pos	LT strsize -1
2 13234									 db '&parameter'
2 13235								 endif
2 13236							 endif
2 13237
2 13238						 endm
3 13239		  =0001					 pos = pos + 1
3 13240
3 13241
3 13242
3 13243		  =0002					 pos = pos + 1
3 13244
3 13245
3 13246	    0E0D  42							 db 'B'
3 13247
3 13248		  =0003					 pos = pos + 1
3 13249
3 13250
3 13251	    0E0E  49							 db 'I'
3 13252
3 13253		  =0004					 pos = pos + 1
3 13254
3 13255
3 13256	    0E0F  4F							 db 'O'
3 13257
3 13258		  =0005					 pos = pos + 1
3 13259
3 13260	    0E10  D3					 db 'S'	+ 80h
3 13261
3 13262
3 13263		  =0006					 pos = pos + 1
3 13264
3 13265
3 13266
2 13267
1 13268	    0E11  07B0r				  DW L651F		     ; OK
1 13269
1 13270						  ; GIOS Functions
1 13271						  DC 'TSRPRESENT'
2 13272
2 13273		  =000C				 strsize sizestr <'TSRPRESENT'>
2 13274		  =0000				 pos = 0
2 13275
2 13276						 irpc parameter,'TSRPRESENT'
2 13277							 pos = pos + 1
2 13278
2 13279							 if pos	EQ strsize - 1
2 13280							 db '&parameter' + 80h
2 13281							 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 234
msx_asm\tur_slib.ASM



2 13282
2 13283							 if pos	GT 1
2 13284								 if pos	LT strsize -1
2 13285									 db '&parameter'
2 13286								 endif
2 13287							 endif
2 13288
2 13289						 endm
3 13290		  =0001					 pos = pos + 1
3 13291
3 13292
3 13293
3 13294		  =0002					 pos = pos + 1
3 13295
3 13296
3 13297	    0E13  54							 db 'T'
3 13298
3 13299		  =0003					 pos = pos + 1
3 13300
3 13301
3 13302	    0E14  53							 db 'S'
3 13303
3 13304		  =0004					 pos = pos + 1
3 13305
3 13306
3 13307	    0E15  52							 db 'R'
3 13308
3 13309		  =0005					 pos = pos + 1
3 13310
3 13311
3 13312	    0E16  50							 db 'P'
3 13313
3 13314		  =0006					 pos = pos + 1
3 13315
3 13316
3 13317	    0E17  52							 db 'R'
3 13318
3 13319		  =0007					 pos = pos + 1
3 13320
3 13321
3 13322	    0E18  45							 db 'E'
3 13323
3 13324		  =0008					 pos = pos + 1
3 13325
3 13326
3 13327	    0E19  53							 db 'S'
3 13328
3 13329		  =0009					 pos = pos + 1
3 13330
3 13331
3 13332	    0E1A  45							 db 'E'
3 13333
3 13334		  =000A					 pos = pos + 1
3 13335
3 13336
3 13337	    0E1B  4E							 db 'N'
3 13338
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 235
msx_asm\tur_slib.ASM



3 13339		  =000B					 pos = pos + 1
3 13340
3 13341	    0E1C  D4					 db 'T'	+ 80h
3 13342
3 13343
3 13344		  =000C					 pos = pos + 1
3 13345
3 13346
3 13347
2 13348
1 13349	    0E1D  0000e				  DW F_TSRPRESENT	     ; OK
1 13350
1 13351						  DC 'GETCLIPPING'
2 13352
2 13353		  =000D				 strsize sizestr <'GETCLIPPING'>
2 13354		  =0000				 pos = 0
2 13355
2 13356						 irpc parameter,'GETCLIPPING'
2 13357							 pos = pos + 1
2 13358
2 13359							 if pos	EQ strsize - 1
2 13360							 db '&parameter' + 80h
2 13361							 endif
2 13362
2 13363							 if pos	GT 1
2 13364								 if pos	LT strsize -1
2 13365									 db '&parameter'
2 13366								 endif
2 13367							 endif
2 13368
2 13369						 endm
3 13370		  =0001					 pos = pos + 1
3 13371
3 13372
3 13373
3 13374		  =0002					 pos = pos + 1
3 13375
3 13376
3 13377	    0E1F  47							 db 'G'
3 13378
3 13379		  =0003					 pos = pos + 1
3 13380
3 13381
3 13382	    0E20  45							 db 'E'
3 13383
3 13384		  =0004					 pos = pos + 1
3 13385
3 13386
3 13387	    0E21  54							 db 'T'
3 13388
3 13389		  =0005					 pos = pos + 1
3 13390
3 13391
3 13392	    0E22  43							 db 'C'
3 13393
3 13394		  =0006					 pos = pos + 1
3 13395
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 236
msx_asm\tur_slib.ASM



3 13396
3 13397	    0E23  4C							 db 'L'
3 13398
3 13399		  =0007					 pos = pos + 1
3 13400
3 13401
3 13402	    0E24  49							 db 'I'
3 13403
3 13404		  =0008					 pos = pos + 1
3 13405
3 13406
3 13407	    0E25  50							 db 'P'
3 13408
3 13409		  =0009					 pos = pos + 1
3 13410
3 13411
3 13412	    0E26  50							 db 'P'
3 13413
3 13414		  =000A					 pos = pos + 1
3 13415
3 13416
3 13417	    0E27  49							 db 'I'
3 13418
3 13419		  =000B					 pos = pos + 1
3 13420
3 13421
3 13422	    0E28  4E							 db 'N'
3 13423
3 13424		  =000C					 pos = pos + 1
3 13425
3 13426	    0E29  C7					 db 'G'	+ 80h
3 13427
3 13428
3 13429		  =000D					 pos = pos + 1
3 13430
3 13431
3 13432
2 13433
1 13434	    0E2A  0000e				  DW F_GETCLIPPING
1 13435
1 13436						  DC 'SIMULATEDDISK'
2 13437
2 13438		  =000F				 strsize sizestr <'SIMULATEDDISK'>
2 13439		  =0000				 pos = 0
2 13440
2 13441						 irpc parameter,'SIMULATEDDISK'
2 13442							 pos = pos + 1
2 13443
2 13444							 if pos	EQ strsize - 1
2 13445							 db '&parameter' + 80h
2 13446							 endif
2 13447
2 13448							 if pos	GT 1
2 13449								 if pos	LT strsize -1
2 13450									 db '&parameter'
2 13451								 endif
2 13452							 endif
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 237
msx_asm\tur_slib.ASM



2 13453
2 13454						 endm
3 13455		  =0001					 pos = pos + 1
3 13456
3 13457
3 13458
3 13459		  =0002					 pos = pos + 1
3 13460
3 13461
3 13462	    0E2C  53							 db 'S'
3 13463
3 13464		  =0003					 pos = pos + 1
3 13465
3 13466
3 13467	    0E2D  49							 db 'I'
3 13468
3 13469		  =0004					 pos = pos + 1
3 13470
3 13471
3 13472	    0E2E  4D							 db 'M'
3 13473
3 13474		  =0005					 pos = pos + 1
3 13475
3 13476
3 13477	    0E2F  55							 db 'U'
3 13478
3 13479		  =0006					 pos = pos + 1
3 13480
3 13481
3 13482	    0E30  4C							 db 'L'
3 13483
3 13484		  =0007					 pos = pos + 1
3 13485
3 13486
3 13487	    0E31  41							 db 'A'
3 13488
3 13489		  =0008					 pos = pos + 1
3 13490
3 13491
3 13492	    0E32  54							 db 'T'
3 13493
3 13494		  =0009					 pos = pos + 1
3 13495
3 13496
3 13497	    0E33  45							 db 'E'
3 13498
3 13499		  =000A					 pos = pos + 1
3 13500
3 13501
3 13502	    0E34  44							 db 'D'
3 13503
3 13504		  =000B					 pos = pos + 1
3 13505
3 13506
3 13507	    0E35  44							 db 'D'
3 13508
3 13509		  =000C					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 238
msx_asm\tur_slib.ASM



3 13510
3 13511
3 13512	    0E36  49							 db 'I'
3 13513
3 13514		  =000D					 pos = pos + 1
3 13515
3 13516
3 13517	    0E37  53							 db 'S'
3 13518
3 13519		  =000E					 pos = pos + 1
3 13520
3 13521	    0E38  CB					 db 'K'	+ 80h
3 13522
3 13523
3 13524		  =000F					 pos = pos + 1
3 13525
3 13526
3 13527
2 13528
1 13529	    0E39  0000e				  DW F_SIMULATEDDISK
1 13530
1 13531						  DC 'FINDFIRST'
2 13532
2 13533		  =000B				 strsize sizestr <'FINDFIRST'>
2 13534		  =0000				 pos = 0
2 13535
2 13536						 irpc parameter,'FINDFIRST'
2 13537							 pos = pos + 1
2 13538
2 13539							 if pos	EQ strsize - 1
2 13540							 db '&parameter' + 80h
2 13541							 endif
2 13542
2 13543							 if pos	GT 1
2 13544								 if pos	LT strsize -1
2 13545									 db '&parameter'
2 13546								 endif
2 13547							 endif
2 13548
2 13549						 endm
3 13550		  =0001					 pos = pos + 1
3 13551
3 13552
3 13553
3 13554		  =0002					 pos = pos + 1
3 13555
3 13556
3 13557	    0E3B  46							 db 'F'
3 13558
3 13559		  =0003					 pos = pos + 1
3 13560
3 13561
3 13562	    0E3C  49							 db 'I'
3 13563
3 13564		  =0004					 pos = pos + 1
3 13565
3 13566
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 239
msx_asm\tur_slib.ASM



3 13567	    0E3D  4E							 db 'N'
3 13568
3 13569		  =0005					 pos = pos + 1
3 13570
3 13571
3 13572	    0E3E  44							 db 'D'
3 13573
3 13574		  =0006					 pos = pos + 1
3 13575
3 13576
3 13577	    0E3F  46							 db 'F'
3 13578
3 13579		  =0007					 pos = pos + 1
3 13580
3 13581
3 13582	    0E40  49							 db 'I'
3 13583
3 13584		  =0008					 pos = pos + 1
3 13585
3 13586
3 13587	    0E41  52							 db 'R'
3 13588
3 13589		  =0009					 pos = pos + 1
3 13590
3 13591
3 13592	    0E42  53							 db 'S'
3 13593
3 13594		  =000A					 pos = pos + 1
3 13595
3 13596	    0E43  D4					 db 'T'	+ 80h
3 13597
3 13598
3 13599		  =000B					 pos = pos + 1
3 13600
3 13601
3 13602
2 13603
1 13604	    0E44  0000e				  DW F_FINDFIRST	     ; OK
1 13605
1 13606						  DC 'FINDNEXT'
2 13607
2 13608		  =000A				 strsize sizestr <'FINDNEXT'>
2 13609		  =0000				 pos = 0
2 13610
2 13611						 irpc parameter,'FINDNEXT'
2 13612							 pos = pos + 1
2 13613
2 13614							 if pos	EQ strsize - 1
2 13615							 db '&parameter' + 80h
2 13616							 endif
2 13617
2 13618							 if pos	GT 1
2 13619								 if pos	LT strsize -1
2 13620									 db '&parameter'
2 13621								 endif
2 13622							 endif
2 13623
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 240
msx_asm\tur_slib.ASM



2 13624						 endm
3 13625		  =0001					 pos = pos + 1
3 13626
3 13627
3 13628
3 13629		  =0002					 pos = pos + 1
3 13630
3 13631
3 13632	    0E46  46							 db 'F'
3 13633
3 13634		  =0003					 pos = pos + 1
3 13635
3 13636
3 13637	    0E47  49							 db 'I'
3 13638
3 13639		  =0004					 pos = pos + 1
3 13640
3 13641
3 13642	    0E48  4E							 db 'N'
3 13643
3 13644		  =0005					 pos = pos + 1
3 13645
3 13646
3 13647	    0E49  44							 db 'D'
3 13648
3 13649		  =0006					 pos = pos + 1
3 13650
3 13651
3 13652	    0E4A  4E							 db 'N'
3 13653
3 13654		  =0007					 pos = pos + 1
3 13655
3 13656
3 13657	    0E4B  45							 db 'E'
3 13658
3 13659		  =0008					 pos = pos + 1
3 13660
3 13661
3 13662	    0E4C  58							 db 'X'
3 13663
3 13664		  =0009					 pos = pos + 1
3 13665
3 13666	    0E4D  D4					 db 'T'	+ 80h
3 13667
3 13668
3 13669		  =000A					 pos = pos + 1
3 13670
3 13671
3 13672
2 13673
1 13674	    0E4E  0000e				  DW F_FINDNEXT		     ; OK
1 13675
1 13676						  DC 'GETDRIVE'
2 13677
2 13678		  =000A				 strsize sizestr <'GETDRIVE'>
2 13679		  =0000				 pos = 0
2 13680
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 241
msx_asm\tur_slib.ASM



2 13681						 irpc parameter,'GETDRIVE'
2 13682							 pos = pos + 1
2 13683
2 13684							 if pos	EQ strsize - 1
2 13685							 db '&parameter' + 80h
2 13686							 endif
2 13687
2 13688							 if pos	GT 1
2 13689								 if pos	LT strsize -1
2 13690									 db '&parameter'
2 13691								 endif
2 13692							 endif
2 13693
2 13694						 endm
3 13695		  =0001					 pos = pos + 1
3 13696
3 13697
3 13698
3 13699		  =0002					 pos = pos + 1
3 13700
3 13701
3 13702	    0E50  47							 db 'G'
3 13703
3 13704		  =0003					 pos = pos + 1
3 13705
3 13706
3 13707	    0E51  45							 db 'E'
3 13708
3 13709		  =0004					 pos = pos + 1
3 13710
3 13711
3 13712	    0E52  54							 db 'T'
3 13713
3 13714		  =0005					 pos = pos + 1
3 13715
3 13716
3 13717	    0E53  44							 db 'D'
3 13718
3 13719		  =0006					 pos = pos + 1
3 13720
3 13721
3 13722	    0E54  52							 db 'R'
3 13723
3 13724		  =0007					 pos = pos + 1
3 13725
3 13726
3 13727	    0E55  49							 db 'I'
3 13728
3 13729		  =0008					 pos = pos + 1
3 13730
3 13731
3 13732	    0E56  56							 db 'V'
3 13733
3 13734		  =0009					 pos = pos + 1
3 13735
3 13736	    0E57  C5					 db 'E'	+ 80h
3 13737
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 242
msx_asm\tur_slib.ASM



3 13738
3 13739		  =000A					 pos = pos + 1
3 13740
3 13741
3 13742
2 13743
1 13744	    0E58  0000e				  DW F_GETDRIVE		     ; OK
1 13745
1 13746						  DC 'TESTDRIVE'
2 13747
2 13748		  =000B				 strsize sizestr <'TESTDRIVE'>
2 13749		  =0000				 pos = 0
2 13750
2 13751						 irpc parameter,'TESTDRIVE'
2 13752							 pos = pos + 1
2 13753
2 13754							 if pos	EQ strsize - 1
2 13755							 db '&parameter' + 80h
2 13756							 endif
2 13757
2 13758							 if pos	GT 1
2 13759								 if pos	LT strsize -1
2 13760									 db '&parameter'
2 13761								 endif
2 13762							 endif
2 13763
2 13764						 endm
3 13765		  =0001					 pos = pos + 1
3 13766
3 13767
3 13768
3 13769		  =0002					 pos = pos + 1
3 13770
3 13771
3 13772	    0E5A  54							 db 'T'
3 13773
3 13774		  =0003					 pos = pos + 1
3 13775
3 13776
3 13777	    0E5B  45							 db 'E'
3 13778
3 13779		  =0004					 pos = pos + 1
3 13780
3 13781
3 13782	    0E5C  53							 db 'S'
3 13783
3 13784		  =0005					 pos = pos + 1
3 13785
3 13786
3 13787	    0E5D  54							 db 'T'
3 13788
3 13789		  =0006					 pos = pos + 1
3 13790
3 13791
3 13792	    0E5E  44							 db 'D'
3 13793
3 13794		  =0007					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 243
msx_asm\tur_slib.ASM



3 13795
3 13796
3 13797	    0E5F  52							 db 'R'
3 13798
3 13799		  =0008					 pos = pos + 1
3 13800
3 13801
3 13802	    0E60  49							 db 'I'
3 13803
3 13804		  =0009					 pos = pos + 1
3 13805
3 13806
3 13807	    0E61  56							 db 'V'
3 13808
3 13809		  =000A					 pos = pos + 1
3 13810
3 13811	    0E62  C5					 db 'E'	+ 80h
3 13812
3 13813
3 13814		  =000B					 pos = pos + 1
3 13815
3 13816
3 13817
2 13818
1 13819	    0E63  0000e				  DW F_TESTDRIVE	     ; OK
1 13820
1 13821						  DC 'GETERROR'
2 13822
2 13823		  =000A				 strsize sizestr <'GETERROR'>
2 13824		  =0000				 pos = 0
2 13825
2 13826						 irpc parameter,'GETERROR'
2 13827							 pos = pos + 1
2 13828
2 13829							 if pos	EQ strsize - 1
2 13830							 db '&parameter' + 80h
2 13831							 endif
2 13832
2 13833							 if pos	GT 1
2 13834								 if pos	LT strsize -1
2 13835									 db '&parameter'
2 13836								 endif
2 13837							 endif
2 13838
2 13839						 endm
3 13840		  =0001					 pos = pos + 1
3 13841
3 13842
3 13843
3 13844		  =0002					 pos = pos + 1
3 13845
3 13846
3 13847	    0E65  47							 db 'G'
3 13848
3 13849		  =0003					 pos = pos + 1
3 13850
3 13851
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 244
msx_asm\tur_slib.ASM



3 13852	    0E66  45							 db 'E'
3 13853
3 13854		  =0004					 pos = pos + 1
3 13855
3 13856
3 13857	    0E67  54							 db 'T'
3 13858
3 13859		  =0005					 pos = pos + 1
3 13860
3 13861
3 13862	    0E68  45							 db 'E'
3 13863
3 13864		  =0006					 pos = pos + 1
3 13865
3 13866
3 13867	    0E69  52							 db 'R'
3 13868
3 13869		  =0007					 pos = pos + 1
3 13870
3 13871
3 13872	    0E6A  52							 db 'R'
3 13873
3 13874		  =0008					 pos = pos + 1
3 13875
3 13876
3 13877	    0E6B  4F							 db 'O'
3 13878
3 13879		  =0009					 pos = pos + 1
3 13880
3 13881	    0E6C  D2					 db 'R'	+ 80h
3 13882
3 13883
3 13884		  =000A					 pos = pos + 1
3 13885
3 13886
3 13887
2 13888
1 13889	    0E6D  0000e				  DW F_GETERROR		     ; OK
1 13890
1 13891						  DC 'GETFKEY'
2 13892
2 13893		  =0009				 strsize sizestr <'GETFKEY'>
2 13894		  =0000				 pos = 0
2 13895
2 13896						 irpc parameter,'GETFKEY'
2 13897							 pos = pos + 1
2 13898
2 13899							 if pos	EQ strsize - 1
2 13900							 db '&parameter' + 80h
2 13901							 endif
2 13902
2 13903							 if pos	GT 1
2 13904								 if pos	LT strsize -1
2 13905									 db '&parameter'
2 13906								 endif
2 13907							 endif
2 13908
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 245
msx_asm\tur_slib.ASM



2 13909						 endm
3 13910		  =0001					 pos = pos + 1
3 13911
3 13912
3 13913
3 13914		  =0002					 pos = pos + 1
3 13915
3 13916
3 13917	    0E6F  47							 db 'G'
3 13918
3 13919		  =0003					 pos = pos + 1
3 13920
3 13921
3 13922	    0E70  45							 db 'E'
3 13923
3 13924		  =0004					 pos = pos + 1
3 13925
3 13926
3 13927	    0E71  54							 db 'T'
3 13928
3 13929		  =0005					 pos = pos + 1
3 13930
3 13931
3 13932	    0E72  46							 db 'F'
3 13933
3 13934		  =0006					 pos = pos + 1
3 13935
3 13936
3 13937	    0E73  4B							 db 'K'
3 13938
3 13939		  =0007					 pos = pos + 1
3 13940
3 13941
3 13942	    0E74  45							 db 'E'
3 13943
3 13944		  =0008					 pos = pos + 1
3 13945
3 13946	    0E75  D9					 db 'Y'	+ 80h
3 13947
3 13948
3 13949		  =0009					 pos = pos + 1
3 13950
3 13951
3 13952
2 13953
1 13954	    0E76  0000e				  DW F_GETFKEY		     ; OK
1 13955
1 13956						  DC 'GETPAD'
2 13957
2 13958		  =0008				 strsize sizestr <'GETPAD'>
2 13959		  =0000				 pos = 0
2 13960
2 13961						 irpc parameter,'GETPAD'
2 13962							 pos = pos + 1
2 13963
2 13964							 if pos	EQ strsize - 1
2 13965							 db '&parameter' + 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 246
msx_asm\tur_slib.ASM



2 13966							 endif
2 13967
2 13968							 if pos	GT 1
2 13969								 if pos	LT strsize -1
2 13970									 db '&parameter'
2 13971								 endif
2 13972							 endif
2 13973
2 13974						 endm
3 13975		  =0001					 pos = pos + 1
3 13976
3 13977
3 13978
3 13979		  =0002					 pos = pos + 1
3 13980
3 13981
3 13982	    0E78  47							 db 'G'
3 13983
3 13984		  =0003					 pos = pos + 1
3 13985
3 13986
3 13987	    0E79  45							 db 'E'
3 13988
3 13989		  =0004					 pos = pos + 1
3 13990
3 13991
3 13992	    0E7A  54							 db 'T'
3 13993
3 13994		  =0005					 pos = pos + 1
3 13995
3 13996
3 13997	    0E7B  50							 db 'P'
3 13998
3 13999		  =0006					 pos = pos + 1
3 14000
3 14001
3 14002	    0E7C  41							 db 'A'
3 14003
3 14004		  =0007					 pos = pos + 1
3 14005
3 14006	    0E7D  C4					 db 'D'	+ 80h
3 14007
3 14008
3 14009		  =0008					 pos = pos + 1
3 14010
3 14011
3 14012
2 14013
1 14014	    0E7E  0000e				  DW F_GETPAD		     ; OK
1 14015
1 14016						  DC 'GETPDL'
2 14017
2 14018		  =0008				 strsize sizestr <'GETPDL'>
2 14019		  =0000				 pos = 0
2 14020
2 14021						 irpc parameter,'GETPDL'
2 14022							 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 247
msx_asm\tur_slib.ASM



2 14023
2 14024							 if pos	EQ strsize - 1
2 14025							 db '&parameter' + 80h
2 14026							 endif
2 14027
2 14028							 if pos	GT 1
2 14029								 if pos	LT strsize -1
2 14030									 db '&parameter'
2 14031								 endif
2 14032							 endif
2 14033
2 14034						 endm
3 14035		  =0001					 pos = pos + 1
3 14036
3 14037
3 14038
3 14039		  =0002					 pos = pos + 1
3 14040
3 14041
3 14042	    0E80  47							 db 'G'
3 14043
3 14044		  =0003					 pos = pos + 1
3 14045
3 14046
3 14047	    0E81  45							 db 'E'
3 14048
3 14049		  =0004					 pos = pos + 1
3 14050
3 14051
3 14052	    0E82  54							 db 'T'
3 14053
3 14054		  =0005					 pos = pos + 1
3 14055
3 14056
3 14057	    0E83  50							 db 'P'
3 14058
3 14059		  =0006					 pos = pos + 1
3 14060
3 14061
3 14062	    0E84  44							 db 'D'
3 14063
3 14064		  =0007					 pos = pos + 1
3 14065
3 14066	    0E85  CC					 db 'L'	+ 80h
3 14067
3 14068
3 14069		  =0008					 pos = pos + 1
3 14070
3 14071
3 14072
2 14073
1 14074	    0E86  0000e				  DW F_GETPDL		     ; OK
1 14075
1 14076						  DC 'GETCHANNEL'
2 14077
2 14078		  =000C				 strsize sizestr <'GETCHANNEL'>
2 14079		  =0000				 pos = 0
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 248
msx_asm\tur_slib.ASM



2 14080
2 14081						 irpc parameter,'GETCHANNEL'
2 14082							 pos = pos + 1
2 14083
2 14084							 if pos	EQ strsize - 1
2 14085							 db '&parameter' + 80h
2 14086							 endif
2 14087
2 14088							 if pos	GT 1
2 14089								 if pos	LT strsize -1
2 14090									 db '&parameter'
2 14091								 endif
2 14092							 endif
2 14093
2 14094						 endm
3 14095		  =0001					 pos = pos + 1
3 14096
3 14097
3 14098
3 14099		  =0002					 pos = pos + 1
3 14100
3 14101
3 14102	    0E88  47							 db 'G'
3 14103
3 14104		  =0003					 pos = pos + 1
3 14105
3 14106
3 14107	    0E89  45							 db 'E'
3 14108
3 14109		  =0004					 pos = pos + 1
3 14110
3 14111
3 14112	    0E8A  54							 db 'T'
3 14113
3 14114		  =0005					 pos = pos + 1
3 14115
3 14116
3 14117	    0E8B  43							 db 'C'
3 14118
3 14119		  =0006					 pos = pos + 1
3 14120
3 14121
3 14122	    0E8C  48							 db 'H'
3 14123
3 14124		  =0007					 pos = pos + 1
3 14125
3 14126
3 14127	    0E8D  41							 db 'A'
3 14128
3 14129		  =0008					 pos = pos + 1
3 14130
3 14131
3 14132	    0E8E  4E							 db 'N'
3 14133
3 14134		  =0009					 pos = pos + 1
3 14135
3 14136
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 249
msx_asm\tur_slib.ASM



3 14137	    0E8F  4E							 db 'N'
3 14138
3 14139		  =000A					 pos = pos + 1
3 14140
3 14141
3 14142	    0E90  45							 db 'E'
3 14143
3 14144		  =000B					 pos = pos + 1
3 14145
3 14146	    0E91  CC					 db 'L'	+ 80h
3 14147
3 14148
3 14149		  =000C					 pos = pos + 1
3 14150
3 14151
3 14152
2 14153
1 14154	    0E92  0000e				  DW F_GETCHANNEL	     ; OK
1 14155
1 14156						  DC 'GETPAGEID'
2 14157
2 14158		  =000B				 strsize sizestr <'GETPAGEID'>
2 14159		  =0000				 pos = 0
2 14160
2 14161						 irpc parameter,'GETPAGEID'
2 14162							 pos = pos + 1
2 14163
2 14164							 if pos	EQ strsize - 1
2 14165							 db '&parameter' + 80h
2 14166							 endif
2 14167
2 14168							 if pos	GT 1
2 14169								 if pos	LT strsize -1
2 14170									 db '&parameter'
2 14171								 endif
2 14172							 endif
2 14173
2 14174						 endm
3 14175		  =0001					 pos = pos + 1
3 14176
3 14177
3 14178
3 14179		  =0002					 pos = pos + 1
3 14180
3 14181
3 14182	    0E94  47							 db 'G'
3 14183
3 14184		  =0003					 pos = pos + 1
3 14185
3 14186
3 14187	    0E95  45							 db 'E'
3 14188
3 14189		  =0004					 pos = pos + 1
3 14190
3 14191
3 14192	    0E96  54							 db 'T'
3 14193
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 250
msx_asm\tur_slib.ASM



3 14194		  =0005					 pos = pos + 1
3 14195
3 14196
3 14197	    0E97  50							 db 'P'
3 14198
3 14199		  =0006					 pos = pos + 1
3 14200
3 14201
3 14202	    0E98  41							 db 'A'
3 14203
3 14204		  =0007					 pos = pos + 1
3 14205
3 14206
3 14207	    0E99  47							 db 'G'
3 14208
3 14209		  =0008					 pos = pos + 1
3 14210
3 14211
3 14212	    0E9A  45							 db 'E'
3 14213
3 14214		  =0009					 pos = pos + 1
3 14215
3 14216
3 14217	    0E9B  49							 db 'I'
3 14218
3 14219		  =000A					 pos = pos + 1
3 14220
3 14221	    0E9C  C4					 db 'D'	+ 80h
3 14222
3 14223
3 14224		  =000B					 pos = pos + 1
3 14225
3 14226
3 14227
2 14228
1 14229	    0E9D  0000e				  DW F_GETPAGEID	     ; OK
1 14230
1 14231						  DC 'POINT'
2 14232
2 14233		  =0007				 strsize sizestr <'POINT'>
2 14234		  =0000				 pos = 0
2 14235
2 14236						 irpc parameter,'POINT'
2 14237							 pos = pos + 1
2 14238
2 14239							 if pos	EQ strsize - 1
2 14240							 db '&parameter' + 80h
2 14241							 endif
2 14242
2 14243							 if pos	GT 1
2 14244								 if pos	LT strsize -1
2 14245									 db '&parameter'
2 14246								 endif
2 14247							 endif
2 14248
2 14249						 endm
3 14250		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 251
msx_asm\tur_slib.ASM



3 14251
3 14252
3 14253
3 14254		  =0002					 pos = pos + 1
3 14255
3 14256
3 14257	    0E9F  50							 db 'P'
3 14258
3 14259		  =0003					 pos = pos + 1
3 14260
3 14261
3 14262	    0EA0  4F							 db 'O'
3 14263
3 14264		  =0004					 pos = pos + 1
3 14265
3 14266
3 14267	    0EA1  49							 db 'I'
3 14268
3 14269		  =0005					 pos = pos + 1
3 14270
3 14271
3 14272	    0EA2  4E							 db 'N'
3 14273
3 14274		  =0006					 pos = pos + 1
3 14275
3 14276	    0EA3  D4					 db 'T'	+ 80h
3 14277
3 14278
3 14279		  =0007					 pos = pos + 1
3 14280
3 14281
3 14282
2 14283
1 14284	    0EA4  0000e				  DW F_POINT		     ; OK
1 14285
1 14286						  DC 'READPSG'
2 14287
2 14288		  =0009				 strsize sizestr <'READPSG'>
2 14289		  =0000				 pos = 0
2 14290
2 14291						 irpc parameter,'READPSG'
2 14292							 pos = pos + 1
2 14293
2 14294							 if pos	EQ strsize - 1
2 14295							 db '&parameter' + 80h
2 14296							 endif
2 14297
2 14298							 if pos	GT 1
2 14299								 if pos	LT strsize -1
2 14300									 db '&parameter'
2 14301								 endif
2 14302							 endif
2 14303
2 14304						 endm
3 14305		  =0001					 pos = pos + 1
3 14306
3 14307
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 252
msx_asm\tur_slib.ASM



3 14308
3 14309		  =0002					 pos = pos + 1
3 14310
3 14311
3 14312	    0EA6  52							 db 'R'
3 14313
3 14314		  =0003					 pos = pos + 1
3 14315
3 14316
3 14317	    0EA7  45							 db 'E'
3 14318
3 14319		  =0004					 pos = pos + 1
3 14320
3 14321
3 14322	    0EA8  41							 db 'A'
3 14323
3 14324		  =0005					 pos = pos + 1
3 14325
3 14326
3 14327	    0EA9  44							 db 'D'
3 14328
3 14329		  =0006					 pos = pos + 1
3 14330
3 14331
3 14332	    0EAA  50							 db 'P'
3 14333
3 14334		  =0007					 pos = pos + 1
3 14335
3 14336
3 14337	    0EAB  53							 db 'S'
3 14338
3 14339		  =0008					 pos = pos + 1
3 14340
3 14341	    0EAC  C7					 db 'G'	+ 80h
3 14342
3 14343
3 14344		  =0009					 pos = pos + 1
3 14345
3 14346
3 14347
2 14348
1 14349	    0EAD  0000e				  DW F_READPSG		     ; OK
1 14350
1 14351						  DC 'READSTATUS'
2 14352
2 14353		  =000C				 strsize sizestr <'READSTATUS'>
2 14354		  =0000				 pos = 0
2 14355
2 14356						 irpc parameter,'READSTATUS'
2 14357							 pos = pos + 1
2 14358
2 14359							 if pos	EQ strsize - 1
2 14360							 db '&parameter' + 80h
2 14361							 endif
2 14362
2 14363							 if pos	GT 1
2 14364								 if pos	LT strsize -1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 253
msx_asm\tur_slib.ASM



2 14365									 db '&parameter'
2 14366								 endif
2 14367							 endif
2 14368
2 14369						 endm
3 14370		  =0001					 pos = pos + 1
3 14371
3 14372
3 14373
3 14374		  =0002					 pos = pos + 1
3 14375
3 14376
3 14377	    0EAF  52							 db 'R'
3 14378
3 14379		  =0003					 pos = pos + 1
3 14380
3 14381
3 14382	    0EB0  45							 db 'E'
3 14383
3 14384		  =0004					 pos = pos + 1
3 14385
3 14386
3 14387	    0EB1  41							 db 'A'
3 14388
3 14389		  =0005					 pos = pos + 1
3 14390
3 14391
3 14392	    0EB2  44							 db 'D'
3 14393
3 14394		  =0006					 pos = pos + 1
3 14395
3 14396
3 14397	    0EB3  53							 db 'S'
3 14398
3 14399		  =0007					 pos = pos + 1
3 14400
3 14401
3 14402	    0EB4  54							 db 'T'
3 14403
3 14404		  =0008					 pos = pos + 1
3 14405
3 14406
3 14407	    0EB5  41							 db 'A'
3 14408
3 14409		  =0009					 pos = pos + 1
3 14410
3 14411
3 14412	    0EB6  54							 db 'T'
3 14413
3 14414		  =000A					 pos = pos + 1
3 14415
3 14416
3 14417	    0EB7  55							 db 'U'
3 14418
3 14419		  =000B					 pos = pos + 1
3 14420
3 14421	    0EB8  D3					 db 'S'	+ 80h
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 254
msx_asm\tur_slib.ASM



3 14422
3 14423
3 14424		  =000C					 pos = pos + 1
3 14425
3 14426
3 14427
2 14428
1 14429	    0EB9  0000e				  DW F_READSTATUS	     ; OK
1 14430
1 14431						  DC 'READVDP'
2 14432
2 14433		  =0009				 strsize sizestr <'READVDP'>
2 14434		  =0000				 pos = 0
2 14435
2 14436						 irpc parameter,'READVDP'
2 14437							 pos = pos + 1
2 14438
2 14439							 if pos	EQ strsize - 1
2 14440							 db '&parameter' + 80h
2 14441							 endif
2 14442
2 14443							 if pos	GT 1
2 14444								 if pos	LT strsize -1
2 14445									 db '&parameter'
2 14446								 endif
2 14447							 endif
2 14448
2 14449						 endm
3 14450		  =0001					 pos = pos + 1
3 14451
3 14452
3 14453
3 14454		  =0002					 pos = pos + 1
3 14455
3 14456
3 14457	    0EBB  52							 db 'R'
3 14458
3 14459		  =0003					 pos = pos + 1
3 14460
3 14461
3 14462	    0EBC  45							 db 'E'
3 14463
3 14464		  =0004					 pos = pos + 1
3 14465
3 14466
3 14467	    0EBD  41							 db 'A'
3 14468
3 14469		  =0005					 pos = pos + 1
3 14470
3 14471
3 14472	    0EBE  44							 db 'D'
3 14473
3 14474		  =0006					 pos = pos + 1
3 14475
3 14476
3 14477	    0EBF  56							 db 'V'
3 14478
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 255
msx_asm\tur_slib.ASM



3 14479		  =0007					 pos = pos + 1
3 14480
3 14481
3 14482	    0EC0  44							 db 'D'
3 14483
3 14484		  =0008					 pos = pos + 1
3 14485
3 14486	    0EC1  D0					 db 'P'	+ 80h
3 14487
3 14488
3 14489		  =0009					 pos = pos + 1
3 14490
3 14491
3 14492
2 14493
1 14494	    0EC2  0000e				  DW F_READVDP		     ; OK
1 14495
1 14496						  DC 'SEARCH'
2 14497
2 14498		  =0008				 strsize sizestr <'SEARCH'>
2 14499		  =0000				 pos = 0
2 14500
2 14501						 irpc parameter,'SEARCH'
2 14502							 pos = pos + 1
2 14503
2 14504							 if pos	EQ strsize - 1
2 14505							 db '&parameter' + 80h
2 14506							 endif
2 14507
2 14508							 if pos	GT 1
2 14509								 if pos	LT strsize -1
2 14510									 db '&parameter'
2 14511								 endif
2 14512							 endif
2 14513
2 14514						 endm
3 14515		  =0001					 pos = pos + 1
3 14516
3 14517
3 14518
3 14519		  =0002					 pos = pos + 1
3 14520
3 14521
3 14522	    0EC4  53							 db 'S'
3 14523
3 14524		  =0003					 pos = pos + 1
3 14525
3 14526
3 14527	    0EC5  45							 db 'E'
3 14528
3 14529		  =0004					 pos = pos + 1
3 14530
3 14531
3 14532	    0EC6  41							 db 'A'
3 14533
3 14534		  =0005					 pos = pos + 1
3 14535
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 256
msx_asm\tur_slib.ASM



3 14536
3 14537	    0EC7  52							 db 'R'
3 14538
3 14539		  =0006					 pos = pos + 1
3 14540
3 14541
3 14542	    0EC8  43							 db 'C'
3 14543
3 14544		  =0007					 pos = pos + 1
3 14545
3 14546	    0EC9  C8					 db 'H'	+ 80h
3 14547
3 14548
3 14549		  =0008					 pos = pos + 1
3 14550
3 14551
3 14552
2 14553
1 14554	    0ECA  0000e				  DW F_SEARCH
1 14555
1 14556						  DC 'SETDATE'
2 14557
2 14558		  =0009				 strsize sizestr <'SETDATE'>
2 14559		  =0000				 pos = 0
2 14560
2 14561						 irpc parameter,'SETDATE'
2 14562							 pos = pos + 1
2 14563
2 14564							 if pos	EQ strsize - 1
2 14565							 db '&parameter' + 80h
2 14566							 endif
2 14567
2 14568							 if pos	GT 1
2 14569								 if pos	LT strsize -1
2 14570									 db '&parameter'
2 14571								 endif
2 14572							 endif
2 14573
2 14574						 endm
3 14575		  =0001					 pos = pos + 1
3 14576
3 14577
3 14578
3 14579		  =0002					 pos = pos + 1
3 14580
3 14581
3 14582	    0ECC  53							 db 'S'
3 14583
3 14584		  =0003					 pos = pos + 1
3 14585
3 14586
3 14587	    0ECD  45							 db 'E'
3 14588
3 14589		  =0004					 pos = pos + 1
3 14590
3 14591
3 14592	    0ECE  54							 db 'T'
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 257
msx_asm\tur_slib.ASM



3 14593
3 14594		  =0005					 pos = pos + 1
3 14595
3 14596
3 14597	    0ECF  44							 db 'D'
3 14598
3 14599		  =0006					 pos = pos + 1
3 14600
3 14601
3 14602	    0ED0  41							 db 'A'
3 14603
3 14604		  =0007					 pos = pos + 1
3 14605
3 14606
3 14607	    0ED1  54							 db 'T'
3 14608
3 14609		  =0008					 pos = pos + 1
3 14610
3 14611	    0ED2  C5					 db 'E'	+ 80h
3 14612
3 14613
3 14614		  =0009					 pos = pos + 1
3 14615
3 14616
3 14617
2 14618
1 14619	    0ED3  0000e				  DW F_SETDATE
1 14620
1 14621						  DC 'SETMEM'
2 14622
2 14623		  =0008				 strsize sizestr <'SETMEM'>
2 14624		  =0000				 pos = 0
2 14625
2 14626						 irpc parameter,'SETMEM'
2 14627							 pos = pos + 1
2 14628
2 14629							 if pos	EQ strsize - 1
2 14630							 db '&parameter' + 80h
2 14631							 endif
2 14632
2 14633							 if pos	GT 1
2 14634								 if pos	LT strsize -1
2 14635									 db '&parameter'
2 14636								 endif
2 14637							 endif
2 14638
2 14639						 endm
3 14640		  =0001					 pos = pos + 1
3 14641
3 14642
3 14643
3 14644		  =0002					 pos = pos + 1
3 14645
3 14646
3 14647	    0ED5  53							 db 'S'
3 14648
3 14649		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 258
msx_asm\tur_slib.ASM



3 14650
3 14651
3 14652	    0ED6  45							 db 'E'
3 14653
3 14654		  =0004					 pos = pos + 1
3 14655
3 14656
3 14657	    0ED7  54							 db 'T'
3 14658
3 14659		  =0005					 pos = pos + 1
3 14660
3 14661
3 14662	    0ED8  4D							 db 'M'
3 14663
3 14664		  =0006					 pos = pos + 1
3 14665
3 14666
3 14667	    0ED9  45							 db 'E'
3 14668
3 14669		  =0007					 pos = pos + 1
3 14670
3 14671	    0EDA  CD					 db 'M'	+ 80h
3 14672
3 14673
3 14674		  =0008					 pos = pos + 1
3 14675
3 14676
3 14677
2 14678
1 14679	    0EDB  0000e				  DW F_SETMEM		     ; OK
1 14680
1 14681						  DC 'SETTIME'
2 14682
2 14683		  =0009				 strsize sizestr <'SETTIME'>
2 14684		  =0000				 pos = 0
2 14685
2 14686						 irpc parameter,'SETTIME'
2 14687							 pos = pos + 1
2 14688
2 14689							 if pos	EQ strsize - 1
2 14690							 db '&parameter' + 80h
2 14691							 endif
2 14692
2 14693							 if pos	GT 1
2 14694								 if pos	LT strsize -1
2 14695									 db '&parameter'
2 14696								 endif
2 14697							 endif
2 14698
2 14699						 endm
3 14700		  =0001					 pos = pos + 1
3 14701
3 14702
3 14703
3 14704		  =0002					 pos = pos + 1
3 14705
3 14706
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 259
msx_asm\tur_slib.ASM



3 14707	    0EDD  53							 db 'S'
3 14708
3 14709		  =0003					 pos = pos + 1
3 14710
3 14711
3 14712	    0EDE  45							 db 'E'
3 14713
3 14714		  =0004					 pos = pos + 1
3 14715
3 14716
3 14717	    0EDF  54							 db 'T'
3 14718
3 14719		  =0005					 pos = pos + 1
3 14720
3 14721
3 14722	    0EE0  54							 db 'T'
3 14723
3 14724		  =0006					 pos = pos + 1
3 14725
3 14726
3 14727	    0EE1  49							 db 'I'
3 14728
3 14729		  =0007					 pos = pos + 1
3 14730
3 14731
3 14732	    0EE2  4D							 db 'M'
3 14733
3 14734		  =0008					 pos = pos + 1
3 14735
3 14736	    0EE3  C5					 db 'E'	+ 80h
3 14737
3 14738
3 14739		  =0009					 pos = pos + 1
3 14740
3 14741
3 14742
2 14743
1 14744	    0EE4  0000e				  DW F_SETTIME
1 14745
1 14746						  DC 'STICK'
2 14747
2 14748		  =0007				 strsize sizestr <'STICK'>
2 14749		  =0000				 pos = 0
2 14750
2 14751						 irpc parameter,'STICK'
2 14752							 pos = pos + 1
2 14753
2 14754							 if pos	EQ strsize - 1
2 14755							 db '&parameter' + 80h
2 14756							 endif
2 14757
2 14758							 if pos	GT 1
2 14759								 if pos	LT strsize -1
2 14760									 db '&parameter'
2 14761								 endif
2 14762							 endif
2 14763
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 260
msx_asm\tur_slib.ASM



2 14764						 endm
3 14765		  =0001					 pos = pos + 1
3 14766
3 14767
3 14768
3 14769		  =0002					 pos = pos + 1
3 14770
3 14771
3 14772	    0EE6  53							 db 'S'
3 14773
3 14774		  =0003					 pos = pos + 1
3 14775
3 14776
3 14777	    0EE7  54							 db 'T'
3 14778
3 14779		  =0004					 pos = pos + 1
3 14780
3 14781
3 14782	    0EE8  49							 db 'I'
3 14783
3 14784		  =0005					 pos = pos + 1
3 14785
3 14786
3 14787	    0EE9  43							 db 'C'
3 14788
3 14789		  =0006					 pos = pos + 1
3 14790
3 14791	    0EEA  CB					 db 'K'	+ 80h
3 14792
3 14793
3 14794		  =0007					 pos = pos + 1
3 14795
3 14796
3 14797
2 14798
1 14799	    0EEB  0000e				  DW F_STICK		     ; OK
1 14800
1 14801						  DC 'STRIG'
2 14802
2 14803		  =0007				 strsize sizestr <'STRIG'>
2 14804		  =0000				 pos = 0
2 14805
2 14806						 irpc parameter,'STRIG'
2 14807							 pos = pos + 1
2 14808
2 14809							 if pos	EQ strsize - 1
2 14810							 db '&parameter' + 80h
2 14811							 endif
2 14812
2 14813							 if pos	GT 1
2 14814								 if pos	LT strsize -1
2 14815									 db '&parameter'
2 14816								 endif
2 14817							 endif
2 14818
2 14819						 endm
3 14820		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 261
msx_asm\tur_slib.ASM



3 14821
3 14822
3 14823
3 14824		  =0002					 pos = pos + 1
3 14825
3 14826
3 14827	    0EED  53							 db 'S'
3 14828
3 14829		  =0003					 pos = pos + 1
3 14830
3 14831
3 14832	    0EEE  54							 db 'T'
3 14833
3 14834		  =0004					 pos = pos + 1
3 14835
3 14836
3 14837	    0EEF  52							 db 'R'
3 14838
3 14839		  =0005					 pos = pos + 1
3 14840
3 14841
3 14842	    0EF0  49							 db 'I'
3 14843
3 14844		  =0006					 pos = pos + 1
3 14845
3 14846	    0EF1  C7					 db 'G'	+ 80h
3 14847
3 14848
3 14849		  =0007					 pos = pos + 1
3 14850
3 14851
3 14852
2 14853
1 14854	    0EF2  0000e				  DW F_STRIG		     ; OK
1 14855
1 14856						  DC 'VPEEK'
2 14857
2 14858		  =0007				 strsize sizestr <'VPEEK'>
2 14859		  =0000				 pos = 0
2 14860
2 14861						 irpc parameter,'VPEEK'
2 14862							 pos = pos + 1
2 14863
2 14864							 if pos	EQ strsize - 1
2 14865							 db '&parameter' + 80h
2 14866							 endif
2 14867
2 14868							 if pos	GT 1
2 14869								 if pos	LT strsize -1
2 14870									 db '&parameter'
2 14871								 endif
2 14872							 endif
2 14873
2 14874						 endm
3 14875		  =0001					 pos = pos + 1
3 14876
3 14877
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 262
msx_asm\tur_slib.ASM



3 14878
3 14879		  =0002					 pos = pos + 1
3 14880
3 14881
3 14882	    0EF4  56							 db 'V'
3 14883
3 14884		  =0003					 pos = pos + 1
3 14885
3 14886
3 14887	    0EF5  50							 db 'P'
3 14888
3 14889		  =0004					 pos = pos + 1
3 14890
3 14891
3 14892	    0EF6  45							 db 'E'
3 14893
3 14894		  =0005					 pos = pos + 1
3 14895
3 14896
3 14897	    0EF7  45							 db 'E'
3 14898
3 14899		  =0006					 pos = pos + 1
3 14900
3 14901	    0EF8  CB					 db 'K'	+ 80h
3 14902
3 14903
3 14904		  =0007					 pos = pos + 1
3 14905
3 14906
3 14907
2 14908
1 14909	    0EF9  0000e				  DW F_VPEEK
1 14910
1 14911	    0EFB  00				  DB 0			     ; end of this table
1 14912
1 14913						  END
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 263
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/26/99"
??FILENAME			  Text	 "tur_slib"
??TIME				  Text	 "21:37:03"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 1F1FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TUR_SLIB
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 @STACK
@WORDSIZE			  Text	 4
DEF_TYPE			  Near	 _TEXT:---- Extern
DOS_BLEN			  Number 0004
DOS_BUF				  Number 0051
DOS_CHR				  Number 0001
DOS_CUR				  Number 000C
DOS_FCB				  Number 0010
DOS_FLG				  Number 0000
DOS_LEN				  Number 00D1
DOS_NUM				  Number 0006
DOS_PTR				  Number 0002
DOS_REC				  Number 000A
FASTWRITE			  Near	 _TEXT:0000
FCB_DRIVE			  Number 0000
FCB_EXT				  Number 0009
FCB_FILEPOS			  Number 0021
FCB_FILESIZE			  Number 0010
FCB_LEN				  Number 0024
FCB_NAME			  Number 0001
FCB_RECSIZE			  Number 000E
FIB_BUF				  Number 0030
FIB_CHR				  Number 0001
FIB_CUR				  Number 0008
FIB_F				  Number 0000
FIB_FCB				  Number 000C
FIB_LEN				  Number 00B0
FIB_NUM				  Number 0004
FIB_PTR				  Number 0002
FIB_REC				  Number 0006
FIL_HDR				  Number 0004
F_FINDFIRST			  Near	 _TEXT:---- Extern
F_FINDNEXT			  Near	 _TEXT:---- Extern
F_GETCHANNEL			  Near	 _TEXT:---- Extern
F_GETCLIPPING			  Near	 _TEXT:---- Extern
F_GETDRIVE			  Near	 _TEXT:---- Extern
F_GETERROR			  Near	 _TEXT:---- Extern
F_GETFKEY			  Near	 _TEXT:---- Extern
F_GETPAD			  Near	 _TEXT:---- Extern
F_GETPAGEID			  Near	 _TEXT:---- Extern
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 264
Symbol Table



F_GETPDL			  Near	 _TEXT:---- Extern
F_POINT				  Near	 _TEXT:---- Extern
F_READPSG			  Near	 _TEXT:---- Extern
F_READSTATUS			  Near	 _TEXT:---- Extern
F_READVDP			  Near	 _TEXT:---- Extern
F_SEARCH			  Near	 _TEXT:---- Extern
F_SETDATE			  Near	 _TEXT:---- Extern
F_SETMEM			  Near	 _TEXT:---- Extern
F_SETTIME			  Near	 _TEXT:---- Extern
F_SIMULATEDDISK			  Near	 _TEXT:---- Extern
F_STICK				  Near	 _TEXT:---- Extern
F_STRIG				  Near	 _TEXT:---- Extern
F_TESTDRIVE			  Near	 _TEXT:---- Extern
F_TSRPRESENT			  Near	 _TEXT:---- Extern
F_VPEEK				  Near	 _TEXT:---- Extern
L5271				  Word	 _TEXT:---- Extern
L5287				  Word	 _TEXT:---- Extern
L5639				  Word	 _TEXT:---- Extern
L58C5				  Word	 _TEXT:---- Extern
L5943				  Near	 _TEXT:0013
L5955				  Near	 _TEXT:0026
L5960				  Word	 _TEXT:---- Extern
L5966				  Near	 _TEXT:0034
L5971				  Near	 _TEXT:0052
L5979				  Near	 _TEXT:005B
L597E				  Near	 _TEXT:0060
L5981				  Near	 _TEXT:0063
L5985				  Near	 _TEXT:0067
L5986				  Near	 _TEXT:0068
L598C				  Near	 _TEXT:006E
L599F				  Near	 _TEXT:0081
L59AB				  Near	 _TEXT:008D
L59B9				  Near	 _TEXT:009B
L59BE				  Near	 _TEXT:00A0
L59C1				  Near	 _TEXT:00A3
L59D8				  Near	 _TEXT:00BE
L59DB				  Near	 _TEXT:00E0
L59E1				  Near	 _TEXT:00E6
L59E9				  Word	 _TEXT:---- Extern
L59FA				  Near	 _TEXT:0001
L5A00				  Near	 _TEXT:0007
L5A06				  Near	 _TEXT:000D
L5A0C				  Word	 _TEXT:---- Extern
L5A17				  Word	 _TEXT:---- Extern
L5A32				  Near	 _TEXT:00EF
L5A33				  Near	 _TEXT:00F3
L5A34				  Near	 _TEXT:00F4
L5A41				  Near	 _TEXT:0101
L5A5B				  Near	 _TEXT:011B
L5A63				  Near	 _TEXT:0123
L5A66				  Near	 _TEXT:0126
L5A69				  Near	 _TEXT:0129
L5A78				  Near	 _TEXT:0138
L5A7C				  Near	 _TEXT:013C
L5A8F				  Near	 _TEXT:014E
L5A90				  Near	 _TEXT:015C
L5AAC				  Near	 _TEXT:0165
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 265
Symbol Table



L5AB4				  Near	 _TEXT:016D
L5AB7				  Near	 _TEXT:0170
L5ABE				  Near	 _TEXT:0177
L5ACA				  Near	 _TEXT:0191
L5AE4				  Near	 _TEXT:01AB
L5AE7				  Near	 _TEXT:01AE
L5AE71				  Near	 _TEXT:01B2
L5AE72				  Near	 _TEXT:01B3
L5AE8				  Near	 _TEXT:01BA
L5AE81				  Near	 _TEXT:01BE
L5AE82				  Near	 _TEXT:01BF
L5AE9				  Near	 _TEXT:01C3
L5AFA				  Near	 _TEXT:01D4
L5B15				  Near	 _TEXT:01EF
L5B20				  Near	 _TEXT:01FA
L5B26				  Near	 _TEXT:0200
L5B3B				  Near	 _TEXT:021C
L5B47				  Near	 _TEXT:0228
L5B4C				  Near	 _TEXT:022D
L5B4F				  Near	 _TEXT:0232
L5B58				  Near	 _TEXT:023B
L5B5C				  Near	 _TEXT:023F
L5B6A				  Near	 _TEXT:024D
L5B72				  Near	 _TEXT:0255
L5B8B				  Near	 _TEXT:026E
L5B95				  Near	 _TEXT:0278
L5B9D				  Near	 _TEXT:0280
L5BA6				  Near	 _TEXT:0289
L5BC9				  Near	 _TEXT:0293
L5BD2				  Near	 _TEXT:029C
L5BD8				  Near	 _TEXT:02B0
L5BDD				  Near	 _TEXT:02B5
L5BE0				  Near	 _TEXT:02B8
L5BF7				  Near	 _TEXT:02CF
L5C10				  Near	 _TEXT:02E8
L5C16				  Near	 _TEXT:02EE
L5C1E				  Near	 _TEXT:02F6
L5C24				  Near	 _TEXT:02FC
L5C4B				  Near	 _TEXT:0323
L5C5F				  Near	 _TEXT:0337
L5C63				  Near	 _TEXT:033B
L5C66				  Near	 _TEXT:033E
L5C81				  Near	 _TEXT:0359
L5C87				  Near	 _TEXT:035F
L5CAD				  Word	 _TEXT:---- Extern
L5CBA				  Near	 _TEXT:0385
L5CE4				  Near	 _TEXT:03B5
L5CEE				  Near	 _TEXT:03C3
L5CF9				  Near	 _TEXT:03D2
L5D02				  Near	 _TEXT:03DB
L5D1F				  Near	 _TEXT:03FF
L5D22				  Near	 _TEXT:0402
L5D41				  Near	 _TEXT:0425
L5D45				  Near	 _TEXT:0429
L5D5C				  Near	 _TEXT:0440
L5D60				  Near	 _TEXT:0444
L5D6D				  Near	 _TEXT:0458
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 266
Symbol Table



L5D76				  Word	 _TEXT:---- Extern
L5D83				  Near	 _TEXT:0464
L5D89				  Near	 _TEXT:046A
L5D94				  Near	 _TEXT:04AB
L5D9F				  Near	 _TEXT:04B6
L5DAE				  Near	 _TEXT:04C5
L5DB4				  Near	 _TEXT:04CB
L5DBF				  Near	 _TEXT:04D6
L5DCE				  Near	 _TEXT:04E5
L5DD4				  Near	 _TEXT:04EB
L5DD9				  Near	 _TEXT:04F0
L5DDC				  Near	 _TEXT:04F3
L5DE3				  Near	 _TEXT:04FB
L5DE9				  Near	 _TEXT:0501
L5DF9				  Near	 _TEXT:0511
L5E05				  Near	 _TEXT:0476
L5E1A				  Near	 _TEXT:048B
L5E38				  Near	 _TEXT:051D
L5E3D				  Near	 _TEXT:0522
L5E42				  Near	 _TEXT:0527
L5E45				  Near	 _TEXT:052A
L5E48				  Near	 _TEXT:052D
L5E4D				  Near	 _TEXT:0532
L5E52				  Near	 _TEXT:0537
L5E57				  Near	 _TEXT:053C
L5E5C				  Near	 _TEXT:0541
L5E61				  Near	 _TEXT:0557
L5E67				  Near	 _TEXT:055D
L5E6D				  Near	 _TEXT:0563
L5E78				  Near	 _TEXT:056E
L5E8E				  Word	 _TEXT:---- Extern
L5E97				  Word	 _TEXT:---- Extern
L5EA2				  Word	 _TEXT:---- Extern
L5EBB				  Word	 _TEXT:---- Extern
L5EBE				  Word	 _TEXT:---- Extern
L5ED0				  Word	 _TEXT:---- Extern
L5EDD				  Word	 _TEXT:---- Extern
L5EE8				  Word	 _TEXT:---- Extern
L6148				  Word	 _TEXT:---- Extern
L6201				  Word	 _TEXT:---- Extern
L620F				  Word	 _TEXT:---- Extern
L6360				  Near	 _TEXT:057A
L636E				  Near	 _TEXT:058F
L6371				  Near	 _TEXT:0592
L6380				  Near	 _TEXT:05A5
L63801				  Near	 _TEXT:05AA
L6385				  Near	 _TEXT:05B2
L638A				  Near	 _TEXT:05B7
L638F				  Near	 _TEXT:05BC
L6394				  Near	 _TEXT:05C1
L6399				  Near	 _TEXT:05C6
L639E				  Near	 _TEXT:05CB
L63A3				  Near	 _TEXT:05D0
L63A8				  Near	 _TEXT:05D5
L63AB				  Near	 _TEXT:05D8
L63AC				  Near	 _TEXT:05EB
L63AD				  Near	 _TEXT:05EE
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 267
Symbol Table



L63BE				  Near	 _TEXT:05F4
L63C3				  Near	 _TEXT:05F9
L63C6				  Near	 _TEXT:05FC
L63CF				  Near	 _TEXT:0608
L63D4				  Near	 _TEXT:060D
L63D5				  Near	 _TEXT:061D
L63D7				  Near	 _TEXT:0622
L63D8				  Near	 _TEXT:0632
L63E1				  Near	 _TEXT:0637
L63E2				  Near	 _TEXT:0644
L63EB				  Near	 _TEXT:064B
L63EC				  Near	 _TEXT:065C
L63F6				  Near	 _TEXT:0664
L63F7				  Near	 _TEXT:0673
L6401				  Near	 _TEXT:067B
L6407				  Near	 _TEXT:0683
L640C				  Near	 _TEXT:0688
L6411				  Near	 _TEXT:068D
L6422				  Near	 _TEXT:06A0
L6425				  Near	 _TEXT:06A3
L642B				  Near	 _TEXT:06AB
L6437				  Near	 _TEXT:06B7
L6441				  Near	 _TEXT:06C4
L6447				  Near	 _TEXT:06CA
L6452				  Near	 _TEXT:06D5
L6460				  Near	 _TEXT:06E3
L647E				  Near	 _TEXT:0701
L6481				  Near	 _TEXT:0704
L6487				  Near	 _TEXT:070A
L6497				  Near	 _TEXT:071A
L649C				  Near	 _TEXT:071F
L64A1				  Near	 _TEXT:0724
L64AC				  Near	 _TEXT:072F
L64BF				  Near	 _TEXT:0742
L64C1				  Near	 _TEXT:0744
L64C4				  Near	 _TEXT:0747
L64C9				  Near	 _TEXT:074C
L64D2				  Near	 _TEXT:0755
L64D5				  Near	 _TEXT:075E
L64DA				  Near	 _TEXT:0763
L64DF				  Near	 _TEXT:0768
L64E2				  Near	 _TEXT:076B
L64F2				  Near	 _TEXT:077B
L64FA				  Near	 _TEXT:0783
L6500				  Near	 _TEXT:0789
L6514				  Near	 _TEXT:07A2
L6519				  Near	 _TEXT:07A7
L651E				  Near	 _TEXT:07AC
L651F				  Near	 _TEXT:07B0
L6520				  Near	 _TEXT:07B1
L6538				  Near	 _TEXT:07C9
L6540				  Word	 _TEXT:---- Extern
L6553				  Near	 _TEXT:07D4
L6554				  Near	 _TEXT:07D8
L6555				  Near	 _TEXT:07D9
L656C				  Near	 _TEXT:07F0
L6576				  Near	 _TEXT:07FB
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 268
Symbol Table



L6589				  Near	 _TEXT:080E
L658F				  Near	 _TEXT:0814
L6594				  Near	 _TEXT:0819
L6597				  Near	 _TEXT:081C
L659D				  Near	 _TEXT:0822
L65B1				  Near	 _TEXT:0836
L65BA				  Near	 _TEXT:083F
L65BF				  Near	 _TEXT:0844
L65CA				  Near	 _TEXT:084F
L65D5				  Word	 _TEXT:---- Extern
L65DE				  Word	 _TEXT:---- Extern
L65E7				  Word	 _TEXT:---- Extern
L65EF				  Word	 _TEXT:---- Extern
L65F7				  Word	 _TEXT:---- Extern
L6615				  Near	 _TEXT:0758
L677F				  Word	 _TEXT:---- Extern
L678B				  Word	 _TEXT:---- Extern
L6A5C				  Word	 _TEXT:---- Extern
L6B5E				  Word	 _TEXT:---- Extern
L6CC2				  Word	 _TEXT:---- Extern
L6D24				  Word	 _TEXT:---- Extern
L6D43				  Word	 _TEXT:---- Extern
L6E54				  Word	 _TEXT:---- Extern
L6F0B				  Word	 _TEXT:---- Extern
L6F13				  Word	 _TEXT:---- Extern
L6F1B				  Word	 _TEXT:---- Extern
L6F5E				  Word	 _TEXT:---- Extern
L6F66				  Word	 _TEXT:---- Extern
L6F6E				  Word	 _TEXT:---- Extern
L6F7E				  Word	 _TEXT:---- Extern
L72D4				  Word	 _TEXT:---- Extern
L72DA				  Word	 _TEXT:---- Extern
L72E1				  Near	 _TEXT:---- Extern
L7638				  Near	 _TEXT:0866
L77B1				  Near	 _TEXT:0CCB
L78CD				  Near	 _TEXT:00C1
L78E3				  Near	 _TEXT:00D7
L7B5C				  Near	 _TEXT:---- Extern
L7B5E				  Word	 _TEXT:---- Extern
L7B62				  Near	 _TEXT:---- Extern
L7B6F				  Word	 _TEXT:---- Extern
L7B8B				  Word	 _TEXT:---- Extern
L7B9E				  Word	 _TEXT:---- Extern
L7BA3				  Word	 _TEXT:---- Extern
L7BA7				  Word	 _TEXT:---- Extern
L7FA9				  Near	 _TEXT:079D
MSX				  Near	 _TEXT:0000
MSXDOS				  Number 0005
O_BYTE				  Near	 _TEXT:---- Extern
O_CALHL				  Near	 _TEXT:---- Extern
O_CODE				  Near	 _TEXT:---- Extern
O_HL				  Near	 _TEXT:---- Extern
O_JPHL				  Near	 _TEXT:---- Extern
O_LDDE				  Near	 _TEXT:---- Extern
O_LDHL				  Near	 _TEXT:---- Extern
O_PSHHL				  Near	 _TEXT:---- Extern
PARSELONG			  Word	 _TEXT:---- Extern
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 269
Symbol Table



PARSE_O_IL_C			  Word	 _TEXT:---- Extern
POS				  Number 0007
P_BLOAD				  Near	 _TEXT:---- Extern
P_BSAVE				  Near	 _TEXT:---- Extern
P_CHANGECOLOR			  Near	 _TEXT:---- Extern
P_CHANGESCREEN			  Near	 _TEXT:---- Extern
P_CIRCLE			  Near	 _TEXT:---- Extern
P_CLEARMEM			  Near	 _TEXT:---- Extern
P_DATE				  Near	 _TEXT:---- Extern
P_DEFINEPICTURE			  Near	 _TEXT:---- Extern
P_DELETEFILE			  Near	 _TEXT:---- Extern
P_DISPLAYPAGE			  Near	 _TEXT:---- Extern
P_DOSERRORHANDLEROFF		  Near	 _TEXT:0860
P_DOSERRORHANDLERON		  Near	 _TEXT:085A
P_ELLIPSE			  Near	 _TEXT:---- Extern
P_ERROREXIT			  Near	 _TEXT:0546
P_ERROREXIT1			  Near	 _TEXT:0551
P_EXPAND			  Near	 _TEXT:---- Extern
P_FASTBOX			  Near	 _TEXT:---- Extern
P_FASTCOPY			  Near	 _TEXT:---- Extern
P_FILLBOX			  Near	 _TEXT:---- Extern
P_FILLSHAPE			  Near	 _TEXT:---- Extern
P_FILLSPRITE			  Near	 _TEXT:---- Extern
P_GCOPY				  Near	 _TEXT:---- Extern
P_GETDOSVERSION			  Near	 _TEXT:---- Extern
P_GETVIEWPORT			  Near	 _TEXT:---- Extern
P_LINE				  Near	 _TEXT:---- Extern
P_LOADPICTURE			  Near	 _TEXT:---- Extern
P_LOADVRAM			  Near	 _TEXT:---- Extern
P_MEMAPPENDFILE			  Near	 _TEXT:---- Extern
P_MEMCOPY			  Near	 _TEXT:---- Extern
P_MEMEXPAND			  Near	 _TEXT:---- Extern
P_MEMLOADPICTURE		  Near	 _TEXT:---- Extern
P_MEMREADFILE			  Near	 _TEXT:---- Extern
P_MEMSAVEPICTURE		  Near	 _TEXT:---- Extern
P_MEMTOVRAM			  Near	 _TEXT:---- Extern
P_MEMWRITEFILE			  Near	 _TEXT:---- Extern
P_MOVEVRAM			  Near	 _TEXT:---- Extern
P_PAINT				  Near	 _TEXT:---- Extern
P_PFILLSHAPE			  Near	 _TEXT:---- Extern
P_PPAINT			  Near	 _TEXT:---- Extern
P_PSET				  Near	 _TEXT:---- Extern
P_PUTSPRITE			  Near	 _TEXT:---- Extern
P_READMEM			  Near	 _TEXT:---- Extern
P_READSECTOR			  Near	 _TEXT:---- Extern
P_RENAMEFILE			  Near	 _TEXT:0040
P_SAVEPICTURE			  Near	 _TEXT:---- Extern
P_SCREEN			  Near	 _TEXT:---- Extern
P_SCREENOFF			  Near	 _TEXT:---- Extern
P_SCREENON			  Near	 _TEXT:---- Extern
P_SETCHANNEL			  Near	 _TEXT:---- Extern
P_SETCLIPPING			  Near	 _TEXT:---- Extern
P_SETVIEWPORT			  Near	 _TEXT:---- Extern
P_SOUND				  Near	 _TEXT:---- Extern
P_SPRITEATTRIBUTEADDRESS	  Near	 _TEXT:---- Extern
P_SPRITECOLOR			  Near	 _TEXT:---- Extern
P_SPRITEPATTERN			  Near	 _TEXT:---- Extern
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 270
Symbol Table



P_SPRITEPATTERNADDRESS		  Near	 _TEXT:---- Extern
P_SPRITESIZE			  Near	 _TEXT:---- Extern
P_SPRITESOFF			  Near	 _TEXT:---- Extern
P_SPRITESON			  Near	 _TEXT:---- Extern
P_TIME				  Near	 _TEXT:---- Extern
P_VPOKE				  Near	 _TEXT:---- Extern
P_WAITVDP			  Near	 _TEXT:---- Extern
P_WRITEMEM			  Near	 _TEXT:---- Extern
P_WRITESECTOR			  Near	 _TEXT:---- Extern
P_WRITEVDP			  Near	 _TEXT:---- Extern
READTYPESTABLE			  Near	 _TEXT:0183
STRSIZE				  Number 0007
TABLEINDEX2			  Near	 _TEXT:---- Extern
WRITETYPESTABLE			  Near	 _TEXT:02A2
_AUXINPTR			  Number OFFSET	0177
_AUXOUTPTR			  Number OFFSET	0174
_BUFLEN				  Number OFFSET	018C
_CBREAK				  Number OFFSET	0190
_CONINPTR			  Number OFFSET	016B
_CONOUTPTR			  Number OFFSET	016E
_CONSTPTR			  Number OFFSET	0168
_DOSERRORHANDLEROFF		  Number OFFSET	2887
_DOSERRORHANDLERON		  Number OFFSET	2884
_ERROREXIT			  Number OFFSET	286F
_ERRORPTR			  Number OFFSET	018D
_GETERROR_LIB			  Number OFFSET	2703
_GIOSOK				  Number OFFSET	0581
_GIOSVER			  Number OFFSET	0582
_HEAPPTR			  Number OFFSET	0192
_L00B8				  Number OFFSET	0180
_L00BA				  Number OFFSET	0182
_L00BE				  Number OFFSET	0186
_L00C0				  Number OFFSET	0188
_L021D				  Number OFFSET	02D0
_L023E				  Number OFFSET	02F1
_L0259				  Number OFFSET	030C
_L0262				  Number OFFSET	0315
_L026B				  Number OFFSET	031E
_L0284				  Number OFFSET	0337
_L0299				  Number OFFSET	034C
_L030A				  Number OFFSET	03BD
_L0310				  Number OFFSET	03C3
_L0364				  Number OFFSET	0420
_L04D4				  Number OFFSET	06C3
_L0508				  Number OFFSET	06F4
_L0522				  Number OFFSET	070E
_L052C				  Number OFFSET	0717
_L053A				  Number OFFSET	0725
_L054D				  Number OFFSET	0738
_L055D				  Number OFFSET	0748
_L0581				  Number OFFSET	076C
_L0591				  Number OFFSET	077C
_L059B				  Number OFFSET	0786
_L05D1				  Number OFFSET	07BC
_L05E2				  Number OFFSET	07CD
_L0601				  Number OFFSET	07EC
_L0612				  Number OFFSET	07FD
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 271
Symbol Table



_L0623				  Number OFFSET	080E
_L0638				  Number OFFSET	0823
_L064C				  Number OFFSET	0837
_L0656				  Number OFFSET	0841
_L0666				  Number OFFSET	0851
_L0676				  Number OFFSET	0861
_L067F				  Number OFFSET	086A
_L0688				  Number OFFSET	0889
_L068D				  Number OFFSET	088F
_L0692				  Number OFFSET	0895
_L069B				  Number OFFSET	08A3
_L06A0				  Number OFFSET	08A8
_L06A5				  Number OFFSET	08AD
_L06AE				  Number OFFSET	08BB
_L06B3				  Number OFFSET	08C0
_L06B8				  Number OFFSET	08C5
_L06C2				  Number OFFSET	08D4
_L06C7				  Number OFFSET	08D9
_L06CC				  Number OFFSET	08DE
_L06D6				  Number OFFSET	08ED
_L06DB				  Number OFFSET	08F2
_L06E0				  Number OFFSET	08F7
_L06E9				  Number OFFSET	0905
_L06EE				  Number OFFSET	090A
_L06F3				  Number OFFSET	090F
_L06F5				  Number OFFSET	0911
_L070F				  Number OFFSET	092B
_L073B				  Number OFFSET	0999
_L0745				  Number OFFSET	09A3
_L074E				  Number OFFSET	09B0
_L0756				  Number OFFSET	09B8
_L0780				  Number OFFSET	09E2
_L0783				  Number OFFSET	09E5
_L078B				  Number OFFSET	09ED
_L083D				  Number OFFSET	0D66
_L086B				  Number OFFSET	0D94
_L08A3				  Number OFFSET	0DCC
_L08B2				  Number OFFSET	0DDB
_L08F3				  Number OFFSET	0E1C
_L0920				  Number OFFSET	0E49
_L0996				  Number OFFSET	0EBF
_L09A2				  Number OFFSET	0ECB
_L09E9				  Number OFFSET	0F12
_L09F2				  Number OFFSET	0F1B
_L09F7				  Number OFFSET	0F20
_L09FA				  Number OFFSET	0F23
_L09FF				  Number OFFSET	0F28
_L0BFD				  Number OFFSET	1171
_L0C34				  Number OFFSET	11A8
_L0C46				  Number OFFSET	11BA
_L0C7F				  Number OFFSET	11F3
_L0C87				  Number OFFSET	11FB
_L0D2B				  Number OFFSET	129F
_L0DB6				  Number OFFSET	132A
_L0E46				  Number OFFSET	13BA
_L0FB4				  Number OFFSET	1528
_L0FD0				  Number OFFSET	1544
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 272
Symbol Table



_L0FDE				  Number OFFSET	1552
_L1008				  Number OFFSET	1581
_L12DD				  Number OFFSET	18AA
_L12E1				  Number OFFSET	18AE
_L12FC				  Number OFFSET	18C9
_L1300				  Number OFFSET	18CD
_L1318				  Number OFFSET	18E5
_L1326				  Number OFFSET	18F3
_L1333				  Number OFFSET	1900
_L134F				  Number OFFSET	191C
_L136F				  Number OFFSET	193C
_L1370				  Number OFFSET	193D
_L13FE				  Number OFFSET	19D6
_L13FF				  Number OFFSET	19D7
_L1469				  Number OFFSET	1A45
_L149B				  Number OFFSET	1A77
_L14A9				  Number OFFSET	1A85
_L14BA				  Number OFFSET	1A96
_L14CB				  Number OFFSET	1AA7
_L14CC				  Number OFFSET	1AAB
_L1644				  Number OFFSET	1C67
_L164D				  Number OFFSET	1C70
_L164E				  Number OFFSET	1C74
_L1671				  Number OFFSET	1C98
_L1672				  Number OFFSET	1CBE
_L168E				  Number OFFSET	1CDA
_L16AB				  Number OFFSET	1CF7
_L1722				  Number OFFSET	1D83
_L1726				  Number OFFSET	1D87
_L1779				  Number OFFSET	1DDA
_L178B				  Number OFFSET	1E18
_L17AA				  Number OFFSET	1E37
_L17BA				  Number OFFSET	1E47
_L17CD				  Number OFFSET	1E5A
_L17D7				  Number OFFSET	1E64
_L17DC				  Number OFFSET	1E69
_L17E1				  Number OFFSET	1E6E
_L17E6				  Number OFFSET	1E73
_L1810				  Number OFFSET	1E9D
_L1811				  Number OFFSET	1EA2
_L187A				  Number OFFSET	1F40
_L18A4				  Number OFFSET	1F4A
_L18B6				  Number OFFSET	1F5E
_L18DC				  Number OFFSET	1F80
_L19A5				  Number OFFSET	1F8E
_L19D5				  Number OFFSET	1FBA
_L1A49				  Number OFFSET	2014
_L1A55				  Number OFFSET	2028
_L1A5D				  Number OFFSET	203F
_L1A6F				  Number OFFSET	2052
_L1A70				  Number OFFSET	2057
_L1AB0				  Number OFFSET	20B8
_L1ABA				  Number OFFSET	20C2
_L1ABE				  Number OFFSET	20C6
_L1AED				  Number OFFSET	2192
_L1AF1				  Number OFFSET	2196
_L1B6F				  Number OFFSET	21C4
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 273
Symbol Table



_L1B93				  Number OFFSET	2213
_L1BA5				  Number OFFSET	224F
_L1BEA				  Number OFFSET	227A
_L1BEB				  Number OFFSET	227E
_L1CDB				  Number OFFSET	23C6
_L1CE5				  Number OFFSET	23D0
_L1D7A				  Number OFFSET	2465
_L1E3D				  Number OFFSET	2528
_L1E44				  Number OFFSET	252F
_L1EA3				  Number OFFSET	258E
_L1EAB				  Number OFFSET	2596
_L1EBC				  Number OFFSET	25A8
_L1EBD				  Number OFFSET	25AC
_L1EBE				  Number OFFSET	25B0
_L1EF2				  Number OFFSET	25EC
_L1EF3				  Number OFFSET	25F0
_L1EF4				  Number OFFSET	25F4
_L1F48				  Number OFFSET	2650
_L1F4E				  Number OFFSET	2656
_L1F64				  Number OFFSET	266C
_L1F7D				  Number OFFSET	2685
_L1F9B				  Number OFFSET	26A3
_L1FDB				  Number OFFSET	26E3
_L1FE4				  Number OFFSET	26EC
_L1FEA				  Number OFFSET	26F2
_L1FF1				  Number OFFSET	26F9
_L201B				  Number OFFSET	272A
_L20D4				  Number OFFSET	27FD
_L20E2				  Number OFFSET	2E9B
_LOADRUNOVERLAY			  Number OFFSET	2339
_LOADRUNOVERLAYREC		  Number OFFSET	232C
_LST				  Number OFFSET	0184
_LSTOUTPTR			  Number OFFSET	0171
_L_ABS				  Number OFFSET	0A61
_L_ADD				  Number OFFSET	0A74
_L_AND				  Number OFFSET	0A1E
_L_DIV				  Number OFFSET	0B16
_L_EQ				  Number OFFSET	0883
_L_FOR_DOWNTO			  Number OFFSET	0851
_L_FOR_TO			  Number OFFSET	0851
_L_GT				  Number OFFSET	08E8
_L_GTE				  Number OFFSET	08B6
_L_LS				  Number OFFSET	0900
_L_LSE				  Number OFFSET	08CF
_L_MOD				  Number OFFSET	0B2C
_L_MUL				  Number OFFSET	0A9A
_L_NEG				  Number OFFSET	0A64
_L_NEQ				  Number OFFSET	089E
_L_NOT				  Number OFFSET	0A54
_L_OR				  Number OFFSET	0A30
_L_PRED				  Number OFFSET	0873
_L_R				  Number OFFSET	15A0
_L_SHL				  Number OFFSET	0BD5
_L_SHR				  Number OFFSET	0BF1
_L_SQR				  Number OFFSET	0A94
_L_SUB				  Number OFFSET	0A7F
_L_SUCC				  Number OFFSET	087C
Turbo Assembler	 Version 3.2	    03/26/99 21:37:03	    Page 274
Symbol Table



_L_XOR				  Number OFFSET	0A42
_MEMMAN				  Number OFFSET	057E
_MEMMNVER			  Number OFFSET	057F
_OUTPUT				  Number OFFSET	018A
_OVERLAYLOADPTR			  Number OFFSET	238E
_OVERLAYREC1			  Number OFFSET	2301
_PRT_LONG			  Number OFFSET	1DEC
_RECURPTR			  Number OFFSET	0194
_RENAMEFILE_LIB			  Number OFFSET	2225
_RUNGIOS			  Number OFFSET	057B
_R_L				  Number OFFSET	15C4
_TSRPRESENT			  Number OFFSET	052E
_USRINPTR			  Number OFFSET	017D
_USROUTPTR			  Number OFFSET	017A

Macro Name

DC
GLOBAL2
GLOBALS
OFF_HL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
_TEXT				  16  0EFC Word	  Public  CODE
