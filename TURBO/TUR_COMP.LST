Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 1
msx_asm\tur_comp.ASM



      1	    0000				  .model small
      2	    0000				  .code
      3						  .486	; .8086
      4
      5						  include msx_gen\compiler.mc
1     6					 ; ^QW:	find current word
1     7					 ; ^QS:	find current word without first	letter (for names that start with an
1     8					 ;	underscore)
1     9
1    10					 ; - define the	symbol 'MSX' to	compile	the msx	compiler
1    11					 ;   otherwise the PC version will be generated
1    12
1    13					 ; - define the	symbol 'USELIB'	to compile all library routines
1    14					 ; - define the	symbol 'NEWEXT'	to use the new external	routine
1    15					 ; - define the	symbol 'EDIT' to use the editor
1    16
1    17					 ;EDIT:
1    18					 ;NEWEXT:
1    19
1    20	    0000			 USETIMER:
1    21
1    22	    0000			 MSX:
1    23
1    24		  =0005			 MSXDOS	 EQU 5
1    25	    0000			 USELIB:
1    26
1    27					 UPCASE	 EQU L04A6
1    28
1    29						 EXTRN TURBOERRORMESSAGES
1    30
1    31						 PUBLIC	COMPILED
1    32						  PUBLIC L2D01		     ; ask for Yes or No
1    33						  PUBLIC L2E76		     ; wait for	escape
1    34						  PUBLIC L4543,L4544,L4546,L4548
1    35
1    36						 PUBLIC	L5271,L5287,L5639,L58C5,L5960,L59E9,L5A0C,L5A17,L5CAD
1    37						 PUBLIC	L5D76,L5E8E,L5E97,L5EA2,L5EB0,L5EBB,L5EBE,L5ED0,L5EDD,L5EE8
1    38						 PUBLIC	L6148,L6201,L620F,L6540,L65D5,L65DE,L65E7,L65EF,L65F7,L677F
1    39						 PUBLIC	L678B,L6A5C,L6B5E,L6CC2,L6D24,L6D43,L6E54
1    40						  PUBLIC PARSE_O_IL_C,OP_L_I
1    41						 PUBLIC	L6F0B,L6F13,L6F1B,L6F5E,L6F66,L6F6E,L6F7E
1    42						 PUBLIC	L72D4,L72DA,L72E1
1    43						 PUBLIC	L7B59,L7B5E,L7B6D,L7B6F
1    44						 PUBLIC	L7B71,L7B72,L7B73,L7B74,L7B8B,L7B9E
1    45						 PUBLIC	L7BA3,L7BA7
1    46						 PUBLIC	L7BF1,L7BF2,L7BF3
1    47
1    48						 PUBLIC	TEMPID
1    49
1    50						 ; defined in slib.mac
1    51						 EXTRN L7638,L77B1
1    52
1    53						 INCLUDE STDIO.INC
2    54		  =0004			 FIL_HDR  EQU 4			     ; length of FILE header
2    55
2    56						  include ..\library\fileio.inc
3    57
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 2
msx_asm\tur_comp.ASM



3    58					 ; FILEIO.MAC global definitions file
3    59
3    60						  GLOBAL DOS2Present:NEAR
3    61						  GLOBAL InitFileIO:NEAR
3    62						  GLOBAL GetError:NEAR
3    63						  GLOBAL SetErrorHandler:NEAR
3    64						  GLOBAL ResErrorHandler:NEAR
3    65
3    66						  GLOBAL ParseName:NEAR
3    67						  GLOBAL SetExtension:NEAR
3    68
3    69						  GLOBAL CreateFile:NEAR
3    70						  GLOBAL OpenFile:NEAR
3    71						  GLOBAL ReadFile:NEAR
3    72						  GLOBAL WriteFile:NEAR
3    73						  GLOBAL CloseFile:NEAR
3    74						  GLOBAL FileSeek:NEAR
3    75						  GLOBAL FilePos:NEAR
3    76						  GLOBAL FileSize:NEAR
3    77						  GLOBAL DeleteFile:NEAR     ; or subdirectory
3    78						  GLOBAL RenameFile:NEAR     ; or subdirectory
3    79						  GLOBAL GetCurrentDirectory:NEAR
3    80
3    81						  GLOBAL FatalError:NEAR     ; 0 = no fatal error, NonZero = fatal
3    82						  GLOBAL ErrorNumber:NEAR    ; 0 = no error, NonZero = DOS 2 error code
3    83
3    84		  =0024			 FCB_LEN	   EQU 36	     ; length of an FCB
3    85
3    86		  =0000			 FCB_DRIVE	   EQU 0	     ; Drive Number
3    87		  =0001			 FCB_NAME	   EQU 1	     ; Name
3    88		  =0009			 FCB_EXT	   EQU 9	     ; Extension
3    89		  =000E			 FCB_RECSIZE	   EQU 0EH	     ; Record Size (word)
3    90		  =0010			 FCB_FILESIZE	   EQU 10H	     ; File Size (long)
3    91		  =0021			 FCB_FILEPOS	   EQU 21H	     ; File Position (long)
3    92
3    93
2    94
2    95		  =0000			 FIB_F	  EQU 0			     ; Flags byte
2    96		  =0001			 FIB_CHR  EQU 1			     ; Character buffer
2    97		  =0002			 FIB_PTR  EQU 2			     ; Sector buffer pointer
2    98		  =0004			 FIB_NUM  EQU 4			     ; Number of records
2    99		  =0006			 FIB_REC  EQU 6			     ; Record length
2   100		  =0008			 FIB_CUR  EQU 8			     ; Current record
2   101		  =000C			 FIB_FCB  EQU 12		     ; First byte of FCB
2   102		  =0030			 FIB_BUF  EQU 48		     ; First byte of sector buffer
2   103
2   104		  =00B0			 FIB_LEN  EQU FIB_BUF+128	     ; total length of a complete FIB
2   105
2   106		  =0000			 DOS_FLG  EQU 0			     ; Flags byte
2   107		  =0001			 DOS_CHR  EQU 1			     ; Character buffer
2   108		  =0002			 DOS_PTR  EQU 2			     ; Sector buffer pointer
2   109		  =0004			 DOS_BLEN EQU 4			     ; Sector buffer length
2   110		  =0006			 DOS_NUM  EQU 6			     ; Number of records
2   111		  =000A			 DOS_REC  EQU 10		     ; Record length
2   112		  =000C			 DOS_CUR  EQU 12		     ; Current record
2   113		  =0010			 DOS_FCB  EQU 16		     ; First byte FCB/Handle structure
2   114		  =0051			 DOS_BUF  EQU (16 + 65)		     ; First byte of sector buffer
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 3
msx_asm\tur_comp.ASM



2   115
2   116		  =00D1			 DOS_LEN  EQU (DOS_BUF + 128)
2   117
2   118						  include ..\library\macros.inc
3   119					 OFF_HL	  MACRO	CURRENT,NEW
3   120						  LOCAL	DIF
3   121					 DIF	  EQU (NEW)-(CURRENT)
3   122
3   123					 IFDEF MSX
3   124						  IFE DIF-1
3   125						   DB 23h; INC HL
3   126						  ELSE
3   127						   IFE DIF-2
3   128						    DB 23h; INC	HL
3   129						    DB 23h; INC	HL
3   130						   ELSE
3   131						    IFE	DIF-3
3   132						     DB	23h; INC HL
3   133						     DB	23h; INC HL
3   134						     DB	23h; INC HL
3   135						    ELSE
3   136						     IFE DIF+1
3   137						      DB 2bh; DEC HL
3   138						     ELSE
3   139						      IFE DIF+2
3   140						       DB 2bh; DEC HL
3   141						       DB 2bh; DEC HL
3   142						      ELSE
3   143						       IFE DIF+3
3   144							DB 2bh;	DEC HL
3   145							DB 2bh;	DEC HL
3   146							DB 2bh;	DEC HL
3   147						       ELSE
3   148							IFE DIF
3   149							ELSE
3   150							 DB 0D5H ; PUSH	DE
3   151							 DB 11H
3   152							 DW DIF
3   153							 DB 19H	 ; ADD HL,DE
3   154							 DB 0D1H ; POP DE
3   155							ENDIF
3   156						       ENDIF
3   157						      ENDIF
3   158						     ENDIF
3   159						    ENDIF
3   160						   ENDIF
3   161						  ENDIF
3   162					 ELSE
3   163						  IFE DIF-1
3   164						   INC bx
3   165						  ELSE
3   166						   IFE DIF-2
3   167						    INC	bx
3   168						    INC	bx
3   169						   ELSE
3   170						    IFE	DIF-3
3   171						     INC bx
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 4
msx_asm\tur_comp.ASM



3   172						     INC bx
3   173						     INC bx
3   174						    ELSE
3   175						     IFE DIF+1
3   176						      DEC bx
3   177						     ELSE
3   178						      IFE DIF+2
3   179						       DEC bx
3   180						       DEC bx
3   181						      ELSE
3   182						       IFE DIF+3
3   183							DEC bx
3   184							DEC bx
3   185							DEC bx
3   186						       ELSE
3   187							IFE DIF
3   188							ELSE
3   189							 push dx
3   190							 mov dx,DIF
3   191							 ADD bx,dx
3   192							 pop dx
3   193							ENDIF
3   194						       ENDIF
3   195						      ENDIF
3   196						     ENDIF
3   197						    ENDIF
3   198						   ENDIF
3   199						  ENDIF
3   200					 ENDIF
3   201
3   202						  ENDM
3   203
3   204					 dc	 macro string
3   205
3   206						 strsize sizestr <string>
3   207						 pos = 0
3   208
3   209						 irpc parameter,string
3   210							 pos = pos + 1
3   211
3   212							 if pos	EQ strsize - 1
3   213							 db '&parameter' + 80h
3   214							 endif
3   215
3   216							 if pos	GT 1
3   217								 if pos	LT strsize -1
3   218									 db '&parameter'
3   219								 endif
3   220							 endif
3   221
3   222						 endm
3   223
3   224						 endm
3   225
3   226
2   227
1   228
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 5
msx_asm\tur_comp.ASM



1   229						 INCLUDE LIBDEFS.INC
2   230
2   231
2   232					 GLOBAL2  MACRO	NAME
2   233						  GLOBAL NAME :	NEAR
2   234
2   235						  IFDEF	MSX
2   236						  IFDEF	RUNTIME
2   237						  GLOBAL _&NAME	: NEAR
2   238					 _&NAME:
2   239						  ELSE
2   240							   _&NAME EQU NAME
2   241						  ENDIF
2   242						  ELSE
2   243							   _&NAME EQU NAME
2   244						  ENDIF
2   245
2   246						  ENDM
2   247
2   248					 GLOBALS MACRO NAMES
2   249
2   250						  IRP NAME,<NAMES>
2   251							   GLOBAL2 <NAME>
2   252						  ENDM
2   253
2   254						  ENDM
2   255
2   256						  GLOBAL L0004:NEAR	     ; def. init.mac
2   257						  GLOBAL L0006:NEAR	     ; def. init.mac
2   258						  GLOBAL L005C:NEAR	     ; def. init.mac
2   259						  GLOBAL L005D:NEAR	     ; def. init.mac
2   260						  GLOBAL L0065:NEAR	     ; def. init.mac
2   261						  GLOBAL L0066:NEAR	     ; def. init.mac
2   262						  GLOBAL L006C:NEAR	     ; def. init.mac
2   263						  GLOBAL L0080:NEAR	     ; def. init.mac
2   264						  GLOBAL L00CE:NEAR	     ; def. init.mac
2   265						  GLOBAL L00E0:NEAR	     ; def. init.mac
2   266						  GLOBAL L0100:NEAR	     ; def. init.mac
2   267						  GLOBAL L0101:NEAR	     ; def. init.mac
2   268						  GLOBAL L0168:NEAR	     ; def. init.mac
2   269						  GLOBAL L0169:NEAR	     ; def. init.mac
2   270						  GLOBAL L01AE:NEAR	     ; def. init.mac
2   271						  GLOBAL L01B4:NEAR	     ; def. init.mac
2   272						  GLOBAL L01BC:NEAR	     ; def. init.mac
2   273						  GLOBAL L01D0:NEAR	     ; def. init.mac
2   274						  GLOBAL L01E1:NEAR	     ; def. init.mac
2   275						  GLOBAL L01E8:NEAR	     ; def. init.mac
2   276						  GLOBAL L01FA:NEAR	     ; def. init.mac
2   277						  GLOBAL L0200:NEAR	     ; def. init.mac
2   278						  GLOBAL L023E:NEAR	     ; def. init.mac
2   279						  GLOBAL L0259:NEAR	     ; def. init.mac
2   280						  GLOBAL L0262:NEAR	     ; def. init.mac
2   281						  GLOBAL L026B:NEAR	     ; def. init.mac
2   282						  GLOBAL L0284:NEAR	     ; def. init.mac
2   283						  GLOBAL L0299:NEAR	     ; def. init.mac
2   284						  GLOBAL L02A2:NEAR	     ; def. init.mac
2   285						  GLOBAL L030A:NEAR	     ; def. init.mac
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 6
msx_asm\tur_comp.ASM



2   286						  GLOBAL L0310:NEAR	     ; def. init.mac
2   287						  GLOBAL L0364:NEAR	     ; def. init.mac
2   288						  GLOBAL L03C9:NEAR	     ; def. init.mac
2   289						  GLOBAL L03E1:NEAR	     ; def. init.mac
2   290						  GLOBAL L03EE:NEAR	     ; def. init.mac
2   291						  GLOBAL L0406:NEAR	     ; def. init.mac
2   292						  GLOBAL L04A6:NEAR	     ; def. init.mac
2   293						  GLOBAL L04B4:NEAR	     ; def. init.mac
2   294						  GLOBAL L04D2:NEAR	     ; def. init.mac
2   295						  GLOBAL L04AF:NEAR	     ; def. init.mac
2   296						  GLOBAL L0581:NEAR	     ; def. init.mac
2   297						  GLOBAL L0591:NEAR	     ; def. init.mac
2   298						  GLOBAL L059B:NEAR	     ; def. init.mac
2   299						  GLOBAL L0612:NEAR	     ; def. init.mac
2   300						  GLOBAL L0783:NEAR	     ; def. init.mac
2   301						  GLOBAL L07F7:NEAR	     ; def. init.mac
2   302						  GLOBAL L1008:NEAR	     ; def. init.mac
2   303						  GLOBAL L11A3:NEAR	     ; def. init.mac
2   304						  GLOBAL L149B:NEAR	     ; def. init.mac
2   305						  GLOBAL L14E8:NEAR	     ; def. init.mac
2   306						  GLOBAL L1726:NEAR	     ; def. init.mac
2   307						  GLOBAL L20E2:NEAR	     ; def. init.mac
2   308
2   309						  GLOBAL CON1OUTPTR:NEAR     ; def. init.mac
2   310						  GLOBAL CONSTPTR:NEAR	     ; def. init.mac
2   311						  GLOBAL A2L:NEAR	     ; def. init.mac
2   312						  GLOBAL L_NEG:NEAR	     ; def. init.mac
2   313						  GLOBAL L_R:NEAR	     ; def. init.mac
2   314						  GLOBAL PREFIX:NEAR	     ; def. init.mac
2   315
2   316						  GLOBAL DEF_TYPE:NEAR	     ; def. compiler.mac
2   317						  GLOBAL L72E1:NEAR	     ; def. compiler.mac, no conditon error
2   318						  GLOBAL L7B5C:NEAR	     ; def. compiler.mac
2   319						  GLOBAL L7B62:NEAR	     ; def. compiler.mac
2   320
2   321						  GLOBAL L7BF5:NEAR	     ; def. end.mac
2   322
2   323						  GLOBAL O_BYTE:NEAR,O_CALHL:NEAR,O_CODE:NEAR,O_HL:NEAR
2   324						  GLOBAL O_JPHL:NEAR,O_LDDE:NEAR,O_LDHL:NEAR,O_PSHHL:NEAR
2   325
2   326						  GLOBAL ParseByteVar:NEAR   ; def. glib.mac
2   327						  GLOBAL ParseIntVar:NEAR    ; def. glib.mac
2   328						  GLOBAL ParseIntError:NEAR  ; def. glib.mac
2   329						  GLOBAL ParseStrVAR64:NEAR  ; def. glib.mac
2   330						  GLOBAL ParseVAR64:NEAR     ; def. glib.mac
2   331
2   332						  GLOBAL TableIndex2:NEAR    ; def. compiler.mac
2   333
2   334						  ; GIOS Procedures
2   335						  GLOBAL P_DELETEFILE:NEAR   ; def. glib.mac
2   336						  GLOBAL P_DEFINEPICTURE:NEAR; def. glib.mac
2   337						  GLOBAL P_PFILLSHAPE:NEAR   ; def. glib.mac
2   338						  GLOBAL P_PPAINT:NEAR	     ; def. glib.mac
2   339						  GLOBAL P_MEMEXPAND:NEAR    ; def. glib.mac
2   340						  GLOBAL P_MEMTOVRAM:NEAR    ; def. glib.mac
2   341						  GLOBAL P_MEMLOADPICTURE:NEAR;	def. glib.mac
2   342						  GLOBAL P_MEMUNCRUNCH:NEAR  ; def. glib.mac
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 7
msx_asm\tur_comp.ASM



2   343						  GLOBAL P_MEMSAVEPICTURE:NEAR;	def. glib.mac
2   344						  GLOBAL P_SETCLIPPING:NEAR  ; def. glib.mac
2   345						  GLOBAL P_SETVIEWPORT:NEAR  ; def. glib.mac
2   346						  GLOBAL P_GETVIEWPORT:NEAR  ; def. glib.mac
2   347						  GLOBAL P_MEMCOPY:NEAR	     ; def. glib.mac
2   348						  GLOBAL P_BLOAD:NEAR	     ; def. glib.mac
2   349						  GLOBAL P_BSAVE:NEAR	     ; def. glib.mac
2   350						  GLOBAL P_CHANGECOLOR:NEAR  ; def. glib.mac
2   351						  GLOBAL P_CHANGESCREEN:NEAR ; def. glib.mac
2   352						  GLOBAL P_CIRCLE:NEAR	     ; def. glib.mac
2   353						  GLOBAL P_CLEARMEM:NEAR     ; def. glib.mac
2   354						  GLOBAL P_DATE:NEAR	     ; def. glib.mac
2   355						  GLOBAL P_DISPLAYPAGE:NEAR  ; def. glib.mac
2   356						  GLOBAL P_ELLIPSE:NEAR	     ; def. glib.mac
2   357						  GLOBAL P_EXPAND:NEAR	     ; def. glib.mac
2   358						  GLOBAL P_FASTBOX:NEAR	     ; def. glib.mac
2   359						  GLOBAL P_FASTCOPY:NEAR     ; def. glib.mac
2   360						  GLOBAL P_FILLBOX:NEAR	     ; def. glib.mac
2   361						  GLOBAL P_FILLSHAPE:NEAR    ; def. glib.mac
2   362						  GLOBAL P_FILLSPRITE:NEAR   ; def. glib.mac
2   363						  GLOBAL P_GCOPY:NEAR	     ; def. glib.mac
2   364						  GLOBAL P_GETDOSVERSION:NEAR; def. glib.mac
2   365						  GLOBAL P_LINE:NEAR	     ; def. glib.mac
2   366						  GLOBAL P_LOADPICTURE:NEAR  ; def. glib.mac
2   367						  GLOBAL P_LOADVRAM:NEAR     ; def. glib.mac
2   368						  GLOBAL P_MEMREADFILE:NEAR  ; def. glib.mac
2   369						  GLOBAL P_MEMWRITEFILE:NEAR ; def. glib.mac
2   370						  GLOBAL P_MEMAPPENDFILE:NEAR; def. glib.mac
2   371						  GLOBAL P_MOVEVRAM:NEAR     ; def. glib.mac
2   372						  GLOBAL P_PAINT:NEAR	     ; def. glib.mac
2   373						  GLOBAL P_PSET:NEAR	     ; def. glib.mac
2   374						  GLOBAL P_PUTSPRITE:NEAR    ; def. glib.mac
2   375						  GLOBAL P_READMEM:NEAR	     ; def. glib.mac
2   376						  GLOBAL P_READSECTOR:NEAR   ; def. glib.mac
2   377						  GLOBAL P_SAVEPICTURE:NEAR  ; def. glib.mac
2   378						  GLOBAL P_SAVEVRAM:NEAR     ; def. glib.mac
2   379						  GLOBAL P_SCREEN:NEAR	     ; def. glib.mac
2   380						  GLOBAL P_SCREENOFF:NEAR    ; def. glib.mac
2   381						  GLOBAL P_SCREENON:NEAR     ; def. glib.mac
2   382						  GLOBAL P_SETCHANNEL:NEAR   ; def. glib.mac
2   383						  GLOBAL P_SOUND:NEAR	     ; def. glib.mac
2   384						  GLOBAL P_SPRITEATTRIBUTEADDRESS:NEAR	; def. glib.mac
2   385						  GLOBAL P_SPRITECOLOR:NEAR  ; def. glib.mac
2   386						  GLOBAL P_SPRITEPATTERN:NEAR; def. glib.mac
2   387						  GLOBAL P_SPRITEPATTERNADDRESS:NEAR	; def. glib.mac
2   388						  GLOBAL P_SPRITESIZE:NEAR   ; def. glib.mac
2   389						  GLOBAL P_SPRITESOFF:NEAR   ; def. glib.mac
2   390						  GLOBAL P_SPRITESON:NEAR    ; def. glib.mac
2   391						  GLOBAL P_TIME:NEAR	     ; def. glib.mac
2   392						  GLOBAL P_UNCRUNCH:NEAR     ; def. glib.mac
2   393						  GLOBAL P_VPOKE:NEAR	     ; def. glib.mac
2   394						  GLOBAL P_WAITVDP:NEAR	     ; def. glib.mac
2   395						  GLOBAL P_WRITEMEM:NEAR     ; def. glib.mac
2   396						  GLOBAL P_WRITESECTOR:NEAR  ; def. glib.mac
2   397						  GLOBAL P_WRITEVDP:NEAR     ; def. glib.mac
2   398
2   399						  ; GIOS Functions
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 8
msx_asm\tur_comp.ASM



2   400						  GLOBAL F_TSRPRESENT:NEAR   ; def. glib.mac
2   401						  GLOBAL F_GETCLIPPING:NEAR  ; def. glib.mac
2   402						  GLOBAL F_SIMULATEDDISK:NEAR; def. glib.mac
2   403						  GLOBAL F_FINDFIRST:NEAR    ; def. glib.mac
2   404						  GLOBAL F_FINDNEXT:NEAR     ; def. glib.mac
2   405						  GLOBAL F_GETDRIVE:NEAR     ; def. glib.mac
2   406						  GLOBAL F_TESTDRIVE:NEAR    ; def. glib.mac
2   407						  GLOBAL F_GETERROR:NEAR     ; def. glib.mac
2   408						  GLOBAL F_GETFKEY:NEAR	     ; def. glib.mac
2   409						  GLOBAL F_GETPAD:NEAR	     ; def. glib.mac
2   410						  GLOBAL F_GETPDL:NEAR	     ; def. glib.mac
2   411						  GLOBAL F_GETCHANNEL:NEAR   ; def. glib.mac
2   412						  GLOBAL F_GETPAGEID:NEAR    ; def. glib.mac
2   413						  GLOBAL F_POINT:NEAR	     ; def. glib.mac
2   414						  GLOBAL F_READPSG:NEAR	     ; def. glib.mac
2   415						  GLOBAL F_READSTATUS:NEAR   ; def. glib.mac
2   416						  GLOBAL F_READVDP:NEAR	     ; def. glib.mac
2   417						  GLOBAL F_SEARCH:NEAR	     ; def. glib.mac
2   418						  GLOBAL F_SETDATE:NEAR	     ; def. glib.mac
2   419						  GLOBAL F_SETMEM:NEAR	     ; def. glib.mac
2   420						  GLOBAL F_SETTIME:NEAR	     ; def. glib.mac
2   421						  GLOBAL F_STICK:NEAR	     ; def. glib.mac
2   422						  GLOBAL F_STRIG:NEAR	     ; def. glib.mac
2   423						  GLOBAL F_VPEEK:NEAR	     ; def. glib.mac
2   424
2   425
1   426
1   427						 ; include file	with generated EQU's from RUNTIME.MAP
1   428						 INCLUDE LIBCONST.INC
2   429		  =OFFSET 0177		 _AUXINPTR EQU offset 00177h
2   430		  =OFFSET 0174		 _AUXOUTPTR EQU	offset 00174h
2   431		  =OFFSET 018C		 _BUFLEN EQU offset 0018Ch
2   432		  =OFFSET 0190		 _CBREAK EQU offset 00190h
2   433		  =OFFSET 016B		 _CONINPTR EQU offset 0016Bh
2   434		  =OFFSET 016E		 _CONOUTPTR EQU	offset 0016Eh
2   435		  =OFFSET 0168		 _CONSTPTR EQU offset 00168h
2   436		  =OFFSET 2887		 _DOSERRORHANDLEROFF EQU offset	02887h
2   437		  =OFFSET 2884		 _DOSERRORHANDLERON EQU	offset 02884h
2   438		  =OFFSET 286F		 _ERROREXIT EQU	offset 0286Fh
2   439		  =OFFSET 018D		 _ERRORPTR EQU offset 0018Dh
2   440		  =OFFSET 2703		 _GETERROR_LIB EQU offset 02703h
2   441		  =OFFSET 0581		 _GIOSOK EQU offset 00581h
2   442		  =OFFSET 0582		 _GIOSVER EQU offset 00582h
2   443		  =OFFSET 0192		 _HEAPPTR EQU offset 00192h
2   444		  =OFFSET 0180		 _L00B8	EQU offset 00180h
2   445		  =OFFSET 0182		 _L00BA	EQU offset 00182h
2   446		  =OFFSET 0186		 _L00BE	EQU offset 00186h
2   447		  =OFFSET 0188		 _L00C0	EQU offset 00188h
2   448		  =OFFSET 02D0		 _L021D	EQU offset 002D0h
2   449		  =OFFSET 02F1		 _L023E	EQU offset 002F1h
2   450		  =OFFSET 030C		 _L0259	EQU offset 0030Ch
2   451		  =OFFSET 0315		 _L0262	EQU offset 00315h
2   452		  =OFFSET 031E		 _L026B	EQU offset 0031Eh
2   453		  =OFFSET 0337		 _L0284	EQU offset 00337h
2   454		  =OFFSET 034C		 _L0299	EQU offset 0034Ch
2   455		  =OFFSET 03BD		 _L030A	EQU offset 003BDh
2   456		  =OFFSET 03C3		 _L0310	EQU offset 003C3h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 9
msx_asm\tur_comp.ASM



2   457		  =OFFSET 0420		 _L0364	EQU offset 00420h
2   458		  =OFFSET 06C3		 _L04D4	EQU offset 006C3h
2   459		  =OFFSET 06F4		 _L0508	EQU offset 006F4h
2   460		  =OFFSET 070E		 _L0522	EQU offset 0070Eh
2   461		  =OFFSET 0717		 _L052C	EQU offset 00717h
2   462		  =OFFSET 0725		 _L053A	EQU offset 00725h
2   463		  =OFFSET 0738		 _L054D	EQU offset 00738h
2   464		  =OFFSET 0748		 _L055D	EQU offset 00748h
2   465		  =OFFSET 076C		 _L0581	EQU offset 0076Ch
2   466		  =OFFSET 077C		 _L0591	EQU offset 0077Ch
2   467		  =OFFSET 0786		 _L059B	EQU offset 00786h
2   468		  =OFFSET 07BC		 _L05D1	EQU offset 007BCh
2   469		  =OFFSET 07CD		 _L05E2	EQU offset 007CDh
2   470		  =OFFSET 07EC		 _L0601	EQU offset 007ECh
2   471		  =OFFSET 07FD		 _L0612	EQU offset 007FDh
2   472		  =OFFSET 080E		 _L0623	EQU offset 0080Eh
2   473		  =OFFSET 0823		 _L0638	EQU offset 00823h
2   474		  =OFFSET 0837		 _L064C	EQU offset 00837h
2   475		  =OFFSET 0841		 _L0656	EQU offset 00841h
2   476		  =OFFSET 0851		 _L0666	EQU offset 00851h
2   477		  =OFFSET 0861		 _L0676	EQU offset 00861h
2   478		  =OFFSET 086A		 _L067F	EQU offset 0086Ah
2   479		  =OFFSET 0889		 _L0688	EQU offset 00889h
2   480		  =OFFSET 088F		 _L068D	EQU offset 0088Fh
2   481		  =OFFSET 0895		 _L0692	EQU offset 00895h
2   482		  =OFFSET 08A3		 _L069B	EQU offset 008A3h
2   483		  =OFFSET 08A8		 _L06A0	EQU offset 008A8h
2   484		  =OFFSET 08AD		 _L06A5	EQU offset 008ADh
2   485		  =OFFSET 08BB		 _L06AE	EQU offset 008BBh
2   486		  =OFFSET 08C0		 _L06B3	EQU offset 008C0h
2   487		  =OFFSET 08C5		 _L06B8	EQU offset 008C5h
2   488		  =OFFSET 08D4		 _L06C2	EQU offset 008D4h
2   489		  =OFFSET 08D9		 _L06C7	EQU offset 008D9h
2   490		  =OFFSET 08DE		 _L06CC	EQU offset 008DEh
2   491		  =OFFSET 08ED		 _L06D6	EQU offset 008EDh
2   492		  =OFFSET 08F2		 _L06DB	EQU offset 008F2h
2   493		  =OFFSET 08F7		 _L06E0	EQU offset 008F7h
2   494		  =OFFSET 0905		 _L06E9	EQU offset 00905h
2   495		  =OFFSET 090A		 _L06EE	EQU offset 0090Ah
2   496		  =OFFSET 090F		 _L06F3	EQU offset 0090Fh
2   497		  =OFFSET 0911		 _L06F5	EQU offset 00911h
2   498		  =OFFSET 092B		 _L070F	EQU offset 0092Bh
2   499		  =OFFSET 0999		 _L073B	EQU offset 00999h
2   500		  =OFFSET 09A3		 _L0745	EQU offset 009A3h
2   501		  =OFFSET 09B0		 _L074E	EQU offset 009B0h
2   502		  =OFFSET 09B8		 _L0756	EQU offset 009B8h
2   503		  =OFFSET 09E2		 _L0780	EQU offset 009E2h
2   504		  =OFFSET 09E5		 _L0783	EQU offset 009E5h
2   505		  =OFFSET 09ED		 _L078B	EQU offset 009EDh
2   506		  =OFFSET 0D66		 _L083D	EQU offset 00D66h
2   507		  =OFFSET 0D94		 _L086B	EQU offset 00D94h
2   508		  =OFFSET 0DCC		 _L08A3	EQU offset 00DCCh
2   509		  =OFFSET 0DDB		 _L08B2	EQU offset 00DDBh
2   510		  =OFFSET 0E1C		 _L08F3	EQU offset 00E1Ch
2   511		  =OFFSET 0E49		 _L0920	EQU offset 00E49h
2   512		  =OFFSET 0EBF		 _L0996	EQU offset 00EBFh
2   513		  =OFFSET 0ECB		 _L09A2	EQU offset 00ECBh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 10
msx_asm\tur_comp.ASM



2   514		  =OFFSET 0F12		 _L09E9	EQU offset 00F12h
2   515		  =OFFSET 0F1B		 _L09F2	EQU offset 00F1Bh
2   516		  =OFFSET 0F20		 _L09F7	EQU offset 00F20h
2   517		  =OFFSET 0F23		 _L09FA	EQU offset 00F23h
2   518		  =OFFSET 0F28		 _L09FF	EQU offset 00F28h
2   519		  =OFFSET 1171		 _L0BFD	EQU offset 01171h
2   520		  =OFFSET 11A8		 _L0C34	EQU offset 011A8h
2   521		  =OFFSET 11BA		 _L0C46	EQU offset 011BAh
2   522		  =OFFSET 11F3		 _L0C7F	EQU offset 011F3h
2   523		  =OFFSET 11FB		 _L0C87	EQU offset 011FBh
2   524		  =OFFSET 129F		 _L0D2B	EQU offset 0129Fh
2   525		  =OFFSET 132A		 _L0DB6	EQU offset 0132Ah
2   526		  =OFFSET 13BA		 _L0E46	EQU offset 013BAh
2   527		  =OFFSET 1528		 _L0FB4	EQU offset 01528h
2   528		  =OFFSET 1544		 _L0FD0	EQU offset 01544h
2   529		  =OFFSET 1552		 _L0FDE	EQU offset 01552h
2   530		  =OFFSET 1581		 _L1008	EQU offset 01581h
2   531		  =OFFSET 18AA		 _L12DD	EQU offset 018AAh
2   532		  =OFFSET 18AE		 _L12E1	EQU offset 018AEh
2   533		  =OFFSET 18C9		 _L12FC	EQU offset 018C9h
2   534		  =OFFSET 18CD		 _L1300	EQU offset 018CDh
2   535		  =OFFSET 18E5		 _L1318	EQU offset 018E5h
2   536		  =OFFSET 18F3		 _L1326	EQU offset 018F3h
2   537		  =OFFSET 1900		 _L1333	EQU offset 01900h
2   538		  =OFFSET 191C		 _L134F	EQU offset 0191Ch
2   539		  =OFFSET 193C		 _L136F	EQU offset 0193Ch
2   540		  =OFFSET 193D		 _L1370	EQU offset 0193Dh
2   541		  =OFFSET 19D6		 _L13FE	EQU offset 019D6h
2   542		  =OFFSET 19D7		 _L13FF	EQU offset 019D7h
2   543		  =OFFSET 1A45		 _L1469	EQU offset 01A45h
2   544		  =OFFSET 1A77		 _L149B	EQU offset 01A77h
2   545		  =OFFSET 1A85		 _L14A9	EQU offset 01A85h
2   546		  =OFFSET 1A96		 _L14BA	EQU offset 01A96h
2   547		  =OFFSET 1AA7		 _L14CB	EQU offset 01AA7h
2   548		  =OFFSET 1AAB		 _L14CC	EQU offset 01AABh
2   549		  =OFFSET 1C67		 _L1644	EQU offset 01C67h
2   550		  =OFFSET 1C70		 _L164D	EQU offset 01C70h
2   551		  =OFFSET 1C74		 _L164E	EQU offset 01C74h
2   552		  =OFFSET 1C98		 _L1671	EQU offset 01C98h
2   553		  =OFFSET 1CBE		 _L1672	EQU offset 01CBEh
2   554		  =OFFSET 1CDA		 _L168E	EQU offset 01CDAh
2   555		  =OFFSET 1CF7		 _L16AB	EQU offset 01CF7h
2   556		  =OFFSET 1D83		 _L1722	EQU offset 01D83h
2   557		  =OFFSET 1D87		 _L1726	EQU offset 01D87h
2   558		  =OFFSET 1DDA		 _L1779	EQU offset 01DDAh
2   559		  =OFFSET 1E18		 _L178B	EQU offset 01E18h
2   560		  =OFFSET 1E37		 _L17AA	EQU offset 01E37h
2   561		  =OFFSET 1E47		 _L17BA	EQU offset 01E47h
2   562		  =OFFSET 1E5A		 _L17CD	EQU offset 01E5Ah
2   563		  =OFFSET 1E64		 _L17D7	EQU offset 01E64h
2   564		  =OFFSET 1E69		 _L17DC	EQU offset 01E69h
2   565		  =OFFSET 1E6E		 _L17E1	EQU offset 01E6Eh
2   566		  =OFFSET 1E73		 _L17E6	EQU offset 01E73h
2   567		  =OFFSET 1E9D		 _L1810	EQU offset 01E9Dh
2   568		  =OFFSET 1EA2		 _L1811	EQU offset 01EA2h
2   569		  =OFFSET 1F40		 _L187A	EQU offset 01F40h
2   570		  =OFFSET 1F4A		 _L18A4	EQU offset 01F4Ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 11
msx_asm\tur_comp.ASM



2   571		  =OFFSET 1F5E		 _L18B6	EQU offset 01F5Eh
2   572		  =OFFSET 1F80		 _L18DC	EQU offset 01F80h
2   573		  =OFFSET 1F8E		 _L19A5	EQU offset 01F8Eh
2   574		  =OFFSET 1FBA		 _L19D5	EQU offset 01FBAh
2   575		  =OFFSET 2014		 _L1A49	EQU offset 02014h
2   576		  =OFFSET 2028		 _L1A55	EQU offset 02028h
2   577		  =OFFSET 203F		 _L1A5D	EQU offset 0203Fh
2   578		  =OFFSET 2052		 _L1A6F	EQU offset 02052h
2   579		  =OFFSET 2057		 _L1A70	EQU offset 02057h
2   580		  =OFFSET 20B8		 _L1AB0	EQU offset 020B8h
2   581		  =OFFSET 20C2		 _L1ABA	EQU offset 020C2h
2   582		  =OFFSET 20C6		 _L1ABE	EQU offset 020C6h
2   583		  =OFFSET 2192		 _L1AED	EQU offset 02192h
2   584		  =OFFSET 2196		 _L1AF1	EQU offset 02196h
2   585		  =OFFSET 21C4		 _L1B6F	EQU offset 021C4h
2   586		  =OFFSET 2213		 _L1B93	EQU offset 02213h
2   587		  =OFFSET 224F		 _L1BA5	EQU offset 0224Fh
2   588		  =OFFSET 227A		 _L1BEA	EQU offset 0227Ah
2   589		  =OFFSET 227E		 _L1BEB	EQU offset 0227Eh
2   590		  =OFFSET 23C6		 _L1CDB	EQU offset 023C6h
2   591		  =OFFSET 23D0		 _L1CE5	EQU offset 023D0h
2   592		  =OFFSET 2465		 _L1D7A	EQU offset 02465h
2   593		  =OFFSET 2528		 _L1E3D	EQU offset 02528h
2   594		  =OFFSET 252F		 _L1E44	EQU offset 0252Fh
2   595		  =OFFSET 258E		 _L1EA3	EQU offset 0258Eh
2   596		  =OFFSET 2596		 _L1EAB	EQU offset 02596h
2   597		  =OFFSET 25A8		 _L1EBC	EQU offset 025A8h
2   598		  =OFFSET 25AC		 _L1EBD	EQU offset 025ACh
2   599		  =OFFSET 25B0		 _L1EBE	EQU offset 025B0h
2   600		  =OFFSET 25EC		 _L1EF2	EQU offset 025ECh
2   601		  =OFFSET 25F0		 _L1EF3	EQU offset 025F0h
2   602		  =OFFSET 25F4		 _L1EF4	EQU offset 025F4h
2   603		  =OFFSET 2650		 _L1F48	EQU offset 02650h
2   604		  =OFFSET 2656		 _L1F4E	EQU offset 02656h
2   605		  =OFFSET 266C		 _L1F64	EQU offset 0266Ch
2   606		  =OFFSET 2685		 _L1F7D	EQU offset 02685h
2   607		  =OFFSET 26A3		 _L1F9B	EQU offset 026A3h
2   608		  =OFFSET 26E3		 _L1FDB	EQU offset 026E3h
2   609		  =OFFSET 26EC		 _L1FE4	EQU offset 026ECh
2   610		  =OFFSET 26F2		 _L1FEA	EQU offset 026F2h
2   611		  =OFFSET 26F9		 _L1FF1	EQU offset 026F9h
2   612		  =OFFSET 272A		 _L201B	EQU offset 0272Ah
2   613		  =OFFSET 27FD		 _L20D4	EQU offset 027FDh
2   614		  =OFFSET 2E9B		 _L20E2	EQU offset 02E9Bh
2   615		  =OFFSET 2339		 _LOADRUNOVERLAY EQU offset 02339h
2   616		  =OFFSET 232C		 _LOADRUNOVERLAYREC EQU	offset 0232Ch
2   617		  =OFFSET 0184		 _LST EQU offset 00184h
2   618		  =OFFSET 0171		 _LSTOUTPTR EQU	offset 00171h
2   619		  =OFFSET 0A61		 _L_ABS	EQU offset 00A61h
2   620		  =OFFSET 0A74		 _L_ADD	EQU offset 00A74h
2   621		  =OFFSET 0A1E		 _L_AND	EQU offset 00A1Eh
2   622		  =OFFSET 0B16		 _L_DIV	EQU offset 00B16h
2   623		  =OFFSET 0883		 _L_EQ EQU offset 00883h
2   624		  =OFFSET 0851		 _L_FOR_DOWNTO EQU offset 00851h
2   625		  =OFFSET 0851		 _L_FOR_TO EQU offset 00851h
2   626		  =OFFSET 08E8		 _L_GT EQU offset 008E8h
2   627		  =OFFSET 08B6		 _L_GTE	EQU offset 008B6h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 12
msx_asm\tur_comp.ASM



2   628		  =OFFSET 0900		 _L_LS EQU offset 00900h
2   629		  =OFFSET 08CF		 _L_LSE	EQU offset 008CFh
2   630		  =OFFSET 0B2C		 _L_MOD	EQU offset 00B2Ch
2   631		  =OFFSET 0A9A		 _L_MUL	EQU offset 00A9Ah
2   632		  =OFFSET 0A64		 _L_NEG	EQU offset 00A64h
2   633		  =OFFSET 089E		 _L_NEQ	EQU offset 0089Eh
2   634		  =OFFSET 0A54		 _L_NOT	EQU offset 00A54h
2   635		  =OFFSET 0A30		 _L_OR EQU offset 00A30h
2   636		  =OFFSET 0873		 _L_PRED EQU offset 00873h
2   637		  =OFFSET 15A0		 _L_R EQU offset 015A0h
2   638		  =OFFSET 0BD5		 _L_SHL	EQU offset 00BD5h
2   639		  =OFFSET 0BF1		 _L_SHR	EQU offset 00BF1h
2   640		  =OFFSET 0A94		 _L_SQR	EQU offset 00A94h
2   641		  =OFFSET 0A7F		 _L_SUB	EQU offset 00A7Fh
2   642		  =OFFSET 087C		 _L_SUCC EQU offset 0087Ch
2   643		  =OFFSET 0A42		 _L_XOR	EQU offset 00A42h
2   644		  =OFFSET 057E		 _MEMMAN EQU offset 0057Eh
2   645		  =OFFSET 057F		 _MEMMNVER EQU offset 0057Fh
2   646		  =OFFSET 018A		 _OUTPUT EQU offset 0018Ah
2   647		  =OFFSET 238E		 _OVERLAYLOADPTR EQU offset 0238Eh
2   648		  =OFFSET 2301		 _OVERLAYREC1 EQU offset 02301h
2   649		  =OFFSET 1DEC		 _PRT_LONG EQU offset 01DECh
2   650		  =OFFSET 0194		 _RECURPTR EQU offset 00194h
2   651		  =OFFSET 2225		 _RENAMEFILE_LIB EQU offset 02225h
2   652		  =OFFSET 057B		 _RUNGIOS EQU offset 0057Bh
2   653		  =OFFSET 15C4		 _R_L EQU offset 015C4h
2   654		  =OFFSET 052E		 _TSRPRESENT EQU offset	0052Eh
2   655		  =OFFSET 017D		 _USRINPTR EQU offset 0017Dh
2   656		  =OFFSET 017A		 _USROUTPTR EQU	offset 0017Ah
2   657		  =OFFSET 0168		 _CONSTPTR EQU offset 00168h
2   658		  =OFFSET 016B		 _CONINPTR EQU offset 0016Bh
2   659		  =OFFSET 016E		 _CONOUTPTR EQU	offset 0016Eh
2   660		  =OFFSET 0171		 _LSTOUTPTR EQU	offset 00171h
2   661		  =OFFSET 0174		 _AUXOUTPTR EQU	offset 00174h
2   662		  =OFFSET 0177		 _AUXINPTR EQU offset 00177h
2   663		  =OFFSET 017A		 _USROUTPTR EQU	offset 0017Ah
2   664		  =OFFSET 017D		 _USRINPTR EQU offset 0017Dh
2   665		  =OFFSET 0180		 _L00B8	EQU offset 00180h
2   666		  =OFFSET 0182		 _L00BA	EQU offset 00182h
2   667		  =OFFSET 0184		 _LST EQU offset 00184h
2   668		  =OFFSET 0186		 _L00BE	EQU offset 00186h
2   669		  =OFFSET 0188		 _L00C0	EQU offset 00188h
2   670		  =OFFSET 018A		 _OUTPUT EQU offset 0018Ah
2   671		  =OFFSET 018C		 _BUFLEN EQU offset 0018Ch
2   672		  =OFFSET 018D		 _ERRORPTR EQU offset 0018Dh
2   673		  =OFFSET 0190		 _CBREAK EQU offset 00190h
2   674		  =OFFSET 0192		 _HEAPPTR EQU offset 00192h
2   675		  =OFFSET 0194		 _RECURPTR EQU offset 00194h
2   676		  =OFFSET 02D0		 _L021D	EQU offset 002D0h
2   677		  =OFFSET 02F1		 _L023E	EQU offset 002F1h
2   678		  =OFFSET 030C		 _L0259	EQU offset 0030Ch
2   679		  =OFFSET 0315		 _L0262	EQU offset 00315h
2   680		  =OFFSET 031E		 _L026B	EQU offset 0031Eh
2   681		  =OFFSET 0337		 _L0284	EQU offset 00337h
2   682		  =OFFSET 034C		 _L0299	EQU offset 0034Ch
2   683		  =OFFSET 03BD		 _L030A	EQU offset 003BDh
2   684		  =OFFSET 03C3		 _L0310	EQU offset 003C3h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 13
msx_asm\tur_comp.ASM



2   685		  =OFFSET 0420		 _L0364	EQU offset 00420h
2   686		  =OFFSET 052E		 _TSRPRESENT EQU offset	0052Eh
2   687		  =OFFSET 057B		 _RUNGIOS EQU offset 0057Bh
2   688		  =OFFSET 057E		 _MEMMAN EQU offset 0057Eh
2   689		  =OFFSET 057F		 _MEMMNVER EQU offset 0057Fh
2   690		  =OFFSET 0581		 _GIOSOK EQU offset 00581h
2   691		  =OFFSET 0582		 _GIOSVER EQU offset 00582h
2   692		  =OFFSET 06C3		 _L04D4	EQU offset 006C3h
2   693		  =OFFSET 06F4		 _L0508	EQU offset 006F4h
2   694		  =OFFSET 070E		 _L0522	EQU offset 0070Eh
2   695		  =OFFSET 0717		 _L052C	EQU offset 00717h
2   696		  =OFFSET 0725		 _L053A	EQU offset 00725h
2   697		  =OFFSET 0738		 _L054D	EQU offset 00738h
2   698		  =OFFSET 0748		 _L055D	EQU offset 00748h
2   699		  =OFFSET 076C		 _L0581	EQU offset 0076Ch
2   700		  =OFFSET 077C		 _L0591	EQU offset 0077Ch
2   701		  =OFFSET 0786		 _L059B	EQU offset 00786h
2   702		  =OFFSET 07BC		 _L05D1	EQU offset 007BCh
2   703		  =OFFSET 07CD		 _L05E2	EQU offset 007CDh
2   704		  =OFFSET 07EC		 _L0601	EQU offset 007ECh
2   705		  =OFFSET 07FD		 _L0612	EQU offset 007FDh
2   706		  =OFFSET 080E		 _L0623	EQU offset 0080Eh
2   707		  =OFFSET 0823		 _L0638	EQU offset 00823h
2   708		  =OFFSET 0837		 _L064C	EQU offset 00837h
2   709		  =OFFSET 0841		 _L0656	EQU offset 00841h
2   710		  =OFFSET 0851		 _L_FOR_TO EQU offset 00851h
2   711		  =OFFSET 0851		 _L0666	EQU offset 00851h
2   712		  =OFFSET 0851		 _L_FOR_DOWNTO EQU offset 00851h
2   713		  =OFFSET 0861		 _L0676	EQU offset 00861h
2   714		  =OFFSET 086A		 _L067F	EQU offset 0086Ah
2   715		  =OFFSET 0873		 _L_PRED EQU offset 00873h
2   716		  =OFFSET 087C		 _L_SUCC EQU offset 0087Ch
2   717		  =OFFSET 0883		 _L_EQ EQU offset 00883h
2   718		  =OFFSET 0889		 _L0688	EQU offset 00889h
2   719		  =OFFSET 088F		 _L068D	EQU offset 0088Fh
2   720		  =OFFSET 0895		 _L0692	EQU offset 00895h
2   721		  =OFFSET 089E		 _L_NEQ	EQU offset 0089Eh
2   722		  =OFFSET 08A3		 _L069B	EQU offset 008A3h
2   723		  =OFFSET 08A8		 _L06A0	EQU offset 008A8h
2   724		  =OFFSET 08AD		 _L06A5	EQU offset 008ADh
2   725		  =OFFSET 08B6		 _L_GTE	EQU offset 008B6h
2   726		  =OFFSET 08BB		 _L06AE	EQU offset 008BBh
2   727		  =OFFSET 08C0		 _L06B3	EQU offset 008C0h
2   728		  =OFFSET 08C5		 _L06B8	EQU offset 008C5h
2   729		  =OFFSET 08CF		 _L_LSE	EQU offset 008CFh
2   730		  =OFFSET 08D4		 _L06C2	EQU offset 008D4h
2   731		  =OFFSET 08D9		 _L06C7	EQU offset 008D9h
2   732		  =OFFSET 08DE		 _L06CC	EQU offset 008DEh
2   733		  =OFFSET 08E8		 _L_GT EQU offset 008E8h
2   734		  =OFFSET 08ED		 _L06D6	EQU offset 008EDh
2   735		  =OFFSET 08F2		 _L06DB	EQU offset 008F2h
2   736		  =OFFSET 08F7		 _L06E0	EQU offset 008F7h
2   737		  =OFFSET 0900		 _L_LS EQU offset 00900h
2   738		  =OFFSET 0905		 _L06E9	EQU offset 00905h
2   739		  =OFFSET 090A		 _L06EE	EQU offset 0090Ah
2   740		  =OFFSET 090F		 _L06F3	EQU offset 0090Fh
2   741		  =OFFSET 0911		 _L06F5	EQU offset 00911h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 14
msx_asm\tur_comp.ASM



2   742		  =OFFSET 092B		 _L070F	EQU offset 0092Bh
2   743		  =OFFSET 0999		 _L073B	EQU offset 00999h
2   744		  =OFFSET 09A3		 _L0745	EQU offset 009A3h
2   745		  =OFFSET 09B0		 _L074E	EQU offset 009B0h
2   746		  =OFFSET 09B8		 _L0756	EQU offset 009B8h
2   747		  =OFFSET 09E2		 _L0780	EQU offset 009E2h
2   748		  =OFFSET 09E5		 _L0783	EQU offset 009E5h
2   749		  =OFFSET 09ED		 _L078B	EQU offset 009EDh
2   750		  =OFFSET 0A1E		 _L_AND	EQU offset 00A1Eh
2   751		  =OFFSET 0A30		 _L_OR EQU offset 00A30h
2   752		  =OFFSET 0A42		 _L_XOR	EQU offset 00A42h
2   753		  =OFFSET 0A54		 _L_NOT	EQU offset 00A54h
2   754		  =OFFSET 0A61		 _L_ABS	EQU offset 00A61h
2   755		  =OFFSET 0A64		 _L_NEG	EQU offset 00A64h
2   756		  =OFFSET 0A74		 _L_ADD	EQU offset 00A74h
2   757		  =OFFSET 0A7F		 _L_SUB	EQU offset 00A7Fh
2   758		  =OFFSET 0A94		 _L_SQR	EQU offset 00A94h
2   759		  =OFFSET 0A9A		 _L_MUL	EQU offset 00A9Ah
2   760		  =OFFSET 0B16		 _L_DIV	EQU offset 00B16h
2   761		  =OFFSET 0B2C		 _L_MOD	EQU offset 00B2Ch
2   762		  =OFFSET 0BD5		 _L_SHL	EQU offset 00BD5h
2   763		  =OFFSET 0BF1		 _L_SHR	EQU offset 00BF1h
2   764		  =OFFSET 0D66		 _L083D	EQU offset 00D66h
2   765		  =OFFSET 0D94		 _L086B	EQU offset 00D94h
2   766		  =OFFSET 0DCC		 _L08A3	EQU offset 00DCCh
2   767		  =OFFSET 0DDB		 _L08B2	EQU offset 00DDBh
2   768		  =OFFSET 0E1C		 _L08F3	EQU offset 00E1Ch
2   769		  =OFFSET 0E49		 _L0920	EQU offset 00E49h
2   770		  =OFFSET 0EBF		 _L0996	EQU offset 00EBFh
2   771		  =OFFSET 0ECB		 _L09A2	EQU offset 00ECBh
2   772		  =OFFSET 0F12		 _L09E9	EQU offset 00F12h
2   773		  =OFFSET 0F1B		 _L09F2	EQU offset 00F1Bh
2   774		  =OFFSET 0F20		 _L09F7	EQU offset 00F20h
2   775		  =OFFSET 0F23		 _L09FA	EQU offset 00F23h
2   776		  =OFFSET 0F28		 _L09FF	EQU offset 00F28h
2   777		  =OFFSET 1171		 _L0BFD	EQU offset 01171h
2   778		  =OFFSET 11A8		 _L0C34	EQU offset 011A8h
2   779		  =OFFSET 11BA		 _L0C46	EQU offset 011BAh
2   780		  =OFFSET 11F3		 _L0C7F	EQU offset 011F3h
2   781		  =OFFSET 11FB		 _L0C87	EQU offset 011FBh
2   782		  =OFFSET 129F		 _L0D2B	EQU offset 0129Fh
2   783		  =OFFSET 132A		 _L0DB6	EQU offset 0132Ah
2   784		  =OFFSET 13BA		 _L0E46	EQU offset 013BAh
2   785		  =OFFSET 1528		 _L0FB4	EQU offset 01528h
2   786		  =OFFSET 1544		 _L0FD0	EQU offset 01544h
2   787		  =OFFSET 1552		 _L0FDE	EQU offset 01552h
2   788		  =OFFSET 1581		 _L1008	EQU offset 01581h
2   789		  =OFFSET 15A0		 _L_R EQU offset 015A0h
2   790		  =OFFSET 15C4		 _R_L EQU offset 015C4h
2   791		  =OFFSET 18AA		 _L12DD	EQU offset 018AAh
2   792		  =OFFSET 18AE		 _L12E1	EQU offset 018AEh
2   793		  =OFFSET 18C9		 _L12FC	EQU offset 018C9h
2   794		  =OFFSET 18CD		 _L1300	EQU offset 018CDh
2   795		  =OFFSET 18E5		 _L1318	EQU offset 018E5h
2   796		  =OFFSET 18F3		 _L1326	EQU offset 018F3h
2   797		  =OFFSET 1900		 _L1333	EQU offset 01900h
2   798		  =OFFSET 191C		 _L134F	EQU offset 0191Ch
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 15
msx_asm\tur_comp.ASM



2   799		  =OFFSET 193C		 _L136F	EQU offset 0193Ch
2   800		  =OFFSET 193D		 _L1370	EQU offset 0193Dh
2   801		  =OFFSET 19D6		 _L13FE	EQU offset 019D6h
2   802		  =OFFSET 19D7		 _L13FF	EQU offset 019D7h
2   803		  =OFFSET 1A45		 _L1469	EQU offset 01A45h
2   804		  =OFFSET 1A77		 _L149B	EQU offset 01A77h
2   805		  =OFFSET 1A85		 _L14A9	EQU offset 01A85h
2   806		  =OFFSET 1A96		 _L14BA	EQU offset 01A96h
2   807		  =OFFSET 1AA7		 _L14CB	EQU offset 01AA7h
2   808		  =OFFSET 1AAB		 _L14CC	EQU offset 01AABh
2   809		  =OFFSET 1C67		 _L1644	EQU offset 01C67h
2   810		  =OFFSET 1C70		 _L164D	EQU offset 01C70h
2   811		  =OFFSET 1C74		 _L164E	EQU offset 01C74h
2   812		  =OFFSET 1C98		 _L1671	EQU offset 01C98h
2   813		  =OFFSET 1CBE		 _L1672	EQU offset 01CBEh
2   814		  =OFFSET 1CDA		 _L168E	EQU offset 01CDAh
2   815		  =OFFSET 1CF7		 _L16AB	EQU offset 01CF7h
2   816		  =OFFSET 1D83		 _L1722	EQU offset 01D83h
2   817		  =OFFSET 1D87		 _L1726	EQU offset 01D87h
2   818		  =OFFSET 1DDA		 _L1779	EQU offset 01DDAh
2   819		  =OFFSET 1DEC		 _PRT_LONG EQU offset 01DECh
2   820		  =OFFSET 1E18		 _L178B	EQU offset 01E18h
2   821		  =OFFSET 1E37		 _L17AA	EQU offset 01E37h
2   822		  =OFFSET 1E47		 _L17BA	EQU offset 01E47h
2   823		  =OFFSET 1E5A		 _L17CD	EQU offset 01E5Ah
2   824		  =OFFSET 1E64		 _L17D7	EQU offset 01E64h
2   825		  =OFFSET 1E69		 _L17DC	EQU offset 01E69h
2   826		  =OFFSET 1E6E		 _L17E1	EQU offset 01E6Eh
2   827		  =OFFSET 1E73		 _L17E6	EQU offset 01E73h
2   828		  =OFFSET 1E9D		 _L1810	EQU offset 01E9Dh
2   829		  =OFFSET 1EA2		 _L1811	EQU offset 01EA2h
2   830		  =OFFSET 1F40		 _L187A	EQU offset 01F40h
2   831		  =OFFSET 1F4A		 _L18A4	EQU offset 01F4Ah
2   832		  =OFFSET 1F5E		 _L18B6	EQU offset 01F5Eh
2   833		  =OFFSET 1F80		 _L18DC	EQU offset 01F80h
2   834		  =OFFSET 1F8E		 _L19A5	EQU offset 01F8Eh
2   835		  =OFFSET 1FBA		 _L19D5	EQU offset 01FBAh
2   836		  =OFFSET 2014		 _L1A49	EQU offset 02014h
2   837		  =OFFSET 2028		 _L1A55	EQU offset 02028h
2   838		  =OFFSET 203F		 _L1A5D	EQU offset 0203Fh
2   839		  =OFFSET 2052		 _L1A6F	EQU offset 02052h
2   840		  =OFFSET 2057		 _L1A70	EQU offset 02057h
2   841		  =OFFSET 20B8		 _L1AB0	EQU offset 020B8h
2   842		  =OFFSET 20C2		 _L1ABA	EQU offset 020C2h
2   843		  =OFFSET 20C6		 _L1ABE	EQU offset 020C6h
2   844		  =OFFSET 2192		 _L1AED	EQU offset 02192h
2   845		  =OFFSET 2196		 _L1AF1	EQU offset 02196h
2   846		  =OFFSET 21C4		 _L1B6F	EQU offset 021C4h
2   847		  =OFFSET 2213		 _L1B93	EQU offset 02213h
2   848		  =OFFSET 2225		 _RENAMEFILE_LIB EQU offset 02225h
2   849		  =OFFSET 224F		 _L1BA5	EQU offset 0224Fh
2   850		  =OFFSET 227A		 _L1BEA	EQU offset 0227Ah
2   851		  =OFFSET 227E		 _L1BEB	EQU offset 0227Eh
2   852		  =OFFSET 2301		 _OVERLAYREC1 EQU offset 02301h
2   853		  =OFFSET 232C		 _LOADRUNOVERLAYREC EQU	offset 0232Ch
2   854		  =OFFSET 2339		 _LOADRUNOVERLAY EQU offset 02339h
2   855		  =OFFSET 238E		 _OVERLAYLOADPTR EQU offset 0238Eh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 16
msx_asm\tur_comp.ASM



2   856		  =OFFSET 23C6		 _L1CDB	EQU offset 023C6h
2   857		  =OFFSET 23D0		 _L1CE5	EQU offset 023D0h
2   858		  =OFFSET 2465		 _L1D7A	EQU offset 02465h
2   859		  =OFFSET 2528		 _L1E3D	EQU offset 02528h
2   860		  =OFFSET 252F		 _L1E44	EQU offset 0252Fh
2   861		  =OFFSET 258E		 _L1EA3	EQU offset 0258Eh
2   862		  =OFFSET 2596		 _L1EAB	EQU offset 02596h
2   863		  =OFFSET 25A8		 _L1EBC	EQU offset 025A8h
2   864		  =OFFSET 25AC		 _L1EBD	EQU offset 025ACh
2   865		  =OFFSET 25B0		 _L1EBE	EQU offset 025B0h
2   866		  =OFFSET 25EC		 _L1EF2	EQU offset 025ECh
2   867		  =OFFSET 25F0		 _L1EF3	EQU offset 025F0h
2   868		  =OFFSET 25F4		 _L1EF4	EQU offset 025F4h
2   869		  =OFFSET 2650		 _L1F48	EQU offset 02650h
2   870		  =OFFSET 2656		 _L1F4E	EQU offset 02656h
2   871		  =OFFSET 266C		 _L1F64	EQU offset 0266Ch
2   872		  =OFFSET 2685		 _L1F7D	EQU offset 02685h
2   873		  =OFFSET 26A3		 _L1F9B	EQU offset 026A3h
2   874		  =OFFSET 26E3		 _L1FDB	EQU offset 026E3h
2   875		  =OFFSET 26EC		 _L1FE4	EQU offset 026ECh
2   876		  =OFFSET 26F2		 _L1FEA	EQU offset 026F2h
2   877		  =OFFSET 26F9		 _L1FF1	EQU offset 026F9h
2   878		  =OFFSET 2703		 _GETERROR_LIB EQU offset 02703h
2   879		  =OFFSET 272A		 _L201B	EQU offset 0272Ah
2   880		  =OFFSET 27FD		 _L20D4	EQU offset 027FDh
2   881		  =OFFSET 286F		 _ERROREXIT EQU	offset 0286Fh
2   882		  =OFFSET 2884		 _DOSERRORHANDLERON EQU	offset 02884h
2   883		  =OFFSET 2887		 _DOSERRORHANDLEROFF EQU offset	02887h
2   884		  =OFFSET 2E9B		 _L20E2	EQU offset 02E9Bh
2   885
1   886
1   887	    0000			 L20E2:
1   888
1   889					 ;	   LD A,'A'
1   890					 ;	   LD BC,'A'*256+'P'
1   891					 ;	   LD HL,File1
1   892					 ;	   OR A
1   893					 ;	   CALL	SetExtension
1   894					 ;
1   895					 ;	   CALL	PrintASCIIZUPCASED
1   896					 ;	   CALL	L01E1		      ;	print CR, LF
1   897					 ;
1   898					 ;	   LD HL,File2
1   899					 ;	   CALL	PrintASCIIZUPCASED
1   900					 ;	   CALL	L01E1		      ;	print CR, LF
1   901					 ;
1   902					 ;	   LD A,'A'
1   903					 ;	   LD BC,'A'*256+'P'
1   904					 ;	   LD HL,File2
1   905					 ;	   OR A
1   906					 ;	   CALL	SetExtension
1   907					 ;
1   908					 ;	   CALL	PrintASCIIZUPCASED
1   909					 ;	   CALL	L01E1		      ;	print CR, LF
1   910					 ;
1   911					 ;	   LD A,'A'
1   912					 ;	   LD BC,'A'*256+'P'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 17
msx_asm\tur_comp.ASM



1   913					 ;	   LD HL,File3
1   914					 ;	   OR A
1   915					 ;	   CALL	SetExtension
1   916					 ;
1   917					 ;	   CALL	PrintASCIIZUPCASED
1   918					 ;	   CALL	L01E1		      ;	print CR, LF
1   919					 ;
1   920					 ;	   LD A,'A'
1   921					 ;	   LD BC,'A'*256+'P'
1   922					 ;	   LD HL,File4
1   923					 ;	   OR A
1   924					 ;	   CALL	SetExtension
1   925					 ;
1   926					 ;	   CALL	PrintASCIIZUPCASED
1   927					 ;	   CALL	L01E1		      ;	print CR, LF
1   928					 ;
1   929					 ;	   LD A,'A'
1   930					 ;	   LD BC,'A'*256+'P'
1   931					 ;	   LD HL,File5
1   932					 ;	   OR A
1   933					 ;	   CALL	SetExtension
1   934					 ;
1   935					 ;	   CALL	PrintASCIIZUPCASED
1   936					 ;	   CALL	L01E1		      ;	print CR, LF
1   937
1   938	    0000  C3				  DB 0c3h
1   939	    0001  037Fr				 DW  L215E
1   940
1   941					 ;File1:   DB 'TEST.',0,0,0,0,0,0,0,0,0,0
1   942					 ;File2:   DB '\E',0,0,0,0,0,0,0,0,0,0
1   943					 ;File3:   DB 'E\E',0,0,0,0,0,0,0,0,0,0
1   944					 ;File4:   DB 'DIR.PAS',0,0,0,0,0,0,0,0,0,0
1   945					 ;File5:   DB 'TEST.PAS',0,0,0,0,0,0,0,0,0,0
1   946
1   947	    0003			 PRINT_SYNTAX:
1   948	    0003  CD				 DB 0cdh
1   949	    0004  0000e				 DW  L0200
1   950	    0006  53 79	6E 74 61 78 3A+		  DB 'Syntax: TURBO <filename> [/C|/H] [/Sxxxx]	[/Exxxx] [/Fxxxx]'
    951		  20 54	55 52 42 4F 20+
    952		  3C 66	69 6C 65 6E 61+
    953		  6D 65	3E 20 5B 2F 43+
    954		  7C 2F	48 5D 20 5B 2F+
    955		  53 78	78 78 78 5D 20+
    956		  5B 2F	45 78 78 78 78+
    957		  5D 20	5B 2F 46 78 78+
    958		  78 78	5D
1   959					 ; 33e	       DB ' [/R[-|<file>]]'
1   960	    0041  0D 0A				  DB 13,10
1   961	    0043  2F 43	20 20 20 20 20+		 DB '/C		   compiles <filename> to COM-file',13,10
    962		  20 20	20 20 20 20 20+
    963		  63 6F	6D 70 69 6C 65+
    964		  73 20	3C 66 69 6C 65+
    965		  6E 61	6D 65 3E 20 74+
    966		  6F 20	43 4F 4D 2D 66+
    967		  69 6C	65 0D 0A
1   968	    0072  2F 48	20 20 20 20 20+		 DB '/H		   compiles <filename> to CHAIN-file',13,10
    969		  20 20	20 20 20 20 20+
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 18
msx_asm\tur_comp.ASM



    970		  63 6F	6D 70 69 6C 65+
    971		  73 20	3C 66 69 6C 65+
    972		  6E 61	6D 65 3E 20 74+
    973		  6F 20	43 48 41 49 4E+
    974		  2D 66	69 6C 65 0D 0A
1   975	    00A3  2F 53	78 78 78 78 20+		 DB '/Sxxxx	   code	start address (hexadecimal), min. ',0
    976		  20 20	20 20 20 20 20+
    977		  63 6F	64 65 20 73 74+
    978		  61 72	74 20 61 64 64+
    979		  72 65	73 73 20 28 68+
    980		  65 78	61 64 65 63 69+
    981		  6D 61	6C 29 2C 20 6D+
    982		  69 6E	2E 20 00
1   983
1   984	    00D9  21				 DB 21h
1   985	    00DA  2E9B				 DW _L20E2
1   986	    00DC  CD				 DB 0cdh
1   987	    00DD  0000e				 DW  L04AF
1   988
1   989	    00DF  CD				 DB 0cdh
1   990	    00E0  0000e				 DW  L0200
1   991	    00E2  0D 0A				 DB 13,10
1   992	    00E4  2F 45	78 78 78 78 20+		 DB '/Exxxx	   data	end address (hexadecimal), max.	',0
    993		  20 20	20 20 20 20 20+
    994		  64 61	74 61 20 65 6E+
    995		  64 20	61 64 64 72 65+
    996		  73 73	20 28 68 65 78+
    997		  61 64	65 63 69 6D 61+
    998		  6C 29	2C 20 6D 61 78+
    999		  2E 20	00
1  1000
1  1001	    0118  2A				 DB 02ah
1  1002	    0119  0006				 DW 0006H
1  1003	    011B  01				 DB 01h
1  1004	    011C  FD3C				 DW -708
1  1005	    011E  09				 DB 09h
1  1006	    011F  CD				 DB 0cdh
1  1007	    0120  0000e				 DW  L04AF
1  1008
1  1009	    0122  CD				 DB 0cdh
1  1010	    0123  0000e				 DW  L0200
1  1011	    0125  0D 0A				 DB 13,10
1  1012	    0127  2F 46	78 78 78 78 20+		 DB '/Fxxxx	   find	runtime	error at address xxxx (hexadecimal)',13,10
   1013		  20 20	20 20 20 20 20+
   1014		  66 69	6E 64 20 72 75+
   1015		  6E 74	69 6D 65 20 65+
   1016		  72 72	6F 72 20 61 74+
   1017		  20 61	64 64 72 65 73+
   1018		  73 20	78 78 78 78 20+
   1019		  28 68	65 78 61 64 65+
   1020		  63 69	6D 61 6C 29 0D+
   1021		  0A
1  1022	    0167  2F 52	3C 66 69 6C 65+		 DB '/R<file>	   generates this error	file with a compiler error',13,10
   1023		  3E 20	20 20 20 20 20+
   1024		  67 65	6E 65 72 61 74+
   1025		  65 73	20 74 68 69 73+
   1026		  20 65	72 72 6F 72 20+
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 19
msx_asm\tur_comp.ASM



   1027		  66 69	6C 65 20 77 69+
   1028		  74 68	20 61 20 63 6F+
   1029		  6D 70	69 6C 65 72 20+
   1030		  65 72	72 6F 72 0D 0A
1  1031	    01A6  2F 52	2D 20 20 20 20+		 DB '/R-	   generates no	error file'
   1032		  20 20	20 20 20 20 20+
   1033		  67 65	6E 65 72 61 74+
   1034		  65 73	20 6E 6F 20 65+
   1035		  72 72	6F 72 20 66 69+
   1036		  6C 65
1  1037	    01CB  0D 0A				 DB 13,10
1  1038	    01CD  00				 DB 0			 ; end of string
1  1039
1  1040	    01CE  0E 00				 DB 0eh,0
1  1041	    01D0  CD				 DB 0cdh
1  1042	    01D1  0005				 DW  MSXDOS		 ; quit	program
1  1043
1  1044
1  1045	    01D3			 GETPARAMERRORFILENAME:
1  1046	    01D3  CD				 DB 0cdh
1  1047	    01D4  0000e				 DW  L0200
1  1048	    01D6  0A 63	6F 6D 6D 61 6E+		 DB 10,'commandline: wrong error file name',13,10,10,0
   1049		  64 6C	69 6E 65 3A 20+
   1050		  77 72	6F 6E 67 20 65+
   1051		  72 72	6F 72 20 66 69+
   1052		  6C 65	20 6E 61 6D 65+
   1053		  0D 0A	0A 00
1  1054	    01FD  C3				 DB 0c3h
1  1055	    01FE  0003r				 DW  PRINT_SYNTAX
1  1056
1  1057	    0200			 GETPARAMHEXNUMBER:
1  1058	    0200  CD				 DB 0cdh
1  1059	    0201  0000e				 DW  L0200
1  1060	    0203  0A 63	6F 6D 6D 61 6E+		 DB 10,'commandline: error in hexadecimal number',13,10,10,0
   1061		  64 6C	69 6E 65 3A 20+
   1062		  65 72	72 6F 72 20 69+
   1063		  6E 20	68 65 78 61 64+
   1064		  65 63	69 6D 61 6C 20+
   1065		  6E 75	6D 62 65 72 0D+
   1066		  0A 0A	00
1  1067	    0230  C3				 DB 0c3h
1  1068	    0231  0003r				 DW  PRINT_SYNTAX
1  1069
1  1070	    0233			 GETPARAMUNKNOWNOPTION:
1  1071	    0233  CD				 DB 0cdh
1  1072	    0234  0000e				 DW  L0200
1  1073	    0236  0A 63	6F 6D 6D 61 6E+		 DB 10,'commandline: illegal option',13,10,10,0
   1074		  64 6C	69 6E 65 3A 20+
   1075		  69 6C	6C 65 67 61 6C+
   1076		  20 6F	70 74 69 6F 6E+
   1077		  0D 0A	0A 00
1  1078	    0256  C3				 DB 0c3h
1  1079	    0257  0003r				 DW  PRINT_SYNTAX
1  1080
1  1081	    0259			 GETPARAM:; in:	   -
1  1082						 ; out:	 DE = destination for file name
1  1083						 ;	 Carry set if error occurred
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 20
msx_asm\tur_comp.ASM



1  1084						 ;	 BC = position of error
1  1085	    0259  D5				 DB 0d5h
1  1086
1  1087	    025A  21				  DB 21h
1  1088	    025B  0000e				 DW L0080
1  1089	    025D  5E				 DB 5eh
1  1090	    025E  1C				 DB 1ch
1  1091	    025F  16 00				 DB 16h,0
1  1092	    0261  19				 DB 019h
1  1093
1  1094	    0262  AF				  DB 0afh
1  1095	    0263  77				 DB 77h		 ; quit	command-line with a '\0'
1  1096
1  1097	    0264  7B				 DB 7bh
1  1098	    0265  3D				 DB 3dh			 ; was it 1 ?
1  1099	    0266  37				 DB 37h
1  1100
1  1101	    0267  D1				 DB 0d1h
1  1102
1  1103	    0268  C8				 DB 0c8h		 ; quit	with Carry if command-line = empty
1  1104
1  1105	    0269  21				 DB 21h
1  1106	    026A  0001e				 DW L0080+1		 ; start of command-line
1  1107	    026C  3E 50				 DB 3eh,'P'
1  1108	    026E  01				 DB 01h
1  1109	    026F  4153				 DW 'A'*256+'S'
1  1110	    0271  CD				 DB 0cdh
1  1111	    0272  0000e				 DW  PARSENAME		 ; parse with default extension	'PAS'
1  1112
1  1113	    0274  B7				  DB 0b7h
1  1114	    0275  37				  DB 37h
1  1115	    0276  C0				  DB 0c0h		      ;	quit with carry	if error occurred
1  1116
1  1117	    0277  E5				  DB 0e5h
1  1118
1  1119	    0278  21				 DB 21h
1  1120	    0279  0001e				 DW L0080+1
1  1121	    027B  11				 DB 11h
1  1122	    027C  0652r				 DW ERRORFILENAME-1
1  1123	    027E  3E 45				 DB 3eh,'E'
1  1124	    0280  01				 DB 01h
1  1125	    0281  5252				 DW 'R'*256+'R'
1  1126	    0283  CD				 DB 0cdh
1  1127	    0284  0000e				 DW  PARSENAME		 ; parse with default extension	'ERR'
1  1128
1  1129	    0286  E1				  DB 0e1h
1  1130
1  1131	    0287  B7				 DB 0b7h
1  1132	    0288  37				 DB 37h
1  1133	    0289  C0				  DB 0c0h		      ;	quit with carry	if error occurred
1  1134
1  1135	    028A  2B				 DB 2bh
1  1136	    028B  44				 DB 44h
1  1137	    028C  4D				 DB 4dh
1  1138
1  1139	    028D  21				 DB 21h
1  1140	    028E  0653r				 DW ERRORFILENAME
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 21
msx_asm\tur_comp.ASM



1  1141	    0290			 GETPAR_A:
1  1142	    0290  23				 DB 23h
1  1143	    0291  7E				 DB 7eh
1  1144	    0292  B7				 DB 0b7h
1  1145	    0293  20 FB				 DB 20h,(GETPAR_A)-$-1		 ; repeat while	not end	of string
1  1146
1  1147	    0295			 GETPAR_B:
1  1148	    0295  2B				 DB 2bh
1  1149	    0296  7E				 DB 7eh
1  1150	    0297  FE 2E				 DB 0feh, '.'
1  1151	    0299  20 FA				 DB 20h,(GETPAR_B)-$-1
1  1152
1  1153	    029B  23				 DB 23h
1  1154
1  1155						 ; add '.ERR'
1  1156	    029C  36 45				 DB 36h,'E'
1  1157	    029E  23				 DB 23h
1  1158	    029F  36 52				 DB 36h,'R'
1  1159	    02A1  23				 DB 23h
1  1160	    02A2  36 52				 DB 36h,'R'
1  1161	    02A4  23				 DB 23h
1  1162	    02A5  36 00				 DB 36h,0
1  1163
1  1164	    02A7  03			 GETPARLP:DB 03h
1  1165	    02A8  0A				 DB 0ah
1  1166	    02A9  B7				 DB 0b7h
1  1167	    02AA  C8				 DB 0c8h		 ; quit	with NonCarry if zero found
1  1168
1  1169	    02AB  FE 2F				 DB 0feh, '/'
1  1170	    02AD  20 F8				 DB 20h,(GETPARLP)-$-1
1  1171
1  1172	    02AF			 GETPAR1:
1  1173	    02AF  03				 DB 03h
1  1174	    02B0  0A				 DB 0ah
1  1175	    02B1  CD				 DB 0cdh
1  1176	    02B2  0000e				 DW  UPCASE
1  1177
1  1178	    02B4  FE 43				 DB 0feh, 'C'			  ; '/C' ?
1  1179	    02B6  20 08				 DB 20h,(GETPAR2)-$-1		 ; no, next
1  1180
1  1181						 ; set COM file	= TRUE
1  1182	    02B8  3E 02				 DB 3eh,2			 ; compile to Com-file
1  1183	    02BA  32				 DB 32h
1  1184	    02BB  0979r				 DW L44F3
1  1185	    02BD  C3				 DB 0c3h
1  1186	    02BE  02A7r				 DW  GETPARLP
1  1187
1  1188	    02C0			 GETPAR2:
1  1189	    02C0  FE 48				 DB 0feh, 'H'			  ; '/H' ?
1  1190	    02C2  20 08				 DB 20h,(GETPAR3)-$-1		 ; no, next
1  1191
1  1192						 ; set CHAIN file = TRUE
1  1193	    02C4  3E 03				 DB 3eh,3			 ; compile to cHn-file
1  1194	    02C6  32				 DB 32h
1  1195	    02C7  0979r				 DW L44F3
1  1196	    02C9  C3				 DB 0c3h
1  1197	    02CA  02A7r				 DW  GETPARLP
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 22
msx_asm\tur_comp.ASM



1  1198
1  1199	    02CC			 GETPAR3:
1  1200	    02CC  FE 53				 DB 0feh, 'S'			  ; '/S' ?
1  1201	    02CE  20 0D				 DB 20h,(GETPAR4)-$-1		 ; no, next
1  1202
1  1203	    02D0  CD				 DB 0cdh
1  1204	    02D1  033Fr				 DW  GETHEX		 ; parse hexadecimal number
1  1205	    02D3  DA				 DB 0dah
1  1206	    02D4  0200r				 DW GETPARAMHEXNUMBER
1  1207
1  1208						 ; set start address = HL
1  1209	    02D6  22				 DB 22h
1  1210	    02D7  097Ar				 DW L44F4
1  1211	    02D9  0B				 DB 0bh
1  1212	    02DA  C3				 DB 0c3h
1  1213	    02DB  02A7r				 DW  GETPARLP
1  1214
1  1215	    02DD			 GETPAR4:
1  1216	    02DD  FE 45				 DB 0feh, 'E'			  ; '/E' ?
1  1217	    02DF  20 0D				 DB 20h,(GETPAR5)-$-1		 ; no, next
1  1218
1  1219	    02E1  CD				 DB 0cdh
1  1220	    02E2  033Fr				 DW  GETHEX		 ; parse hexadecimal number
1  1221	    02E4  DA				 DB 0dah
1  1222	    02E5  0200r				 DW GETPARAMHEXNUMBER
1  1223
1  1224						 ; set end address = HL
1  1225	    02E7  22				 DB 22h
1  1226	    02E8  097Cr				 DW L44F6
1  1227	    02EA  0B				 DB 0bh
1  1228	    02EB  C3				 DB 0c3h
1  1229	    02EC  02A7r				 DW  GETPARLP
1  1230
1  1231	    02EE			 GETPAR5:
1  1232	    02EE  FE 52				 DB 0feh, 'R'			  ; '/R' ?
1  1233	    02F0  20 35				 DB 20h,(GETPAR6)-$-1
1  1234
1  1235						 ; parse filename or '-'
1  1236	    02F2  03				 DB 03h
1  1237	    02F3  0A				 DB 0ah
1  1238	    02F4  FE 2D				 DB 0feh, '-'			  ; '/R-' ?
1  1239	    02F6  CA				 DB 0cah
1  1240	    02F7  031Fr				 DW GETPAR51		 ; jump	for no error file
1  1241
1  1242						 ; file	name is	given
1  1243						 ; set to string after '/R'
1  1244	    02F9  C5				 DB 0c5h		 ; save	start address
1  1245
1  1246	    02FA  60				 DB 60h			 ; HL =	BC = start of new file name
1  1247	    02FB  69				 DB 69h
1  1248	    02FC  11				 DB 11h
1  1249	    02FD  0696r				 DW ERRORFILEINFO
1  1250	    02FF  3E 45				 DB 3eh,'E'
1  1251	    0301  01				 DB 01h
1  1252	    0302  5252				 DW 'R'*256+'R'
1  1253	    0304  CD				 DB 0cdh
1  1254	    0305  0000e				 DW  PARSENAME
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 23
msx_asm\tur_comp.ASM



1  1255
1  1256	    0307  D1				 DB 0d1h		 ; DE =	start address
1  1257	    0308  DA				 DB 0dah
1  1258	    0309  01D3r				 DW GETPARAMERRORFILENAME
1  1259
1  1260	    030B  E5				 DB 0e5h
1  1261
1  1262	    030C  B7				 DB 0b7h
1  1263	    030D  ED 52				 DB 0EDH,052h		 ; HL -	DE, end	- start
1  1264	    030F  44				 DB 44h			 ; BC =	length
1  1265	    0310  4D				 DB 4dh
1  1266	    0311  21				 DB 21h
1  1267	    0312  0653r				 DW ERRORFILENAME
1  1268	    0314  EB				 DB 0ebh		 ; HL =	source
1  1269									 ; DE =	destination
1  1270	    0315  ED B0				 DB 0edh,0b0h			 ; fill	ErrorFileName with new name
1  1271
1  1272	    0317  AF				 DB 0afh
1  1273	    0318  12				 DB 12h		 ; mark	end of destination file	name
1  1274
1  1275	    0319  E1				 DB 0e1h		 ; HL =	address	after file name
1  1276
1  1277	    031A  44				 DB 44h			 ; BC =	address	after file name
1  1278	    031B  4D				 DB 4dh
1  1279	    031C  C3				 DB 0c3h
1  1280	    031D  02A7r				 DW  GETPARLP
1  1281
1  1282	    031F			 GETPAR51:; no error file
1  1283						 ; set file name to ""
1  1284	    031F  21				 DB 21h
1  1285	    0320  0653r				 DW ERRORFILENAME
1  1286	    0322  36 00				 DB 36h,0		 ; clear file name
1  1287	    0324  C3				 DB 0c3h
1  1288	    0325  02A7r				 DW  GETPARLP
1  1289
1  1290	    0327			 GETPAR6:
1  1291	    0327  FE 46				 DB 0feh, 'F'			  ; '/F' ?
1  1292	    0329  37				 DB 37h
1  1293	    032A  C2				  DB 0c2h
1  1294	    032B  0233r				 DW GETPARAMUNKNOWNOPTION
1  1295
1  1296	    032D  CD				 DB 0cdh
1  1297	    032E  033Fr				 DW  GETHEX		 ; parse hexadecimal number
1  1298	    0330  DA				 DB 0dah
1  1299	    0331  0200r				 DW GETPARAMHEXNUMBER
1  1300
1  1301						 ; set search address =	HL
1  1302	    0333  22				 DB 22h
1  1303	    0334  0000e				 DW L00CE
1  1304	    0336  3E 02				 DB 3eh,2
1  1305	    0338  32				 DB 32h
1  1306	    0339  3913r				 DW L7900		 ; compilation with search
1  1307	    033B  0B				 DB 0bh
1  1308	    033C  C3				 DB 0c3h
1  1309	    033D  02A7r				 DW  GETPARLP
1  1310
1  1311	    033F			 GETHEX:
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 24
msx_asm\tur_comp.ASM



1  1312	    033F  21				 DB 21h
1  1313	    0340  0000				 DW 0
1  1314
1  1315	    0342			 GETHEX1:
1  1316	    0342  03				 DB 03h
1  1317	    0343  0A				 DB 0ah
1  1318	    0344  B7				 DB 0b7h
1  1319	    0345  C8				 DB 0c8h		 ; quit	with NonCarry
1  1320	    0346  FE 20				 DB 0feh, ' '
1  1321	    0348  C8				 DB 0c8h		 ; quit	with NonCarry
1  1322
1  1323	    0349  0B				 DB 0bh
1  1324	    034A  FE 2F				 DB 0feh, '/'
1  1325	    034C  C8				 DB 0c8h		 ; quit	with NonCarry
1  1326	    034D  03				 DB 03h
1  1327
1  1328	    034E  CD				 DB 0cdh
1  1329	    034F  0000e				 DW  UPCASE
1  1330
1  1331	    0351  D6 30				 DB 0d6h, '0'
1  1332	    0353  D8				 DB 0d8h		 ; error, no digit
1  1333	    0354  FE 0A				 DB 0feh, 10
1  1334	    0356  3F				 DB 3fh
1  1335	    0357  30 07				 DB 30h,(GETHEX2)-$-1		 ; jump	if '0'-'9'
1  1336
1  1337	    0359  D6 07				 DB 0d6h, 7
1  1338	    035B  D8				 DB 0d8h		 ; error, no digit and < 'A'
1  1339	    035C  FE 10				 DB 0feh, 16
1  1340	    035E  3F				 DB 3fh
1  1341	    035F  D8				 DB 0d8h		 ; return with Carry if	>= 16
1  1342
1  1343	    0360			 GETHEX2:
1  1344	    0360  29				 DB 029h
1  1345	    0361  29				 DB 029h
1  1346	    0362  29				 DB 029h
1  1347	    0363  29				 DB 029h
1  1348	    0364  B5				 DB 0b5h
1  1349	    0365  6F				 DB 6fh
1  1350
1  1351	    0366  18 DA				 DB 18h,( GETHEX1)-$-1
1  1352
1  1353	    0368			 L20E5:
1  1354	    0368  2A				 DB 02ah
1  1355	    0369  0006				 DW 0006H
1  1356	    036B  C1				 DB 0c1h
1  1357	    036C  F9				 DB 0f9h
1  1358	    036D  C5				 DB 0c5h
1  1359
1  1360	    036E  11				 DB 11h
1  1361	    036F  FC00				 DW -1024
1  1362	    0371  19				 DB 019h
1  1363	    0372  22				  DB 22h
1  1364	    0373  09EBr				 DW L4548	       ; highest free address 1Kbyte below call	5
1  1365
1  1366	    0375  21			 L20F2:	 DB 21h
1  1367	    0376  3E91r				 DW L7AD7		 ; address of temp buffer (L00D2)
1  1368	    0378  01				 DB 01h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 25
msx_asm\tur_comp.ASM



1  1369	    0379  0000				 DW 0000
1  1370	    037B  CD				  DB 0cdh
1  1371	    037C  0000e				 DW  L0364		   ; LIB
1  1372
1  1373	    037E  C9				 DB 0c9h
1  1374
1  1375	    037F			 L215E:
1  1376	    037F  2A				 DB 02ah
1  1377	    0380  0006				 DW 0006H
1  1378	    0382  01				 DB 01h
1  1379	    0383  FD3C				 DW -708
1  1380	    0385  09				 DB 09h
1  1381
1  1382	    0386  22				 DB 22h
1  1383	    0387  097Cr				 DW L44F6		 ; compile end address
1  1384
1  1385	    0389  CD				  DB 0cdh
1  1386	    038A  0000e				 DW  INITFILEIO
1  1387
1  1388	    038C  CD				 DB 0cdh
1  1389	    038D  0000e				 DW  L0200
1  1390	    038F  5A 38	30 20 54 55 52+		  DB 'Z80 TURBO	Pascal compiler,	     Version 3.3f (DOS 1/2) ',13,10
   1391		  42 4F	20 50 61 73 63+
   1392		  61 6C	20 63 6F 6D 70+
   1393		  69 6C	65 72 2C 20 20+
   1394		  20 20	20 20 20 20 20+
   1395		  20 20	20 20 56 65 72+
   1396		  73 69	6F 6E 20 33 2E+
   1397		  33 66	20 28 44 4F 53+
   1398		  20 31	2F 32 29 20 0D+
   1399		  0A
1  1400	    03CF  43 6F	70 79 72 69 67+		  DB 'Copyright	(C) MSX	computer club Enschede,	''1993-''2000',13,10
   1401		  68 74	20 28 43 29 20+
   1402		  4D 53	58 20 63 6F 6D+
   1403		  70 75	74 65 72 20 63+
   1404		  6C 75	62 20 45 6E 73+
   1405		  63 68	65 64 65 2C 20+
   1406		  27 31	39 39 33 2D 27+
   1407		  32 30	30 30 0D 0A
1  1408	    0406  00				 DB 0
1  1409
1  1410	    0407  11				 DB 11h
1  1411	    0408  3E91r				 DW L7AD7		 ; address of temp buffer
1  1412	    040A  AF				 DB 0afh
1  1413	    040B  12				 DB 12h
1  1414	    040C  CD				  DB 0cdh
1  1415	    040D  0259r				 DW  GETPARAM		   ; get command line parameters
1  1416	    040F  DA				 DB 0dah
1  1417	    0410  0003r				 DW PRINT_SYNTAX	 ; print syntax	if error and quit program
1  1418
1  1419	    0412  0E 19				 DB 0eh,19H
1  1420	    0414  CD				 DB 0cdh
1  1421	    0415  0005				 DW  MSXDOS		 ; get logged drive
1  1422	    0417  3C				 DB 3ch
1  1423	    0418  32				 DB 32h
1  1424	    0419  097Er				 DW LOGDRV		 ; 1 = A:, 2 = B: etc.
1  1425	    041B  CD				  DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 26
msx_asm\tur_comp.ASM



1  1426	    041C  0368r				 DW  L20E5
1  1427
1  1428	    041E  3E 50				  DB 3eh,'P'
1  1429	    0420  01				  DB 01h
1  1430	    0421  4153				 DW 'A'*256+'S'
1  1431	    0423  21				  DB 21h
1  1432	    0424  3E92r				 DW L7AD7+1
1  1433	    0426  B7				  DB 0b7h
1  1434	    0427  CD				  DB 0cdh
1  1435	    0428  0000e				 DW  SETEXTENSION
1  1436
1  1437	    042A  21				  DB 21h
1  1438	    042B  3E92r				 DW L7AD7+1		 ; address of filename
1  1439	    042D  11				  DB 11h
1  1440	    042E  09A3r				 DW L451D		 ; DE =	handle/FCB address
1  1441	    0430  3E 50				  DB 3eh,'P'
1  1442	    0432  01				  DB 01h
1  1443	    0433  4153				 DW 'A'*256+'S'
1  1444	    0435  CD				  DB 0cdh
1  1445	    0436  0000e				 DW  PARSENAME		   ; parse filename
1  1446
1  1447	    0438  CD				  DB 0cdh
1  1448	    0439  04C6r				 DW  L2827		   ; Compile
1  1449
1  1450	    043B  CD			 L223B:	 DB 0cdh
1  1451	    043C  0000e				 DW  L01E1		 ; print CR, LF
1  1452
1  1453	    043E  0E 00				 DB 0eh,0
1  1454	    0440  CD				 DB 0cdh
1  1455	    0441  0005				 DW  MSXDOS
1  1456
1  1457
1  1458	    0443  CD			 L232E:	 DB 0cdh
1  1459	    0444  0000e				 DW  L0200
1  1460	    0446  46 72	65 65 3A 20 00		 DB 'Free: ',0
1  1461
1  1462	    044D  E5			 L2338:	 DB 0e5h
1  1463	    044E  D5				 DB 0d5h
1  1464	    044F  B7				 DB 0b7h
1  1465	    0450  ED 52				 DB 0EDH,052h
1  1466	    0452  CD				 DB 0cdh
1  1467	    0453  0942r				 DW  L2E5C		 ; print HL in decimal
1  1468	    0455  CD				 DB 0cdh
1  1469	    0456  0000e				 DW  L0200
1  1470	    0458  20 62	79 74 65 73 20+		 DB ' bytes (',0
   1471		  28 00
1  1472	    0461  E1				 DB 0e1h
1  1473	    0462  CD				 DB 0cdh
1  1474	    0463  0000e				 DW  L04AF
1  1475	    0465  3E 2D				 DB 3eh,'-'
1  1476	    0467  CD				 DB 0cdh
1  1477	    0468  0000e				 DW  L03C9		 ; print '-'
1  1478	    046A  E1				 DB 0e1h
1  1479	    046B  CD				 DB 0cdh
1  1480	    046C  0000e				 DW  L04AF
1  1481	    046E  3E 29				 DB 3eh,')'
1  1482	    0470  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 27
msx_asm\tur_comp.ASM



1  1483	    0471  0000e				 DW  L03C9		 ; print ')'
1  1484	    0473  C3				 DB 0c3h
1  1485	    0474  0000e				 DW  L01E1		 ; print CR, LF
1  1486
1  1487	    0476  54 50	4F 55 54 00	 ENVTPOUT:DB 'TPOUT',0
1  1488
1  1489	    047C			 L27D7:
1  1490
1  1491					 ;	   LD HL,L451D		      ;	assume work filename FCB
1  1492					 ;	   LD DE,CodeFile
1  1493					 ;	   LD BC,65		      ;	handle/FCB length
1  1494					 ;	   LDIR
1  1495
1  1496	    047C  3A				  DB 3ah
1  1497	    047D  0000e				 DW DOS2PRESENT
1  1498	    047F  B7				  DB 0b7h
1  1499	    0480  CA				  DB 0cah
1  1500	    0481  04AEr				 DW TPOUT_OLD_STYLE	  ; jump if DOS	1
1  1501
1  1502						  ; DOS	2
1  1503
1  1504	    0483  3A				  DB 3ah
1  1505	    0484  09A3r				 DW L451D
1  1506	    0486  32				  DB 32h
1  1507	    0487  3921r				 DW CODEFILE
1  1508
1  1509	    0489  21				  DB 21h
1  1510	    048A  0476r				 DW ENVTPOUT
1  1511	    048C  11				  DB 11h
1  1512	    048D  3922r				 DW CODEFILE + 1
1  1513	    048F  06 40				  DB 06h,64
1  1514	    0491  0E 6B				  DB 0eh,6Bh
1  1515	    0493  CD				  DB 0cdh
1  1516	    0494  0005				 DW  MSXDOS		   ; retrieve TPOUT environment	item value
1  1517	    0496  B7				  DB 0b7h
1  1518	    0497  C2				  DB 0c2h
1  1519	    0498  04AEr				 DW TPOUT_OLD_STYLE	 ; switch to the old style if error occurred
1  1520
1  1521	    049A			 TPOUT_SCAN:
1  1522	    049A  1A				  DB 1ah
1  1523	    049B  B7				  DB 0b7h
1  1524	    049C  28 03				  DB 28h,(TPOUT_SCAN_END)-$-1
1  1525
1  1526	    049E  13				  DB 13h
1  1527	    049F  18 F9				  DB 18h,( TPOUT_SCAN)-$-1
1  1528
1  1529	    04A1			 TPOUT_SCAN_END:
1  1530	    04A1  21				  DB 21h
1  1531	    04A2  09A4r				 DW L451D + 1
1  1532
1  1533	    04A4			 TPOUT_COPY:
1  1534	    04A4  7E				  DB 7eh
1  1535	    04A5  12				  DB 12h
1  1536	    04A6  23				  DB 23h
1  1537	    04A7  13				  DB 13h
1  1538	    04A8  B7				  DB 0b7h
1  1539	    04A9  20 F9				  DB 20h,(TPOUT_COPY)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 28
msx_asm\tur_comp.ASM



1  1540
1  1541	    04AB  C3				  DB 0c3h
1  1542	    04AC  04B9r				 DW  L27D9		     ; ready
1  1543
1  1544	    04AE			 TPOUT_OLD_STYLE:
1  1545	    04AE  21				  DB 21h
1  1546	    04AF  09A3r				 DW L451D		 ; assume work filename	FCB
1  1547
1  1548	    04B1  11				  DB 11h
1  1549	    04B2  3921r				 DW CODEFILE
1  1550
1  1551	    04B4  01				  DB 01h
1  1552	    04B5  0041				 DW 65			 ; handle/FCB length
1  1553	    04B7  ED B0				  DB 0edh,0b0h
1  1554
1  1555	    04B9			 L27D9:
1  1556	    04B9  2A				 DB 02ah
1  1557	    04BA  0006				 DW 0006H
1  1558	    04BC  22				 DB 22h
1  1559	    04BD  391Dr				 DW L790A		 ; HL =	end of data area
1  1560
1  1561	    04BF  2A				 DB 02ah
1  1562	    04C0  09E9r				 DW L4546		 ; HL =	start of free area
1  1563	    04C2  22				 DB 22h
1  1564	    04C3  3917r				 DW L7904		 ; code	start address
1  1565	    04C5  C9				 DB 0c9h
1  1566
1  1567	    04C6			 L2827:	  ; Compile
1  1568	    04C6  CD				  DB 0cdh
1  1569	    04C7  047Cr				 DW  L27D7
1  1570
1  1571	    04C9  3A				 DB 3ah
1  1572	    04CA  0979r				 DW L44F3
1  1573	    04CC  D6 02				 DB 0d6h, 2			 ; to com-file ? (= 2)
1  1574					 ;	  DEC A			  ; to memory?
1  1575					 ;	  JP Z,L28AA		  ; jump if to memory
1  1576
1  1577					 ;	  DEC A			  ; to com-file?
1  1578	    04CE  F5				 DB 0f5h
1  1579
1  1580	    04CF  20 07				 DB 20h,(L283C)-$-1		 ; jump	if chain-file
1  1581
1  1582						 ; to com-file
1  1583	    04D1  3E 43				 DB 3eh,'C'		      ;	AHL = 'COM' extension
1  1584	    04D3  01				  DB 01h
1  1585	    04D4  4F4D				 DW 'O'*256+'M'
1  1586	    04D6  18 05				 DB 18h,( L2841)-$-1
1  1587
1  1588	    04D8			 L283C:	 ; to chain-file
1  1589	    04D8  3E 43				 DB 3eh,'C'		      ;	AHL = 'CHN' extension
1  1590	    04DA  01				  DB 01h
1  1591	    04DB  484E				 DW 'H'*256+'N'
1  1592
1  1593	    04DD  21			 L2841:	  DB 21h
1  1594	    04DE  3922r				 DW CODEFILE+1
1  1595	    04E0  37				  DB 37h			; overrule
1  1596	    04E1  CD				  DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 29
msx_asm\tur_comp.ASM



1  1597	    04E2  0000e				 DW  SETEXTENSION
1  1598
1  1599					 ;	   LD (L793C),A
1  1600					 ;	   LD (L793D),HL
1  1601
1  1602	    04E4  3A				 DB 3ah
1  1603	    04E5  3913r				 DW L7900
1  1604	    04E7  B7				 DB 0b7h
1  1605	    04E8  20 05				 DB 20h,(L2842)-$-1		 ; skip	if already filled in for search
1  1606
1  1607	    04EA  3E 01				 DB 3eh,1
1  1608	    04EC  32				 DB 32h
1  1609	    04ED  3913r				 DW L7900		 ; code	generation to disk
1  1610	    04EF			 L2842:
1  1611
1  1612	    04EF  2A				 DB 02ah
1  1613	    04F0  097Ar				 DW L44F4		 ; compile start address
1  1614	    04F2  22				 DB 22h
1  1615	    04F3  3917r				 DW L7904		 ; new code start address
1  1616	    04F5  2A				 DB 02ah
1  1617	    04F6  097Cr				 DW L44F6		 ; compile end address
1  1618	    04F8  22				 DB 22h
1  1619	    04F9  391Dr				 DW L790A		 ; new data end	address
1  1620	    04FB  2A				  DB 02ah
1  1621	    04FC  097Ar				 DW L44F4	       ; 33e
1  1622	    04FE  22				  DB 22h
1  1623	    04FF  0001e				 DW L7BF5+1	       ; 33e TODO
1  1624
1  1625	    0501  AF				  DB 0afh
1  1626	    0502  32				  DB 32h
1  1627	    0503  3D90r				 DW CODEFILECREATED
1  1628
1  1629	    0505  3A				  DB 3ah
1  1630	    0506  3913r				 DW L7900
1  1631	    0508  3D				  DB 3dh
1  1632	    0509  C2				  DB 0c2h
1  1633	    050A  0529r				 DW L2850		 ; skip	CodeFile creation if searching
1  1634
1  1635	    050C  11				  DB 11h
1  1636	    050D  3922r				 DW CODEFILE+1
1  1637	    050F  CD				  DB 0cdh
1  1638	    0510  0000e				 DW  DELETEFILE		   ; delete old	file
1  1639
1  1640	    0512  21				  DB 21h
1  1641	    0513  3922r				 DW CODEFILE+1
1  1642	    0515  11				  DB 11h
1  1643	    0516  3921r				 DW CODEFILE
1  1644	    0518  3E 20				  DB 3eh,' '
1  1645	    051A  01				  DB 01h
1  1646	    051B  2020				 DW ' '*256+' '
1  1647	    051D  CD				  DB 0cdh
1  1648	    051E  0000e				 DW  CREATEFILE
1  1649	    0520  B7				  DB 0b7h
1  1650	    0521  C2				  DB 0c2h
1  1651	    0522  08DCr				 DW L2A5A		 ; jump	if error
1  1652									     ; error: Disk or directory	full
1  1653
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 30
msx_asm\tur_comp.ASM



1  1654	    0524  3E FF				  DB 3eh,255
1  1655	    0526  32				  DB 32h
1  1656	    0527  3D90r				 DW CODEFILECREATED	; CodeFile correct created
1  1657
1  1658	    0529			 L2850:
1  1659
1  1660					 ;	   LD HL,L7933+FCB_RECSIZE
1  1661					 ;	   LD (HL),80H		      ;	record size = 128
1  1662					 ;	   INC HL
1  1663					 ;	   LD (HL),0
1  1664
1  1665	    0529  F1				 DB 0f1h		 ; NonZero if chain-file
1  1666	    052A  21				 DB 21h
1  1667	    052B  0000e				 DW L0100
1  1668	    052D  28 03				 DB 28h,(L2877)-$-1		 ; jump	if com-file
1  1669
1  1670	    052F  2A				 DB 02ah
1  1671	    0530  3917r				 DW L7904		 ; HL =	code start address
1  1672
1  1673	    0532  22			 L2877:	 DB 22h
1  1674	    0533  3915r				 DW L7902
1  1675	    0535  EB				 DB 0ebh
1  1676
1  1677	    0536  2A			 L287B:	 DB 02ah
1  1678	    0537  3917r				 DW L7904		 ; HL =	code start address
1  1679	    0539  B7				  DB 0b7h
1  1680	    053A  ED 52				  DB 0EDH,052h			; HL - DE
1  1681	    053C  38 1D				  DB 38h,(L28A9)-$-1		     ; jump if DE > HL
1  1682
1  1683	    053E  3A				  DB 3ah
1  1684	    053F  3913r				 DW L7900
1  1685	    0541  3D				  DB 3dh
1  1686	    0542  C2				  DB 0c2h
1  1687	    0543  055Br				 DW L28A9		 ; jump	if searching
1  1688									     ; don't write runtime library
1  1689
1  1690	    0545  01				  DB 01h
1  1691	    0546  3921r				 DW CODEFILE
1  1692
1  1693					 ;	   LD HL,(L7904)	      ;	HL = compile start address
1  1694					 ;	   LD (L0101),HL	      ;	init start jump	at 100H
1  1695
1  1696					 ;	   PUSH	BC
1  1697
1  1698	    0548  E5				  DB 0e5h		     ; DE = start address of data
1  1699	    0549  21				  DB 21h
1  1700	    054A  FF00e				 DW L7BF5-100H		 ; !!!
1  1701	    054C  19				 DB 019h
1  1702	    054D  EB				 DB 0ebh
1  1703	    054E  E1				  DB 0e1h
1  1704
1  1705	    054F  CD				  DB 0cdh
1  1706	    0550  0000e				 DW  WRITEFILE
1  1707
1  1708	    0552  F5				  DB 0f5h
1  1709	    0553  C4				  DB 0c4h
1  1710	    0554  05C1r				 DW CLEANUPCODEFILE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 31
msx_asm\tur_comp.ASM



1  1711	    0556  F1				  DB 0f1h
1  1712	    0557  B7				  DB 0b7h
1  1713	    0558  C2				  DB 0c2h
1  1714	    0559  08DCr				 DW L2A5A		 ; jump	if error
1  1715									     ; error: Disk or directory	full
1  1716
1  1717					 ;	   LD HL,_L20E2
1  1718					 ;	   LD (L0101),HL
1  1719					 ;	   OR A
1  1720					 ;	   JP NZ,L2A5A
1  1721
1  1722					 ;	   LD L,C
1  1723					 ;	   LD H,B
1  1724					 ;	  LD HL,128
1  1725					 ;	   ADD HL,DE
1  1726					 ;	   EX DE,HL
1  1727					 ;	   JR L287B
1  1728
1  1729	    055B			 L28A9:
1  1730	    055B  CD				 DB 0cdh
1  1731	    055C  0000e				 DW  L0200
1  1732	    055E  0D 0A	43 6F 6D 70 69+		 DB 0DH,0AH,'Compiling ',0
   1733		  6C 69	6E 67 20 00
1  1734
1  1735					 ;	   LD DE,L7933
1  1736
1  1737	    056B  11				  DB 11h
1  1738	    056C  09A3r				 DW L451D		 ; 33e TODO
1  1739	    056E  CD				  DB 0cdh
1  1740	    056F  33B2r				 DW  PRINTFILENAME
1  1741
1  1742	    0571  3A				  DB 3ah
1  1743	    0572  3913r				 DW L7900
1  1744	    0574  3D				  DB 3dh
1  1745	    0575  20 0F				  DB 20h,(L28D0)-$-1		    ; jump if searching
1  1746									     ; don't print '-->	<filename>'
1  1747
1  1748	    0577  CD				  DB 0cdh
1  1749	    0578  0000e				 DW  L0200
1  1750	    057A  20 2D	2D 3E 20 00		 DB ' --> ',0
1  1751
1  1752	    0580  11				  DB 11h
1  1753	    0581  3921r				 DW CODEFILE
1  1754	    0583  CD				  DB 0cdh
1  1755	    0584  33B2r				 DW  PRINTFILENAME
1  1756					 ;	   CALL	L2DF8		      ;	print file name	in DE
1  1757
1  1758	    0586  CD			 L28D0:	 DB 0cdh
1  1759	    0587  0000e				 DW  L01E1		 ; print CR, LF
1  1760
1  1761	    0589  21				 DB 21h
1  1762	    058A  0000				 DW 0
1  1763	    058C  22				 DB 22h
1  1764	    058D  FC9E				 DW 0FC9EH
1  1765	    058F  CD				  DB 0cdh
1  1766	    0590  09EDr				 DW  L454A		   ; enter the real compiler
1  1767
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 32
msx_asm\tur_comp.ASM



1  1768	    0592  2A				  DB 02ah
1  1769	    0593  FC9E				 DW 0FC9EH
1  1770	    0595  E5				  DB 0e5h
1  1771
1  1772	    0596  3A				 DB 3ah
1  1773	    0597  3914r				 DW L7901
1  1774	    0599  FE CA				 DB 0feh, 0CAH			 ; abort compilation error, keypressed
1  1775	    059B  20 35				  DB 20h,(L28FA)-$-1		    ; no, continue
1  1776
1  1777	    059D  3A				  DB 3ah
1  1778	    059E  3913r				 DW L7900
1  1779	    05A0  3D				  DB 3dh
1  1780
1  1781	    05A1  CC				  DB 0cch
1  1782	    05A2  05C1r				 DW CLEANUPCODEFILE	; clean	mess up	if a '.COM' file
1  1783									     ; was generated, if no search was performed
1  1784
1  1785
1  1786	    05A4  CD				  DB 0cdh
1  1787	    05A5  0000e				 DW  L0200
1  1788	    05A7  0D 0A	0A 43 6F 6D 70+		 DB 0DH,0AH,0AH,'Compilation aborted',0
   1789		  69 6C	61 74 69 6F 6E+
   1790		  20 61	62 6F 72 74 65+
   1791		  64 00
1  1792	    05BE  C3				 DB 0c3h
1  1793	    05BF  043Br				 DW  L223B		 ; print CR, LF	and go to DOS
1  1794
1  1795	    05C1			 CLEANUPCODEFILE:
1  1796	    05C1  3A				  DB 3ah
1  1797	    05C2  3D90r				 DW CODEFILECREATED
1  1798	    05C4  B7				  DB 0b7h
1  1799	    05C5  C8				  DB 0c8h		       ; quit if no CodeFile created
1  1800
1  1801	    05C6  01				  DB 01h
1  1802	    05C7  3921r				 DW CODEFILE
1  1803	    05C9  CD				  DB 0cdh
1  1804	    05CA  0000e				 DW  CLOSEFILE		   ; try to close the file first
1  1805
1  1806	    05CC  11				  DB 11h
1  1807	    05CD  3922r				 DW CODEFILE+1
1  1808	    05CF  C3				  DB 0c3h
1  1809	    05D0  0000e				 DW  DELETEFILE
1  1810
1  1811	    05D2			 L28FA:
1  1812	    05D2  CD				  DB 0cdh
1  1813	    05D3  0000e				 DW  L0200
1  1814	    05D5  0D 0A	00			 DB 0DH,0AH,0
1  1815
1  1816	    05D8  CD				  DB 0cdh
1  1817	    05D9  0000e				 DW  L0200
1  1818	    05DB  54 69	6D 65 3A 20 00		  DB 'Time: ',0
1  1819
1  1820	    05E2  E1				  DB 0e1h
1  1821	    05E3  CD				  DB 0cdh
1  1822	    05E4  0942r				 DW  L2E5C		   ; print HL in 5 decimals
1  1823
1  1824	    05E6  CD				  DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 33
msx_asm\tur_comp.ASM



1  1825	    05E7  0000e				 DW  L0200
1  1826	    05E9  0D 0A	00			  DB 0DH,0AH,0
1  1827
1  1828	    05EC  3A				 DB 3ah
1  1829	    05ED  3914r				 DW L7901
1  1830	    05EF  B7				 DB 0b7h
1  1831	    05F0  C2				 DB 0c2h
1  1832	    05F1  07C8r				 DW L2970		 ; jump	if error occurred during compiling
1  1833
1  1834	    05F3  3A				  DB 3ah
1  1835	    05F4  3913r				 DW L7900
1  1836	    05F6  FE 02				 DB 0feh, 2			 ; searching while compiling?
1  1837	    05F8  20 15				  DB 20h,(L292A)-$-1		    ; no, skip checking
1  1838
1  1839	    05FA  CD				 DB 0cdh
1  1840	    05FB  08FCr				 DW  L2A7A		 ; print 'Run-time error position '
1  1841
1  1842	    05FD  CD				 DB 0cdh
1  1843	    05FE  0000e				 DW  L0200
1  1844	    0600  6E 6F	74 20 66 6F 75+		 DB 'not found',0DH,0AH,0
   1845		  6E 64	0D 0A 00
1  1846	    060C  C3				 DB 0c3h
1  1847	    060D  043Br				 DW  L223B		 ; print CR, LF	and go to DOS
1  1848
1  1849	    060F			 L292A:
1  1850	    060F  2A				 DB 02ah
1  1851	    0610  3917r				 DW L7904		 ; HL =	code start address
1  1852	    0612  11				 DB 11h
1  1853	    0613  2E9B				 DW _L20E2		 ; DE =	first available	address
1  1854	    0615  B7				 DB 0b7h
1  1855	    0616  ED 52				 DB 0EDH,052h
1  1856					 ;!	 pushf
1  1857	    0618  19				 DB 019h
1  1858					 ;!	 popf
1  1859	    0619  C4				 DB 0c4h
1  1860	    061A  0443r				 DW L232E		 ; print free memory between
1  1861									 ; _L20E2 and compile start address
1  1862									 ; if it is there
1  1863	    061C  CD				  DB 0cdh
1  1864	    061D  0000e				 DW  L0200
1  1865	    061F  43 6F	64 65 3A 20 00		 DB 'Code: ',0
1  1866	    0626  ED 5B				 DB 0edh,5bh
1  1867	    0628  3917r				 DW L7904		 ; DE =	code start address
1  1868	    062A  2A				 DB 02ah
1  1869	    062B  3919r				 DW L7906		 ; HL =	code end address
1  1870	    062D  E5				 DB 0e5h
1  1871	    062E  2B				 DB 2bh
1  1872	    062F  CD				 DB 0cdh
1  1873	    0630  044Dr				 DW  L2338
1  1874	    0632  D1				 DB 0d1h
1  1875	    0633  2A				 DB 02ah
1  1876	    0634  391Br				 DW L7908		 ; HL =	data start address
1  1877	    0636  E5				 DB 0e5h
1  1878	    0637  CD				 DB 0cdh
1  1879	    0638  0443r				 DW  L232E
1  1880	    063A  D1				 DB 0d1h
1  1881	    063B  13				 DB 13h			 ; DE =	data start address
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 34
msx_asm\tur_comp.ASM



1  1882	    063C  2A				 DB 02ah
1  1883	    063D  391Dr				 DW L790A		 ; HL =	data end address
1  1884	    063F  CD				 DB 0cdh
1  1885	    0640  0000e				 DW  L0200
1  1886	    0642  44 61	74 61 3A 20 00		 DB 'Data: ',0
1  1887	    0649  CD				  DB 0cdh
1  1888	    064A  044Dr				 DW  L2338
1  1889
1  1890	    064C  3E FF				 DB 3eh,0FFH
1  1891	    064E  32				 DB 32h
1  1892	    064F  09E5r				 DW COMPILED		 ; compilation completed
1  1893	    0651  C9				 DB 0c9h
1  1894
1  1895	    0652  00				 DB 0			 ; hoort bij ErrorFileName
1  1896	    0653			 ERRORFILENAME:
1  1897	    0653  54 55	52 42 4F 2E 45+		 DB 'TURBO.ERR',0	    ; 10 bytes
   1898		  52 52	00
1  1899	    065D  37*(00)			 db 65-10 dup (0)
1  1900
1  1901	    0694			 ERRORFILEPTR:
1  1902	    0694  3E11r				 DW L7A57
1  1903	    0696			 ERRORFILEINFO:
1  1904	    0696  41*(00)			 db 65 dup (0)
1  1905
1  1906	    06D7			 ERRORFILEWRITE:
1  1907	    06D7  DD E1				 DB 0ddh,0e1h			 ; HL =	return address
1  1908	    06D9  C1				 DB 0c1h		 ;  C =	character to print
1  1909	    06DA  2A				 DB 02ah
1  1910	    06DB  0694r				 DW ERRORFILEPTR
1  1911	    06DD  71				 DB 71h
1  1912	    06DE  23				 DB 23h
1  1913	    06DF  22				 DB 22h
1  1914	    06E0  0694r				 DW ERRORFILEPTR
1  1915	    06E2  DD E9				 DB 0ddh,0e9h
1  1916
1  1917	    06E4			 ERRORFILEMAKE:
1  1918	    06E4  2A				 DB 02ah
1  1919	    06E5  0000e				 DW CON1OUTPTR
1  1920	    06E7  E5				 DB 0e5h		 ; save	old routine
1  1921	    06E8  21				 DB 21h
1  1922	    06E9  06D7r				 DW ERRORFILEWRITE
1  1923	    06EB  22				 DB 22h
1  1924	    06EC  0000e				 DW CON1OUTPTR
1  1925
1  1926	    06EE  21				 DB 21h
1  1927	    06EF  0653r				 DW ERRORFILENAME
1  1928	    06F1  11				 DB 11h
1  1929	    06F2  0696r				 DW ERRORFILEINFO
1  1930	    06F4  3E 20				 DB 3eh,' '
1  1931	    06F6  01				 DB 01h
1  1932	    06F7  2020				 DW ' '*256+' '
1  1933	    06F9  CD				 DB 0cdh
1  1934	    06FA  0000e				 DW  CREATEFILE
1  1935	    06FC  20 52				 DB 20h,(ERRORFILEMAKE1)-$-1
1  1936
1  1937	    06FE  11				 DB 11h
1  1938	    06FF  40D8r				 DW FILECURRENTINFO
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 35
msx_asm\tur_comp.ASM



1  1939	    0701  CD				  DB 0cdh
1  1940	    0702  33B2r				 DW  PRINTFILENAME
1  1941	    0704  CD				 DB 0cdh
1  1942	    0705  0000e				 DW  L01E1		 ; print CR, LF
1  1943
1  1944	    0707  2A				 DB 02ah
1  1945	    0708  4119r				 DW FILEBUFFERLINE
1  1946	    070A  CD				 DB 0cdh
1  1947	    070B  0947r				 DW  L2E61		 ; print line number
1  1948	    070D  CD				 DB 0cdh
1  1949	    070E  0000e				 DW  L01E1		 ; print CR, LF
1  1950
1  1951	    0710  CD				 DB 0cdh
1  1952	    0711  0755r				 DW  GETCOLUMNNUMBER
1  1953	    0713  68				 DB 68h
1  1954	    0714  26 00				 DB 26h,0
1  1955	    0716  CD				 DB 0cdh
1  1956	    0717  0947r				 DW  L2E61		 ; print column	number
1  1957	    0719  CD				 DB 0cdh
1  1958	    071A  0000e				 DW  L01E1		 ; print CR, LF
1  1959
1  1960	    071C  2A				 DB 02ah
1  1961	    071D  3914r				 DW L7901
1  1962	    071F  26 00				 DB 26h,0
1  1963	    0721  CD				 DB 0cdh
1  1964	    0722  0947r				 DW  L2E61		 ; print error number
1  1965	    0724  CD				 DB 0cdh
1  1966	    0725  0000e				 DW  L01E1		 ; print CR, LF
1  1967
1  1968	    0727  3A				 DB 3ah
1  1969	    0728  3914r				 DW L7901
1  1970	    072A  47				 DB 47h
1  1971	    072B  CD				 DB 0cdh
1  1972	    072C  082Ar				 DW  PRINTERRORMESSAGE
1  1973	    072E  CD				 DB 0cdh
1  1974	    072F  0000e				 DW  L01E1		 ; print CR, LF
1  1975
1  1976	    0731  3E 1A				 DB 3eh,1AH
1  1977	    0733  CD				 DB 0cdh
1  1978	    0734  0000e				 DW  L03C9
1  1979
1  1980	    0736  2A				 DB 02ah
1  1981	    0737  0694r				 DW ERRORFILEPTR
1  1982	    0739  01				 DB 01h
1  1983	    073A  3E11r				 DW L7A57
1  1984	    073C  B7				 DB 0b7h
1  1985	    073D  ED 42				 DB 0EDH,042h		 ; HL =	length of data to write
1  1986
1  1987	    073F  01				 DB 01h
1  1988	    0740  0696r				 DW ERRORFILEINFO
1  1989	    0742  11				 DB 11h
1  1990	    0743  3E11r				 DW L7A57
1  1991	    0745  CD				 DB 0cdh
1  1992	    0746  0000e				 DW  WRITEFILE		 ; write to error file
1  1993	    0748  20 06				 DB 20h,(ERRORFILEMAKE1)-$-1
1  1994
1  1995	    074A  01				 DB 01h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 36
msx_asm\tur_comp.ASM



1  1996	    074B  0696r				 DW ERRORFILEINFO
1  1997	    074D  CD				 DB 0cdh
1  1998	    074E  0000e				 DW  CLOSEFILE
1  1999
1  2000	    0750			 ERRORFILEMAKE1:
1  2001	    0750  E1				 DB 0e1h
1  2002	    0751  22				 DB 22h
1  2003	    0752  0000e				 DW CON1OUTPTR	 ; restore old routine
1  2004	    0754  C9				 DB 0c9h
1  2005
1  2006	    0755			 GETCOLUMNNUMBER:
1  2007	    0755  06 01				 DB 06h,1			 ; start at column 1
1  2008	    0757  21				 DB 21h
1  2009	    0758  3D91r				 DW L79D7		 ; start of line buffer
1  2010	    075A  ED 5B				 DB 0edh,5bh
1  2011	    075C  411Br				 DW FILEBUFFERLASTPOS
1  2012
1  2013	    075E			 GETCOLUMNNUMBER1:
1  2014	    075E  CD				 DB 0cdh
1  2015	    075F  3FA8r				 DW  COMPAREHL_DE
1  2016	    0761  D0				 DB 0d0h		 ; quit	if end found
1  2017
1  2018	    0762  7E				 DB 7eh
1  2019	    0763  23				 DB 23h
1  2020	    0764  FE 09				 DB 0feh, 9
1  2021	    0766  28 09				 DB 28h,(GETCOLUMNNUMBERTAB)-$-1 ; TAB stop found
1  2022
1  2023	    0768  05				 DB 05h
1  2024	    0769  FE 08				 DB 0feh, 8
1  2025	    076B  28 F1				 DB 28h,(GETCOLUMNNUMBER1)-$-1	 ; BackSpace found
1  2026	    076D  04				 DB 04h
1  2027
1  2028	    076E  04				 DB 04h
1  2029	    076F  18 ED				 DB 18h,( GETCOLUMNNUMBER1)-$-1
1  2030
1  2031	    0771			 GETCOLUMNNUMBERTAB:
1  2032	    0771  78				 DB 78h
1  2033	    0772  3D				 DB 3dh
1  2034	    0773  E6 07				 DB 0e6h, 7
1  2035	    0775  ED 44				 DB 0edh,44h
1  2036	    0777  C6 08				 DB 0c6h,8
1  2037	    0779  80				 DB 080h
1  2038	    077A  47				 DB 47h
1  2039	    077B  18 E1				 DB 18h,( GETCOLUMNNUMBER1)-$-1
1  2040
1  2041	    077D			 EXPANDLINE:
1  2042						 ; in:	 DE = destination for expanded line buffer
1  2043	    077D  21				 DB 21h
1  2044	    077E  3D91r				 DW L79D7		 ; start of line buffer
1  2045	    0780  06 01				 DB 06h,1			 ; start at column 1
1  2046
1  2047	    0782			 EXPANDLINE1:
1  2048	    0782  7E				 DB 7eh
1  2049	    0783  23				 DB 23h
1  2050
1  2051	    0784  B7				 DB 0b7h
1  2052	    0785  28 0E				 DB 28h,(ENDOFLINE)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 37
msx_asm\tur_comp.ASM



1  2053
1  2054	    0787  FE 09				 DB 0feh, 9
1  2055	    0789  20 05				 DB 20h,(EXPANDLINE2)-$-1
1  2056
1  2057	    078B  CD				 DB 0cdh
1  2058	    078C  0797r				 DW  PRINTTAB		 ; print spaces
1  2059	    078E  18 F2				 DB 18h,( EXPANDLINE1)-$-1
1  2060
1  2061	    0790			 EXPANDLINE2:
1  2062	    0790  12				 DB 12h
1  2063	    0791  13				 DB 13h
1  2064
1  2065	    0792  04				 DB 04h			 ; next	column
1  2066	    0793  18 ED				 DB 18h,( EXPANDLINE1)-$-1
1  2067
1  2068	    0795			 ENDOFLINE:
1  2069	    0795  12				 DB 12h
1  2070	    0796  C9				 DB 0c9h
1  2071
1  2072
1  2073	    0797			 PRINTTAB:; in:	 DE = address where to put spaces
1  2074						 ;	 B = current column, 1 .. 80
1  2075						 ; out:	 DE = address after the	new spaces
1  2076						 ;	 B = new column
1  2077	    0797  78				 DB 78h
1  2078	    0798  3D				 DB 3dh
1  2079	    0799  E6 07				 DB 0e6h, 7
1  2080	    079B  ED 44				 DB 0edh,44h
1  2081	    079D  C6 08				 DB 0c6h,8
1  2082	    079F  4F				 DB 4fh
1  2083	    07A0  80				 DB 080h
1  2084	    07A1  47				 DB 47h
1  2085
1  2086	    07A2			 PRINTTAB1:
1  2087	    07A2  3E 20				 DB 3eh,' '
1  2088	    07A4  12				 DB 12h
1  2089	    07A5  13				 DB 13h
1  2090
1  2091	    07A6  0D				 DB 0dh
1  2092	    07A7  20 F9				 DB 20h,(PRINTTAB1)-$-1
1  2093
1  2094	    07A9  C9				 DB 0c9h
1  2095
1  2096	    07AA			 SCANLEFTRIGHT:
1  2097						 ; in:	 D = left column >= 1
1  2098						 ;	 E = total size
1  2099						 ;	 B = total chars permitted to the left
1  2100						 ;	 C = total chars left
1  2101	    07AA  7A				 DB 7ah
1  2102	    07AB  FE 01				 DB 0feh, 1
1  2103	    07AD  28 0B				 DB 28h,(SCANLEFTRIGHT1)-$-1
1  2104
1  2105	    07AF  78				 DB 78h
1  2106	    07B0  B7				 DB 0b7h
1  2107	    07B1  28 07				 DB 28h,(SCANLEFTRIGHT1)-$-1
1  2108	    07B3  05				 DB 05h			 ; decrease maximum before
1  2109
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 38
msx_asm\tur_comp.ASM



1  2110	    07B4  15				 DB 15h			 ; one more to the left
1  2111	    07B5  1C				 DB 1ch
1  2112	    07B6  0D				 DB 0dh			 ; decrease chars left
1  2113	    07B7  C8				 DB 0c8h
1  2114
1  2115	    07B8  18 04				 DB 18h,( SCANLEFTRIGHT2)-$-1
1  2116
1  2117	    07BA			 SCANLEFTRIGHT1:
1  2118	    07BA  7B				 DB 7bh
1  2119	    07BB  FE 4F				 DB 0feh, 79
1  2120	    07BD  C8				 DB 0c8h		 ; quit	if both	at the border
1  2121
1  2122	    07BE			 SCANLEFTRIGHT2:
1  2123	    07BE  7B				 DB 7bh
1  2124	    07BF  FE 4F				 DB 0feh, 79
1  2125	    07C1  28 E7				 DB 28h,(SCANLEFTRIGHT)-$-1	 ; continue with other side
1  2126
1  2127	    07C3  1C				 DB 1ch			 ; one more to the right
1  2128	    07C4  0D				 DB 0dh			 ; decrease chars left
1  2129	    07C5  C8				 DB 0c8h
1  2130
1  2131	    07C6  18 E2				 DB 18h,( SCANLEFTRIGHT)-$-1
1  2132
1  2133	    07C8			 L2970:
1  2134	    07C8  F5				  DB 0f5h
1  2135	    07C9  CD				  DB 0cdh
1  2136	    07CA  05C1r				 DW  CLEANUPCODEFILE	   ; clean mess	up if a	'.COM' file
1  2137									     ; was generated, if no search was performed
1  2138	    07CC  F1				  DB 0f1h
1  2139
1  2140	    07CD  FE FA				  DB 0feh, 0FAH			   ; error 250:	Disk or	directory full
1  2141	    07CF  D2				  DB 0d2h
1  2142	    07D0  08DCr				 DW L2A5A
1  2143	    07D2  FE C8				 DB 0feh, 0C8H			 ; error 200: run-time error address found
1  2144	    07D4  30 A5				 DB 30h,(L29EC)-$-1
1  2145
1  2146	    07D6  F5				 DB 0f5h
1  2147
1  2148	    07D7  11				 DB 11h
1  2149	    07D8  40D8r				 DW FILECURRENTINFO
1  2150	    07DA  CD				 DB 0cdh
1  2151	    07DB  33B2r				 DW  PRINTFILENAME
1  2152
1  2153	    07DD  CD				 DB 0cdh
1  2154	    07DE  0000e				 DW  L0200
1  2155	    07E0  2C 20	6C 69 6E 65 20+		 DB ', line ',0
   2156		  00
1  2157
1  2158	    07E8  2A				 DB 02ah
1  2159	    07E9  4119r				 DW FILEBUFFERLINE
1  2160	    07EB  CD				 DB 0cdh
1  2161	    07EC  0947r				 DW  L2E61		 ; print current line number
1  2162
1  2163	    07EE  CD				 DB 0cdh
1  2164	    07EF  0000e				 DW  L0200
1  2165	    07F1  2C 20	63 6F 6C 75 6D+		 DB ', column ',0
   2166		  6E 20	00
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 39
msx_asm\tur_comp.ASM



1  2167
1  2168	    07FB  CD				 DB 0cdh
1  2169	    07FC  0755r				 DW  GETCOLUMNNUMBER
1  2170	    07FE  26 00				 DB 26h,0
1  2171	    0800  68				 DB 68h
1  2172	    0801  CD				 DB 0cdh
1  2173	    0802  0947r				 DW  L2E61		 ; print column	number
1  2174
1  2175	    0804  CD				 DB 0cdh
1  2176	    0805  0000e				 DW  L01E1		 ; print CR, LF
1  2177
1  2178	    0807  CD				 DB 0cdh
1  2179	    0808  0897r				 DW  PRINTCURRENTLINE
1  2180
1  2181	    080A  F1				 DB 0f1h
1  2182
1  2183	    080B  47				 DB 47h
1  2184	    080C  CD				 DB 0cdh
1  2185	    080D  0000e				 DW  L0200
1  2186	    080F  45 72	72 6F 72 20 00		 DB 'Error ',0
1  2187	    0816  26 00				 DB 26h,0
1  2188	    0818  68				 DB 68h
1  2189	    0819  C5				 DB 0c5h
1  2190	    081A  CD				 DB 0cdh
1  2191	    081B  0947r				 DW  L2E61		 ; print error number
1  2192	    081D  C1				 DB 0c1h
1  2193
1  2194	    081E  CD				 DB 0cdh
1  2195	    081F  0000e				 DW  L0200
1  2196	    0821  3A 20	00			 DB ': ',0
1  2197
1  2198	    0824  CD				 DB 0cdh
1  2199	    0825  082Ar				 DW  PRINTERRORMESSAGE
1  2200	    0827  C3				 DB 0c3h
1  2201	    0828  0887r				 DW  L29F8
1  2202
1  2203	    082A			 PRINTERRORMESSAGE:
1  2204						 ; in:	 B = error code
1  2205
1  2206	    082A  21				 DB 21h
1  2207	    082B  0000e				 DW TURBOERRORMESSAGES
1  2208
1  2209	    082D  7E			 L2995:	 DB 7eh
1  2210	    082E  FE 1A				 DB 0feh, 1AH
1  2211	    0830  C8				 DB 0c8h		 ; quit	if at end of messages
1  2212
1  2213	    0831  FE 20				 DB 0feh, 20H
1  2214	    0833  38 0F				 DB 38h,(L29AD)-$-1
1  2215
1  2216	    0835  D6 30				 DB 0d6h, 30H
1  2217	    0837  4F				 DB 4fh
1  2218	    0838  87				 DB 087h		 ; * 2
1  2219	    0839  87				 DB 087h		 ; * 4
1  2220	    083A  81				 DB 081h		 ; * 5
1  2221	    083B  87				 DB 087h		 ; * 10
1  2222	    083C  23				 DB 23h
1  2223	    083D  86				 DB 086h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 40
msx_asm\tur_comp.ASM



1  2224	    083E  D6 30				 DB 0d6h, 30H
1  2225	    0840  23				 DB 23h
1  2226	    0841  B8				 DB 0b8h
1  2227	    0842  28 09				 DB 28h,(L29B6)-$-1
1  2228
1  2229	    0844  7E			 L29AD:	 DB 7eh
1  2230	    0845  23				 DB 23h
1  2231	    0846  FE 0D				 DB 0feh, 0DH
1  2232	    0848  20 FA				 DB 20h,(L29AD)-$-1
1  2233	    084A  23				 DB 23h			 ; skip	LF (0Ah) code
1  2234	    084B  18 E0				 DB 18h,( L2995)-$-1
1  2235
1  2236	    084D			 L29B6:
1  2237
1  2238	    084D  7E			 L29BC:	 DB 7eh
1  2239	    084E  FE 0D				 DB 0feh, 0DH
1  2240	    0850  C8				 DB 0c8h		 ; quit	if the end was found
1  2241
1  2242	    0851  FE 20				 DB 0feh, 20H			 ; < 32	?
1  2243	    0853  30 20				 DB 30h,(L29E6)-$-1		 ; jump	if it is printable
1  2244
1  2245	    0855  11				 DB 11h
1  2246	    0856  0000e				 DW TURBOERRORMESSAGES
1  2247
1  2248	    0858  1A			 L29C9:	 DB 1ah
1  2249	    0859  13				 DB 13h
1  2250	    085A  FE 20				 DB 0feh, 20H
1  2251	    085C  30 0E				 DB 30h,(L29DD)-$-1
1  2252
1  2253	    085E  BE				 DB 0beh
1  2254	    085F  20 0B				 DB 20h,(L29DD)-$-1
1  2255
1  2256	    0861  1A			 L29D2:	 DB 1ah
1  2257	    0862  FE 0D				 DB 0feh, 0DH
1  2258	    0864  28 12				 DB 28h,(L29E9)-$-1
1  2259	    0866  CD				 DB 0cdh
1  2260	    0867  0000e				 DW  L03C9		 ; print character
1  2261	    0869  13				 DB 13h
1  2262	    086A  18 F5				 DB 18h,( L29D2)-$-1
1  2263
1  2264	    086C  1A			 L29DD:	 DB 1ah
1  2265	    086D  13				 DB 13h
1  2266	    086E  FE 0D				 DB 0feh, 0DH
1  2267	    0870  20 FA				 DB 20h,(L29DD)-$-1
1  2268	    0872  13				 DB 13h
1  2269	    0873  18 E3				 DB 18h,( L29C9)-$-1
1  2270
1  2271	    0875  CD			 L29E6:	 DB 0cdh
1  2272	    0876  0000e				 DW  L03C9		 ; print character
1  2273
1  2274	    0878  23			 L29E9:	 DB 23h
1  2275	    0879  18 D2				 DB 18h,( L29BC)-$-1
1  2276
1  2277	    087B  CD			 L29EC:	 DB 0cdh
1  2278	    087C  08FCr				 DW  L2A7A
1  2279	    087E  CD				 DB 0cdh
1  2280	    087F  0000e				 DW  L0200
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 41
msx_asm\tur_comp.ASM



1  2281	    0881  66 6F	75 6E 64 00		 DB 'found',0
1  2282
1  2283	    0887			 L29F8:
1  2284	    0887  3E 2E				 DB 3eh,'.'
1  2285	    0889  CD				 DB 0cdh
1  2286	    088A  0000e				 DW  L03C9		 ; print '.'
1  2287
1  2288	    088C  21				 DB 21h
1  2289	    088D  0653r				 DW ERRORFILENAME
1  2290	    088F  7E				 DB 7eh
1  2291	    0890  B7				 DB 0b7h
1  2292	    0891  C4				 DB 0c4h
1  2293	    0892  06E4r				 DW ERRORFILEMAKE	 ; create error	file if	wanted
1  2294
1  2295	    0894  C3				  DB 0c3h
1  2296	    0895  043Br				 DW  L223B
1  2297
1  2298	    0897			 PRINTCURRENTLINE:
1  2299	    0897  11				 DB 11h
1  2300	    0898  4259r				 DW FILEBUFFER
1  2301	    089A  CD				 DB 0cdh
1  2302	    089B  077Dr				 DW  EXPANDLINE		 ; expand all TABS in command line
1  2303
1  2304	    089D  CD				 DB 0cdh
1  2305	    089E  0755r				 DW  GETCOLUMNNUMBER
1  2306
1  2307	    08A0  50				 DB 50h			 ; D = left column number
1  2308	    08A1  1E 00				 DB 1eh,0			 ; E = starting	at a size of 0
1  2309	    08A3  01				 DB 01h
1  2310	    08A4  284F				 DW 40*256+79
1  2311	    08A6  CD				 DB 0cdh
1  2312	    08A7  07AAr				 DW  SCANLEFTRIGHT
1  2313
1  2314	    08A9  7B				 DB 7bh
1  2315	    08AA  B7				 DB 0b7h
1  2316	    08AB  C8				 DB 0c8h		 ; quit	if size	= 0
1  2317
1  2318	    08AC  47				 DB 47h			 ; B = length of chars to print
1  2319
1  2320	    08AD  D5				 DB 0d5h
1  2321	    08AE  6A				 DB 6ah
1  2322	    08AF  26 00				 DB 26h,0
1  2323	    08B1  11				 DB 11h
1  2324	    08B2  4258r				 DW FILEBUFFER-1
1  2325	    08B4  19				 DB 019h	 ; HL =	start of first character
1  2326
1  2327	    08B5			 PRINTCURRENTLINE1:
1  2328	    08B5  7E				 DB 7eh
1  2329	    08B6  B7				 DB 0b7h
1  2330	    08B7  28 06				 DB 28h,(PRINTCURRENTLINE2)-$-1	 ; quit	if end of chars	found
1  2331
1  2332	    08B9  CD				 DB 0cdh
1  2333	    08BA  0000e				 DW  L03C9		 ; print char
1  2334
1  2335	    08BC  23				 DB 23h
1  2336	    08BD  10 F6				 DB 10h,( PRINTCURRENTLINE1)-$-1
1  2337
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 42
msx_asm\tur_comp.ASM



1  2338	    08BF			 PRINTCURRENTLINE2:
1  2339	    08BF  CD				 DB 0cdh
1  2340	    08C0  0000e				 DW  L01E1		 ; print CR, LF
1  2341
1  2342	    08C2  CD				 DB 0cdh
1  2343	    08C3  0755r				 DW  GETCOLUMNNUMBER
1  2344	    08C5  D1				 DB 0d1h
1  2345	    08C6  78				 DB 78h
1  2346	    08C7  92				 DB 092h
1  2347	    08C8  47				 DB 47h
1  2348	    08C9  04				 DB 04h
1  2349
1  2350	    08CA			 PRINTCURRENTLINE3:
1  2351	    08CA  05				 DB 05h
1  2352	    08CB  28 07				 DB 28h,(PRINTCURRENTLINE4)-$-1
1  2353
1  2354	    08CD  3E 20				 DB 3eh,' '
1  2355	    08CF  CD				 DB 0cdh
1  2356	    08D0  0000e				 DW  L03C9		 ; print char
1  2357
1  2358	    08D2  18 F6				 DB 18h,( PRINTCURRENTLINE3)-$-1
1  2359
1  2360	    08D4			 PRINTCURRENTLINE4:
1  2361	    08D4  3E 5E				 DB 3eh,'^'
1  2362	    08D6  CD				 DB 0cdh
1  2363	    08D7  0000e				 DW  L03C9
1  2364	    08D9  C3				 DB 0c3h
1  2365	    08DA  0000e				 DW  L01E1		; print	CR, LF
1  2366
1  2367	    08DC  CD			 L2A5A:	 DB 0cdh
1  2368	    08DD  0000e				 DW  L0200
1  2369	    08DF  44 69	73 6B 20 6F 72+		 DB 'Disk or directory full',0
   2370		  20 64	69 72 65 63 74+
   2371		  6F 72	79 20 66 75 6C+
   2372		  6C 00
1  2373
1  2374	    08F6  CD				  DB 0cdh
1  2375	    08F7  095Cr				 DW  L2E76		   ; wait for escape
1  2376	    08F9  C3				 DB 0c3h
1  2377	    08FA  043Br				 DW  L223B
1  2378
1  2379	    08FC  CD			 L2A7A:	 DB 0cdh
1  2380	    08FD  0000e				 DW  L0200
1  2381	    08FF  52 75	6E 2D 74 69 6D+		 DB 'Run-time error position ',0
   2382		  65 20	65 72 72 6F 72+
   2383		  20 70	6F 73 69 74 69+
   2384		  6F 6E	20 00
1  2385	    0918  C9			 L2A96:	 DB 0c9h
1  2386
1  2387
1  2388	    0919			 L2D01:	  ; asks for Yes or No
1  2389						 ; out:	NonZero	if 'Y' or 'y' pressed
1  2390						 ;	  Zero if 'n' or 'n' pressed
1  2391	    0919  CD				 DB 0cdh
1  2392	    091A  0000e				 DW  L0200
1  2393	    091C  20 28	59 2F 4E 29 3F+		 DB ' (Y/N)? ',0
   2394		  20 00
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 43
msx_asm\tur_comp.ASM



1  2395
1  2396	    0925  CD			 L2D0D:	  DB 0cdh
1  2397	    0926  0000e				 DW  L03E1		   ; readkey
1  2398	    0928  CD				 DB 0cdh
1  2399	    0929  0000e				 DW  L04A6		 ; upcase A
1  2400	    092B  FE 59				 DB 0feh, 'Y'
1  2401	    092D  28 04				 DB 28h,(L2D1B)-$-1
1  2402	    092F  FE 4E				 DB 0feh, 'N'
1  2403	    0931  20 F2				 DB 20h,(L2D0D)-$-1
1  2404
1  2405	    0933  CD			 L2D1B:	  DB 0cdh
1  2406	    0934  0000e				 DW  L03C9		   ; print character, choice
1  2407	    0936  D6 4E				 DB 0d6h, 'N'
1  2408	    0938  C9				 DB 0c9h
1  2409
1  2410	    0939  CD			 L2D21:	 DB 0cdh
1  2411	    093A  0919r				 DW  L2D01
1  2412	    093C  F5				 DB 0f5h
1  2413	    093D  CD				 DB 0cdh
1  2414	    093E  0000e				 DW  L01E1		 ; print CR, LF
1  2415	    0940  F1				 DB 0f1h
1  2416	    0941  C9				 DB 0c9h
1  2417
1  2418	    0942  11			 L2E5C:	  DB 11h
1  2419	    0943  FFFB				 DW -5
1  2420	    0945  18 03				 DB 18h,( L2E64)-$-1
1  2421
1  2422	    0947  11			 L2E61:	  DB 11h
1  2423	    0948  FFFF				 DW -1
1  2424
1  2425	    094A  DD E5			 L2E64:	 DB 0ddh,0e5h
1  2426	    094C  FD E5				 DB 0fdh,0e5h
1  2427	    094E  E5				 DB 0e5h
1  2428	    094F  D5				 DB 0d5h
1  2429	    0950  CD				 DB 0cdh
1  2430	    0951  0000e				 DW  L149B		 ; set and check for output
1  2431	    0953  E1				 DB 0e1h
1  2432	    0954  CD				 DB 0cdh
1  2433	    0955  0000e				 DW  L1726
1  2434	    0957  FD E1				 DB 0fdh,0e1h
1  2435	    0959  DD E1				 DB 0ddh,0e1h
1  2436	    095B  C9				 DB 0c9h
1  2437
1  2438	    095C			 L2E76:	  ; wait for escape
1  2439						 ; changes: -
1  2440	    095C  F5				 DB 0f5h
1  2441	    095D  CD				 DB 0cdh
1  2442	    095E  0000e				 DW  L0200
1  2443	    0960  2E 20	50 72 65 73 73+		 DB '. Press <ESC>',0
   2444		  20 3C	45 53 43 3E 00
1  2445
1  2446	    096E  CD			 L2E88:	  DB 0cdh
1  2447	    096F  0000e				 DW  L03E1		   ; A = character from	console
1  2448	    0971  FE 1B				 DB 0feh, 1BH			 ; ESC pressed ?
1  2449	    0973  20 F9				 DB 20h,(L2E88)-$-1		 ; no, repeat until ESC	pressed
1  2450	    0975  F1				 DB 0f1h
1  2451	    0976  C9				 DB 0c9h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 44
msx_asm\tur_comp.ASM



1  2452
1  2453						 ; TURBO PASCAL	COMPILER
1  2454	    0977  00			 L44F1:	 DB 0
1  2455	    0978  00			 L44F2:	 DB 0
1  2456
1  2457	    0979  02			 L44F3:	 DB 2			 ; 1 = to memory
1  2458									 ; 2 = to com-file
1  2459									 ; 3 = to chain-file
1  2460
1  2461	    097A  2E9B			 L44F4:	 DW _L20E2		 ; compile start address
1  2462	    097C  0000			 L44F6:	 DW 0			 ; compile end address
1  2463	    097E  00			 LOGDRV: DB 0			 ; logged drive: 1 = A:, 2 = B:
1  2464
1  2465						 ; FCB with main filename
1  2466	    097F  00			 L44F9:	 DB 0
1  2467	    0980  12*(00)		 L44FA:	 db 12H	dup (0)			 ; 18 x	'\0'
1  2468	    0992  11*(00)		 L450C:	 db 11H	dup (0)			 ; 17 x	'\0'
1  2469
1  2470						 ; FCB with work filename
1  2471	    09A3  41*(00)		 L451D:	  db 1 + 64 dup	(0)
1  2472
1  2473					 ;L451D:   DB 0
1  2474					 ;L451E:   DS 23H		      ;	35 x '\0'
1  2475
1  2476	    09E4  00			 L4541:	 DB 0			 ; zero	= no error messages read
1  2477									 ; nonzero = error messages read
1  2478
1  2479	    09E5  00			 COMPILED:DB 0			 ; 0  =	program	not compiled
1  2480									 ;255 =	program	compiled
1  2481	    09E6  00			 L4543:	 DB 0
1  2482
1  2483	    09E7  0000e			 L4544:	 DW L7BF5		 ; at start of text area
1  2484	    09E9  0000e			 L4546:	 DW L7BF5		 ; start of free area
1  2485	    09EB  0000			 L4548:	 DW 0			 ; end of free area
1  2486
1  2487	    09ED  73ED 3F2Br		 L454A:	  DW 73edh,L7B71	      ;	save stack pointer to return after an error
1  2488
1  2489	    09F1  21				 DB 21h
1  2490	    09F2  3E92r				 DW L7AD7+1
1  2491	    09F4  CD				 DB 0cdh
1  2492	    09F5  4081r				 DW  FILEINIT
1  2493
1  2494	    09F7  2A				 DB 02ah
1  2495	    09F8  09E9r				 DW L4546		 ; HL =	start of free area
1  2496	    09FA  23				 DB 23h
1  2497
1  2498	    09FB  22				 DB 22h
1  2499	    09FC  3F94r				 DW L7BDF		 ; set start address of	1024 bytes
1  2500									 ; update table
1  2501	    09FE  24				 DB 24h
1  2502	    09FF  24				 DB 24h
1  2503	    0A00  24				 DB 24h
1  2504	    0A01  24				 DB 24h
1  2505	    0A02  22				 DB 22h
1  2506	    0A03  3F96r				 DW L7BE1		 ; start of free area +	1024
1  2507
1  2508	    0A05  2A				 DB 02ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 45
msx_asm\tur_comp.ASM



1  2509	    0A06  391Dr				 DW L790A		 ; HL =	data end address
1  2510	    0A08  22				 DB 22h
1  2511	    0A09  391Br				 DW L7908		 ; start of free data area, growing downwards
1  2512	    0A0B  AF				 DB 0afh
1  2513	    0A0C  67				 DB 67h
1  2514	    0A0D  6F				 DB 6fh
1  2515	    0A0E  32				 DB 32h
1  2516	    0A0F  3F4Br				 DW L7B91		 ; = 0
1  2517	    0A11  32				 DB 32h
1  2518	    0A12  3F4Cr				 DW L7B92		 ; = 0
1  2519	    0A14  32				 DB 32h
1  2520	    0A15  3F4Er				 DW L7B94		 ; = 0
1  2521	    0A17  32				 DB 32h
1  2522	    0A18  3F5Cr				 DW L7BA2		 ; = 0,	no end of file found
1  2523	    0A1A  32				 DB 32h
1  2524	    0A1B  3F5Ar				 DW L7BA0		 ; = 0
1  2525	    0A1D  32				 DB 32h
1  2526	    0A1E  3F98r				 DW L7BE3		 ; = 0,	no updates
1  2527
1  2528	    0A20  32				 DB 32h
1  2529	    0A21  3F50r				 DW L7B96		 ; = 0,	number of the overlay file
1  2530
1  2531	    0A23  32				 DB 32h
1  2532	    0A24  3F91r				 DW L7BDB		 ; = 0,	already	read and not dirty
1  2533
1  2534	    0A26  22				  DB 22h
1  2535	    0A27  3F92r				 DW L7BDD	       ; = 0, first block of the file
1  2536									 ; or first block of current overlay part
1  2537	    0A29  22				  DB 22h
1  2538	    0A2A  3966r				 DW CODEFILESTART
1  2539	    0A2C  22				  DB 22h
1  2540	    0A2D  3968r				 DW CODEFILESTART+2
1  2541
1  2542	    0A2F  CD				 DB 0cdh
1  2543	    0A30  33C9r				 DW  L718F		 ; print current line number
1  2544
1  2545	    0A32  2B				 DB 2bh
1  2546	    0A33  22				  DB 22h
1  2547	    0A34  398Br				 DW L7954	       ; init at block 65535, no block read yet
1  2548
1  2549	    0A36  22				  DB 22h
1  2550	    0A37  3962r				 DW CODEFILEPOS
1  2551	    0A39  22				  DB 22h
1  2552	    0A3A  3964r				 DW CODEFILEPOS+2
1  2553
1  2554	    0A3C  3E 10				 DB 3eh,10H
1  2555	    0A3E  32				 DB 32h
1  2556	    0A3F  3F4Dr				 DW L7B93		 ; first free type number
1  2557									 ; use by scalar types
1  2558
1  2559	    0A41  3E F5				 DB 3eh,0F5H
1  2560	    0A43  32				 DB 32h
1  2561	    0A44  3F57r				 DW L7B9D		 ; default:
1  2562									 ; 0, 1	I/O Error Handling on
1  2563									 ; 1, 0	Index Range Checking off
1  2564									 ; 2, 1	Absolute Code on
1  2565									 ; 3, 0	User Interrupt off
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 46
msx_asm\tur_comp.ASM



1  2566									 ; 4, 1	Array Optimization on
1  2567									 ; 5, 1	Var-parameter Type Checking on
1  2568									 ; 6, 1	I/O Mode Selection on
1  2569									 ; 7, 1	Control	S and C	interpretation on
1  2570	    0A46  3E 04				  DB 3eh,4
1  2571	    0A48  32				  DB 32h
1  2572	    0A49  3F81r				 DW WITHDEPTH		; init number of 'with'	levels
1  2573
1  2574	    0A4B  2A				 DB 02ah
1  2575	    0A4C  09E7r				 DW L4544		 ; HL =	start of text area
1  2576					 ;	  LD (L7BD7),HL		  ; init current position of text in memory
1  2577					 ;	  LD (L7BD9),HL		  ; init start of line of text in memory
1  2578
1  2579	    0A4E  DD 21				 DB 0ddh,21h
1  2580	    0A50  3D91r				 DW L79D7		 ; init	line buffer as empty, terminated by 0
1  2581	    0A52  DD 36	00 00			 DB 0ddh,36h,+0,0
1  2582
1  2583	    0A56  2A				 DB 02ah
1  2584	    0A57  3917r				 DW L7904		 ; HL =	code start address
1  2585	    0A59  CD				  DB 0cdh
1  2586	    0A5A  2E20r				 DW  L6CC2
1  2587
1  2588	    0A5C  2A				 DB 02ah
1  2589	    0A5D  09EBr				 DW L4548		 ; HL =	end of free area
1  2590	    0A5F  2B				 DB 2bh
1  2591	    0A60  22				 DB 22h
1  2592	    0A61  3F31r				 DW L7B77		 ; address of the first	declared id (CBREAK)
1  2593	    0A63  54				 DB 54h
1  2594	    0A64  5D				 DB 5dh
1  2595	    0A65  01				 DB 01h
1  2596	    0A66  0288				 DW L74D2-L731F+1	 ; length of variable table
1  2597									 ; grows down wards
1  2598	    0A68  B7				 DB 0b7h
1  2599	    0A69  ED 42				 DB 0EDH,042h
1  2600	    0A6B  22				 DB 22h
1  2601	    0A6C  3F2Dr				 DW L7B73		 ; bottom of variable table
1  2602	    0A6E  22				 DB 22h
1  2603	    0A6F  3F2Fr				 DW L7B75		 ; same
1  2604	    0A71  22				 DB 22h
1  2605	    0A72  3F35r				 DW L7B7B		 ; same
1  2606
1  2607					 ;	  CALL SETCHK
1  2608
1  2609	    0A74  CD				 DB 0cdh
1  2610	    0A75  2D1Ar				 DW  L6BC7		 ; check compiler overflow, memory overflow
1  2611	    0A77  21				 DB 21h
1  2612	    0A78  3797r				 DW L74D2
1  2613	    0A7A  ED B8				 DB 0edh,0b8h			 ; copy	standard variable definitions
1  2614
1  2615	    0A7C  CD				  DB 0cdh
1  2616	    0A7D  0A9Dr				 DW  L45EA
1  2617
1  2618	    0A7F  3A				 DB 3ah
1  2619	    0A80  3913r				 DW L7900
1  2620	    0A82  3D				 DB 3dh
1  2621	    0A83  20 10				 DB 20h,(L45E2)-$-1		 ; jump	if search (= 2)
1  2622
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 47
msx_asm\tur_comp.ASM



1  2623	    0A85  CD				 DB 0cdh
1  2624	    0A86  2DF4r				 DW  L6C96
1  2625
1  2626	    0A88  CD				  DB 0cdh
1  2627	    0A89  2E96r				 DW  L6CFD		   ; write 128 bytes to	file
1  2628									 ; flush last buffer
1  2629
1  2630	    0A8B  FD E5				  DB 0fdh,0e5h
1  2631	    0A8D  01				  DB 01h
1  2632	    0A8E  3921r				 DW CODEFILE
1  2633	    0A90  CD				  DB 0cdh
1  2634	    0A91  0000e				 DW  CLOSEFILE
1  2635	    0A93  FD E1				  DB 0fdh,0e1h
1  2636
1  2637	    0A95  22FD 3919r		 L45E2:	  DW 22fdh,L7906	      ;	new code end address
1  2638	    0A99  AF				 DB 0afh
1  2639	    0A9A  C3				  DB 0c3h
1  2640	    0A9B  34EEr				 DW  L72E3
1  2641
1  2642	    0A9D  CD			 L45EA:	 DB 0cdh
1  2643	    0A9E  31FDr				 DW  L6F95		 ; get non-blank
1  2644	    0AA0  CD				 DB 0cdh
1  2645	    0AA1  30DEr				 DW  L6E76		 ; start with PROGRAM?
1  2646	    0AA3  37FEr				 DW L7529		 ; start of reserved word: PROGRAM
1  2647	    0AA5  20 16				 DB 20h,(L460A)-$-1		 ; no, skip PROGRAM stuff
1  2648
1  2649						 ; PROGRAM identifier (	identifier list	)
1  2650	    0AA7  CD				 DB 0cdh
1  2651	    0AA8  0B45r				 DW  L4692		 ; add identifier at IX
1  2652
1  2653	    0AAA  CD				 DB 0cdh
1  2654	    0AAB  3183r				 DW  L6F1B		 ; match('('), if present
1  2655	    0AAD  20 0B				 DB 20h,(L4607)-$-1		 ; jump	if '(' not matched
1  2656
1  2657	    0AAF  CD			 L45FC:	 DB 0cdh
1  2658	    0AB0  0B45r				 DW  L4692		 ; add identifier at IX
1  2659	    0AB2  CD				 DB 0cdh
1  2660	    0AB3  317Br				 DW  L6F13		 ; match(','), if present
1  2661	    0AB5  28 F8				 DB 28h,(L45FC)-$-1		 ; yes,	add next identifier
1  2662
1  2663	    0AB7  CD				 DB 0cdh
1  2664	    0AB8  31D6r				 DW  L6F6E		 ; match(')')
1  2665
1  2666	    0ABA  CD			 L4607:	 DB 0cdh
1  2667	    0ABB  31B0r				 DW  L6F48		 ; match(';')
1  2668
1  2669	    0ABD  3E 31			 L460A:	 DB 3eh,31H		 ; opcode 'LD SP,'
1  2670	    0ABF  21				 DB 21h
1  2671	    0AC0  0100				 DW 100H
1  2672	    0AC2  CD				 DB 0cdh
1  2673	    0AC3  2CF0r				 DW  O_OPHL		 ; out:	'LD SP,100H'
1  2674
1  2675	    0AC5  21				 DB 21h
1  2676	    0AC6  3D91r				 DW L79D7
1  2677	    0AC8  3A				 DB 3ah
1  2678	    0AC9  3913r				 DW L7900
1  2679	    0ACB  B7				 DB 0b7h		 ; compile to memory?
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 48
msx_asm\tur_comp.ASM



1  2680	    0ACC  28 06				 DB 28h,(L4621)-$-1		 ; yes,	output L79D7
1  2681
1  2682	    0ACE  11				 DB 11h
1  2683	    0ACF  0100				 DW 0100H
1  2684	    0AD1  CD				 DB 0cdh
1  2685	    0AD2  2D8Dr				 DW  L6C30		 ; allocate 256	bytes of data area
1  2686
1  2687	    0AD4  CD			 L4621:	 DB 0cdh
1  2688	    0AD5  2CEEr				 DW  O_LDHL		 ; out:	'LD HL,L79D7'
1  2689									 ;   or	'LD HL,allocated data address'
1  2690	    0AD7  3A				 DB 3ah
1  2691	    0AD8  3F57r				 DW L7B9D
1  2692	    0ADA  CB 7F				 DB 0cbh,07fh			 ; 1 = Control S and C interpretation on
1  2693	    0ADC  16 00				 DB 16h,0			 ; assume no interpretation
1  2694	    0ADE  28 01				 DB 28h,(L462E)-$-1		 ; jump	if off
1  2695	    0AE0  15				 DB 15h			 ; D = 255
1  2696	    0AE1  D5			 L462E:	 DB 0d5h
1  2697	    0AE2  3E 01				 DB 3eh,1
1  2698	    0AE4  CD				 DB 0cdh
1  2699	    0AE5  2CF8r				 DW  O_BYTE		 ; opcode: 'LD BC,'
1  2700									 ; B = 255 if Control S	and C interpretation on
1  2701									 ; C = 255 if User Interrupt on
1  2702
1  2703	    0AE7  FD E5				 DB 0fdh,0e5h			 ; save	code pointer
1  2704	    0AE9  CD				 DB 0cdh
1  2705	    0AEA  2CF3r				 DW  O_HL		 ; out:	dummy, reserve 2 bytes
1  2706	    0AEC  21				 DB 21h
1  2707	    0AED  0420				 DW _L0364		 ; LIB,	done
1  2708	    0AEF  CD				 DB 0cdh
1  2709	    0AF0  2CE2r				 DW  O_CALHL		 ; out:	'CALL L0364'
1  2710
1  2711	    0AF2  3E 21				 DB 3eh,21H
1  2712	    0AF4  CD				 DB 0cdh
1  2713	    0AF5  2CF8r				 DW  O_BYTE		 ; opcode: 'LD HL,'
1  2714	    0AF7  FD E5				 DB 0fdh,0e5h			 ; save	code pointer (1st)
1  2715
1  2716	    0AF9  CD				 DB 0cdh
1  2717	    0AFA  2CF3r				 DW  O_HL		 ; out:	dummy, reserve 2 bytes
1  2718	    0AFC  3E 11				 DB 3eh,11H
1  2719	    0AFE  CD				 DB 0cdh
1  2720	    0AFF  2CF8r				 DW  O_BYTE		 ; opcode: 'LD DE,'
1  2721	    0B01  FD E5				 DB 0fdh,0e5h			 ; save	code pointer (2nd)
1  2722
1  2723	    0B03  CD				 DB 0cdh
1  2724	    0B04  2CF3r				 DW  O_HL		 ; out:	dummy, reserve 2 bytes
1  2725
1  2726	    0B06  2A				 DB 02ah
1  2727	    0B07  391Dr				 DW L790A		 ; HL =	data end address
1  2728	    0B09  CD				 DB 0cdh
1  2729	    0B0A  2CE6r				 DW  O_LDBC		 ; out:	'LD BC,data end	address
1  2730
1  2731	    0B0C  3A				 DB 3ah
1  2732	    0B0D  3913r				 DW L7900		 ; 0 = compiled	in memory
1  2733									 ; 1 = compiled	to disk
1  2734									 ; 2 = compiled	while searching
1  2735	    0B0F  67				 DB 67h
1  2736	    0B10  2E 3E				 DB 2eh,3EH
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 49
msx_asm\tur_comp.ASM



1  2737	    0B12  CD				 DB 0cdh
1  2738	    0B13  2CF3r				 DW  O_HL		 ; out:	'LD A,value (L7900)'
1  2739
1  2740	    0B15  21				 DB 21h
1  2741	    0B16  06C3				 DW _L04D4		 ; LIB,	clear
1  2742	    0B18  CD				 DB 0cdh
1  2743	    0B19  2CE2r				 DW  O_CALHL		 ; out:	'CALL L04D4'
1  2744	    0B1B  CD				 DB 0cdh
1  2745	    0B1C  0B51r				 DW  L469E
1  2746
1  2747	    0B1E  CD				  DB 0cdh
1  2748	    0B1F  18C5r				 DW  L52FC		   ; start main	program
1  2749
1  2750	    0B21  DD 7E	00			  DB 0ddh,7eh,+0
1  2751	    0B24  FE 2E				 DB 0feh, '.'			  ; '.'	?, needed for 'END.'
1  2752
1  2753	    0B26  CD				 DB 0cdh
1  2754	    0B27  34E5r				 DW  L72DA		 ; NonZero --> error
1  2755	    0B29  0A				 DB 0AH			 ; error 10: '.' expected
1  2756
1  2757	    0B2A  21				 DB 21h
1  2758	    0B2B  27FD				 DW _L20D4		 ; LIB,	done
1  2759	    0B2D  CD				 DB 0cdh
1  2760	    0B2E  2CDEr				 DW  O_JPHL		 ; out:	JP L20D4
1  2761
1  2762	    0B30  E1				 DB 0e1h
1  2763	    0B31  ED 5B				 DB 0edh,5bh
1  2764	    0B33  391Br				 DW L7908		 ; DE =	data start address
1  2765	    0B35  CD				  DB 0cdh
1  2766	    0B36  2DA0r				 DW  L6C42		   ; update address at HL with contents	of DE
1  2767
1  2768	    0B38  E1				 DB 0e1h
1  2769	    0B39  CD				  DB 0cdh
1  2770	    0B3A  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  2771
1  2772	    0B3C  E1				 DB 0e1h
1  2773	    0B3D  D1				 DB 0d1h
1  2774	    0B3E  3A				 DB 3ah
1  2775	    0B3F  3F5Ar				 DW L7BA0
1  2776	    0B41  5F				 DB 5fh
1  2777	    0B42  C3				  DB 0c3h
1  2778	    0B43  2DA0r				 DW  L6C42		     ; update address at HL with contents of DE
1  2779
1  2780	    0B45			 L4692:	 ; add identifier at address IX
1  2781						 ; in:	 IX = address of identifier
1  2782						 ; out:	 -
1  2783	    0B45  2A				 DB 02ah
1  2784	    0B46  3F2Dr				 DW L7B73		 ; HL =	address	to add a identifier
1  2785	    0B48  E5				 DB 0e5h
1  2786	    0B49  CD				 DB 0cdh
1  2787	    0B4A  2F33r				 DW  L6D87		 ; add identifier at address IX
1  2788	    0B4C  E1				 DB 0e1h
1  2789	    0B4D  22				 DB 22h
1  2790	    0B4E  3F2Dr				 DW L7B73
1  2791	    0B50  C9				 DB 0c9h
1  2792
1  2793	    0B51			 L469E:	 ; in:	 -
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 50
msx_asm\tur_comp.ASM



1  2794						 ; out:	 -
1  2795	    0B51  3A				 DB 3ah
1  2796	    0B52  3F81r				 DW WITHDEPTH
1  2797	    0B54  F5				 DB 0f5h
1  2798	    0B55  87				 DB 087h
1  2799	    0B56  5F				 DB 5fh			 ; DE =	2 * value (WITHDEPTH) bytes to allocate
1  2800	    0B57  16 00				 DB 16h,0
1  2801	    0B59  CD				  DB 0cdh
1  2802	    0B5A  2D8Dr				 DW  L6C30		   ; HL	= address newly	allocated data
1  2803	    0B5C  E5				 DB 0e5h
1  2804	    0B5D  CD				 DB 0cdh
1  2805	    0B5E  2CD3r				 DW  O_C3		 ; opcode: 'JP'
1  2806	    0B60  FD E5				 DB 0fdh,0e5h
1  2807	    0B62  E5				 DB 0e5h
1  2808	    0B63  CD				 DB 0cdh
1  2809	    0B64  2CF3r				 DW  O_HL		 ; out:	address	of allocated data
1  2810
1  2811	    0B66  CD			 L46B3:	 DB 0cdh
1  2812	    0B67  30C2r				 DW  L6E5A
1  2813	    0B69  01				 DB 1			 ; 1 byte following every reserved word
1  2814	    0B6A  3859r				 DW L7584		 ; start of reserved word list:
1  2815									 ; LABEL, CONST, TYPE, VAR, BEGIN, OVERLAY
1  2816									 ; PROCEDURE, FUNCTION
1  2817
1  2818	    0B6C  CD				 DB 0cdh
1  2819	    0B6D  34E5r				 DW  L72DA		 ; NonZero --> error
1  2820	    0B6F  0C				 DB 0CH			 ; error 12: BEGIN expected
1  2821
1  2822	    0B70  7E				 DB 7eh		 ; A = byte following the found	word
1  2823
1  2824	    0B71  FE 01			 L46BE:	 DB 0feh, 1			 ; word	is 'LABEL' ?
1  2825	    0B73  20 05				 DB 20h,(L46C7)-$-1		 ; no, continue
1  2826
1  2827
1  2828	    0B75  CD				 DB 0cdh
1  2829	    0B76  0D8Dr				 DW  L488E		 ; label-declaration-part
1  2830	    0B78  18 EC				 DB 18h,( L46B3)-$-1		 ; repeat
1  2831
1  2832	    0B7A  FE 02			 L46C7:	 DB 0feh, 2			 ; word	is 'CONST' ?
1  2833	    0B7C  20 05				 DB 20h,(L46D0)-$-1		 ; no, continue
1  2834
1  2835	    0B7E  CD				 DB 0cdh
1  2836	    0B7F  0DB6r				 DW  L48B7
1  2837	    0B81  18 EE				 DB 18h,( L46BE)-$-1
1  2838
1  2839	    0B83  FE 03			 L46D0:	 DB 0feh, 3			 ; word	is 'TYPE' ?
1  2840	    0B85  20 05				 DB 20h,(L46D9)-$-1		 ; no, continue
1  2841	    0B87  CD				 DB 0cdh
1  2842	    0B88  103Ar				 DW  L4AEB
1  2843	    0B8A  18 E5				 DB 18h,( L46BE)-$-1
1  2844
1  2845	    0B8C  FE 04			 L46D9:	 DB 0feh, 4			 ; word	is 'VAR' ?
1  2846	    0B8E  20 09				 DB 20h,(L46E6)-$-1		 ; no, continue
1  2847	    0B90  CD				 DB 0cdh
1  2848	    0B91  1079r				 DW  L4B2A
1  2849	    0B93  2A				 DB 02ah
1  2850	    0B94  391Br				 DW L7908		 ; HL =	data start address
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 51
msx_asm\tur_comp.ASM



1  2851	    0B96  E3				 DB 0e3h
1  2852	    0B97  18 D8				 DB 18h,( L46BE)-$-1
1  2853
1  2854	    0B99  FE 07			 L46E6:	 DB 0feh, 7			 ; word	is 'OVERLAY' ?
1  2855	    0B9B  C2				  DB 0c2h
1  2856	    0B9C  0D5Dr				 DW L485E		 ; no, continue
1  2857
1  2858						 ; start of overlay procedure
1  2859	    0B9E  3A				 DB 3ah
1  2860	    0B9F  3913r				 DW L7900
1  2861	    0BA1  B7				 DB 0b7h		 ; only	overlays when compiling	to disk
1  2862
1  2863	    0BA2  CD				 DB 0cdh
1  2864	    0BA3  34DFr				 DW  L72D4		 ; Zero	--> error
1  2865	    0BA5  4D				 DB 4DH			 ; error 77: Overlays not allowed in direct mode
1  2866
1  2867	    0BA6  21				  DB 21h
1  2868	    0BA7  3922r				 DW CODEFILE+1
1  2869	    0BA9  11				  DB 11h
1  2870	    0BAA  4094r				 DW TEMPFILEDATA
1  2871	    0BAC  3E 20				  DB 3eh,' '
1  2872	    0BAE  47				  DB 47h
1  2873	    0BAF  4F				  DB 4fh
1  2874	    0BB0  CD				  DB 0cdh
1  2875	    0BB1  0000e				 DW  PARSENAME		   ; parse name	to get last item
1  2876
1  2877	    0BB3  C5				  DB 0c5h		     ; save address of last item
1  2878
1  2879					 ;	   LD HL,L7934
1  2880					 ;	   LD DE,L7BB2
1  2881					 ;	   LD BC,0008
1  2882					 ;	   LDIR			      ;	fill name of overlay file
1  2883
1  2884						 ; create 0xy
1  2885	    0BB4  21				 DB 21h
1  2886	    0BB5  3F50r				 DW L7B96
1  2887
1  2888	    0BB7  7E				  DB 7eh
1  2889	    0BB8  F5				  DB 0f5h		     ; save number to put in overlay-info block
1  2890
1  2891	    0BB9  34				  DB 034h
1  2892
1  2893					 ;	   EX DE,HL
1  2894
1  2895					 ;	   LD (HL),'0'
1  2896					 ;	   INC HL
1  2897
1  2898	    0BBA  06 2F				  DB 06h,'0'-1
1  2899
1  2900	    0BBC  04			 L4709:	 DB 04h
1  2901	    0BBD  D6 0A				 DB 0d6h, 10
1  2902	    0BBF  30 FB				 DB 30h,(L4709)-$-1
1  2903					 ;	   LD (HL),B
1  2904					 ;	   INC HL
1  2905
1  2906	    0BC1  C6 3A				  DB 0c6h,'0' +	10	       ; + 10 to compensate for	SUB 10
1  2907	    0BC3  4F				  DB 4fh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 52
msx_asm\tur_comp.ASM



1  2908
1  2909					 ;	   LD (HL),A
1  2910
1  2911	    0BC4  3E 30				  DB 3eh,'0'
1  2912
1  2913	    0BC6  21				  DB 21h
1  2914	    0BC7  4095r				 DW TEMPFILEDATA+1
1  2915	    0BC9  37				  DB 37h			; overrule current extension
1  2916	    0BCA  CD				  DB 0cdh
1  2917	    0BCB  0000e				 DW  SETEXTENSION
1  2918
1  2919	    0BCD  3A				 DB 3ah
1  2920	    0BCE  3F57r				 DW L7B9D
1  2921	    0BD0  21				  DB 21h
1  2922	    0BD1  232C				 DW _LOADRUNOVERLAYREC
1  2923
1  2924	    0BD3  CB 57				 DB 0cbh,057h			 ; 1 = Absolute	Code on
1  2925	    0BD5  28 03				  DB 28h,(L470D)-$-1		     ; jump if not on
1  2926
1  2927	    0BD7  21				  DB 21h
1  2928	    0BD8  2339				 DW _LOADRUNOVERLAY	 ; LIB,	overlay	system call
1  2929
1  2930	    0BDA			 L470D:
1  2931	    0BDA  CD				 DB 0cdh
1  2932	    0BDB  2CE2r				 DW  O_CALHL
1  2933
1  2934	    0BDD  21				  DB 21h
1  2935	    0BDE  FFFF				 DW -1			 ; initial ID number, nothing loaded
1  2936	    0BE0  CD				  DB 0cdh
1  2937	    0BE1  2CF3r				 DW  O_HL		   ;Ok$$$$, will be long with file position
1  2938									     ; as id of	loaded overlay
1  2939	    0BE3  21				  DB 21h
1  2940	    0BE4  FFFF				 DW -1
1  2941	    0BE6  CD				  DB 0cdh
1  2942	    0BE7  2CF3r				 DW  O_HL
1  2943
1  2944	    0BE9  21				  DB 21h
1  2945	    0BEA  FFFF				 DW -1
1  2946	    0BEC  CD				  DB 0cdh
1  2947	    0BED  2CF3r				 DW  O_HL		   ; output overlay data length
1  2948									     ; default not present
1  2949
1  2950	    0BEF  E1				  DB 0e1h
1  2951	    0BF0  7C				  DB 7ch
1  2952	    0BF1  CD				  DB 0cdh
1  2953	    0BF2  2CF8r				 DW  O_BYTE		   ; output overlay number
1  2954
1  2955	    0BF4  E1				  DB 0e1h		      ;	HL = address of	last item
1  2956									     ; drive/path/name drive/name
1  2957									     ;		  ^	     ^
1  2958	    0BF5  E5				  DB 0e5h
1  2959
1  2960	    0BF6  AF				  DB 0afh		       ; lenght	of overlay file	name = 0
1  2961	    0BF7			 L4723:
1  2962	    0BF7  3C				  DB 3ch
1  2963
1  2964	    0BF8  35				  DB 035h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 53
msx_asm\tur_comp.ASM



1  2965	    0BF9  34				  DB 034h
1  2966
1  2967	    0BFA  23				  DB 23h
1  2968
1  2969	    0BFB  20 FA				  DB 20h,(L4723)-$-1
1  2970
1  2971	    0BFD  3D				  DB 3dh
1  2972
1  2973	    0BFE  CD				  DB 0cdh
1  2974	    0BFF  2CF8r				 DW  O_BYTE		   ; output length of overlay file name
1  2975
1  2976	    0C01  E1				  DB 0e1h
1  2977
1  2978					 ;	   LD HL,L7BB2		      ;	source address overlay file name
1  2979	    0C02  06 0D				  DB 06h,13		       ; file name is 13 bytes long
1  2980									     ;Ok$$$$, will be ASCIIZ string of 12 bytes
1  2981									     ; + '\0'
1  2982
1  2983	    0C04  7E			 L4724:	 DB 7eh
1  2984	    0C05  CD				 DB 0cdh
1  2985	    0C06  2CF8r				 DW  O_BYTE
1  2986	    0C08  23				 DB 23h
1  2987	    0C09  10 F9				 DB 10h,( L4724)-$-1
1  2988
1  2989	    0C0B  3A				 DB 3ah
1  2990	    0C0C  3913r				 DW L7900
1  2991	    0C0E  3D				 DB 3dh
1  2992	    0C0F  20 0A				 DB 20h,(L473B)-$-1		 ; jump	if searching
1  2993
1  2994	    0C11  CD				 DB 0cdh
1  2995	    0C12  2DF4r				 DW  L6C96		 ; jump	dates
1  2996
1  2997	    0C14  AF				  DB 0afh
1  2998	    0C15  32				  DB 32h
1  2999	    0C16  3F98r				 DW L7BE3		; no updates
1  3000
1  3001	    0C18  CD				 DB 0cdh
1  3002	    0C19  2E96r				 DW  L6CFD		 ; write 128 bytes to file, updated record
1  3003
1  3004	    0C1B			 L473B:
1  3005						  ;LD HL,(L7BDD)	      ;	save first block of current part
1  3006						  ;PUSH	HL		      ;Ok$$$$, must be long
1  3007									     ; CodeFileStart
1  3008	    0C1B  2A				  DB 02ah
1  3009	    0C1C  3968r				 DW CODEFILESTART+2
1  3010	    0C1E  E5				  DB 0e5h		     ; save high-word
1  3011	    0C1F  2A				  DB 02ah
1  3012	    0C20  3966r				 DW CODEFILESTART
1  3013	    0C22  E5				  DB 0e5h		     ; save low-word
1  3014
1  3015	    0C23  2A				 DB 02ah
1  3016	    0C24  3915r				 DW L7902		 ; save	first address of current part
1  3017	    0C26  E5				 DB 0e5h
1  3018
1  3019	    0C27  2A				  DB 02ah
1  3020	    0C28  3F6Ar				 DW L7BB0	       ; save length of	largest	part
1  3021	    0C2A  E5				  DB 0e5h		     ;Ok$$$$, must be in bytes
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 54
msx_asm\tur_comp.ASM



1  3022									     ;	     now in 128	byte blocks
1  3023
1  3024	    0C2B  22FD 3915r			  DW 22fdh,L7902	      ;	set first address of current part
1  3025
1  3026	    0C2F  21				  DB 21h
1  3027	    0C30  0000				 DW 0			 ; ####	0000
1  3028	    0C32  22				  DB 22h
1  3029	    0C33  3F6Ar				 DW L7BB0	       ; set length of largest part = 0
1  3030
1  3031	    0C35  21				  DB 21h
1  3032	    0C36  FFBF				 DW -65			 ; size	of handle/FCB
1  3033	    0C38  39				  DB 039h
1  3034
1  3035					 ;	   LD HL,-FCB_LEN	      ;	-36
1  3036					 ;	   ADD HL,SP		      ;	allocate space for a new FCB
1  3037
1  3038	    0C39  F9				 DB 0f9h
1  3039	    0C3A  EB				 DB 0ebh
1  3040	    0C3B  21				  DB 21h
1  3041	    0C3C  3921r				 DW CODEFILE ; L7933
1  3042	    0C3E  01				  DB 01h
1  3043	    0C3F  0041				 DW 65 ; FCB_LEN
1  3044	    0C41  ED B0				 DB 0edh,0b0h			 ; copy	current	FCB to this new	space
1  3045
1  3046	    0C43  3A				 DB 3ah
1  3047	    0C44  3913r				 DW L7900
1  3048	    0C46  3D				 DB 3dh
1  3049	    0C47  C2				  DB 0c2h
1  3050	    0C48  0C75r				 DW L478C		 ; jump	if searching
1  3051
1  3052					 ;	   LD HL,L7BB2
1  3053					 ;	   LD DE,L7933 + 1
1  3054					 ;	   LD BC,11		      ;	length of FCB name
1  3055					 ;	   LDIR
1  3056					 ;
1  3057					 ;	   EX DE,HL
1  3058					 ;	   LD B,FCB_LEN	- 12	      ;	length of drive	name + name
1  3059					 ;L4773:   LD (HL),0
1  3060					 ;	   INC HL
1  3061					 ;	   DJNZ	L4773
1  3062
1  3063	    0C4A  21				  DB 21h
1  3064	    0C4B  4094r				 DW TEMPFILEDATA
1  3065	    0C4D  11				  DB 11h
1  3066	    0C4E  3921r				 DW CODEFILE
1  3067	    0C50  01				  DB 01h
1  3068	    0C51  0041				 DW 65
1  3069	    0C53  ED B0				  DB 0edh,0b0h
1  3070
1  3071	    0C55  11				  DB 11h
1  3072	    0C56  3922r				 DW CODEFILE+1
1  3073	    0C58  CD				  DB 0cdh
1  3074	    0C59  0000e				 DW  DELETEFILE
1  3075
1  3076	    0C5B  21				  DB 21h
1  3077	    0C5C  3922r				 DW CODEFILE+1
1  3078	    0C5E  11				  DB 11h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 55
msx_asm\tur_comp.ASM



1  3079	    0C5F  3921r				 DW CODEFILE
1  3080	    0C61  3E 20				  DB 3eh,' '
1  3081	    0C63  47				  DB 47h
1  3082	    0C64  4F				  DB 4fh
1  3083	    0C65  CD				  DB 0cdh
1  3084	    0C66  0000e				 DW  CREATEFILE
1  3085
1  3086					 ;	   LD DE,L7933
1  3087					 ;	   PUSH	DE
1  3088					 ;	   LD C,13H		      ;	delete file
1  3089					 ;	   CALL	DOSIXIY
1  3090					 ;	   POP DE
1  3091					 ;	   LD C,16H		      ;	create file
1  3092					 ;	   CALL	DOSIXIY
1  3093					 ;	   INC A
1  3094
1  3095	    0C68  CD				  DB 0cdh
1  3096	    0C69  34E5r				 DW  L72DA		   ; NonZero --> error
1  3097	    0C6B  5C				 DB 5CH			 ; error 92: Unable to create overlay file
1  3098
1  3099	    0C6C  21				  DB 21h
1  3100	    0C6D  0000				 DW 0
1  3101	    0C6F  22				  DB 22h
1  3102	    0C70  3966r				 DW CODEFILESTART
1  3103	    0C72  22				  DB 22h
1  3104	    0C73  3968r				 DW CODEFILESTART+2
1  3105
1  3106	    0C75			 L478C:
1  3107	    0C75  21				  DB 21h
1  3108	    0C76  0000				 DW 0
1  3109	    0C78  22				  DB 22h
1  3110	    0C79  398Er				 DW CODEFILEBUFFERPOS  ; start at byte 0 of buffer
1  3111	    0C7B  AF				  DB 0afh
1  3112	    0C7C  32				 DB 32h
1  3113	    0C7D  3F91r				 DW L7BDB		 ; already read	and not	dirty
1  3114					 ;	   LD (L7BDC),A		      ;	start at byte 0	of current block
1  3115
1  3116	    0C7F  2A				 DB 02ah
1  3117	    0C80  391Br				 DW L7908		 ; HL =	data start address
1  3118	    0C82  22				 DB 22h
1  3119	    0C83  3F65r				 DW L7BAB		 ; save	data start address
1  3120									 ; all overlay functions and procedures	in
1  3121									 ; the same overlay have the same data
1  3122									 ; start address
1  3123
1  3124	    0C85  CD			 L4799:	 DB 0cdh
1  3125	    0C86  30C2r				 DW  L6E5A
1  3126	    0C88  01				 DB 1			 ; 1 byte following
1  3127	    0C89  387Cr				 DW L75A7		 ; start of reserved word list:
1  3128									 ; PROCEDURE, FUNCTION
1  3129
1  3130	    0C8B  CD				 DB 0cdh
1  3131	    0C8C  34E5r				 DW  L72DA		 ; NonZero --> error
1  3132	    0C8E  10				 DB 10H			 ; error 16: PROCEDURE or FUNCTION expected
1  3133
1  3134	    0C8F  7E				  DB 7eh		  ; A =	5, PROCEDURE
1  3135									     ; A = 6, FUNCTION
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 56
msx_asm\tur_comp.ASM



1  3136
1  3137	    0C90  FD E5				  DB 0fdh,0e5h			  ; save start of overlay code
1  3138									     ; just after the filename
1  3139
1  3140	    0C92  2A				  DB 02ah
1  3141	    0C93  3966r				 DW CODEFILESTART
1  3142	    0C95  22				  DB 22h
1  3143	    0C96  3962r				 DW CODEFILEPOS
1  3144	    0C98  2A				  DB 02ah
1  3145	    0C99  3968r				 DW CODEFILESTART+2
1  3146	    0C9B  22				  DB 22h
1  3147	    0C9C  3964r				 DW CODEFILEPOS+2
1  3148
1  3149					 ;	   LD HL,(L7954)	      ;	HL = current file position
1  3150					 ;				      ;Ok$$$$, must be long
1  3151					 ;	   LD (L7BDD),HL	      ;	save current file position
1  3152					 ;				      ;	set start of new part
1  3153					 ;				      ;Ok$$$$, must be long CodeFileStart
1  3154
1  3155	    0C9E  2A				 DB 02ah
1  3156	    0C9F  391Br				 DW L7908		 ; HL =	data start address
1  3157	    0CA1  E5				 DB 0e5h		 ; save	old data start address
1  3158
1  3159	    0CA2  2A				 DB 02ah
1  3160	    0CA3  3F65r				 DW L7BAB
1  3161	    0CA5  E5				 DB 0e5h
1  3162
1  3163	    0CA6  1E FF				 DB 1eh,0FFH		 ; this	procedure, function is an overlay
1  3164	    0CA8  CD				  DB 0cdh
1  3165	    0CA9  1089r				 DW  L4B3A
1  3166
1  3167						  ; HL = address of high byte of struct	length
1  3168	    0CAB  44				  DB 44h
1  3169	    0CAC  4D				  DB 4dh
1  3170
1  3171	    0CAD  D1				 DB 0d1h
1  3172
1  3173	    0CAE  2A				 DB 02ah
1  3174	    0CAF  391Br				 DW L7908		 ; HL =	new data start address
1  3175	    0CB1  B7				 DB 0b7h
1  3176	    0CB2  ED 52				 DB 0EDH,052h		 ; used	data of	last proc/func >
1  3177									 ;	    biggest data of proc/func
1  3178	    0CB4  19				  DB 019h
1  3179	    0CB5  38 01				 DB 38h,(L47C6)-$-1		 ; jump	not bigger
1  3180
1  3181	    0CB7  EB				 DB 0ebh		 ; data	of last	proc/func is largest data
1  3182
1  3183	    0CB8  22			 L47C6:	 DB 22h
1  3184	    0CB9  3F65r				 DW L7BAB		 ; save	biggest	data area
1  3185
1  3186	    0CBB  E1				 DB 0e1h		 ; restore old data start address
1  3187	    0CBC  22				 DB 22h
1  3188	    0CBD  391Br				 DW L7908		 ; set new data	start address
1  3189
1  3190	    0CBF  D1				 DB 0d1h		 ; DE =	start of overlay code
1  3191
1  3192
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 57
msx_asm\tur_comp.ASM



1  3193	    0CC0  C5				  DB 0c5h		     ; address of high byte of struct length
1  3194
1  3195	    0CC1  D5				 DB 0d5h		 ; DE =	start of overlay code
1  3196
1  3197	    0CC2  3A				 DB 3ah
1  3198	    0CC3  3913r				 DW L7900
1  3199	    0CC5  3D				 DB 3dh
1  3200	    0CC6  CC				 DB 0cch
1  3201	    0CC7  2DF4r				 DW L6C96		 ; call	if compiling to	disk
1  3202
1  3203	    0CC9  AF				 DB 0afh
1  3204	    0CCA  32				 DB 32h
1  3205	    0CCB  3F98r				 DW L7BE3		 ; 0 = no updates
1  3206
1  3207	    0CCD  D1				 DB 0d1h		 ; DE =	start of overlay code
1  3208	    0CCE  D5				 DB 0d5h
1  3209
1  3210						  ;Ok$$$$, this	part should not	be done, that is no round up
1  3211
1  3212						  ; this routine rounds	the overlay up to a multiple of	128 bytes
1  3213					 ;L47DD:   PUSH	IY
1  3214					 ;	   POP HL		      ;	HL = address of	first byte after overlay
1  3215					 ;
1  3216					 ;	   OR A
1  3217					 ;	   SBC HL,DE		      ;	current	address	- start	of overlay address
1  3218					 ;
1  3219					 ;	   LD A,L
1  3220					 ;	   AND 7FH
1  3221					 ;	   JR Z,L47EE		      ;	jump if	at 128 byte boundary
1  3222					 ;
1  3223					 ;	   XOR A
1  3224					 ;	   CALL	O_BYTE
1  3225					 ;	   JR L47DD
1  3226					 ;
1  3227					 ;L47EE:
1  3228
1  3229	    0CCF  FD E5				  DB 0fdh,0e5h
1  3230	    0CD1  E1				  DB 0e1h
1  3231
1  3232	    0CD2  B7				  DB 0b7h
1  3233	    0CD3  ED 52				  DB 0EDH,052h			; HL = length of current part in bytes
1  3234
1  3235	    0CD5  EB				  DB 0ebh
1  3236					 ;	   ;Ok$$$$, must be length in bytes
1  3237					 ;	   ADD HL,HL		      ;	length in bytes	* 2
1  3238					 ;	   LD E,H		      ;	E = number of 128 byte blocks
1  3239					 ;	   LD D,0
1  3240					 ;	   RL D
1  3241
1  3242	    0CD6  2A				  DB 02ah
1  3243	    0CD7  3F6Ar				 DW L7BB0	       ; HL = largest part
1  3244	    0CD9  ED 52				 DB 0EDH,052h
1  3245	    0CDB  30 04				 DB 30h,(L47FF)-$-1		 ; jump	largest	part > length current part
1  3246
1  3247	    0CDD  53ED 3F6Ar			  DW 53edh,L7BB0	      ;	largest	part = length current part
1  3248									     ;Ok$$$$, must be in length	in bytes
1  3249
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 58
msx_asm\tur_comp.ASM



1  3250	    0CE1			 L47FF:
1  3251	    0CE1  FD E1				 DB 0fdh,0e1h			 ; IY =	start of overlay code
1  3252
1  3253						  ;Ok$$$$, DE =	must become length of function/procedure in bytes
1  3254	    0CE3  E1				  DB 0e1h		      ;	HL = address of	high byte of struct length
1  3255	    0CE4  23				 DB 23h
1  3256	    0CE5  73				 DB 73h		 ; set size of function/procedure code
1  3257	    0CE6  23				 DB 23h			 ; to number of	128 byte blocks
1  3258	    0CE7  72				 DB 72h
1  3259
1  3260	    0CE8  2A				  DB 02ah
1  3261	    0CE9  3966r				 DW CODEFILESTART
1  3262	    0CEB  19				  DB 019h
1  3263	    0CEC  22				  DB 22h
1  3264	    0CED  3966r				 DW CODEFILESTART
1  3265	    0CEF  2A				  DB 02ah
1  3266	    0CF0  3968r				 DW CODEFILESTART+2
1  3267	    0CF2  11				  DB 11h
1  3268	    0CF3  0000				 DW 0
1  3269	    0CF5  ED 5A				  DB 0EDH,05ah
1  3270	    0CF7  22				  DB 22h
1  3271	    0CF8  3968r				 DW CODEFILESTART+2
1  3272
1  3273	    0CFA  CD				 DB 0cdh
1  3274	    0CFB  30DEr				 DW  L6E76
1  3275	    0CFD  3874r				 DW L759F		 ; start of reserved word: OVERLAY
1  3276	    0CFF  28 84				  DB 28h,(L4799)-$-1		     ; jump if 'OVERLAY'
1  3277									 ; this	jump repeats the LOOP
1  3278
1  3279	    0D01  2A				 DB 02ah
1  3280	    0D02  3F65r				 DW L7BAB		 ; HL =	lowest address with data in overlay
1  3281	    0D04  22				 DB 22h
1  3282	    0D05  391Br				 DW L7908		 ; continue the	with the rest
1  3283
1  3284	    0D07  3A				 DB 3ah
1  3285	    0D08  3913r				 DW L7900
1  3286	    0D0A  3D				 DB 3dh
1  3287	    0D0B  20 09				 DB 20h,(L4821)-$-1		 ; jump	if searching
1  3288
1  3289	    0D0D  CD				  DB 0cdh
1  3290	    0D0E  2E96r				 DW  L6CFD		   ; write 128 bytes to	file
1  3291									 ; flush last buffer
1  3292
1  3293	    0D10  01				  DB 01h
1  3294	    0D11  3921r				 DW CODEFILE
1  3295	    0D13  CD				  DB 0cdh
1  3296	    0D14  0000e				 DW  CLOSEFILE
1  3297
1  3298					 ;	   LD DE,L7933
1  3299					 ;	   LD C,10H		      ;	close file with	generated code
1  3300					 ;	   CALL	DOSIXIY
1  3301
1  3302	    0D16			 L4821:	 ; pop old FCB block (previous overlay or com or chain file)
1  3303	    0D16  21				 DB 21h
1  3304	    0D17  0000				 DW 0000
1  3305	    0D19  39				 DB 039h
1  3306
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 59
msx_asm\tur_comp.ASM



1  3307					 ;	   LD DE,L7933
1  3308					 ;	   LD BC,FCB_LEN
1  3309					 ;	   LDIR
1  3310
1  3311	    0D1A  11				  DB 11h
1  3312	    0D1B  3921r				 DW CODEFILE
1  3313	    0D1D  01				  DB 01h
1  3314	    0D1E  0041				 DW 65
1  3315	    0D20  ED B0				  DB 0edh,0b0h
1  3316
1  3317	    0D22  F9				  DB 0f9h
1  3318
1  3319	    0D23  ED 5B				 DB 0edh,5bh
1  3320	    0D25  3F6Ar				 DW L7BB0		 ; number of blocks of largest part
1  3321
1  3322	    0D27  E1				 DB 0e1h
1  3323	    0D28  22				  DB 22h
1  3324	    0D29  3F6Ar				 DW L7BB0	       ; restore length	of largest part
1  3325	    0D2B  E1				 DB 0e1h
1  3326	    0D2C  22				 DB 22h
1  3327	    0D2D  3915r				 DW L7902		 ; restore first address of previous part
1  3328
1  3329					 ;	   POP HL
1  3330					 ;	   LD (L7BDD),HL	      ;	restore	first block of previous	part
1  3331					 ;				      ;Ok$$$$, CodeFileStart
1  3332	    0D2F  E1				  DB 0e1h
1  3333	    0D30  22				  DB 22h
1  3334	    0D31  3966r				 DW CODEFILESTART      ; low-word
1  3335	    0D33  E1				  DB 0e1h
1  3336	    0D34  22				  DB 22h
1  3337	    0D35  3968r				 DW CODEFILESTART+2    ; high-word
1  3338
1  3339	    0D37  AF				 DB 0afh
1  3340	    0D38  32				 DB 32h
1  3341	    0D39  3F91r				 DW L7BDB		 ; already read	and not	dirty
1  3342
1  3343	    0D3B  21				 DB 21h
1  3344	    0D3C  FFFF				 DW -1
1  3345	    0D3E  22				  DB 22h
1  3346	    0D3F  398Br				 DW L7954	       ; init, no block	read yet
1  3347	    0D41  22				  DB 22h
1  3348	    0D42  3962r				 DW CODEFILEPOS
1  3349	    0D44  22				  DB 22h
1  3350	    0D45  3964r				 DW CODEFILEPOS+2
1  3351
1  3352	    0D47  FD E5				 DB 0fdh,0e5h
1  3353	    0D49  E1				 DB 0e1h
1  3354	    0D4A  CD				  DB 0cdh
1  3355	    0D4B  2E20r				 DW  L6CC2
1  3356
1  3357						  ; create empty area in code file where the overlay is	to be loaded
1  3358	    0D4D  06 01			 L484E:	  DB 06h,1 ; 80H
1  3359
1  3360	    0D4F  AF			 L4850:	  DB 0afh
1  3361	    0D50  CD				 DB 0cdh
1  3362	    0D51  2CF8r				 DW  O_BYTE
1  3363	    0D53  10 FA				 DB 10h,( L4850)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 60
msx_asm\tur_comp.ASM



1  3364	    0D55  1B				 DB 1bh
1  3365	    0D56  7A				 DB 7ah
1  3366	    0D57  B3				 DB 0b3h
1  3367	    0D58  20 F3				  DB 20h,(L484E)-$-1		    ; until no more to go
1  3368
1  3369	    0D5A  C3				  DB 0c3h
1  3370	    0D5B  0B66r				 DW  L46B3
1  3371
1  3372	    0D5D  FE 08			 L485E:	 DB 0feh, 8			 ; word	is 'BEGIN' ?
1  3373	    0D5F  28 08				 DB 28h,(L486A)-$-1
1  3374
1  3375						 ; A = 5, PROCEDURE found
1  3376						 ; A = 6, FUNCTION found
1  3377	    0D61  1E 00				 DB 1eh,0			 ; this	procedure, function is not an overlay
1  3378	    0D63  CD				 DB 0cdh
1  3379	    0D64  1089r				 DW  L4B3A
1  3380	    0D66  C3				 DB 0c3h
1  3381	    0D67  0B66r				 DW  L46B3
1  3382
1  3383	    0D69			 L486A:	 ; parses the word BEGIN
1  3384	    0D69  CD				 DB 0cdh
1  3385	    0D6A  1438r				 DW  L4E8A
1  3386	    0D6C  D1				 DB 0d1h		 ; DE =	address	of allocated memory
1  3387	    0D6D  E1				 DB 0e1h		 ; HL =	address	after 'JP' opcode
1  3388	    0D6E  D5				 DB 0d5h		 ; save	address	of allocated memory
1  3389
1  3390	    0D6F  FD E5				 DB 0fdh,0e5h
1  3391	    0D71  D1				 DB 0d1h		 ; DE =	IY
1  3392
1  3393	    0D72  1B				 DB 1bh
1  3394	    0D73  1B				 DB 1bh			 ; DE -	2
1  3395
1  3396	    0D74  B7				 DB 0b7h
1  3397	    0D75  ED 52				 DB 0EDH,052h		 ; set flags at	HL - DE
1  3398					 ;!	 pushf
1  3399	    0D77  19				 DB 019h	 ; restore HL
1  3400					 ;!	 popf
1  3401	    0D78  28 05				 DB 28h,(L4880)-$-1		 ; no more code	generated ?
1  3402
1  3403	    0D7A  CD				  DB 0cdh
1  3404	    0D7B  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  3405	    0D7D  18 04				 DB 18h,( L4884)-$-1
1  3406
1  3407	    0D7F  2B			 L4880:	 DB 2bh			 ; dispose 'JP'	opcode
1  3408
1  3409	    0D80  CD				  DB 0cdh
1  3410	    0D81  2E20r				 DW  L6CC2
1  3411
1  3412
1  3413	    0D83  D1			 L4884:	 DB 0d1h		 ; DE =	address	of allocated memory
1  3414	    0D84  E1				 DB 0e1h		 ; HL =	address	of allocated memory
1  3415	    0D85  22				 DB 22h
1  3416	    0D86  3F84r				 DW L7BCA
1  3417	    0D88  F1				 DB 0f1h		 ; A = pushed value of (WITHDEPTH)
1  3418	    0D89  32				 DB 32h
1  3419	    0D8A  3F80r				 DW L7BC6
1  3420	    0D8C  C9				 DB 0c9h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 61
msx_asm\tur_comp.ASM



1  3421
1  3422	    0D8D			 L488E:	 ; SYNTAX: label-declaration-part ::= LABEL label {, label } ;
1  3423						 ; reserved word LABEL already parsed
1  3424	    0D8D  11				 DB 11h
1  3425	    0D8E  0100				 DW 100H
1  3426	    0D90  CD				  DB 0cdh
1  3427	    0D91  2F17r				 DW  L6D75		   ; add DE to id table
1  3428
1  3429	    0D93  DD 7E	00			 DB 0ddh,7eh,+0
1  3430	    0D96  CD				 DB 0cdh
1  3431	    0D97  34A7r				 DW  L7282		 ; letter, underscore or decimal ?
1  3432
1  3433	    0D99  CD				 DB 0cdh
1  3434	    0D9A  2F39r				 DW  L6D8D		 ; carry set --> error
1  3435									 ; error 58: Illegal character in identifier
1  3436	    0D9C  3A				 DB 3ah
1  3437	    0D9D  3F4Er				 DW L7B94
1  3438	    0D9F  CD				 DB 0cdh
1  3439	    0DA0  2F26r				 DW  L6D7A		 ; add byte to id table
1  3440
1  3441	    0DA2  06 03				 DB 06h,3
1  3442	    0DA4  3E FF			 L48A5:	 DB 3eh,0FFH
1  3443	    0DA6  CD				 DB 0cdh
1  3444	    0DA7  2F26r				 DW  L6D7A		 ; add byte to id table
1  3445	    0DA9  10 F9				 DB 10h,( L48A5)-$-1
1  3446
1  3447	    0DAB  CD				 DB 0cdh
1  3448	    0DAC  2F72r				 DW  L6DC6		 ; add length
1  3449	    0DAE  CD				 DB 0cdh
1  3450	    0DAF  317Br				 DW  L6F13		 ; match(','), if present
1  3451	    0DB1  28 DA				 DB 28h,(L488E)-$-1		 ; yes,	add next id
1  3452
1  3453	    0DB3  C3				 DB 0c3h
1  3454	    0DB4  31B0r				 DW  L6F48		 ; match(';')
1  3455
1  3456	    0DB6  2A			 L48B7:	 DB 02ah
1  3457	    0DB7  3F2Dr				 DW L7B73
1  3458	    0DB9  E5				 DB 0e5h		 ; push	for later setting of type
1  3459
1  3460	    0DBA  11				 DB 11h
1  3461	    0DBB  0000				 DW 0000
1  3462	    0DBD  CD				 DB 0cdh
1  3463	    0DBE  2F17r				 DW  L6D75		 ; add DE to id	table
1  3464	    0DC0  CD				 DB 0cdh
1  3465	    0DC1  2F33r				 DW  L6D87		 ; add identifier to id	table
1  3466	    0DC3  CD				 DB 0cdh
1  3467	    0DC4  318Br				 DW  L6F23		 ; match('='), if present
1  3468	    0DC6  20 48				 DB 20h,(L4901)-$-1		 ; jump	if '=' not matched
1  3469
1  3470	    0DC8  3E FF				 DB 3eh,0FFH		 ; default type	= INTEGER / LONGINT
1  3471	    0DCA  32				 DB 32h
1  3472	    0DCB  2036r				 DW DEF_TYPE
1  3473	    0DCD  CD				 DB 0cdh
1  3474	    0DCE  2AECr				 DW  L6A0D		 ; parse a constant of any type
1  3475
1  3476	    0DD0  78				 DB 78h			 ; A = type
1  3477	    0DD1  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 62
msx_asm\tur_comp.ASM



1  3478	    0DD2  2F26r				 DW  L6D7A		 ; add type (byte) to id table
1  3479	    0DD4  78				 DB 78h
1  3480	    0DD5  FE 09				 DB 0feh, 9			 ; constant type = REAL	?
1  3481	    0DD7  20 0E				 DB 20h,(L48DB1)-$-1		 ; jump	if not
1  3482
1  3483						 ; add real value (6 bytes) to id table
1  3484	    0DD9  D9				 DB 0d9h
1  3485	    0DDA  E5				 DB 0e5h
1  3486	    0DDB  D5				 DB 0d5h
1  3487	    0DDC  C5				 DB 0c5h
1  3488	    0DDD  06 03				 DB 06h,3
1  3489
1  3490	    0DDF  D1			 L48DB:	 DB 0d1h
1  3491	    0DE0  CD				 DB 0cdh
1  3492	    0DE1  2F17r				 DW  L6D75		 ; add DE to id	table
1  3493	    0DE3  10 FA				 DB 10h,( L48DB)-$-1
1  3494	    0DE5  18 22				 DB 18h,( L48FA)-$-1
1  3495
1  3496	    0DE7  FE 0E			 L48DB1: DB 0feh, 0EH			 ; type	= LONGINT ?
1  3497	    0DE9  20 07				 DB 20h,(L48E3)-$-1		 ; jump	if not
1  3498
1  3499						 ; add longint value (4	bytes) to id table
1  3500	    0DEB  D9				 DB 0d9h
1  3501	    0DEC  E5				 DB 0e5h
1  3502	    0DED  D5				 DB 0d5h
1  3503	    0DEE  06 02				 DB 06h,2			 ; add 2 words
1  3504	    0DF0  18 ED				 DB 18h,( L48DB)-$-1
1  3505
1  3506	    0DF2  FE 08			 L48E3:	 DB 0feh, 8			 ; type	= STRING ?
1  3507	    0DF4  20 0F				 DB 20h,(L48F6)-$-1		 ; jump	if not
1  3508
1  3509	    0DF6  21				 DB 21h
1  3510	    0DF7  3E11r				 DW L7A57
1  3511	    0DF9  79				 DB 79h
1  3512	    0DFA  0C				 DB 0ch
1  3513
1  3514	    0DFB  CD			 L48EC:	 DB 0cdh
1  3515	    0DFC  2F26r				 DW  L6D7A		 ; add byte to id table
1  3516	    0DFE  7E				 DB 7eh
1  3517	    0DFF  23				 DB 23h
1  3518	    0E00  0D				 DB 0dh
1  3519	    0E01  20 F8				 DB 20h,(L48EC)-$-1
1  3520	    0E03  18 04				 DB 18h,( L48FA)-$-1
1  3521
1  3522	    0E05  EB			 L48F6:	 DB 0ebh
1  3523	    0E06  CD				 DB 0cdh
1  3524	    0E07  2F17r				 DW  L6D75		 ; add DE to id	table
1  3525
1  3526	    0E09  CD			 L48FA:	 DB 0cdh
1  3527	    0E0A  2F72r				 DW  L6DC6		 ; add length
1  3528	    0E0C  16 02				 DB 16h,2			 ; id type = constant
1  3529	    0E0E  18 27				 DB 18h,( L4928)-$-1
1  3530
1  3531	    0E10  CD			 L4901:	 DB 0cdh
1  3532	    0E11  31A8r				 DW  L6F40		 ; match(':')
1  3533	    0E13  AF				 DB 0afh
1  3534	    0E14  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 63
msx_asm\tur_comp.ASM



1  3535	    0E15  2F26r				 DW  L6D7A		 ; add byte to id table
1  3536	    0E17  CD				 DB 0cdh
1  3537	    0E18  2F14r				 DW  L6D72		 ; add IY to id	table
1  3538									 ; start of constant address
1  3539
1  3540	    0E1A  2A				 DB 02ah
1  3541	    0E1B  3F2Dr				 DW L7B73
1  3542	    0E1D  E5				 DB 0e5h		 ; push	for later setting of type
1  3543
1  3544	    0E1E  CD				 DB 0cdh
1  3545	    0E1F  2F17r				 DW  L6D75		 ; add DE to id	table
1  3546	    0E21  CD				 DB 0cdh
1  3547	    0E22  2F72r				 DW  L6DC6		 ; add length
1  3548
1  3549	    0E24  CD				 DB 0cdh
1  3550	    0E25  1559r				 DW  L4F9B		 ; parse every possible	type
1  3551
1  3552	    0E27  E1				 DB 0e1h
1  3553	    0E28  ED 5B				 DB 0edh,5bh
1  3554	    0E2A  3F14r				 DW L7B5A
1  3555	    0E2C  72				 DB 72h
1  3556	    0E2D  2B				 DB 2bh
1  3557	    0E2E  73				 DB 73h
1  3558	    0E2F  CD				 DB 0cdh
1  3559	    0E30  31DEr				 DW  L6F76		 ; match('=')
1  3560
1  3561	    0E32  CD				 DB 0cdh
1  3562	    0E33  0E47r				 DW  L4937
1  3563	    0E35  16 04				 DB 16h,4
1  3564
1  3565	    0E37  E1			 L4928:	 DB 0e1h
1  3566	    0E38  72				 DB 72h
1  3567	    0E39  CD				 DB 0cdh
1  3568	    0E3A  31B0r				 DW  L6F48		 ; match(';')
1  3569	    0E3C  CD				 DB 0cdh
1  3570	    0E3D  30C2r				 DW  L6E5A
1  3571	    0E3F  01				 DB 1			 ; 1 byte following
1  3572	    0E40  3859r				 DW L7584		 ; start of reserved word list:
1  3573									 ; LABEL, CONST, TYPE, VAR, BEGIN, OVERLAY
1  3574									 ; PROCEDURE, FUNCTION
1  3575
1  3576	    0E42  C2				 DB 0c2h
1  3577	    0E43  0DB6r				 DW L48B7		 ; jump	if none	of these reserved words
1  3578									 ; repeat for next constant
1  3579
1  3580	    0E45  7E				 DB 7eh
1  3581	    0E46  C9				 DB 0c9h
1  3582
1  3583	    0E47  3A			 L4937:	 DB 3ah
1  3584	    0E48  3F16r				 DW L7B5C		 ; A = type
1  3585	    0E4A  32				 DB 32h
1  3586	    0E4B  2036r				 DW DEF_TYPE
1  3587	    0E4D  FE 04				 DB 0feh, 4
1  3588	    0E4F  38 08				 DB 38h,(L4946)-$-1		 ; jump	if type	= 0, 1,	2 or 3 (SET)
1  3589
1  3590	    0E51  FE 08				 DB 0feh, 8
1  3591	    0E53  30 04				 DB 30h,(L4946)-$-1		 ; jump	if STRING, REAL, INTEGER, BOOLEAN,
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 64
msx_asm\tur_comp.ASM



1  3592									 ;	  CHAR,	LONGINT
1  3593
1  3594	    0E55  CD				 DB 0cdh
1  3595	    0E56  34ECr				 DW  L72E1		 ; no condition
1  3596	    0E58  3D				 DB 3DH			 ; error 61: Files and pointers	are
1  3597									 ;	     not allowed here
1  3598	    0E59  FE 01			 L4946:	 DB 0feh, 1
1  3599	    0E5B  20 57				 DB 20h,(L49A1)-$-1
1  3600
1  3601						 ; type	= 1
1  3602	    0E5D  CD				 DB 0cdh
1  3603	    0E5E  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  3604
1  3605	    0E60  2A				 DB 02ah
1  3606	    0E61  3F1Ar				 DW L7B60
1  3607	    0E63  CD				 DB 0cdh
1  3608	    0E64  183Ar				 DW  L5271		 ; 8 bytes from	HL (down) to 7B69 (up)
1  3609
1  3610	    0E66  2A				 DB 02ah
1  3611	    0E67  3F27r				 DW L7B6D
1  3612	    0E69  ED 5B				 DB 0edh,5bh
1  3613	    0E6B  3F25r				 DW L7B6B
1  3614	    0E6D  B7				 DB 0b7h
1  3615	    0E6E  ED 52				 DB 0EDH,052h
1  3616	    0E70  23				 DB 23h
1  3617	    0E71  E5				 DB 0e5h
1  3618	    0E72  2A				 DB 02ah
1  3619	    0E73  3F18r				 DW L7B5E		 ; HL =	address	of type	definition
1  3620	    0E75  CD				 DB 0cdh
1  3621	    0E76  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  3622									 ; get all information from this type
1  3623	    0E78  D1				 DB 0d1h
1  3624	    0E79  3A				 DB 3ah
1  3625	    0E7A  3F16r				 DW L7B5C
1  3626	    0E7C  FE 0C				 DB 0feh, 0CH
1  3627	    0E7E  20 0B				 DB 20h,(L4978)-$-1
1  3628	    0E80  7A				 DB 7ah
1  3629	    0E81  B7				 DB 0b7h
1  3630	    0E82  20 07				 DB 20h,(L4978)-$-1
1  3631	    0E84  CD				 DB 0cdh
1  3632	    0E85  3183r				 DW  L6F1B		 ; match('('), if present
1  3633	    0E87  20 14				 DB 20h,(L498A)-$-1		 ; jump	if '(' not matched
1  3634	    0E89  18 03				 DB 18h,( L497B)-$-1
1  3635
1  3636	    0E8B  CD			 L4978:	 DB 0cdh
1  3637	    0E8C  31CEr				 DW  L6F66		 ; match('(')
1  3638	    0E8E  D5			 L497B:	 DB 0d5h
1  3639
1  3640	    0E8F  CD				 DB 0cdh
1  3641	    0E90  0E47r				 DW  L4937
1  3642
1  3643	    0E92  D1				 DB 0d1h
1  3644	    0E93  1B				 DB 1bh
1  3645	    0E94  7A				 DB 7ah
1  3646	    0E95  B3				 DB 0b3h
1  3647	    0E96  28 15				 DB 28h,(L499A)-$-1
1  3648	    0E98  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 65
msx_asm\tur_comp.ASM



1  3649	    0E99  31C6r				 DW  L6F5E		 ; match(',')
1  3650	    0E9B  18 F1				 DB 18h,( L497B)-$-1
1  3651
1  3652	    0E9D  D5			 L498A:	 DB 0d5h
1  3653	    0E9E  CD				 DB 0cdh
1  3654	    0E9F  2ADCr				 DW  L69FD		 ; parse string	constant
1  3655	    0EA1  D1				 DB 0d1h
1  3656	    0EA2  79				 DB 79h
1  3657	    0EA3  BB				 DB 0bbh
1  3658
1  3659	    0EA4  CD				 DB 0cdh
1  3660	    0EA5  34E5r				 DW  L72DA		 ; NonZero --> error
1  3661	    0EA7  32				 DB 32H			 ; error 50: String constant length does not
1  3662									 ;	     match type
1  3663	    0EA8  CD				 DB 0cdh
1  3664	    0EA9  2CBEr				 DW  L6B62
1  3665	    0EAB  18 03				 DB 18h,( L499D)-$-1
1  3666
1  3667	    0EAD  CD			 L499A:	 DB 0cdh
1  3668	    0EAE  31D6r				 DW  L6F6E		 ; match(')')
1  3669	    0EB0  CD			 L499D:	 DB 0cdh
1  3670	    0EB1  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  3671	    0EB3  C9				 DB 0c9h
1  3672
1  3673	    0EB4  FE 02			 L49A1:	 DB 0feh, 2
1  3674	    0EB6  20 55				 DB 20h,(L49FA)-$-1
1  3675
1  3676						 ; type	= 2
1  3677	    0EB8  CD				 DB 0cdh
1  3678	    0EB9  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  3679	    0EBB  CD				 DB 0cdh
1  3680	    0EBC  31CEr				 DW  L6F66		 ; match('(')
1  3681	    0EBE  3A				 DB 3ah
1  3682	    0EBF  3F17r				 DW L7B5D
1  3683	    0EC1  4F				 DB 4fh
1  3684	    0EC2  2A				 DB 02ah
1  3685	    0EC3  3F1Cr				 DW L7B62		 ; HL =	length
1  3686	    0EC5  E5				 DB 0e5h
1  3687	    0EC6  21				 DB 21h
1  3688	    0EC7  0000				 DW 0000
1  3689	    0EC9  C5			 L49B6:	 DB 0c5h
1  3690	    0ECA  E5				 DB 0e5h
1  3691	    0ECB  06 04				 DB 06h,4			 ; variable identifier ?
1  3692	    0ECD  CD				 DB 0cdh
1  3693	    0ECE  30BCr				 DW  L6E54		 ; check if current in id list
1  3694									 ; HL =	address	of info
1  3695
1  3696	    0ED0  CD				 DB 0cdh
1  3697	    0ED1  34E5r				 DW  L72DA		 ; NonZero --> error
1  3698	    0ED3  29				 DB 29H			 ; error 41: Unknown identifier	or syntax
1  3699									 ;	    error
1  3700
1  3701	    0ED4  CD				 DB 0cdh
1  3702	    0ED5  183Fr				 DW  L5276		 ; id info at 7B5C
1  3703	    0ED7  D1				 DB 0d1h
1  3704	    0ED8  2A				 DB 02ah
1  3705	    0ED9  3F12r				 DW L7B58		 ; HL =	lvalue of current id
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 66
msx_asm\tur_comp.ASM



1  3706	    0EDB  B7				 DB 0b7h
1  3707	    0EDC  ED 52				 DB 0EDH,052h
1  3708					 ;!	 pushf
1  3709	    0EDE  19				 DB 019h
1  3710					 ;!	 popf
1  3711
1  3712	    0EDF  CD				 DB 0cdh
1  3713	    0EE0  34E5r				 DW  L72DA		 ; NonZero --> error
1  3714	    0EE2  45				 DB 45H			 ; error 69: Invalid ordering of fields
1  3715
1  3716	    0EE3  ED 5B				 DB 0edh,5bh
1  3717	    0EE5  3F1Cr				 DW L7B62		 ; DE =	length
1  3718	    0EE7  19				 DB 019h
1  3719	    0EE8  E5				 DB 0e5h
1  3720	    0EE9  CD				 DB 0cdh
1  3721	    0EEA  31A8r				 DW  L6F40		 ; match(':')
1  3722
1  3723	    0EEC  CD				 DB 0cdh
1  3724	    0EED  0E47r				 DW  L4937
1  3725
1  3726	    0EEF  E1				 DB 0e1h
1  3727	    0EF0  C1				 DB 0c1h
1  3728	    0EF1  CD				 DB 0cdh
1  3729	    0EF2  3177r				 DW  L6F0F		 ; match(';'), if present
1  3730	    0EF4  28 D3				 DB 28h,(L49B6)-$-1		 ; jump	if ';' matched
1  3731	    0EF6  CD				 DB 0cdh
1  3732	    0EF7  31D6r				 DW  L6F6E		 ; match(')')
1  3733	    0EF9  D1				 DB 0d1h
1  3734	    0EFA  EB				 DB 0ebh
1  3735	    0EFB  B7				 DB 0b7h
1  3736	    0EFC  ED 52				 DB 0EDH,052h
1  3737	    0EFE  7C			 L49EB:	 DB 7ch
1  3738	    0EFF  B5				 DB 0b5h
1  3739	    0F00  28 07				 DB 28h,(L49F6)-$-1
1  3740	    0F02  AF				 DB 0afh
1  3741	    0F03  CD				 DB 0cdh
1  3742	    0F04  2CF8r				 DW  O_BYTE
1  3743	    0F06  2B				 DB 2bh
1  3744	    0F07  18 F5				 DB 18h,( L49EB)-$-1
1  3745	    0F09  CD			 L49F6:	 DB 0cdh
1  3746	    0F0A  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  3747	    0F0C  C9				 DB 0c9h
1  3748
1  3749	    0F0D  FE 03			 L49FA:	 DB 0feh, 3			 ; type	= SET ?
1  3750	    0F0F  20 7C				 DB 20h,(L4A7A)-$-1		 ; jump	if not
1  3751
1  3752						 ; type	= SET
1  3753	    0F11  CD				 DB 0cdh
1  3754	    0F12  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  3755	    0F14  2A				 DB 02ah
1  3756	    0F15  3F1Cr				 DW L7B62		 ; HL =	length
1  3757	    0F17  22				 DB 22h
1  3758	    0F18  3F29r				 DW L7B6F
1  3759	    0F1A  2A				 DB 02ah
1  3760	    0F1B  3F18r				 DW L7B5E		 ; HL =	address	of type	definition
1  3761	    0F1D  CD				 DB 0cdh
1  3762	    0F1E  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 67
msx_asm\tur_comp.ASM



1  3763	    0F20  CD				 DB 0cdh
1  3764	    0F21  3198r				 DW  L6F30		 ; match('[')
1  3765
1  3766	    0F23  22DD 3F63r			 DW 22ddh,L7BA9		 ; save	temporary
1  3767	    0F27  CD				 DB 0cdh
1  3768	    0F28  0000e				 DW  L0581		 ; LIB,	push new empty SET on stack
1  3769	    0F2A  DD 2A				 DB 0ddh,02ah
1  3770	    0F2C  3F63r				 DW L7BA9		 ; restore text	pointer
1  3771
1  3772	    0F2E  CD				 DB 0cdh
1  3773	    0F2F  315Fr				 DW  L6EF7		 ; match(']') or match('.)')
1  3774	    0F31  28 2B				 DB 28h,(L4A4B)-$-1		 ; jump	if matched
1  3775
1  3776	    0F33  CD			 L4A20:	 DB 0cdh
1  3777	    0F34  1016r				 DW  L4ACA
1  3778	    0F36  E5				 DB 0e5h
1  3779
1  3780	    0F37  CD				 DB 0cdh
1  3781	    0F38  30DEr				 DW  L6E76
1  3782	    0F3A  3855r				 DW L7580		 ; start of reserved word: ..
1  3783	    0F3C  20 0C				 DB 20h,(L4A37)-$-1		 ; jump	if no '..'
1  3784
1  3785	    0F3E  CD				 DB 0cdh
1  3786	    0F3F  1016r				 DW  L4ACA
1  3787
1  3788	    0F41  22DD 3F63r			 DW 22ddh,L7BA9		 ; save	temporary
1  3789	    0F45  CD				 DB 0cdh
1  3790	    0F46  0000e				 DW  L059B		 ; LIB
1  3791	    0F48  18 08				 DB 18h,( L4A3F)-$-1
1  3792
1  3793	    0F4A  E1			 L4A37:	 DB 0e1h
1  3794	    0F4B  22DD 3F63r			 DW 22ddh,L7BA9		 ; save	temporary
1  3795
1  3796	    0F4F  CD				 DB 0cdh
1  3797	    0F50  0000e				 DW  L0591		 ; LIB
1  3798
1  3799	    0F52  DD 2A			 L4A3F:	 DB 0ddh,02ah
1  3800	    0F54  3F63r				 DW L7BA9		 ; restore text	pointer
1  3801	    0F56  CD				 DB 0cdh
1  3802	    0F57  317Br				 DW  L6F13		 ; match(','), if present
1  3803	    0F59  28 D8				 DB 28h,(L4A20)-$-1		 ; jump	if ',' matched
1  3804	    0F5B  CD				 DB 0cdh
1  3805	    0F5C  31A0r				 DW  L6F38		 ; match(']')
1  3806
1  3807	    0F5E  21			 L4A4B:	 DB 21h
1  3808	    0F5F  3E11r				 DW L7A57
1  3809	    0F61  01				 DB 01h
1  3810	    0F62  0020				 DW 0020H
1  3811
1  3812	    0F64  22DD 3F63r			 DW 22ddh,L7BA9		 ; save	temporary
1  3813	    0F68  CD				 DB 0cdh
1  3814	    0F69  0000e				 DW  L0612		 ; LIB,	copy pushed set	to the address in HL
1  3815	    0F6B  DD 2A				 DB 0ddh,02ah
1  3816	    0F6D  3F63r				 DW L7BA9		 ; restore text	pointer
1  3817
1  3818	    0F6F  21				 DB 21h
1  3819	    0F70  3E11r				 DW L7A57
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 68
msx_asm\tur_comp.ASM



1  3820	    0F72  3A				 DB 3ah
1  3821	    0F73  3F18r				 DW L7B5E
1  3822	    0F75  1F				 DB 1fh
1  3823	    0F76  1F				 DB 1fh
1  3824	    0F77  1F				 DB 1fh
1  3825	    0F78  E6 1F				 DB 0e6h, 1FH
1  3826	    0F7A  5F				 DB 5fh
1  3827	    0F7B  16 00				 DB 16h,0
1  3828	    0F7D  19				 DB 019h
1  3829	    0F7E  3A				 DB 3ah
1  3830	    0F7F  3F29r				 DW L7B6F
1  3831	    0F81  47				 DB 47h
1  3832	    0F82  7E			 L4A6F:	 DB 7eh
1  3833	    0F83  CD				 DB 0cdh
1  3834	    0F84  2CF8r				 DW  O_BYTE
1  3835	    0F86  23				 DB 23h
1  3836	    0F87  10 F9				 DB 10h,( L4A6F)-$-1
1  3837	    0F89  CD				 DB 0cdh
1  3838	    0F8A  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  3839	    0F8C  C9				 DB 0c9h
1  3840
1  3841	    0F8D  FE 08			 L4A7A:	 DB 0feh, 8			 ; type	= STRING ?
1  3842	    0F8F  20 1B				 DB 20h,(L4A99)-$-1
1  3843
1  3844						 ; type	= STRING
1  3845						 ; typed string	constant
1  3846	    0F91  CD				 DB 0cdh
1  3847	    0F92  2ADCr				 DW  L69FD		 ; parse string	constant
1  3848
1  3849	    0F94  3A				 DB 3ah
1  3850	    0F95  3F1Cr				 DW L7B62		 ; A = length of constant type
1  3851	    0F97  3D				 DB 3dh			 ; minus 1 for length byte
1  3852
1  3853	    0F98  91				 DB 091h		 ; - string constant length
1  3854	    0F99  47				 DB 47h
1  3855
1  3856	    0F9A  30 04				 DB 30h,(L4A8D)-$-1
1  3857
1  3858						 ; constant type < string constant
1  3859	    0F9C  81				 DB 081h		 ; restore type	length - 1
1  3860	    0F9D  4F				 DB 4fh			 ; copy	constant type bytes
1  3861	    0F9E  06 00				 DB 06h,0			 ; no padding at the end
1  3862
1  3863	    0FA0  CD			 L4A8D:	 DB 0cdh
1  3864	    0FA1  2CBAr				 DW  L6B5E		 ; output length (C) and data at L7A57
1  3865	    0FA3  04				 DB 04h
1  3866	    0FA4  05			 L4A91:	 DB 05h
1  3867	    0FA5  C8				 DB 0c8h
1  3868	    0FA6  AF				 DB 0afh
1  3869	    0FA7  CD				 DB 0cdh
1  3870	    0FA8  2CF8r				 DW  O_BYTE
1  3871	    0FAA  18 F8				 DB 18h,( L4A91)-$-1
1  3872
1  3873	    0FAC  FE 09			 L4A99:	 DB 0feh, 9			 ; type	= REAL ?
1  3874	    0FAE  20 2A				 DB 20h,(L4ABC)-$-1
1  3875
1  3876						 ; type	= REAL
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 69
msx_asm\tur_comp.ASM



1  3877	    0FB0  CD				 DB 0cdh
1  3878	    0FB1  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  3879									 ; error if not	found
1  3880	    0FB3  78				 DB 78h
1  3881	    0FB4  FE 09				 DB 0feh, 9			 ; type	= REAL ?
1  3882	    0FB6  28 0E				 DB 28h,(L4AAF)-$-1		 ; jump	if type	= REAL,	no conversion
1  3883
1  3884	    0FB8  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  3885	    0FBA  28 17				 DB 28h,(L4AAF1)-$-1		 ; jump	if type	= LONGINT, L_R
1  3886
1  3887	    0FBC  FE 0A				 DB 0feh, 0AH			 ; type	= INTEGER ?
1  3888
1  3889	    0FBE  CD				 DB 0cdh
1  3890	    0FBF  34E5r				 DW  L72DA		 ; NonZero --> error
1  3891	    0FC1  19				 DB 19H			 ; error 25: Integer, real or longint
1  3892									 ;	    constant expected
1  3893
1  3894	    0FC2  CD				 DB 0cdh
1  3895	    0FC3  0000e				 DW  L1008		 ; convert integer HL to REAL HLDEBC
1  3896	    0FC5  D9				 DB 0d9h
1  3897
1  3898	    0FC6			 L4AAF:	 ; output data for REAL	constant
1  3899	    0FC6  D9				 DB 0d9h
1  3900	    0FC7  C5				 DB 0c5h
1  3901	    0FC8  D5				 DB 0d5h
1  3902	    0FC9  E5				 DB 0e5h
1  3903	    0FCA  06 03				 DB 06h,3			 ; output 3 words
1  3904
1  3905	    0FCC  E1			 L4AB5:	 DB 0e1h
1  3906	    0FCD  CD				 DB 0cdh
1  3907	    0FCE  2CF3r				 DW  O_HL
1  3908	    0FD0  10 FA				 DB 10h,( L4AB5)-$-1
1  3909	    0FD2  C9				 DB 0c9h
1  3910
1  3911	    0FD3			 L4AAF1: ; output data for LONGINT constant
1  3912	    0FD3  D9				 DB 0d9h
1  3913	    0FD4  CD				 DB 0cdh
1  3914	    0FD5  0000e				 DW  L_R		 ; convert longint DEHL	to REAL	HLDEBC
1  3915	    0FD7  D9				 DB 0d9h
1  3916	    0FD8  18 EC				 DB 18h,( L4AAF)-$-1
1  3917
1  3918	    0FDA  FE 0E			 L4ABC:	 DB 0feh, 0EH			 ; type	= LONGINT ?
1  3919	    0FDC  20 2A				 DB 20h,(L4ABC1)-$-1
1  3920
1  3921						 ; type	= LONGINT
1  3922	    0FDE  CD				 DB 0cdh
1  3923	    0FDF  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  3924									 ; error if not	found
1  3925	    0FE1  78				 DB 78h
1  3926	    0FE2  FE 09				 DB 0feh, 9			 ; type	= REAL ?
1  3927	    0FE4  CD				 DB 0cdh
1  3928	    0FE5  34DFr				 DW  L72D4		 ; Zero	--> error
1  3929	    0FE7  2C				 DB 2CH			 ; error 44: Type mismatch
1  3930
1  3931	    0FE8  D9				 DB 0d9h		 ; DEHL	= value
1  3932	    0FE9  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  3933	    0FEB  28 0A				 DB 28h,(OUT_LONG)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 70
msx_asm\tur_comp.ASM



1  3934	    0FED  D9				 DB 0d9h		 ; HL =	integer	value
1  3935
1  3936	    0FEE  FE 0A				 DB 0feh, 0AH			 ; type	= INTEGER ?
1  3937	    0FF0  CD				 DB 0cdh
1  3938	    0FF1  34E5r				 DW  L72DA		 ; NonZero --> error
1  3939	    0FF3  2C				 DB 2CH			 ; error 44: Type mismatch
1  3940
1  3941	    0FF4  CD				 DB 0cdh
1  3942	    0FF5  1000r				 DW  I_L		 ; convert integer HL to longint DEHL
1  3943
1  3944	    0FF7			 OUT_LONG:
1  3945	    0FF7  CD				 DB 0cdh
1  3946	    0FF8  2CF3r				 DW  O_HL
1  3947	    0FFA  EB				 DB 0ebh
1  3948	    0FFB  CD				 DB 0cdh
1  3949	    0FFC  2CF3r				 DW  O_HL
1  3950	    0FFE  EB				 DB 0ebh
1  3951	    0FFF  C9				 DB 0c9h
1  3952
1  3953	    1000			 I_L:	 ; in:	 HL = INTEGER, signed
1  3954						 ; out:	 DEHL =	LONGINT, signed
1  3955	    1000  11				 DB 11h
1  3956	    1001  0000				 DW 0
1  3957	    1003  CB 7C				 DB 0cbh,07ch
1  3958	    1005  C8				 DB 0c8h		 ; return if integer is	positive
1  3959
1  3960	    1006  1B				 DB 1bh			 ; make	long negative
1  3961	    1007  C9				 DB 0c9h
1  3962
1  3963	    1008  CD			 L4ABC1: DB 0cdh
1  3964	    1009  1016r				 DW  L4ACA		 ; make	constant range check
1  3965	    100B  3A				 DB 3ah
1  3966	    100C  3F1Cr				 DW L7B62
1  3967	    100E  3D				 DB 3dh			 ; length = 1 ?
1  3968	    100F  7D				 DB 7dh
1  3969	    1010  CA				 DB 0cah
1  3970	    1011  2CF8r				 DW O_BYTE		 ; output data
1  3971	    1013  C3				 DB 0c3h
1  3972	    1014  2CF3r				 DW  O_HL
1  3973
1  3974	    1016			 L4ACA:	 ; make	constant range check
1  3975	    1016  CD				 DB 0cdh
1  3976	    1017  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  3977									 ; error if not	found
1  3978	    1019  3A				 DB 3ah
1  3979	    101A  3F16r				 DW L7B5C
1  3980	    101C  B8				 DB 0b8h		 ; equal types ?
1  3981
1  3982	    101D  CD				 DB 0cdh
1  3983	    101E  34E5r				 DW  L72DA		 ; NonZero --> error
1  3984	    1020  2C				 DB 2CH			 ; error 44: Type mismatch
1  3985
1  3986	    1021  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  3987	    1023  C8				 DB 0c8h		 ; no range check
1  3988
1  3989	    1024  ED 5B				 DB 0edh,5bh
1  3990	    1026  3F18r				 DW L7B5E		 ; DE =	minimum	value
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 71
msx_asm\tur_comp.ASM



1  3991	    1028  CD				 DB 0cdh
1  3992	    1029  34B2r				 DW  L728D		 ; check if lower bound	<= upper bound
1  3993
1  3994	    102B  38 09				 DB 38h,(L4AE7)-$-1		 ; jump	if lower bound > upper bound
1  3995
1  3996	    102D  ED 5B				 DB 0edh,5bh
1  3997	    102F  3F1Ar				 DW L7B60		 ; DE =	maximum	value
1  3998	    1031  CD				 DB 0cdh
1  3999	    1032  34B2r				 DW  L728D		 ; check if lower bound	<= upper bound
1  4000	    1034  D8				 DB 0d8h		 ; return if HL	< maximum value
1  4001	    1035  C8				 DB 0c8h		 ; return if HL	= maximum value
1  4002
1  4003	    1036  CD			 L4AE7:	 DB 0cdh
1  4004	    1037  34ECr				 DW  L72E1		 ; no condition
1  4005	    1039  2D				 DB 2DH			 ; error 45: constant out of range
1  4006
1  4007	    103A  2A			 L4AEB:	 DB 02ah
1  4008	    103B  3F2Dr				 DW L7B73
1  4009	    103D  E5				 DB 0e5h
1  4010	    103E  2A			 L4AEF:	 DB 02ah
1  4011	    103F  3F2Dr				 DW L7B73
1  4012	    1041  E5				 DB 0e5h
1  4013	    1042  11				 DB 11h
1  4014	    1043  0000				 DW 0000
1  4015	    1045  CD				 DB 0cdh
1  4016	    1046  2F17r				 DW  L6D75		 ; add DE to id	table
1  4017									 ; represents the type
1  4018	    1048  CD				 DB 0cdh
1  4019	    1049  2F33r				 DW  L6D87		 ; add identifier to id	table
1  4020
1  4021	    104B  2A				 DB 02ah
1  4022	    104C  3F2Dr				 DW L7B73
1  4023	    104E  E5				 DB 0e5h
1  4024	    104F  CD				 DB 0cdh
1  4025	    1050  2F17r				 DW  L6D75		 ; add DE to id	table
1  4026									 ; will	be filled in later with	pointer	to
1  4027									 ; the type
1  4028	    1052  CD				 DB 0cdh
1  4029	    1053  2F72r				 DW  L6DC6		 ; add length, length is calculated
1  4030	    1055  CD				 DB 0cdh
1  4031	    1056  31DEr				 DW  L6F76		 ; match('=')
1  4032	    1058  CD				 DB 0cdh
1  4033	    1059  1559r				 DW  L4F9B		 ; parse every possible	type
1  4034	    105B  E1				 DB 0e1h
1  4035	    105C  ED 5B				 DB 0edh,5bh
1  4036	    105E  3F14r				 DW L7B5A
1  4037	    1060  72				 DB 72h
1  4038	    1061  2B				 DB 2bh
1  4039	    1062  73				 DB 73h
1  4040	    1063  E1				 DB 0e1h
1  4041	    1064  36 03				 DB 36h,3
1  4042	    1066  CD				 DB 0cdh
1  4043	    1067  31B0r				 DW  L6F48		 ; match(';')
1  4044
1  4045	    1069  CD				 DB 0cdh
1  4046	    106A  30C2r				 DW  L6E5A
1  4047	    106C  01				 DB 1			 ; 1 byte following
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 72
msx_asm\tur_comp.ASM



1  4048	    106D  3859r				 DW L7584		 ; start of reserved word list:
1  4049									 ; LABEL, CONST, TYPE, VAR, BEGIN, OVERLAY
1  4050									 ; PROCEDURE, FUNCTION
1  4051
1  4052	    106F  20 CD				 DB 20h,(L4AEF)-$-1
1  4053	    1071  7E				 DB 7eh
1  4054
1  4055	    1072  E1				 DB 0e1h		 ; address where to stop reference search
1  4056	    1073  F5				 DB 0f5h
1  4057	    1074  CD				 DB 0cdh
1  4058	    1075  185Er				 DW  L5295		 ; update pointer references
1  4059	    1077  F1				 DB 0f1h
1  4060	    1078  C9				 DB 0c9h
1  4061
1  4062						 ; name1, name2	: type_name;
1  4063	    1079  CD			 L4B2A:	 DB 0cdh
1  4064	    107A  14F3r				 DW  L4F35		 ; parse variable declarations
1  4065	    107C  CD				 DB 0cdh
1  4066	    107D  31B0r				 DW  L6F48		 ; match(';')
1  4067
1  4068	    107F  CD				 DB 0cdh
1  4069	    1080  30C2r				 DW  L6E5A
1  4070	    1082  01				 DB 1			 ; 1 byte following
1  4071	    1083  3859r				 DW L7584		 ; start of reserved word list:
1  4072									 ; LABEL, CONST, TYPE, VAR, BEGIN, OVERLAY
1  4073									 ; PROCEDURE, FUNCTION
1  4074
1  4075	    1085  20 F2				 DB 20h,(L4B2A)-$-1		 ; no reserved found, parse more names
1  4076	    1087  7E				 DB 7eh		 ; A = number of one of	the reserved words
1  4077	    1088  C9				 DB 0c9h
1  4078
1  4079	    1089  47			 L4B3A:	  DB 47h		     ; B = 5 if	procedure
1  4080									 ; B = 6 if function
1  4081	    108A  0E 00				 DB 0eh,0
1  4082	    108C  D6 05				 DB 0d6h, 5
1  4083	    108E  32				 DB 32h
1  4084	    108F  3F51r				 DW L7B97		 ; 0 = procedure, 1 = function
1  4085
1  4086	    1091  7B			 L4B42:	 DB 7bh
1  4087	    1092  32				  DB 32h
1  4088	    1093  3F53r				 DW L7B99		; 0 = no overlay, 255 =	overlay
1  4089
1  4090	    1095  3A				 DB 3ah
1  4091	    1096  3F57r				 DW L7B9D		 ; compiler directives
1  4092	    1098  32				 DB 32h
1  4093	    1099  3F58r				 DW L7B9E		 ; save	them
1  4094
1  4095	    109B  C5				 DB 0c5h
1  4096	    109C  CD				 DB 0cdh
1  4097	    109D  2F87r				 DW  L6DDB		 ; ID at current position double defined ?
1  4098	    109F  CA				 DB 0cah
1  4099	    10A0  11CFr				 DW L4C61		 ; jump	if double defined
1  4100
1  4101	    10A2  D1				 DB 0d1h		 ; DE =	type
1  4102									 ; D = 5, PROCEDURE
1  4103									 ; D = 6, FUNCTION
1  4104	    10A3  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 73
msx_asm\tur_comp.ASM



1  4105	    10A4  2F17r				 DW  L6D75		 ; add DE to id	table
1  4106	    10A6  CD				 DB 0cdh
1  4107	    10A7  2F33r				 DW  L6D87		 ; add identifier to id	table
1  4108
1  4109	    10A9  2A				 DB 02ah
1  4110	    10AA  3F35r				 DW L7B7B
1  4111	    10AC  E5				 DB 0e5h		 ; save	add position of	first added struct
1  4112
1  4113	    10AD  2A				 DB 02ah
1  4114	    10AE  3F2Fr				 DW L7B75		 ; HL =	start of added PROC/FUNC struct
1  4115	    10B0  22				 DB 22h
1  4116	    10B1  3F35r				 DW L7B7B
1  4117	    10B3  2A				 DB 02ah
1  4118	    10B4  3F2Dr				 DW L7B73
1  4119	    10B6  E5				 DB 0e5h		 ; save	add position after identifier
1  4120									 ; for connection
1  4121	    10B7  CD				  DB 0cdh
1  4122	    10B8  2F17r				 DW  L6D75		   ; add DE to id table, # different types
1  4123	    10BA  CD				  DB 0cdh
1  4124	    10BB  2F17r				 DW  L6D75		   ; add DE to id table, proc/func address
1  4125	    10BD  CD				  DB 0cdh
1  4126	    10BE  2F17r				 DW  L6D75		   ; add DE to id table, function type def.
1  4127	    10C0  CD				  DB 0cdh
1  4128	    10C1  2F17r				 DW  L6D75		   ; add DE to id table, addr function result
1  4129									     ;			   variable
1  4130
1  4131					 ;	   LD DE,(L7BDD)	      ;	save first block of current PROC/FUNC
1  4132					 ;				      ;Ok$$$$, make long word CodeFileStart
1  4133					 ;	   CALL	L6D75		      ;	add DE to id table
1  4134
1  4135	    10C3  ED 5B				  DB 0edh,5bh
1  4136	    10C5  3968r				 DW CODEFILESTART+2
1  4137	    10C7  CD				  DB 0cdh
1  4138	    10C8  2F17r				 DW  L6D75		   ; save high-word of CodeFileStart
1  4139	    10CA  ED 5B				  DB 0edh,5bh
1  4140	    10CC  3966r				 DW CODEFILESTART
1  4141	    10CE  CD				  DB 0cdh
1  4142	    10CF  2F17r				 DW  L6D75		   ; save low-word of CodeFileStart
1  4143
1  4144	    10D1  11				  DB 11h
1  4145	    10D2  0000				 DW 0000		 ; length in bytes of procedure/function code
1  4146	    10D4  3A				  DB 3ah
1  4147	    10D5  3F53r				 DW L7B99
1  4148	    10D7  B7				  DB 0b7h			; Zero = no overlay, NonZero = overlay
1  4149	    10D8  28 01				  DB 28h,(L4B45)-$-1
1  4150	    10DA  1B				  DB 1bh		     ; init at -1, special meaning
1  4151	    10DB			 L4B45:
1  4152					 ;	   LD DE,1
1  4153					 ;	   LD DE,0000		      ;	length in blocks of 128	bytes of
1  4154					 ;				      ;	the largest overlay part
1  4155					 ;				      ;Ok$$$$, becomes length in bytes
1  4156	    10DB  CD				 DB 0cdh
1  4157	    10DC  2F17r				 DW  L6D75		 ; add DE to id	table
1  4158
1  4159	    10DE  CD				 DB 0cdh
1  4160	    10DF  3183r				 DW  L6F1B		 ; match('('), if present
1  4161	    10E1  06 00				 DB 06h,0			 ; assume no dest. type	--> procedure
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 74
msx_asm\tur_comp.ASM



1  4162	    10E3  20 52				 DB 20h,(L4BDA)-$-1		 ; jump	if no '(', thus	no var list
1  4163
1  4164						 ; start loop for different types
1  4165	    10E5  C5			 L4B88:	 DB 0c5h		 ; push	number of different types
1  4166
1  4167	    10E6  2A				 DB 02ah
1  4168	    10E7  3F2Dr				 DW L7B73
1  4169	    10E9  E5				 DB 0e5h		 ; save	position for number of vars with
1  4170									 ; same	type
1  4171	    10EA  CD				 DB 0cdh
1  4172	    10EB  2F17r				 DW  L6D75		 ; add DE to id	table, count + var/no var.
1  4173	    10ED  CD				 DB 0cdh
1  4174	    10EE  2F17r				 DW  L6D75		 ; add DE to id	table, address type defs.
1  4175
1  4176	    10F0  CD				 DB 0cdh
1  4177	    10F1  30DEr				 DW  L6E76
1  4178	    10F3  386Ar				 DW L7595		 ; start of reserved word: VAR
1  4179
1  4180	    10F5  01				 DB 01h
1  4181	    10F6  0000				 DW 0000	 ; B = 0, zero identifiers using same type
1  4182									 ; C = 0, assume no VAR
1  4183	    10F8  20 01				 DB 20h,(L4B9E)-$-1		 ; jump	if no VAR found
1  4184
1  4185	    10FA  0D				 DB 0dh			 ; C = 255, VAR	before definition
1  4186
1  4187	    10FB			 L4B9E:
1  4188	    10FB  C5				 DB 0c5h
1  4189	    10FC  CD				 DB 0cdh
1  4190	    10FD  2F33r				 DW  L6D87		 ; add identifier to id	table
1  4191
1  4192	    10FF  C1				 DB 0c1h
1  4193	    1100  04				 DB 04h			 ; one more identifier using same type
1  4194	    1101  CD				 DB 0cdh
1  4195	    1102  317Br				 DW  L6F13		 ; match(','), if present
1  4196	    1104  28 F5				 DB 28h,(L4B9E)-$-1		 ; jump	if ',' matched,	repeat
1  4197
1  4198	    1106  C5				 DB 0c5h		 ; save	count and VAR flag
1  4199
1  4200	    1107  CD				 DB 0cdh
1  4201	    1108  3173r				 DW  L6F0B		 ; match(':'), if present
1  4202	    110A  20 09				 DB 20h,(L4BB8)-$-1		 ; jump	if ':' not matched
1  4203	    110C  79				 DB 79h
1  4204	    110D  32				 DB 32h
1  4205	    110E  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR parsed
1  4206	    1110  CD				 DB 0cdh
1  4207	    1111  14C6r				 DW  L4F18		 ; L7B5C..L7B63	filled in with type info
1  4208	    1113  18 0B				 DB 18h,( L4BC3)-$-1
1  4209
1  4210	    1115  0C			 L4BB8:	 DB 0ch
1  4211
1  4212	    1116  CD				 DB 0cdh
1  4213	    1117  34E5r				 DW  L72DA		 ; NonZero --> error
1  4214	    1119  02				 DB 2			 ; error 2: ':'	expected
1  4215
1  4216	    111A  21				 DB 21h
1  4217	    111B  37E7r				 DW L7512
1  4218	    111D  22				 DB 22h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 75
msx_asm\tur_comp.ASM



1  4219	    111E  3F14r				 DW L7B5A
1  4220
1  4221	    1120			 L4BC3:	 ; add count and VAR/NO	VAR flag
1  4222	    1120  C1				 DB 0c1h		 ; pop count and VAR flag
1  4223
1  4224	    1121  E1				 DB 0e1h
1  4225	    1122  70				  DB 70h		  ; save count
1  4226	    1123  2B				 DB 2bh
1  4227	    1124  71				  DB 71h		  ; save VAR flag
1  4228
1  4229	    1125  ED 5B				 DB 0edh,5bh
1  4230	    1127  3F14r				 DW L7B5A		 ; DE =	address	of type	definition info
1  4231	    1129  2B				 DB 2bh
1  4232	    112A  72				 DB 72h
1  4233	    112B  2B				 DB 2bh
1  4234	    112C  73				 DB 73h
1  4235
1  4236	    112D  C1				 DB 0c1h		 ; restore number of different types
1  4237	    112E  04				 DB 04h			 ; one more different types
1  4238	    112F  CD				 DB 0cdh
1  4239	    1130  3177r				 DW  L6F0F		 ; match(';'), if present
1  4240	    1132  28 B1				 DB 28h,(L4B88)-$-1		 ; jump	if ';' matched,	repeat for next	var
1  4241
1  4242	    1134  CD				 DB 0cdh
1  4243	    1135  31D6r				 DW  L6F6E		 ; match(')')
1  4244
1  4245	    1137  C5			 L4BDA:	 DB 0c5h		 ; save	number of different types
1  4246	    1138  3A				 DB 3ah
1  4247	    1139  3F51r				 DW L7B97		 ; 0 = proc, 1 = func
1  4248	    113B  B7				 DB 0b7h
1  4249	    113C  28 26				 DB 28h,(L4C07)-$-1		 ; if proc skip	function type
1  4250
1  4251	    113E  CD				 DB 0cdh
1  4252	    113F  31A8r				 DW  L6F40		 ; match(':')
1  4253	    1141  AF				 DB 0afh
1  4254	    1142  32				 DB 32h
1  4255	    1143  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  4256	    1145  CD				 DB 0cdh
1  4257	    1146  14C6r				 DW  L4F18		 ; L7B5C..L7B63	filled in with type info	   ; parse  +
   4258					 type
1  4259	    1148  3A				 DB 3ah
1  4260	    1149  3F16r				 DW L7B5C
1  4261	    114B  FE 08				 DB 0feh, 8			 ; type	= STRING, REAL,	INT, BOOL or CHAR ?
1  4262	    114D  30 06				 DB 30h,(L4BF8)-$-1		 ; yes,	jump
1  4263	    114F  FE 04				 DB 0feh, 4
1  4264
1  4265	    1151  CD				 DB 0cdh
1  4266	    1152  34E5r				 DW  L72DA		 ; NonZero --> error
1  4267	    1154  30				 DB 30H			 ; error 48: Invalid result type
1  4268
1  4269	    1155  C1			 L4BF8:	 DB 0c1h		 ; restore number of different types
1  4270
1  4271	    1156  E1				  DB 0e1h		      ;	HL = address after PROC/FUNC identifier
1  4272	    1157  E5				  DB 0e5h
1  4273
1  4274	    1158  C5				  DB 0c5h
1  4275
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 76
msx_asm\tur_comp.ASM



1  4276	    1159  11				  DB 11h
1  4277	    115A  FFFC				 DW -4
1  4278	    115C  19				 DB 019h
1  4279	    115D  ED 5B				 DB 0edh,5bh
1  4280	    115F  3F14r				 DW L7B5A		 ; address of type definition info
1  4281	    1161  72				 DB 72h
1  4282	    1162  2B				 DB 2bh
1  4283	    1163  73				 DB 73h
1  4284
1  4285	    1164  C1			 L4C07:	 DB 0c1h		 ; restore number of different types
1  4286	    1165  D1				 DB 0d1h		 ; DE =	position after declared
1  4287									 ; procedure/function name
1  4288	    1166  E1				 DB 0e1h
1  4289	    1167  22				 DB 22h
1  4290	    1168  3F35r				 DW L7B7B		 ; restore
1  4291
1  4292	    116A  D5				 DB 0d5h
1  4293	    116B  C5				 DB 0c5h		 ; save	type
1  4294	    116C  CD				 DB 0cdh
1  4295	    116D  2F72r				 DW  L6DC6		 ; add length of proc/func definition
1  4296	    116F  CD				 DB 0cdh
1  4297	    1170  31B0r				 DW  L6F48		 ; match(';')
1  4298	    1172  3A				 DB 3ah
1  4299	    1173  3F53r				 DW L7B99		 ; 0 = no overlay, 255 = overlay
1  4300	    1175  B7				 DB 0b7h
1  4301	    1176  20 3A				 DB 20h,(L4C44)-$-1		 ; jump	if overlay
1  4302
1  4303	    1178  CD				 DB 0cdh
1  4304	    1179  30DEr				 DW  L6E76		 ; FORWARD next	?
1  4305	    117B  3808r				 DW L7533		 ; start of reserved word: FORWARD
1  4306	    117D  20 0A				 DB 20h,(L4C2C)-$-1		 ; no, skip
1  4307
1  4308	    117F  FD E5				 DB 0fdh,0e5h
1  4309	    1181  D1				 DB 0d1h		 ; DE =	address	of 'JP'	opcode
1  4310
1  4311	    1182  CD				 DB 0cdh
1  4312	    1183  2CDEr				 DW  O_JPHL		 ; output forward jump
1  4313
1  4314	    1185  3E FF				  DB 3eh,0FFH		       ; flag for update, update necessary
1  4315	    1187  18 0C				 DB 18h,( L4C38)-$-1
1  4316
1  4317	    1189  CD			 L4C2C:	 DB 0cdh
1  4318	    118A  30DEr				 DW  L6E76		 ; EXTERNAL next ?
1  4319	    118C  380Fr				 DW L753A		 ; start of reserved word: EXTERNAL
1  4320	    118E  20 11				 DB 20h,(PF_INL)-$-1		 ; jump	if not EXTERNAL
1  4321
1  4322	    1190  CD				 DB 0cdh
1  4323	    1191  2ACCr				 DW  L69F2		 ; parse integer constant
1  4324	    1193  EB				 DB 0ebh		 ; DE =	start address for external routine
1  4325	    1194  AF				 DB 0afh		 ; no update necessary
1  4326
1  4327	    1195  C1			 L4C38:	 DB 0c1h		 ; pop type
1  4328
1  4329	    1196  E1				  DB 0e1h		      ;	HL = address after PROC/FUNC identifier
1  4330	    1197  77				 DB 77h		 ; save	update flag
1  4331	    1198  2B				 DB 2bh
1  4332	    1199  70				 DB 70h		 ; save	number of different types
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 77
msx_asm\tur_comp.ASM



1  4333	    119A  2B				 DB 2bh
1  4334	    119B  72				 DB 72h		 ; save	proc/func call address
1  4335	    119C  2B				 DB 2bh
1  4336	    119D  73				 DB 73h
1  4337	    119E  C3				 DB 0c3h
1  4338	    119F  31B0r				 DW  L6F48		 ; match(';')
1  4339
1  4340	    11A1  CD			 PF_INL: DB 0cdh
1  4341	    11A2  30DEr				 DW  L6E76		 ; INLINE next ?
1  4342	    11A4  38C1r				 DW L75EC		 ; start of reserved word: INLINE
1  4343	    11A6  20 0A				 DB 20h,(L4C44)-$-1		 ; jump	if not INLINE
1  4344
1  4345	    11A8  FD E5				 DB 0fdh,0e5h			 ; save	current	code address
1  4346
1  4347	    11AA  CD				 DB 0cdh
1  4348	    11AB  1C76r				 DW  L5698		 ; parse complete INLINE statement
1  4349
1  4350	    11AD  AF				 DB 0afh		 ; no update necessary
1  4351	    11AE  D1				 DB 0d1h		 ; start address for external routine
1  4352	    11AF  C3				 DB 0c3h
1  4353	    11B0  1195r				 DW  L4C38
1  4354
1  4355	    11B2  C1			 L4C44:	 DB 0c1h		 ; B = number of different types
1  4356	    11B3  E1				 DB 0e1h		 ; HL =	position after declared	name
1  4357
1  4358	    11B4  E5				 DB 0e5h		 ; save	position after declared	name
1  4359	    11B5  36 00				 DB 36h,0		 ; update flag,	0 = no update
1  4360	    11B7  2B				 DB 2bh
1  4361	    11B8  70				 DB 70h		 ; save	number of different types
1  4362	    11B9  2B				 DB 2bh
1  4363
1  4364	    11BA  FD E5				 DB 0fdh,0e5h			 ; IY =	current	address	in code
1  4365	    11BC  D1				 DB 0d1h		 ; DE =	start address of procedure/function
1  4366
1  4367	    11BD  3A				  DB 3ah
1  4368	    11BE  3F53r				 DW L7B99		; 0 = no overlay, 255 =	overlay
1  4369	    11C0  B7				 DB 0b7h
1  4370	    11C1  28 06				  DB 28h,(L4C5B)-$-1		     ; skip if no overlay
1  4371
1  4372	    11C3  EB				 DB 0ebh		 ; adjust start	address	of an overlay
1  4373
1  4374					 ;	   LD BC,-16		      ;	16 bytes before	address	of code	generation
1  4375					 ;				      ;Ok$$$$, propably	to 20
1  4376					 ;	   LD BC,-20		      ;	overlay-info block length
1  4377	    11C4  01				  DB 01h
1  4378	    11C5  FFE8				 DW -24			 ; minus overlay-info block length
1  4379
1  4380	    11C7  09				  DB 09h
1  4381	    11C8  EB				 DB 0ebh
1  4382
1  4383	    11C9  72			 L4C5B:	 DB 72h		 ; save	start address of proc or func
1  4384	    11CA  2B				 DB 2bh
1  4385	    11CB  73				 DB 73h
1  4386	    11CC  E1				 DB 0e1h		 ; HL =	position after declared	name
1  4387	    11CD  18 15				 DB 18h,( L4C76)-$-1
1  4388
1  4389	    11CF  7E			 L4C61:	 DB 7eh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 78
msx_asm\tur_comp.ASM



1  4390	    11D0  B7				 DB 0b7h
1  4391
1  4392	    11D1  CD				 DB 0cdh
1  4393	    11D2  34DFr				 DW  L72D4		 ; Zero	--> error
1  4394	    11D4  2B				 DB 2BH			 ; error 43: Duplicate identifier or label
1  4395
1  4396	    11D5  3A				 DB 3ah
1  4397	    11D6  3F53r				 DW L7B99		 ; 0 = no overlay, 255 = overlay
1  4398	    11D8  B7				 DB 0b7h
1  4399
1  4400	    11D9  CD				 DB 0cdh
1  4401	    11DA  34E5r				 DW  L72DA		 ; NonZero --> error
1  4402	    11DC  4C				 DB 4CH			 ; error 76: Overlay cannot be forward
1  4403
1  4404	    11DD  CD				 DB 0cdh
1  4405	    11DE  30FEr				 DW  L6E96
1  4406	    11E0  D1				 DB 0d1h
1  4407	    11E1  CD				 DB 0cdh
1  4408	    11E2  31B0r				 DW  L6F48		 ; match(';')
1  4409
1  4410	    11E4  EB			 L4C76:	 DB 0ebh		 ; DE =	position after declared	name
1  4411
1  4412	    11E5  3A				 DB 3ah
1  4413	    11E6  3F57r				 DW L7B9D
1  4414	    11E8  2A				 DB 02ah
1  4415	    11E9  391Br				 DW L7908		 ; HL =	data start address
1  4416
1  4417	    11EB  CB 57				 DB 0cbh,057h			 ; 1 = Absolute	Code on
1  4418	    11ED  28 03				  DB 28h,(L4C84)-$-1		     ; jump if not on
1  4419
1  4420	    11EF  21				  DB 21h
1  4421	    11F0  0000				 DW 0000		 ; absolute code on
1  4422									     ; remember	for this procedure/function
1  4423
1  4424	    11F2  22			 L4C84:	  DB 22h
1  4425	    11F3  3F3Dr				 DW L7B83	       ; set data start	address
1  4426
1  4427	    11F5  2A				 DB 02ah
1  4428	    11F6  3F35r				 DW L7B7B
1  4429	    11F8  E5				 DB 0e5h
1  4430
1  4431	    11F9  2A				 DB 02ah
1  4432	    11FA  3F2Dr				 DW L7B73
1  4433	    11FC  22				 DB 22h
1  4434	    11FD  3F35r				 DW L7B7B
1  4435	    11FF  E5				 DB 0e5h
1  4436
1  4437	    1200  EB				 DB 0ebh		 ; HL =	position after declared	name
1  4438	    1201  7E				 DB 7eh
1  4439	    1202  36 00				 DB 36h,0		 ; update flag,	0 = no update
1  4440	    1204  2B				 DB 2bh
1  4441	    1205  46				 DB 46h		 ; B = number of different types
1  4442	    1206  2B				 DB 2bh
1  4443	    1207  56				 DB 56h		 ; DE =	procedure/function address
1  4444	    1208  2B				 DB 2bh
1  4445	    1209  5E				 DB 5eh
1  4446	    120A  2B				 DB 2bh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 79
msx_asm\tur_comp.ASM



1  4447	    120B  B7				 DB 0b7h
1  4448	    120C  28 07				 DB 28h,(L4CA7)-$-1		 ; jump	if no update necessary
1  4449
1  4450	    120E  E5				 DB 0e5h
1  4451	    120F  EB				 DB 0ebh
1  4452	    1210  23				 DB 23h
1  4453	    1211  CD				  DB 0cdh
1  4454	    1212  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  4455	    1214  E1				 DB 0e1h
1  4456
1  4457	    1215  3A			 L4CA7:	 DB 3ah
1  4458	    1216  3F51r				 DW L7B97		 ; 0 = proc, 1 =func
1  4459	    1218  B7				 DB 0b7h
1  4460	    1219  28 25				 DB 28h,(L4CD2)-$-1		 ; jump	if procedure
1  4461
1  4462	    121B  56				 DB 56h		 ; DE =	address	of function result type
1  4463	    121C  2B				 DB 2bh
1  4464	    121D  5E				 DB 5eh
1  4465	    121E  2B				 DB 2bh
1  4466	    121F  E5				 DB 0e5h
1  4467	    1220  EB				 DB 0ebh
1  4468	    1221  CD				  DB 0cdh
1  4469	    1222  1850r				 DW  L5287		   ; 8 bytes from HL (down) to 7B5C (up)
1  4470									 ; get all information on this type
1  4471	    1224  3A				 DB 3ah
1  4472	    1225  3F16r				 DW L7B5C
1  4473	    1227  32				 DB 32h
1  4474	    1228  3F41r				 DW L7B87
1  4475	    122A  2A				 DB 02ah
1  4476	    122B  3F1Cr				 DW L7B62		 ; HL =	size of	the type
1  4477	    122D  7D				 DB 7dh
1  4478	    122E  32				 DB 32h
1  4479	    122F  3F42r				 DW L7B88
1  4480	    1231  EB				 DB 0ebh
1  4481	    1232  CD				 DB 0cdh
1  4482	    1233  2D8Dr				 DW  L6C30		 ; allocate DE bytes of	data for this type
1  4483	    1235  22				 DB 22h
1  4484	    1236  3F43r				 DW L7B89
1  4485	    1238  EB				 DB 0ebh
1  4486	    1239  E1				 DB 0e1h
1  4487	    123A  72				 DB 72h
1  4488	    123B  2B				 DB 2bh
1  4489	    123C  73				 DB 73h
1  4490	    123D  2B				 DB 2bh
1  4491	    123E  18 04				 DB 18h,( L4CD6)-$-1
1  4492
1  4493	    1240  11			 L4CD2:	  DB 11h
1  4494	    1241  FFFC				 DW -4			 ; skip	function type definition and
1  4495									     ; function	result variable	address
1  4496	    1243  19				 DB 019h
1  4497
1  4498	    1244  11			 L4CD6:	  DB 11h
1  4499	    1245  FFFA				 DW -6			 ; -4
1  4500	    1247  19				 DB 019h
1  4501	    1248  E5				 DB 0e5h
1  4502
1  4503	    1249  0E 00				  DB 0eh,0		       ; start at variable 0
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 80
msx_asm\tur_comp.ASM



1  4504
1  4505	    124B  78				  DB 78h
1  4506	    124C  B7				 DB 0b7h
1  4507	    124D  28 4A				  DB 28h,(L4D2B)-$-1		     ; quit if 0 different types
1  4508
1  4509						  ; loop for variables with different type
1  4510	    124F  7E			 L4CE1:	  DB 7eh		  ; A =	count, # variables with	same type
1  4511	    1250  81				 DB 081h
1  4512	    1251  4F				 DB 4fh
1  4513	    1252  C5				 DB 0c5h
1  4514
1  4515	    1253  46				  DB 46h		  ; B =	count, # variables with	same type
1  4516	    1254  2B				 DB 2bh
1  4517
1  4518	    1255  7E				  DB 7eh
1  4519	    1256  32				 DB 32h
1  4520	    1257  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  4521	    1259  2B				 DB 2bh
1  4522
1  4523	    125A  56				  DB 56h		  ; DE = address of type definition info
1  4524	    125B  2B				 DB 2bh
1  4525	    125C  5E				 DB 5eh
1  4526	    125D  2B				 DB 2bh
1  4527
1  4528	    125E  E5				  DB 0e5h
1  4529
1  4530	    125F  EB				  DB 0ebh
1  4531	    1260  22				  DB 22h
1  4532	    1261  3F14r				 DW L7B5A	       ; HL = address of type definition info
1  4533
1  4534	    1263  CD				  DB 0cdh
1  4535	    1264  1850r				 DW  L5287		   ; 8 bytes from HL (down) to 7B5C (up)
1  4536
1  4537	    1266  2A				  DB 02ah
1  4538	    1267  3F2Dr				 DW L7B73
1  4539
1  4540	    1269  E3				  DB 0e3h
1  4541
1  4542	    126A  C5				  DB 0c5h
1  4543
1  4544						  ; loop for variables with same type
1  4545	    126B  C5			 L4CFD:	  DB 0c5h
1  4546	    126C  11				 DB 11h
1  4547	    126D  0400				 DW 400H
1  4548	    126F  CD				 DB 0cdh
1  4549	    1270  2F17r				 DW  L6D75		 ; add DE to id	table
1  4550
1  4551	    1272  7E			 L4D04:	 DB 7eh
1  4552
1  4553	    1273  CD				  DB 0cdh
1  4554	    1274  2F26r				 DW  L6D7A		   ; add byte to id table
1  4555
1  4556	    1276  CB 7E				 DB 0cbh,07eh
1  4557					 ;!	 pushf
1  4558	    1278  2B				 DB 2bh
1  4559					 ;!	 popf
1  4560	    1279  28 F7				  DB 28h,(L4D04)-$-1		     ; until end of identifier
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 81
msx_asm\tur_comp.ASM



1  4561
1  4562	    127B  E5				 DB 0e5h
1  4563	    127C  CD				 DB 0cdh
1  4564	    127D  2F26r				 DW  L6D7A		 ; add byte to id table
1  4565	    127F  CD				 DB 0cdh
1  4566	    1280  2F17r				 DW  L6D75		 ; add DE to id	table
1  4567	    1282  CD				 DB 0cdh
1  4568	    1283  2F17r				 DW  L6D75		 ; add DE to id	table
1  4569	    1285  CD				 DB 0cdh
1  4570	    1286  2F72r				 DW  L6DC6		 ; add length
1  4571	    1288  E1				 DB 0e1h
1  4572	    1289  C1				 DB 0c1h
1  4573	    128A  10 DF				  DB 10h,( L4CFD)-$-1		      ;	repeat for variables with same type
1  4574
1  4575	    128C  C1				  DB 0c1h
1  4576
1  4577	    128D  E3				  DB 0e3h
1  4578
1  4579	    128E  AF				  DB 0afh
1  4580	    128F  32				 DB 32h
1  4581	    1290  3F4Ar				 DW L7B90		 ; 0 = not absolute, 255 = absolute
1  4582
1  4583	    1292  CD				  DB 0cdh
1  4584	    1293  1510r				 DW  L4F52
1  4585
1  4586	    1295  E1				  DB 0e1h
1  4587	    1296  C1				 DB 0c1h
1  4588
1  4589	    1297  10 B6				  DB 10h,( L4CE1)-$-1		      ;	repeat for variables with different type
1  4590
1  4591	    1299			 L4D2B:
1  4592	    1299  41				  DB 41h		     ; B = total number	of variables
1  4593
1  4594	    129A  C5				  DB 0c5h
1  4595
1  4596	    129B  2A				 DB 02ah
1  4597	    129C  3F2Dr				 DW L7B73
1  4598	    129E  E5				 DB 0e5h
1  4599
1  4600	    129F  2A				  DB 02ah
1  4601	    12A0  3F3Dr				 DW L7B83	       ; save data start address
1  4602	    12A2  E5				  DB 0e5h		     ; equals 0	if it is absolute code
1  4603
1  4604	    12A3  2A				 DB 02ah
1  4605	    12A4  3F43r				 DW L7B89
1  4606	    12A6  E5				 DB 0e5h
1  4607
1  4608	    12A7  3A				 DB 3ah
1  4609	    12A8  3F41r				 DW L7B87
1  4610	    12AA  F5				 DB 0f5h
1  4611
1  4612	    12AB  3A				 DB 3ah
1  4613	    12AC  3F42r				 DW L7B88
1  4614	    12AE  F5				 DB 0f5h
1  4615
1  4616	    12AF  3A				  DB 3ah
1  4617	    12B0  3F53r				 DW L7B99		; 0 = no overlay, 255 =	overlay
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 82
msx_asm\tur_comp.ASM



1  4618	    12B2  F5				  DB 0f5h
1  4619
1  4620	    12B3  3A				 DB 3ah
1  4621	    12B4  3F51r				 DW L7B97		 ; 0 = proc, 1 = func
1  4622	    12B6  F5				 DB 0f5h
1  4623
1  4624	    12B7  21				 DB 21h
1  4625	    12B8  3F4Er				 DW L7B94
1  4626	    12BA  34				  DB 034h		    ; increase level
1  4627
1  4628	    12BB  CD				  DB 0cdh
1  4629	    12BC  0B51r				 DW  L469E
1  4630
1  4631	    12BE  F1				 DB 0f1h
1  4632	    12BF  32				 DB 32h
1  4633	    12C0  3F51r				 DW L7B97		 ; restore: 0 =	proc, 1	= func
1  4634
1  4635	    12C2  F1				  DB 0f1h
1  4636	    12C3  32				  DB 32h
1  4637	    12C4  3F53r				 DW L7B99		; 0 = no overlay, 255 =	overlay
1  4638
1  4639	    12C6  F1				 DB 0f1h
1  4640	    12C7  32				 DB 32h
1  4641	    12C8  3F42r				 DW L7B88
1  4642
1  4643	    12CA  F1				 DB 0f1h
1  4644	    12CB  32				 DB 32h
1  4645	    12CC  3F41r				 DW L7B87
1  4646
1  4647	    12CE  E1				 DB 0e1h
1  4648	    12CF  22				 DB 22h
1  4649	    12D0  3F43r				 DW L7B89
1  4650
1  4651	    12D2  E1				 DB 0e1h
1  4652	    12D3  22				  DB 22h
1  4653	    12D4  3F3Dr				 DW L7B83	       ; restore data start address
1  4654	    12D6  53ED 3F3Fr			 DW 53edh,L7B85
1  4655
1  4656	    12DA  7C				 DB 7ch
1  4657	    12DB  B5				 DB 0b5h
1  4658	    12DC  28 11				 DB 28h,(L4D79)-$-1
1  4659
1  4660	    12DE  ED 52				 DB 0EDH,052h
1  4661	    12E0  28 0D				 DB 28h,(L4D79)-$-1
1  4662
1  4663	    12E2  CD				 DB 0cdh
1  4664	    12E3  2CE6r				 DW  O_LDBC
1  4665
1  4666	    12E5  EB				 DB 0ebh
1  4667	    12E6  CD				 DB 0cdh
1  4668	    12E7  2CEEr				 DW  O_LDHL
1  4669
1  4670	    12E9  21				 DB 21h
1  4671	    12EA  06F4				 DW _L0508		 ; LIB,	heap alloc, clear
1  4672	    12EC  CD				 DB 0cdh
1  4673	    12ED  2CE2r				 DW  O_CALHL
1  4674
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 83
msx_asm\tur_comp.ASM



1  4675	    12EF  E1			 L4D79:	 DB 0e1h
1  4676	    12F0  C1				 DB 0c1h
1  4677	    12F1  04				 DB 04h
1  4678	    12F2  05				 DB 05h
1  4679	    12F3  CA				  DB 0cah
1  4680	    12F4  1375r				 DW L4DF3		  ; jump if no variables
1  4681
1  4682	    12F6  CD				 DB 0cdh
1  4683	    12F7  2CACr				 DW  O_CODE
1  4684	    12F9  02				 DB 2
1  4685	    12FA  FD E1				 DB 0FDH,0E1H		 ; POP IY
1  4686
1  4687	    12FC  C5			 L4D86:	 DB 0c5h
1  4688	    12FD  23				 DB 23h
1  4689	    12FE  5E				 DB 5eh
1  4690	    12FF  23				 DB 23h
1  4691	    1300  56				 DB 56h
1  4692	    1301  19				 DB 019h
1  4693	    1302  E5				 DB 0e5h
1  4694	    1303  2B				 DB 2bh
1  4695	    1304  2B				 DB 2bh
1  4696	    1305  CB 7E			 L4D8F:	 DB 0cbh,07eh
1  4697					 ;!	 pushf
1  4698	    1307  2B				 DB 2bh
1  4699					 ;!	 popf
1  4700	    1308  28 FB				 DB 28h,(L4D8F)-$-1
1  4701	    130A  CD				 DB 0cdh
1  4702	    130B  183Fr				 DW  L5276		 ; id info at 7B5C
1  4703	    130D  3A				 DB 3ah
1  4704	    130E  3F11r				 DW L7B57
1  4705	    1310  B7				 DB 0b7h
1  4706	    1311  20 43				 DB 20h,(L4DD4)-$-1
1  4707
1  4708	    1313  3A				 DB 3ah
1  4709	    1314  3F16r				 DW L7B5C
1  4710	    1316  FE 03				 DB 0feh, 3
1  4711	    1318  38 25				 DB 38h,(L4DBD)-$-1
1  4712	    131A  28 4C				 DB 28h,(L4DE6)-$-1
1  4713
1  4714	    131C  FE 04				 DB 0feh, 4			 ; type	= POINTER ?
1  4715	    131E  28 45				 DB 28h,(L4DE3)-$-1
1  4716
1  4717	    1320  FE 08				 DB 0feh, 8
1  4718	    1322  38 1B				 DB 38h,(L4DBD)-$-1
1  4719	    1324  28 42				 DB 28h,(L4DE6)-$-1
1  4720
1  4721	    1326  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  4722	    1328  28 0D				 DB 28h,(POPLONG)-$-1		 ; jump	to generate code for it
1  4723
1  4724	    132A  FE 0A				 DB 0feh, 0AH
1  4725	    132C  30 37				 DB 30h,(L4DE3)-$-1
1  4726
1  4727						 ; output code to pop REAL
1  4728	    132E  CD				 DB 0cdh
1  4729	    132F  2CACr				 DW  O_CODE
1  4730	    1331  03				 DB 3
1  4731	    1332  E1				 DB 0E1H		 ; POP HL
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 84
msx_asm\tur_comp.ASM



1  4732	    1333  D1				 DB 0D1H		 ; POP DE
1  4733	    1334  C1				 DB 0C1H		 ; POP BC
1  4734
1  4735	    1335  18 31				 DB 18h,( L4DE6)-$-1
1  4736
1  4737	    1337  CD			 POPLONG: DB 0cdh
1  4738	    1338  2CACr				 DW  O_CODE
1  4739	    133A  02				 DB 2
1  4740	    133B  E1				 DB 0E1H		 ; POP HL
1  4741	    133C  D1				 DB 0D1H		 ; POP DE
1  4742
1  4743	    133D  18 29				 DB 18h,( L4DE6)-$-1
1  4744
1  4745	    133F  CD			 L4DBD:	 DB 0cdh
1  4746	    1340  2CCFr				 DW  O_POPHL
1  4747	    1342  2A				 DB 02ah
1  4748	    1343  3F12r				 DW L7B58		 ; HL =	lvalue of current id
1  4749	    1345  CD				 DB 0cdh
1  4750	    1346  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1  4751	    1348  2A				 DB 02ah
1  4752	    1349  3F1Cr				 DW L7B62
1  4753	    134B  CD				 DB 0cdh
1  4754	    134C  2CE6r				 DW  O_LDBC
1  4755
1  4756	    134E  CD				 DB 0cdh
1  4757	    134F  2CACr				 DW  O_CODE
1  4758	    1351  02				 DB 2
1  4759	    1352  ED B0				 DB 0EDH,0B0H		 ; LDIR
1  4760
1  4761	    1354  18 15				 DB 18h,( L4DE9)-$-1
1  4762
1  4763	    1356  AF			 L4DD4:	 DB 0afh
1  4764	    1357  32				 DB 32h
1  4765	    1358  3F11r				 DW L7B57
1  4766	    135A  3E 04				 DB 3eh,4
1  4767	    135C  32				 DB 32h
1  4768	    135D  3F16r				 DW L7B5C		 ; type	= pointer
1  4769	    135F  21				 DB 21h
1  4770	    1360  0002				 DW 0002
1  4771	    1362  22				 DB 22h
1  4772	    1363  3F1Cr				 DW L7B62		 ; lenght = 2
1  4773
1  4774	    1365  CD			 L4DE3:	 DB 0cdh
1  4775	    1366  2CCFr				 DW  O_POPHL
1  4776
1  4777	    1368  CD			 L4DE6:	 DB 0cdh
1  4778	    1369  2683r				 DW  L661B
1  4779	    136B  E1			 L4DE9:	 DB 0e1h
1  4780	    136C  C1				 DB 0c1h
1  4781	    136D  10 8D				 DB 10h,( L4D86)-$-1
1  4782
1  4783	    136F  CD				 DB 0cdh
1  4784	    1370  2CACr				 DW  O_CODE
1  4785	    1372  02				 DB 2
1  4786	    1373  FD E5				 DB 0FDH,0E5H		 ; PUSH	IY
1  4787
1  4788	    1375			 L4DF3:
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 85
msx_asm\tur_comp.ASM



1  4789	    1375  CD				  DB 0cdh
1  4790	    1376  18C5r				 DW  L52FC		   ; start begin end part
1  4791
1  4792	    1378  21				  DB 21h
1  4793	    1379  3F4Er				 DW L7B94
1  4794	    137B  35				  DB 035h		    ; decrease level
1  4795
1  4796	    137C  3A				  DB 3ah
1  4797	    137D  3F51r				 DW L7B97		; 0 = proc, 1 =	func
1  4798	    137F  B7				 DB 0b7h
1  4799	    1380  28 46				  DB 28h,(L4E46)-$-1		     ; jump if proc
1  4800
1  4801	    1382  2A				  DB 02ah
1  4802	    1383  3F43r				 DW L7B89
1  4803	    1385  3A				 DB 3ah
1  4804	    1386  3F41r				 DW L7B87
1  4805	    1388  FE 08				 DB 0feh, 8			 ; type	= STRING ?
1  4806	    138A  20 1A				 DB 20h,(L4E24)-$-1		 ; jump	if not STRING
1  4807
1  4808	    138C  47				 DB 47h
1  4809
1  4810	    138D  CD				 DB 0cdh
1  4811	    138E  2CACr				 DW  O_CODE
1  4812	    1390  02				 DB 2
1  4813	    1391  FD E1				  DB 0FDH,0E1H		     ; POP IY, save return address
1  4814
1  4815	    1393  3E 21				 DB 3eh,21H
1  4816	    1395  CD				 DB 0cdh
1  4817	    1396  2CF0r				 DW  O_OPHL		 ; LD HL, HL
1  4818
1  4819	    1398  21				 DB 21h
1  4820	    1399  0725				 DW _L053A		 ; LIB,	clear
1  4821	    139B  CD				 DB 0cdh
1  4822	    139C  2CE2r				 DW  O_CALHL
1  4823
1  4824	    139E  CD				 DB 0cdh
1  4825	    139F  2CACr				 DW  O_CODE
1  4826	    13A1  02				 DB 2
1  4827	    13A2  FD E5				  DB 0FDH,0E5H		     ; PUSH IY,	restore	return address
1  4828
1  4829						  ; stack: STRING
1  4830						  ;	   return address
1  4831
1  4832	    13A4  18 22				 DB 18h,( L4E46)-$-1
1  4833
1  4834	    13A6  FE 09			 L4E24:	 DB 0feh, 9
1  4835	    13A8  20 0D				 DB 20h,(L4E35)-$-1
1  4836
1  4837	    13AA  3E 21				 DB 3eh,21H
1  4838	    13AC  CD				 DB 0cdh
1  4839	    13AD  2CF0r				 DW  O_OPHL		 ; LD HL, HL
1  4840
1  4841	    13AF  21				 DB 21h
1  4842	    13B0  0717				 DW _L052C		 ; LIB,	GETFLT
1  4843	    13B2  CD				 DB 0cdh
1  4844	    13B3  2CE2r				 DW  O_CALHL		 ; CALL	_L052C
1  4845	    13B5  18 11				 DB 18h,( L4E46)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 86
msx_asm\tur_comp.ASM



1  4846
1  4847	    13B7  3E 2A			 L4E35:	 DB 3eh,2AH
1  4848	    13B9  CD				 DB 0cdh
1  4849	    13BA  2CF0r				 DW  O_OPHL		 ; LD HL,( HL )
1  4850
1  4851	    13BC  3A				 DB 3ah
1  4852	    13BD  3F42r				 DW L7B88
1  4853	    13BF  3D				 DB 3dh
1  4854	    13C0  20 06				 DB 20h,(L4E46)-$-1
1  4855
1  4856	    13C2  CD				 DB 0cdh
1  4857	    13C3  2CACr				 DW  O_CODE
1  4858	    13C5  02				 DB 2
1  4859	    13C6  26 00				 DB 26H,00H		 ; LD H,0
1  4860
1  4861	    13C8  2A			 L4E46:	  DB 02ah
1  4862	    13C9  3F3Dr				 DW L7B83
1  4863	    13CB  7C				 DB 7ch
1  4864	    13CC  B5				 DB 0b5h
1  4865	    13CD  28 53				  DB 28h,(L4E78)-$-1		     ; jump if absolute	code
1  4866
1  4867						  ; HL = data start address
1  4868
1  4869	    13CF  ED 5B				  DB 0edh,5bh
1  4870	    13D1  3F3Fr				 DW L7B85
1  4871	    13D3  ED 52				 DB 0EDH,052h
1  4872	    13D5  28 1D				 DB 28h,(L4E74)-$-1
1  4873
1  4874	    13D7  3A				  DB 3ah
1  4875	    13D8  3F51r				 DW L7B97		; 0 = proc, 1 =	func
1  4876	    13DA  B7				 DB 0b7h
1  4877	    13DB  28 0A				 DB 28h,(L4E65)-$-1		 ; no EXX if a procedure call
1  4878
1  4879	    13DD  3A				 DB 3ah
1  4880	    13DE  3F41r				 DW L7B87
1  4881	    13E0  FE 08				  DB 0feh, 8			   ; type = STRING ?
1  4882
1  4883	    13E2  3E D9				  DB 3eh,0D9H		       ; opcode: EXX
1  4884	    13E4  C4				  DB 0c4h
1  4885	    13E5  2CF8r				 DW O_BYTE	       ; yes, output EXX
1  4886
1  4887	    13E7  CD			 L4E65:	 DB 0cdh
1  4888	    13E8  2CE6r				 DW  O_LDBC
1  4889	    13EA  EB				 DB 0ebh
1  4890	    13EB  CD				 DB 0cdh
1  4891	    13EC  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1  4892
1  4893	    13EE  21				  DB 21h
1  4894	    13EF  070E				 DW _L0522		 ; LIB,	heap de-alloc
1  4895	    13F1  CD				  DB 0cdh
1  4896	    13F2  2CE2r				 DW  O_CALHL
1  4897
1  4898					 ;	   JR L4E79
1  4899
1  4900	    13F4			 L4E74:	  ; recursive code
1  4901
1  4902	    13F4  3A				  DB 3ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 87
msx_asm\tur_comp.ASM



1  4903	    13F5  3F51r				 DW L7B97		; 0 = proc, 1 =	func
1  4904	    13F7  B7				 DB 0b7h
1  4905	    13F8  28 0A				  DB 28h,(L4E76)-$-1		     ; no EXX if a procedure call
1  4906
1  4907	    13FA  3A				 DB 3ah
1  4908	    13FB  3F41r				 DW L7B87
1  4909	    13FD  FE 08				  DB 0feh, 8			   ; type = STRING ?
1  4910
1  4911	    13FF  3E D9				  DB 3eh,0D9H		       ; opcode: EXX
1  4912	    1401  C4				  DB 0c4h
1  4913	    1402  2CF8r				 DW O_BYTE	       ; yes, output EXX
1  4914
1  4915	    1404			 L4E76:
1  4916	    1404  3A				  DB 3ah
1  4917	    1405  3F53r				 DW L7B99
1  4918	    1407  B7				  DB 0b7h
1  4919	    1408  28 18				  DB 28h,(L4E78)-$-1		     ; jump if no overlay
1  4920
1  4921	    140A  D1				  DB 0d1h		      ;	DE = address of	high byte of PROC/FUNC
1  4922									     ; struct length
1  4923	    140B  D5				  DB 0d5h
1  4924
1  4925	    140C  21				  DB 21h
1  4926	    140D  000C				 DW 12
1  4927	    140F  19				  DB 019h
1  4928	    1410  7E				  DB 7eh
1  4929	    1411  2B				  DB 2bh
1  4930	    1412  6E				  DB 6eh
1  4931	    1413  67				  DB 67h		     ; HL = address of overlay proc
1  4932
1  4933	    1414  23				  DB 23h		     ; skip CALL instruction
1  4934	    1415  23				  DB 23h
1  4935	    1416  23				  DB 23h
1  4936
1  4937	    1417  CD				  DB 0cdh
1  4938	    1418  2CEEr				 DW  O_LDHL		   ; output: 'LD HL,value HL'
1  4939
1  4940	    141A  21				  DB 21h
1  4941	    141B  2301				 DW _OVERLAYREC1	 ; LIB,	Load only overlay code
1  4942	    141D  CD				 DB 0cdh
1  4943	    141E  2CDEr				 DW  O_JPHL
1  4944
1  4945	    1420  18 05				  DB 18h,( L4E79)-$-1
1  4946
1  4947	    1422  CD			 L4E78:	  DB 0cdh
1  4948	    1423  2CACr				 DW  O_CODE		   ; output: ret
1  4949	    1425  01				 DB 1
1  4950	    1426  C9				 DB 0C9H		 ; RET
1  4951
1  4952	    1427  CD			 L4E79:	  DB 0cdh
1  4953	    1428  31B0r				 DW  L6F48		   ; match(';')
1  4954
1  4955	    142A  D1				  DB 0d1h		      ;	DE = address of	high byte of PROC/FUNC
1  4956									     ; struct length
1  4957
1  4958	    142B  E1				  DB 0e1h
1  4959	    142C  22				  DB 22h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 88
msx_asm\tur_comp.ASM



1  4960	    142D  3F2Dr				 DW L7B73	       ; HL = address after PROC/FUNC struct length
1  4961	    142F  22				 DB 22h
1  4962	    1430  3F2Fr				 DW L7B75
1  4963
1  4964	    1432  E1				  DB 0e1h
1  4965	    1433  22				  DB 22h
1  4966	    1434  3F35r				 DW L7B7B	       ; HL = position after declared PROC/FUNC
1  4967									     ;	    name
1  4968	    1436  EB				  DB 0ebh
1  4969						  ; HL = high byte of struct length
1  4970						  ; DE = position after	declared PROC/FUNC name
1  4971	    1437  C9				 DB 0c9h
1  4972
1  4973	    1438  2A			 L4E8A:	 DB 02ah
1  4974	    1439  3F2Dr				 DW L7B73		 ; HL =	address	to add an identifier
1  4975	    143B  ED 5B			 L4E8D:	 DB 0edh,5bh
1  4976	    143D  3F35r				 DW L7B7B		 ; HL =	start of identifier list
1  4977	    143F  B7				 DB 0b7h
1  4978	    1440  ED 52				 DB 0EDH,052h
1  4979					 ;!	 pushf
1  4980	    1442  19				 DB 019h
1  4981					 ;!	 popf
1  4982	    1443  C8				 DB 0c8h		 ; quit	if no identifiers
1  4983	    1444  23				 DB 23h
1  4984	    1445  5E				 DB 5eh		 ; DE =	offset
1  4985	    1446  23				 DB 23h
1  4986	    1447  56				 DB 56h
1  4987	    1448  19				 DB 019h
1  4988	    1449  7E				 DB 7eh
1  4989	    144A  FE 06				 DB 0feh, 6
1  4990	    144C  28 04				 DB 28h,(L4EA4)-$-1
1  4991	    144E  FE 05				 DB 0feh, 5
1  4992	    1450  20 E9				 DB 20h,(L4E8D)-$-1
1  4993	    1452  E5			 L4EA4:	 DB 0e5h
1  4994	    1453  2B				 DB 2bh
1  4995	    1454  2B				 DB 2bh
1  4996	    1455  CB 7E			 L4EA7:	 DB 0cbh,07eh
1  4997					 ;!	 pushf
1  4998	    1457  2B				 DB 2bh
1  4999					 ;!	 popf
1  5000	    1458  28 FB				 DB 28h,(L4EA7)-$-1
1  5001	    145A  7E				 DB 7eh		 ; A = byte after name
1  5002	    145B  B7				 DB 0b7h
1  5003
1  5004	    145C  CD				 DB 0cdh
1  5005	    145D  34E5r				 DW  L72DA		 ; NonZero --> error
1  5006	    145F  49				 DB 49H			 ; error 73: Undefined FORWARD procedure(s)
1  5007
1  5008	    1460  E1				 DB 0e1h
1  5009	    1461  18 D8				 DB 18h,( L4E8D)-$-1
1  5010
1  5011	    1463			 L4EB5:	 ; in:	 -
1  5012						 ; out:	 HL = top of stack before variable name	declarations
1  5013						 ;	  B = number of	variable name declarations
1  5014	    1463  2A				 DB 02ah
1  5015	    1464  3F2Dr				 DW L7B73
1  5016	    1466  E5				 DB 0e5h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 89
msx_asm\tur_comp.ASM



1  5017	    1467  06 00				 DB 06h,0
1  5018	    1469  C5			 L4EBB:	 DB 0c5h
1  5019	    146A  16 04				 DB 16h,4
1  5020	    146C  3A				 DB 3ah
1  5021	    146D  3F4Br				 DW L7B91
1  5022	    146F  5F				 DB 5fh
1  5023	    1470  CD				 DB 0cdh
1  5024	    1471  2F17r				 DW  L6D75		 ; add DE to id	table
1  5025	    1473  CD				 DB 0cdh
1  5026	    1474  2F33r				 DW  L6D87		 ; add identifier to id	table
1  5027	    1476  CD				 DB 0cdh
1  5028	    1477  2F26r				 DW  L6D7A		 ; add byte to id table
1  5029	    1479  CD				 DB 0cdh
1  5030	    147A  2F17r				 DW  L6D75		 ; add DE to id	table
1  5031	    147C  CD				 DB 0cdh
1  5032	    147D  2F17r				 DW  L6D75		 ; add DE to id	table
1  5033	    147F  CD				 DB 0cdh
1  5034	    1480  2F72r				 DW  L6DC6		 ; add length
1  5035	    1482  C1				 DB 0c1h
1  5036	    1483  04				 DB 04h
1  5037	    1484  CD				 DB 0cdh
1  5038	    1485  317Br				 DW  L6F13		 ; match(','), if present
1  5039	    1487  28 E0				 DB 28h,(L4EBB)-$-1		 ; yes,	an other declaration
1  5040	    1489  E1				 DB 0e1h
1  5041	    148A  C9				 DB 0c9h
1  5042
1  5043	    148B  2A			 L4EDD:	 DB 02ah
1  5044	    148C  3F2Dr				 DW L7B73
1  5045	    148E  E5				 DB 0e5h
1  5046	    148F  CD				 DB 0cdh
1  5047	    1490  1559r				 DW  L4F9B		 ; parse every possible	type
1  5048
1  5049	    1492  E1				 DB 0e1h		 ; address where to stop reference search
1  5050	    1493  CD				 DB 0cdh
1  5051	    1494  185Er				 DW  L5295		 ; update pointer references
1  5052
1  5053	    1496  CD				 DB 0cdh
1  5054	    1497  30DEr				 DW  L6E76		 ; followed by 'ABSOLUTE'?
1  5055	    1499  3837r				 DW L7562		 ; start of reserved word: ABSOLUTE
1  5056
1  5057	    149B  3E 00				 DB 3eh,0			 ; assume no 'absolute'
1  5058	    149D  20 23				 DB 20h,(L4F14)-$-1		 ; no, continue
1  5059
1  5060	    149F  3A				 DB 3ah
1  5061	    14A0  3F4Br				 DW L7B91
1  5062	    14A2  B7				 DB 0b7h
1  5063
1  5064	    14A3  CD				 DB 0cdh
1  5065	    14A4  34E5r				 DW  L72DA		 ; NonZero --> error
1  5066	    14A6  4B				 DB 4BH			 ; error 75: Illegal use of ABSOLUTE
1  5067
1  5068	    14A7  01				 DB 01h
1  5069	    14A8  0400				 DW 400H	 ; variable identifier ?
1  5070	    14AA  CD				 DB 0cdh
1  5071	    14AB  30BCr				 DW  L6E54		 ; check if current in id list
1  5072									 ; HL =	address	of info
1  5073	    14AD  20 0B				 DB 20h,(L4F0C)-$-1		 ; no variable identifier, try address
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 90
msx_asm\tur_comp.ASM



1  5074
1  5075	    14AF  7E				 DB 7eh
1  5076	    14B0  32				 DB 32h
1  5077	    14B1  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  5078	    14B3  2B				 DB 2bh
1  5079	    14B4  56				 DB 56h		 ; DE =	lvalue of variable
1  5080	    14B5  2B				 DB 2bh
1  5081	    14B6  5E				 DB 5eh
1  5082	    14B7  EB				 DB 0ebh
1  5083	    14B8  18 03				 DB 18h,( L4F0F)-$-1
1  5084
1  5085	    14BA  CD			 L4F0C:	 DB 0cdh
1  5086	    14BB  2ACCr				 DW  L69F2		 ; parse integer constant
1  5087
1  5088	    14BD  22			 L4F0F:	 DB 22h
1  5089	    14BE  3F39r				 DW L7B7F
1  5090	    14C0  3E FF				 DB 3eh,0FFH		 ; absolute anyway
1  5091
1  5092	    14C2  32			 L4F14:	 DB 32h
1  5093	    14C3  3F4Ar				 DW L7B90		 ; 0 = not absolute, 255 = absolute
1  5094	    14C5  C9				 DB 0c9h
1  5095
1  5096	    14C6			 L4F18:
1  5097						 ; L7B5C..L7B63	filled in with type info
1  5098	    14C6  CD				 DB 0cdh
1  5099	    14C7  1586r				 DW  L4FC8		 ; find	type identifier
1  5100									 ; and fill L7B5C..L7B63
1  5101	    14C9  28 12				 DB 28h,(L4F181)-$-1		 ; jump	if type	identifier found
1  5102
1  5103	    14CB  CD				 DB 0cdh
1  5104	    14CC  30DEr				 DW  L6E76
1  5105	    14CE  3822r				 DW L754D		 ; start of reserved word: FILE
1  5106
1  5107	    14D0  CD				 DB 0cdh
1  5108	    14D1  34E5r				 DW  L72DA		 ; NonZero --> error
1  5109	    14D3  24				 DB 24H			 ; error 36: Type identifier expected
1  5110
1  5111	    14D4  21				 DB 21h
1  5112	    14D5  37C7r				 DW FILEDEF		 ; address of definition of type
1  5113	    14D7  22				 DB 22h
1  5114	    14D8  3F14r				 DW L7B5A		 ; save	address	to definition info
1  5115	    14DA  CD				 DB 0cdh
1  5116	    14DB  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  5117
1  5118	    14DD			 L4F181:
1  5119	    14DD  AF				 DB 0afh
1  5120	    14DE  32				 DB 32h
1  5121	    14DF  3F4Ar				 DW L7B90		 ; 0 = not absolute, 255 = absolute
1  5122
1  5123	    14E1  3A				 DB 3ah
1  5124	    14E2  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  5125	    14E4  B7				 DB 0b7h
1  5126	    14E5  C0				 DB 0c0h		 ; return if VAR
1  5127	    14E6  3A				 DB 3ah
1  5128	    14E7  3F16r				 DW L7B5C
1  5129	    14E9  FE 05				 DB 0feh, 5
1  5130	    14EB  D8				 DB 0d8h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 91
msx_asm\tur_comp.ASM



1  5131	    14EC  FE 08				 DB 0feh, 8
1  5132	    14EE  D0				 DB 0d0h
1  5133
1  5134						 ; error: 5 (typed file), 6 (text) and 7 (untyped file)
1  5135	    14EF  CD				 DB 0cdh
1  5136	    14F0  34ECr				 DW  L72E1		 ; no condition
1  5137	    14F2  43				 DB 43H			 ; error 67: Files must	be variable parameters
1  5138
1  5139	    14F3  CD			 L4F35:	 DB 0cdh
1  5140	    14F4  1463r				 DW  L4EB5		 ; parse variable names
1  5141	    14F6  E5				 DB 0e5h		 ; save	variable position
1  5142	    14F7  C5				 DB 0c5h		 ; save	number of names	parsed
1  5143	    14F8  CD				 DB 0cdh
1  5144	    14F9  31A8r				 DW  L6F40		 ; match(':')
1  5145	    14FB  AF				 DB 0afh
1  5146	    14FC  32				 DB 32h
1  5147	    14FD  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  5148	    14FF  CD				 DB 0cdh
1  5149	    1500  148Br				 DW  L4EDD
1  5150	    1502  C1				 DB 0c1h
1  5151	    1503  3A				 DB 3ah
1  5152	    1504  3F4Ar				 DW L7B90		 ; 0 = not absolute, 255 = absolute
1  5153	    1506  B7				 DB 0b7h		 ; absolute?
1  5154	    1507  28 06				 DB 28h,(L4F51)-$-1		 ; no, continue
1  5155	    1509  78				 DB 78h
1  5156	    150A  3D				 DB 3dh
1  5157
1  5158	    150B  CD				 DB 0cdh
1  5159	    150C  34E5r				 DW  L72DA		 ; NonZero --> error
1  5160	    150E  4B				 DB 4BH			 ; error 75: Illegal use of ABSOLUTE
1  5161
1  5162	    150F  E1			 L4F51:	 DB 0e1h
1  5163
1  5164	    1510			 L4F52:	 ; in:	 B = number of variable	names parsed before the	type
1  5165	    1510  C5				 DB 0c5h
1  5166	    1511  E5				 DB 0e5h
1  5167	    1512  3A				 DB 3ah
1  5168	    1513  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  5169	    1515  21				 DB 21h
1  5170	    1516  0002				 DW 0002	 ; assume size = 2 if VAR
1  5171	    1518  B7				 DB 0b7h
1  5172	    1519  20 03				 DB 20h,(L4F60)-$-1		 ; jump	if VAR
1  5173	    151B  2A				 DB 02ah
1  5174	    151C  3F1Cr				 DW L7B62		 ; get real size
1  5175
1  5176	    151E  EB			 L4F60:	 DB 0ebh
1  5177	    151F  3A				 DB 3ah
1  5178	    1520  3F4Br				 DW L7B91
1  5179	    1522  B7				 DB 0b7h
1  5180	    1523  20 0B				 DB 20h,(L4F72)-$-1
1  5181	    1525  3A				 DB 3ah
1  5182	    1526  3F4Ar				 DW L7B90		 ; 0 = not absolute, 255 = absolute
1  5183	    1528  B7				 DB 0b7h		 ; variable at absolute	address	?
1  5184	    1529  20 05				 DB 20h,(L4F72)-$-1		 ; yes,	no allocation
1  5185
1  5186	    152B  CD				 DB 0cdh
1  5187	    152C  2D8Dr				 DW  L6C30		 ; allocate data space,	HL = address
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 92
msx_asm\tur_comp.ASM



1  5188	    152E  18 09				 DB 18h,( L4F7B)-$-1
1  5189
1  5190	    1530  2A			 L4F72:	 DB 02ah
1  5191	    1531  3F39r				 DW L7B7F
1  5192	    1533  E5				 DB 0e5h
1  5193	    1534  19				 DB 019h
1  5194	    1535  22				 DB 22h
1  5195	    1536  3F39r				 DW L7B7F
1  5196	    1538  E1				 DB 0e1h
1  5197	    1539  EB			 L4F7B:	 DB 0ebh		 ; DE =	address	of variable space
1  5198	    153A  E1				 DB 0e1h		 ; HL =	start of declaration
1  5199	    153B  2B				 DB 2bh
1  5200	    153C  2B			 L4F7E:	 DB 2bh
1  5201	    153D  CB 7E				 DB 0cbh,07eh
1  5202	    153F  28 FB				 DB 28h,(L4F7E)-$-1
1  5203	    1541  2B				 DB 2bh			 ; HL =	points to byte after name
1  5204	    1542  3A				 DB 3ah
1  5205	    1543  3F49r				 DW L7B8F		 ; 0 = no VAR, 255 = VAR
1  5206	    1545  77				 DB 77h		 ; place on byte after name
1  5207	    1546  2B				 DB 2bh
1  5208	    1547  72				 DB 72h		 ; high	byte of	variable space address
1  5209	    1548  2B				 DB 2bh
1  5210	    1549  73				 DB 73h		 ; put low byte
1  5211	    154A  2B				 DB 2bh
1  5212	    154B  ED 5B				 DB 0edh,5bh
1  5213	    154D  3F14r				 DW L7B5A		 ; type	info address
1  5214	    154F  72				 DB 72h
1  5215	    1550  2B				 DB 2bh
1  5216	    1551  73				 DB 73h
1  5217	    1552  2B				 DB 2bh			 ; point to high byte of offset
1  5218	    1553  2B				 DB 2bh			 ; point to low	byte of	offset
1  5219	    1554  2B				 DB 2bh			 ; address of next possible declaration
1  5220	    1555  C1				 DB 0c1h
1  5221	    1556  10 B8				 DB 10h,( L4F52)-$-1		 ; repeat for the next variable
1  5222									 ; of the same type
1  5223	    1558  C9				 DB 0c9h
1  5224
1  5225	    1559			 L4F9B:	 ; in:	 HL = start of identifier list
1  5226						 ; out:	 -
1  5227	    1559  CD				 DB 0cdh
1  5228	    155A  1586r				 DW  L4FC8		 ; find	type identifier
1  5229	    155C  C8				 DB 0c8h		 ; quit	if found
1  5230
1  5231	    155D  CD				 DB 0cdh
1  5232	    155E  30DEr				 DW  L6E76
1  5233	    1560  3817r				 DW L7542		 ; start of reserved word: PACKED
1  5234									 ; just	reads(eats) it away
1  5235
1  5236	    1562  CD				 DB 0cdh
1  5237	    1563  1599r				 DW  L4FDB		 ; parses an ARRAY
1  5238	    1565  C8				 DB 0c8h		 ; quit	if an ARRAY was	parsed
1  5239
1  5240	    1566  CD				 DB 0cdh
1  5241	    1567  15F7r				 DW  L5039		 ; parses a RECORD
1  5242	    1569  C8				 DB 0c8h		 ; quit	if a RECORD was	parsed
1  5243
1  5244	    156A  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 93
msx_asm\tur_comp.ASM



1  5245	    156B  16C4r				 DW  L5106		 ; parses a SET
1  5246	    156D  C8				 DB 0c8h		 ; quit	if a SET was parsed
1  5247
1  5248	    156E  CD				 DB 0cdh
1  5249	    156F  16FEr				 DW  L5140
1  5250	    1571  C8				 DB 0c8h
1  5251
1  5252	    1572  CD				 DB 0cdh
1  5253	    1573  1729r				 DW  L516B		 ; parses a FILE
1  5254	    1575  C8				 DB 0c8h		 ; quit	if a FILE was parsed
1  5255
1  5256	    1576  CD				 DB 0cdh
1  5257	    1577  1763r				 DW  L51A5		 ; parses a STRING type
1  5258	    1579  C8				 DB 0c8h		 ; quit	if a STRING was	parsed
1  5259
1  5260	    157A  CD				 DB 0cdh
1  5261	    157B  1783r				 DW  L51C5		 ; parses a SCALAR type
1  5262	    157D  C8				 DB 0c8h		 ; quit	if a SCALAR type was parsed
1  5263
1  5264	    157E  CD				 DB 0cdh
1  5265	    157F  17CEr				 DW  L5210		 ; parses a subrange-type
1  5266	    1581  C8				 DB 0c8h		 ; quit	if a <m>..<n> parsed
1  5267
1  5268	    1582  CD				 DB 0cdh
1  5269	    1583  34ECr				 DW  L72E1		 ; no condition
1  5270	    1585  24				 DB 24H			 ; error 36: Type identifier expected
1  5271
1  5272	    1586			 L4FC8:	 ; SYNTAX: type-identifier ::= identifier
1  5273						 ; in:	 IX = address of current type identifier in text
1  5274						 ; out:	 Z = 0,	type identifier	found and L7B5C..L7B63 filled in
1  5275	    1586  01				 DB 01h
1  5276	    1587  0300				 DW 300H	 ; type	identifier ?
1  5277	    1589  CD				 DB 0cdh
1  5278	    158A  30BCr				 DW  L6E54		 ; check if current in id list,	types
1  5279									 ; HL =	address	of info
1  5280	    158C  C0				 DB 0c0h		 ; quit	if type	identifier not found
1  5281
1  5282						 ; HL =	address	of pointer to definition of type
1  5283	    158D  56				 DB 56h		 ; DE =	address	of type	definition
1  5284	    158E  2B				 DB 2bh
1  5285	    158F  5E				 DB 5eh
1  5286	    1590  EB				 DB 0ebh
1  5287	    1591  22				 DB 22h
1  5288	    1592  3F14r				 DW L7B5A		 ; save	address	to definition info
1  5289	    1594  CD				 DB 0cdh
1  5290	    1595  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  5291	    1597  AF				 DB 0afh
1  5292	    1598  C9				 DB 0c9h
1  5293
1  5294	    1599			 L4FDB:	 ; parses a complete ARRAY type
1  5295	    1599  CD				 DB 0cdh
1  5296	    159A  30DEr				 DW  L6E76
1  5297	    159C  381Dr				 DW L7548		 ; start of reserved word: ARRAY
1  5298	    159E  C0				 DB 0c0h
1  5299
1  5300	    159F  CD				 DB 0cdh
1  5301	    15A0  3198r				 DW  L6F30		 ; match('[')
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 94
msx_asm\tur_comp.ASM



1  5302
1  5303	    15A2  06 00				 DB 06h,0			 ; 0 indices
1  5304
1  5305	    15A4  C5			 L4FE6:	 DB 0c5h
1  5306	    15A5  CD				 DB 0cdh
1  5307	    15A6  1804r				 DW  L523B		 ; parse a simple-type = index-type
1  5308	    15A8  C1				 DB 0c1h
1  5309
1  5310	    15A9  2A				 DB 02ah
1  5311	    15AA  3F14r				 DW L7B5A		 ; HL =	address	of type	info
1  5312	    15AC  E5				 DB 0e5h
1  5313
1  5314	    15AD  2A				 DB 02ah
1  5315	    15AE  3F1Ar				 DW L7B60		 ; HL =	maximum	value
1  5316	    15B0  ED 5B				 DB 0edh,5bh
1  5317	    15B2  3F18r				 DW L7B5E		 ; DE =	minimum	value
1  5318	    15B4  B7				 DB 0b7h
1  5319	    15B5  ED 52				 DB 0EDH,052h
1  5320	    15B7  23				 DB 23h
1  5321	    15B8  7C				 DB 7ch
1  5322	    15B9  B5				 DB 0b5h
1  5323
1  5324	    15BA  CD				 DB 0cdh
1  5325	    15BB  34DFr				 DW  L72D4		 ; Zero	--> error
1  5326	    15BD  62				 DB 62H			 ; error 98: Memory overflow
1  5327
1  5328	    15BE  E5				 DB 0e5h		 ; push	range size
1  5329
1  5330	    15BF  04				 DB 04h			 ; increase # indices
1  5331	    15C0  CD				 DB 0cdh
1  5332	    15C1  317Br				 DW  L6F13		 ; match(','), if present
1  5333	    15C3  28 DF				 DB 28h,(L4FE6)-$-1		 ; jump	if ',' matched
1  5334
1  5335	    15C5  C5				 DB 0c5h
1  5336
1  5337	    15C6  CD				 DB 0cdh
1  5338	    15C7  31A0r				 DW  L6F38		 ; match(']')
1  5339	    15C9  CD				 DB 0cdh
1  5340	    15CA  31F0r				 DW  L6F88		 ; match('OF')
1  5341	    15CC  CD				 DB 0cdh
1  5342	    15CD  1559r				 DW  L4F9B		 ; parse every possible	type
1  5343
1  5344	    15CF  C1				 DB 0c1h		 ; B = # indices
1  5345
1  5346						 ; parsed: 0..15 , 15..32
1  5347						 ; stack:	 <type info>	 info of 0..15
1  5348						 ;		 <range	size>	 16
1  5349						 ;		 <type info>	 info of 15..32
1  5350						 ;		 <range	size>	 18
1  5351
1  5352	    15D0  2A			 L5012:	 DB 02ah
1  5353	    15D1  3F14r				 DW L7B5A		 ; HL =	address	of last	type info
1  5354	    15D3  22				 DB 22h
1  5355	    15D4  3F18r				 DW L7B5E
1  5356
1  5357	    15D6  2A				 DB 02ah
1  5358	    15D7  3F1Cr				 DW L7B62		 ; HL =	total size of array declaration
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 95
msx_asm\tur_comp.ASM



1  5359
1  5360	    15D9  D1				 DB 0d1h		 ; DE =	range size of last
1  5361
1  5362	    15DA  C5				 DB 0c5h		 ; save	count
1  5363	    15DB  CD				 DB 0cdh
1  5364	    15DC  34BFr				 DW  L729A		 ; multiply HL = HL * DE
1  5365
1  5366	    15DE  CD				 DB 0cdh
1  5367	    15DF  34D3r				 DW  L72C8		 ; carry set --> error
1  5368	    15E1  62				 DB 62H			 ; error 98: Memory overflow
1  5369	    15E2  C1				 DB 0c1h		 ; restore count
1  5370
1  5371	    15E3  22				 DB 22h
1  5372	    15E4  3F1Cr				 DW L7B62		 ; set new size	of array declaration
1  5373
1  5374	    15E6  E1				 DB 0e1h
1  5375	    15E7  22				 DB 22h
1  5376	    15E8  3F1Ar				 DW L7B60		 ; HL =	address	to info	about index-type
1  5377	    15EA  3E 01				 DB 3eh,1
1  5378	    15EC  32				 DB 32h
1  5379	    15ED  3F16r				 DW L7B5C
1  5380	    15EF  C5				 DB 0c5h
1  5381	    15F0  CD				 DB 0cdh
1  5382	    15F1  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5383									 ; L7B5A = address of this struct
1  5384	    15F3  C1				 DB 0c1h
1  5385	    15F4  10 DA				 DB 10h,( L5012)-$-1
1  5386	    15F6  C9				 DB 0c9h
1  5387
1  5388	    15F7			 L5039:	 ; parses a complete RECORD type
1  5389	    15F7  CD				 DB 0cdh
1  5390	    15F8  30DEr				 DW  L6E76
1  5391	    15FA  3829r				 DW L7554		 ; start of reserved word: RECORD
1  5392	    15FC  C0				 DB 0c0h
1  5393	    15FD  3A				 DB 3ah
1  5394	    15FE  3F54r				 DW L7B9A
1  5395	    1600  F5				 DB 0f5h
1  5396	    1601  3A				 DB 3ah
1  5397	    1602  3F4Br				 DW L7B91
1  5398	    1604  F5				 DB 0f5h
1  5399	    1605  21				 DB 21h
1  5400	    1606  3F4Cr				 DW L7B92
1  5401	    1608  34				 DB 034h		 ; increase depth within record	?
1  5402	    1609  7E				 DB 7eh
1  5403	    160A  32				 DB 32h
1  5404	    160B  3F4Br				 DW L7B91
1  5405	    160D  2A				 DB 02ah
1  5406	    160E  3F39r				 DW L7B7F
1  5407	    1610  E5				 DB 0e5h
1  5408	    1611  2A				 DB 02ah
1  5409	    1612  3F3Br				 DW L7B81
1  5410	    1614  E5				 DB 0e5h
1  5411	    1615  21				 DB 21h
1  5412	    1616  0000				 DW 0000
1  5413	    1618  22				 DB 22h
1  5414	    1619  3F39r				 DW L7B7F
1  5415	    161B  22				 DB 22h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 96
msx_asm\tur_comp.ASM



1  5416	    161C  3F3Br				 DW L7B81
1  5417	    161E  AF				 DB 0afh
1  5418	    161F  32				 DB 32h
1  5419	    1620  3F54r				 DW L7B9A
1  5420	    1622  CD				 DB 0cdh
1  5421	    1623  1649r				 DW  L508B
1  5422	    1625  2A				 DB 02ah
1  5423	    1626  3F3Br				 DW L7B81
1  5424	    1628  22				 DB 22h
1  5425	    1629  3F1Cr				 DW L7B62
1  5426	    162B  E1				 DB 0e1h
1  5427	    162C  22				 DB 22h
1  5428	    162D  3F3Br				 DW L7B81
1  5429	    162F  E1				 DB 0e1h
1  5430	    1630  22				 DB 22h
1  5431	    1631  3F39r				 DW L7B7F
1  5432	    1633  3A				 DB 3ah
1  5433	    1634  3F4Br				 DW L7B91
1  5434	    1636  32				 DB 32h
1  5435	    1637  3F17r				 DW L7B5D
1  5436	    1639  F1				 DB 0f1h
1  5437	    163A  32				 DB 32h
1  5438	    163B  3F4Br				 DW L7B91
1  5439	    163D  F1				 DB 0f1h
1  5440	    163E  32				 DB 32h
1  5441	    163F  3F54r				 DW L7B9A
1  5442	    1641  3E 02				 DB 3eh,2
1  5443	    1643  32				 DB 32h
1  5444	    1644  3F16r				 DW L7B5C
1  5445	    1646  C3				 DB 0c3h
1  5446	    1647  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5447									 ; L7B5A = address of this struct
1  5448
1  5449	    1649  CD			 L508B:	 DB 0cdh
1  5450	    164A  16B7r				 DW  L50F9
1  5451	    164C  C8				 DB 0c8h
1  5452	    164D  CD				 DB 0cdh
1  5453	    164E  30DEr				 DW  L6E76
1  5454	    1650  38AFr				 DW L75DA		 ; start of reserved word: CASE
1  5455	    1652  28 1A				 DB 28h,(L50B0)-$-1
1  5456	    1654  CD				 DB 0cdh
1  5457	    1655  14F3r				 DW  L4F35
1  5458	    1657  2A				 DB 02ah
1  5459	    1658  3F39r				 DW L7B7F
1  5460	    165A  ED 5B				 DB 0edh,5bh
1  5461	    165C  3F3Br				 DW L7B81
1  5462	    165E  B7				 DB 0b7h
1  5463	    165F  ED 52				 DB 0EDH,052h
1  5464	    1661  38 04				 DB 38h,(L50A9)-$-1
1  5465	    1663  19				 DB 019h
1  5466	    1664  22				 DB 22h
1  5467	    1665  3F3Br				 DW L7B81
1  5468	    1667  CD			 L50A9:	 DB 0cdh
1  5469	    1668  3177r				 DW  L6F0F		 ; match(';'), if present
1  5470	    166A  28 DD				 DB 28h,(L508B)-$-1		 ; jump	if ';' matched
1  5471	    166C  18 38				 DB 18h,( L50E8)-$-1
1  5472
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 97
msx_asm\tur_comp.ASM



1  5473	    166E  CD			 L50B0:	 DB 0cdh
1  5474	    166F  1586r				 DW  L4FC8		 ; find	type identifier
1  5475	    1671  C4				 DB 0c4h
1  5476	    1672  14F3r				 DW L4F35
1  5477
1  5478	    1674  CD				 DB 0cdh
1  5479	    1675  31F0r				 DW  L6F88		 ; match('OF')
1  5480
1  5481	    1677  CD			 L50B9:	 DB 0cdh
1  5482	    1678  16B7r				 DW  L50F9
1  5483	    167A  C8				 DB 0c8h
1  5484
1  5485	    167B  2A				 DB 02ah
1  5486	    167C  3F39r				 DW L7B7F
1  5487	    167E  E5				 DB 0e5h
1  5488
1  5489	    167F  CD			 L50C1:	 DB 0cdh
1  5490	    1680  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  5491									 ; error if not	found
1  5492	    1682  CD				 DB 0cdh
1  5493	    1683  317Br				 DW  L6F13		 ; match(','), if present
1  5494	    1685  28 F8				 DB 28h,(L50C1)-$-1		 ; jump	if ',' matched
1  5495	    1687  CD				 DB 0cdh
1  5496	    1688  31A8r				 DW  L6F40		 ; match(':')
1  5497	    168A  CD				 DB 0cdh
1  5498	    168B  31CEr				 DW  L6F66		 ; match('(')
1  5499	    168D  3A				 DB 3ah
1  5500	    168E  3F54r				 DW L7B9A
1  5501	    1690  F5				 DB 0f5h
1  5502	    1691  3E FF				 DB 3eh,0FFH
1  5503	    1693  32				 DB 32h
1  5504	    1694  3F54r				 DW L7B9A
1  5505	    1696  CD				 DB 0cdh
1  5506	    1697  1649r				 DW  L508B
1  5507	    1699  F1				 DB 0f1h
1  5508	    169A  32				 DB 32h
1  5509	    169B  3F54r				 DW L7B9A
1  5510	    169D  E1				 DB 0e1h
1  5511	    169E  22				 DB 22h
1  5512	    169F  3F39r				 DW L7B7F
1  5513	    16A1  CD				 DB 0cdh
1  5514	    16A2  3177r				 DW  L6F0F		 ; match(';'), if present
1  5515	    16A4  28 D1				 DB 28h,(L50B9)-$-1		 ; jump	if ';' matched
1  5516	    16A6  3A			 L50E8:	 DB 3ah
1  5517	    16A7  3F54r				 DW L7B9A
1  5518	    16A9  B7				 DB 0b7h
1  5519	    16AA  C2				 DB 0c2h
1  5520	    16AB  31D6r				 DW L6F6E		  ; match(')')
1  5521	    16AD  CD				 DB 0cdh
1  5522	    16AE  30DEr				 DW  L6E76
1  5523	    16B0  3805r				 DW L7530		 ; start of reserved word: END
1  5524	    16B2  C8				 DB 0c8h
1  5525
1  5526	    16B3  CD				 DB 0cdh
1  5527	    16B4  34ECr				 DW  L72E1		 ; no condition
1  5528	    16B6  0E				 DB 0EH			 ; error 14: END expected
1  5529
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 98
msx_asm\tur_comp.ASM



1  5530	    16B7  3A			 L50F9:	 DB 3ah
1  5531	    16B8  3F54r				 DW L7B9A
1  5532	    16BA  B7				 DB 0b7h
1  5533	    16BB  C2				 DB 0c2h
1  5534	    16BC  3187r				 DW L6F1F		 ; match(')'), if present
1  5535									 ; and return
1  5536	    16BE  CD				 DB 0cdh
1  5537	    16BF  30DEr				 DW  L6E76
1  5538	    16C1  3805r				 DW L7530		 ; start of reserved word: END
1  5539	    16C3  C9				 DB 0c9h
1  5540
1  5541	    16C4			 L5106:	 ; parses a complete SET type
1  5542	    16C4  CD				 DB 0cdh
1  5543	    16C5  30DEr				 DW  L6E76
1  5544	    16C7  3826r				 DW L7551		 ; start of reserved word: SET
1  5545	    16C9  C0				 DB 0c0h
1  5546	    16CA  CD				 DB 0cdh
1  5547	    16CB  31F0r				 DW  L6F88		 ; match('OF')
1  5548	    16CD  CD				 DB 0cdh
1  5549	    16CE  1804r				 DW  L523B		 ; parse a simple-type = base-type
1  5550	    16D0  2A				 DB 02ah
1  5551	    16D1  3F1Ar				 DW L7B60
1  5552	    16D3  ED 5B				 DB 0edh,5bh
1  5553	    16D5  3F18r				 DW L7B5E
1  5554	    16D7  7C				 DB 7ch
1  5555	    16D8  B2				 DB 0b2h
1  5556
1  5557	    16D9  CD				 DB 0cdh
1  5558	    16DA  34E5r				 DW  L72DA		 ; NonZero --> error
1  5559	    16DC  46				 DB 46H			 ; error 70: Set base type out of range
1  5560
1  5561	    16DD  CB 3D				 DB 0cbh,3dh
1  5562	    16DF  CB 3D				 DB 0cbh,3dh
1  5563	    16E1  CB 3D				 DB 0cbh,3dh
1  5564	    16E3  CB 3B				 DB 0cbh,3bh
1  5565	    16E5  CB 3B				 DB 0cbh,3bh
1  5566	    16E7  CB 3B				 DB 0cbh,3bh
1  5567	    16E9  7D				 DB 7dh
1  5568	    16EA  3C				 DB 3ch
1  5569	    16EB  93				 DB 093h
1  5570	    16EC  6F				 DB 6fh
1  5571	    16ED  22				 DB 22h
1  5572	    16EE  3F1Cr				 DW L7B62
1  5573	    16F0  2A				 DB 02ah
1  5574	    16F1  3F14r				 DW L7B5A
1  5575	    16F3  22				 DB 22h
1  5576	    16F4  3F18r				 DW L7B5E
1  5577	    16F6  3E 03				 DB 3eh,3
1  5578	    16F8  32				 DB 32h
1  5579	    16F9  3F16r				 DW L7B5C		 ; type	= SET
1  5580	    16FB  C3				 DB 0c3h
1  5581	    16FC  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5582									 ; L7B5A = address of this struct
1  5583
1  5584	    16FE  CD			 L5140:	 DB 0cdh
1  5585	    16FF  318Fr				 DW  L6F27		 ; match('^')
1  5586	    1701  C0				 DB 0c0h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 99
msx_asm\tur_comp.ASM



1  5587	    1702  11				 DB 11h
1  5588	    1703  0000				 DW 0000
1  5589	    1705  CD				 DB 0cdh
1  5590	    1706  2F17r				 DW  L6D75		 ; add DE to id	table
1  5591	    1708  2A				 DB 02ah
1  5592	    1709  3F2Dr				 DW L7B73
1  5593	    170B  E5				 DB 0e5h
1  5594	    170C  CD				 DB 0cdh
1  5595	    170D  2F66r				 DW  L6DBA
1  5596	    170F  CD				 DB 0cdh
1  5597	    1710  2F72r				 DW  L6DC6		 ; add length
1  5598	    1712  E1				 DB 0e1h
1  5599	    1713  22				 DB 22h
1  5600	    1714  3F18r				 DW L7B5E
1  5601	    1716  3E 04				 DB 3eh,4			 ; type	= POINTER
1  5602	    1718  32				 DB 32h
1  5603	    1719  3F16r				 DW L7B5C
1  5604	    171B  3E FF				 DB 3eh,0FFH
1  5605	    171D  32				 DB 32h
1  5606	    171E  3F17r				 DW L7B5D
1  5607	    1720  21				 DB 21h
1  5608	    1721  0002				 DW 0002
1  5609	    1723  22				 DB 22h
1  5610	    1724  3F1Cr				 DW L7B62		 ; length = 2 bytes
1  5611	    1726  C3				 DB 0c3h
1  5612	    1727  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5613									 ; L7B5A = address of this struct
1  5614
1  5615	    1729			 L516B:	 ; parses a complete FILE type
1  5616	    1729  CD				 DB 0cdh
1  5617	    172A  30DEr				 DW  L6E76
1  5618	    172C  3822r				 DW L754D		 ; start of reserved word: FILE
1  5619	    172E  C0				 DB 0c0h		 ; return if no	FILE found
1  5620
1  5621	    172F  CD				 DB 0cdh
1  5622	    1730  30DEr				 DW  L6E76
1  5623	    1732  3835r				 DW L7560		 ; start of reserved word: OF
1  5624	    1734  20 1F				 DB 20h,(L5197)-$-1		 ; jump	if no OF found,	untyped	file found
1  5625
1  5626	    1736  CD				 DB 0cdh
1  5627	    1737  1559r				 DW  L4F9B		 ; parse every possible	type
1  5628
1  5629	    1739  3A				 DB 3ah
1  5630	    173A  3F16r				 DW L7B5C
1  5631	    173C  FE 05				 DB 0feh, 5
1  5632	    173E  38 08				 DB 38h,(L518A)-$-1		 ; < 5,	a typed	file
1  5633	    1740  FE 08				 DB 0feh, 8
1  5634	    1742  30 04				 DB 30h,(L518A)-$-1		 ; jump	if >= 8
1  5635
1  5636	    1744  CD				 DB 0cdh
1  5637	    1745  34ECr				 DW  L72E1		 ; no condition
1  5638	    1747  44				 DB 44H			 ; error 68: File components can not be	files
1  5639
1  5640	    1748  2A			 L518A:	 DB 02ah
1  5641	    1749  3F14r				 DW L7B5A
1  5642	    174B  22				 DB 22h
1  5643	    174C  3F18r				 DW L7B5E
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 100
msx_asm\tur_comp.ASM



1  5644	    174E  3E 05				 DB 3eh,5			 ; typed file does have	a sector buffer
1  5645	    1750  21				  DB 21h
1  5646	    1751  0051				 DW DOS_LEN-128		 ; 33e bug ????? ; length of FIB with sector buffer
1  5647	    1753  18 05				 DB 18h,( L519C)-$-1
1  5648
1  5649	    1755  3E 07			 L5197:	 DB 3eh,7			 ; untyped file	has no sector buffer
1  5650	    1757  21				  DB 21h
1  5651	    1758  0051				 DW DOS_LEN-128		 ; length of FIB without sector	buffer
1  5652
1  5653	    175A  32			 L519C:	 DB 32h
1  5654	    175B  3F16r				 DW L7B5C		 ; save	type (5, 6 or 7)
1  5655	    175D  22				 DB 22h
1  5656	    175E  3F1Cr				 DW L7B62		 ; save	length
1  5657	    1760  C3				 DB 0c3h
1  5658	    1761  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5659									 ; L7B5A = address of this struct
1  5660
1  5661	    1763			 L51A5:	 ; parses a complete STRING type
1  5662	    1763  CD				 DB 0cdh
1  5663	    1764  30DEr				 DW  L6E76
1  5664	    1766  382Fr				 DW L755A		 ; start of reserved word: STRING
1  5665	    1768  C0				 DB 0c0h
1  5666
1  5667	    1769  CD				 DB 0cdh
1  5668	    176A  3198r				 DW  L6F30		 ; match('[')
1  5669
1  5670	    176C  CD				 DB 0cdh
1  5671	    176D  2ACCr				 DW  L69F2		 ; parse integer constant
1  5672
1  5673	    176F  24				 DB 24h			 ; length >= 256 ?
1  5674	    1770  25				 DB 25h
1  5675
1  5676	    1771  CD				 DB 0cdh
1  5677	    1772  34E5r				 DW  L72DA		 ; NonZero --> error
1  5678	    1774  31				 DB 31H			 ; error 49: Invalid String length
1  5679
1  5680	    1775  2C				 DB 2ch			 ; length = 0 ?
1  5681	    1776  2D				 DB 2dh
1  5682
1  5683	    1777  CD				 DB 0cdh
1  5684	    1778  34DFr				 DW  L72D4		 ; Zero	--> error
1  5685	    177A  31				 DB 31H			 ; error 49: Invalid String length
1  5686
1  5687	    177B  CD				 DB 0cdh
1  5688	    177C  31A0r				 DW  L6F38		 ; match(']')
1  5689	    177E  23				 DB 23h			 ; length + 1 =	string + count byte
1  5690	    177F  3E 08				 DB 3eh,8			 ; type	= STRING
1  5691	    1781  18 D7				 DB 18h,( L519C)-$-1
1  5692
1  5693	    1783			 L51C5:	 ; SYNTAX: scalar-type ::= ( identifier	{, identifier }	)
1  5694						 ; parses a complete SCALAR type
1  5695	    1783  CD				 DB 0cdh
1  5696	    1784  3183r				 DW  L6F1B		 ; match('('), if present
1  5697	    1786  C0				 DB 0c0h		 ; return if '(' not matched
1  5698
1  5699	    1787  21				 DB 21h
1  5700	    1788  FFFF				 DW -1		 ; HL =	upper bound = -1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 101
msx_asm\tur_comp.ASM



1  5701
1  5702						 ; (Maandag,Dinsdag,Woensdag,Donderdag,Vrijdag)
1  5703						 ; (0,	   1,	  2,	  3,	   4	 )
1  5704
1  5705	    178A  E5			 L51CC:	 DB 0e5h
1  5706	    178B  11				 DB 11h
1  5707	    178C  0200				 DW 200H	 ; constant
1  5708	    178E  CD				 DB 0cdh
1  5709	    178F  2F17r				 DW  L6D75		 ; add DE to id	table
1  5710	    1791  CD				 DB 0cdh
1  5711	    1792  2F33r				 DW  L6D87		 ; add identifier to id	table
1  5712	    1794  3A				 DB 3ah
1  5713	    1795  3F4Dr				 DW L7B93
1  5714	    1797  CD				 DB 0cdh
1  5715	    1798  2F26r				 DW  L6D7A		 ; add byte to id table
1  5716
1  5717	    179A  D1				 DB 0d1h
1  5718	    179B  13				 DB 13h			 ; increase upper bound, value of constant
1  5719	    179C  D5				 DB 0d5h
1  5720
1  5721	    179D  CD				 DB 0cdh
1  5722	    179E  2F17r				 DW  L6D75		 ; add DE to id	table, value of	constant
1  5723	    17A0  CD				 DB 0cdh
1  5724	    17A1  2F72r				 DW  L6DC6		 ; add length
1  5725
1  5726	    17A3  E1				 DB 0e1h		 ; HL =	upper bound
1  5727
1  5728	    17A4  CD				 DB 0cdh
1  5729	    17A5  317Br				 DW  L6F13		 ; match(','), if present
1  5730	    17A7  28 E1				 DB 28h,(L51CC)-$-1		 ; jump	if ',' matched
1  5731
1  5732	    17A9  CD				 DB 0cdh
1  5733	    17AA  31D6r				 DW  L6F6E		 ; match(')')
1  5734
1  5735	    17AC  E5				 DB 0e5h
1  5736
1  5737	    17AD  21				 DB 21h
1  5738	    17AE  3F4Dr				 DW L7B93
1  5739	    17B0  7E				 DB 7eh
1  5740	    17B1  34				 DB 034h		 ; increase type for next SCALAR
1  5741
1  5742	    17B2  E1				 DB 0e1h		 ; HL =	upper bound
1  5743
1  5744	    17B3  11				 DB 11h
1  5745	    17B4  0000				 DW 0000	 ; SCALAR lower	bound =	0
1  5746
1  5747	    17B6  32			 L51F8:	 DB 32h
1  5748	    17B7  3F16r				 DW L7B5C		 ; save	type
1  5749	    17B9  53ED 3F18r			 DW 53edh,L7B5E		 ; save	lower bound
1  5750	    17BD  22				 DB 22h
1  5751	    17BE  3F1Ar				 DW L7B60		 ; save	upper bound
1  5752	    17C0  7A				 DB 7ah			 ; difference >= 256 ?
1  5753	    17C1  B4				 DB 0b4h
1  5754	    17C2  21				 DB 21h
1  5755	    17C3  0001				 DW 0001	 ; assume one byte
1  5756	    17C5  28 01				 DB 28h,(L520A)-$-1		 ; jump	if only	one byte needed
1  5757
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 102
msx_asm\tur_comp.ASM



1  5758	    17C7  23				 DB 23h			 ; no, two bytes needed
1  5759
1  5760	    17C8  22			 L520A:	 DB 22h
1  5761	    17C9  3F1Cr				 DW L7B62		 ; save	size
1  5762	    17CB  C3				 DB 0c3h
1  5763	    17CC  181Dr				 DW  L5254		 ; add L7B5C..L7B63 as new struct
1  5764									 ; L7B5A = address of this struct
1  5765
1  5766	    17CE			 L5210:	 ; SYNTAX: subrange-type ::= constant .. constant
1  5767						 ; parses a complete <m>..<n> type
1  5768	    17CE  3E 0A				 DB 3eh,0AH		 ; default type	= INTEGER
1  5769	    17D0  32				 DB 32h
1  5770	    17D1  2036r				 DW DEF_TYPE
1  5771
1  5772	    17D3  CD				 DB 0cdh
1  5773	    17D4  2AECr				 DW  L6A0D		 ; parse a constant of any type
1  5774	    17D6  C0				 DB 0c0h		 ; return if not succeeded
1  5775
1  5776	    17D7  78				 DB 78h
1  5777	    17D8  F5				 DB 0f5h
1  5778
1  5779	    17D9  FE 0A				 DB 0feh, 0AH			 ; type	= INTEGER, BOOLEAN or CHAR ?
1  5780	    17DB  CD				 DB 0cdh
1  5781	    17DC  34D3r				 DW  L72C8		 ; carry set --> error (type < 0AH)
1  5782	    17DE  33				 DB 33H			 ; error 51: Invalid subrange base type
1  5783
1  5784	    17DF  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  5785	    17E1  CD				 DB 0cdh
1  5786	    17E2  34DFr				 DW  L72D4		 ; Zero	--> error
1  5787	    17E4  33				 DB 33H			 ; error 51: Invalid subrange base type
1  5788
1  5789	    17E5  E5				 DB 0e5h		 ; save	value of <m>
1  5790
1  5791	    17E6  CD				 DB 0cdh
1  5792	    17E7  30DEr				 DW  L6E76
1  5793	    17E9  3855r				 DW L7580		 ; start of reserved word: ..
1  5794
1  5795	    17EB  CD				 DB 0cdh
1  5796	    17EC  34E5r				 DW  L72DA		 ; NonZero --> error
1  5797	    17EE  0B				 DB 0BH			 ; error 11: '..' expected
1  5798
1  5799	    17EF  CD				 DB 0cdh
1  5800	    17F0  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  5801									 ; error if not	found
1  5802
1  5803	    17F2  D1				 DB 0d1h		 ; HL =	value of <n>
1  5804									 ; DE =	value of <m>
1  5805	    17F3  F1				 DB 0f1h		 ; A = type of <m>
1  5806	    17F4  F5				 DB 0f5h
1  5807	    17F5  B8				 DB 0b8h		 ; <m> type = <n> type ?
1  5808
1  5809	    17F6  CD				 DB 0cdh
1  5810	    17F7  34E5r				 DW  L72DA		 ; NonZero --> error
1  5811	    17F9  2C				 DB 2CH			 ; error 44: Type mismatch
1  5812
1  5813	    17FA  CD				 DB 0cdh
1  5814	    17FB  34B2r				 DW  L728D		 ; check if lower bound	<= upper bound
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 103
msx_asm\tur_comp.ASM



1  5815
1  5816	    17FD  CD				 DB 0cdh
1  5817	    17FE  34D3r				 DW  L72C8		 ; carry set --> error
1  5818	    1800  34				 DB 34H			 ; error 52: Lower bound > upper bound
1  5819
1  5820	    1801  F1				 DB 0f1h		 ; A = type of <m>
1  5821	    1802  18 B2				 DB 18h,( L51F8)-$-1
1  5822
1  5823	    1804			 L523B:	 ; SYNTAX: base-type   ::=
1  5824						 ;	  index-type  ::=
1  5825						 ;	  simple-type ::= scalar-type |	subrange-type |	type-identifier
1  5826	    1804  CD				 DB 0cdh
1  5827	    1805  17CEr				 DW  L5210		 ; parses a subrange-type
1  5828	    1807  C8				 DB 0c8h		 ; quit	if a <m>..<n> parsed
1  5829
1  5830	    1808  CD				 DB 0cdh
1  5831	    1809  1783r				 DW  L51C5		 ; parses a SCALAR type
1  5832	    180B  C8				 DB 0c8h		 ; quit	if a SCALAR type was parsed
1  5833
1  5834	    180C  CD				 DB 0cdh
1  5835	    180D  1586r				 DW  L4FC8		 ; find	type identifier
1  5836
1  5837	    180F  CD				 DB 0cdh
1  5838	    1810  34E5r				 DW  L72DA		 ; NonZero --> error
1  5839	    1812  1E				 DB 1EH			 ; error 30: Simple type expected
1  5840
1  5841	    1813  3A				 DB 3ah
1  5842	    1814  3F16r				 DW L7B5C
1  5843	    1816  FE 0A				 DB 0feh, 0AH
1  5844	    1818  D0				 DB 0d0h		 ; return if type = INTEGER, BOOLEAN or	CHAR
1  5845
1  5846	    1819  CD				 DB 0cdh
1  5847	    181A  34ECr				 DW  L72E1		 ; no condition
1  5848	    181C  1E				 DB 1EH			 ; error 30: Simple type expected
1  5849
1  5850	    181D			 L5254:	 ; add L7B5C ..	L7B63
1  5851						 ; out:	 A = 0,	NonCarry, Z-flag = 1
1  5852						 ;	 L7B5A points to last added type
1  5853	    181D  11				 DB 11h
1  5854	    181E  0800				 DW 800H
1  5855	    1820  CD				 DB 0cdh
1  5856	    1821  2F17r				 DW  L6D75		 ; add DE to id	table
1  5857	    1823  2A				 DB 02ah
1  5858	    1824  3F2Dr				 DW L7B73
1  5859	    1826  22				 DB 22h
1  5860	    1827  3F14r				 DW L7B5A		 ; save	for connection with last added type
1  5861
1  5862	    1829  21				 DB 21h
1  5863	    182A  3F16r				 DW L7B5C
1  5864	    182C  06 08				 DB 06h,8
1  5865
1  5866	    182E  7E			 L5265:	 DB 7eh
1  5867	    182F  CD				 DB 0cdh
1  5868	    1830  2F26r				 DW  L6D7A		 ; add byte to id table
1  5869	    1832  23				 DB 23h
1  5870	    1833  10 F9				 DB 10h,( L5265)-$-1
1  5871
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 104
msx_asm\tur_comp.ASM



1  5872	    1835  CD				 DB 0cdh
1  5873	    1836  2F72r				 DW  L6DC6		 ; add length
1  5874	    1838  AF				 DB 0afh
1  5875	    1839  C9				 DB 0c9h
1  5876
1  5877	    183A			 L5271:	 ; 8 bytes from	HL (down) to 7B69 (up)
1  5878	    183A  11				 DB 11h
1  5879	    183B  3F23r				 DW L7B69
1  5880	    183D  18 14				 DB 18h,( L528A)-$-1
1  5881
1  5882	    183F			 L5276:	 ; in:	 HL = address after word in id table
1  5883						 ; out:	 byte at (HL) moved to L7B57
1  5884						 ;	 address at (HL-1), (HL-2) move	to L7B58
1  5885						 ;	 8 bytes from address (HL-3), (HL-4) to	L7B5C
1  5886	    183F  7E				 DB 7eh		 ; A = 1e byte after word
1  5887	    1840  2B				 DB 2bh
1  5888	    1841  32				 DB 32h
1  5889	    1842  3F11r				 DW L7B57
1  5890	    1844  56				 DB 56h
1  5891	    1845  2B				 DB 2bh
1  5892	    1846  5E				 DB 5eh
1  5893	    1847  2B				 DB 2bh
1  5894	    1848  53ED 3F12r			 DW 53edh,L7B58		 ; save	lvalue of id
1  5895	    184C  56				 DB 56h
1  5896	    184D  2B				 DB 2bh
1  5897	    184E  5E				 DB 5eh
1  5898	    184F  EB				 DB 0ebh
1  5899
1  5900	    1850			 L5287:	 ; 8 bytes from	HL (down) to 7B5C (up)
1  5901	    1850  11				 DB 11h
1  5902	    1851  3F16r				 DW L7B5C
1  5903
1  5904	    1853  C5			 L528A:	 DB 0c5h
1  5905						 ; copy	from HL	to DE in the opposite directions
1  5906	    1854  06 08				 DB 06h,8
1  5907	    1856  7E			 L528D:	 DB 7eh
1  5908	    1857  12				 DB 12h
1  5909	    1858  2B				 DB 2bh
1  5910	    1859  13				 DB 13h
1  5911	    185A  10 FA				 DB 10h,( L528D)-$-1
1  5912	    185C  C1				 DB 0c1h
1  5913	    185D  C9				 DB 0c9h
1  5914
1  5915	    185E			 L5295:	 ; update pointer references
1  5916						 ; in:	 HL = top of symbol table
1  5917	    185E  22				 DB 22h
1  5918	    185F  3F33r				 DW L7B79		 ; address where to stop reference search
1  5919	    1861  2A				 DB 02ah
1  5920	    1862  3F2Dr				 DW L7B73
1  5921
1  5922	    1864  ED 4B			 L529B:	 DB 0edh,4bh
1  5923	    1866  3F33r				 DW L7B79
1  5924	    1868  B7				 DB 0b7h
1  5925	    1869  ED 42				 DB 0EDH,042h
1  5926					 ;!	 pushf
1  5927	    186B  09				 DB 09h
1  5928					 ;!	 popf
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 105
msx_asm\tur_comp.ASM



1  5929	    186C  C8				 DB 0c8h		 ; quit	if equal (end of struct	reached)
1  5930	    186D  23				 DB 23h
1  5931	    186E  4E				 DB 4eh		 ; BC =	length of added	struct
1  5932	    186F  23				 DB 23h
1  5933	    1870  46				 DB 46h
1  5934	    1871  09				 DB 09h
1  5935	    1872  7E				 DB 7eh		 ; highest byte	of struct = 8 ?
1  5936	    1873  FE 08				 DB 0feh, 8
1  5937	    1875  20 ED				 DB 20h,(L529B)-$-1		 ; search for next while not 8
1  5938
1  5939	    1877  36 00				 DB 36h,0		 ; yes,	make 0 ?!?
1  5940	    1879  E5				 DB 0e5h
1  5941	    187A  2B				 DB 2bh
1  5942	    187B  2B				 DB 2bh
1  5943	    187C  7E				 DB 7eh
1  5944	    187D  FE 04				 DB 0feh, 4			 ; type	of struct = POINTER ?
1  5945	    187F  20 40				 DB 20h,(L52F8)-$-1		 ; jump	if not a POINTER, continue loop
1  5946
1  5947	    1881  2B				 DB 2bh
1  5948	    1882  7E				 DB 7eh
1  5949	    1883  B7				 DB 0b7h
1  5950	    1884  28 3B				 DB 28h,(L52F8)-$-1		 ; jump	if zero, no update necessary
1  5951
1  5952	    1886  36 00				 DB 36h,0
1  5953	    1888  2B				 DB 2bh
1  5954	    1889  E5				 DB 0e5h
1  5955	    188A  5E				 DB 5eh
1  5956	    188B  2B				 DB 2bh
1  5957	    188C  56				 DB 56h
1  5958
1  5959	    188D  2A				 DB 02ah
1  5960	    188E  3F2Dr				 DW L7B73
1  5961
1  5962	    1890  ED 4B			 L52C7:	 DB 0edh,4bh
1  5963	    1892  3F31r				 DW L7B77		 ; BC =	absolute top of	id list
1  5964	    1894  B7				 DB 0b7h
1  5965	    1895  ED 42				 DB 0EDH,042h
1  5966					 ;!	 pushf
1  5967	    1897  09				 DB 09h
1  5968					 ;!	 popf
1  5969
1  5970	    1898  CD				 DB 0cdh
1  5971	    1899  34DFr				 DW  L72D4		 ; Zero	--> error
1  5972	    189B  2A				 DB 2AH			 ; error 42: Undefined pointer type in
1  5973									 ;	    preceding type definitions
1  5974	    189C  23				 DB 23h
1  5975	    189D  4E				 DB 4eh
1  5976	    189E  23				 DB 23h
1  5977	    189F  46				 DB 46h
1  5978	    18A0  09				 DB 09h
1  5979	    18A1  7E				 DB 7eh
1  5980	    18A2  FE 03				 DB 0feh, 3
1  5981	    18A4  20 EA				 DB 20h,(L52C7)-$-1
1  5982
1  5983	    18A6  E5				 DB 0e5h
1  5984	    18A7  D5				 DB 0d5h
1  5985	    18A8  2B				 DB 2bh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 106
msx_asm\tur_comp.ASM



1  5986	    18A9  2B				 DB 2bh
1  5987	    18AA  1A			 L52E1:	 DB 1ah
1  5988	    18AB  BE				 DB 0beh
1  5989	    18AC  28 04				 DB 28h,(L52E9)-$-1
1  5990	    18AE  D1				 DB 0d1h
1  5991	    18AF  E1				 DB 0e1h
1  5992	    18B0  18 DE				 DB 18h,( L52C7)-$-1
1  5993
1  5994	    18B2  CB 7E			 L52E9:	 DB 0cbh,07eh
1  5995					 ;!	 pushf
1  5996	    18B4  2B				 DB 2bh
1  5997	    18B5  1B				 DB 1bh
1  5998					 ;!	 popf
1  5999	    18B6  28 F2				 DB 28h,(L52E1)-$-1
1  6000	    18B8  C1				 DB 0c1h
1  6001	    18B9  C1				 DB 0c1h
1  6002	    18BA  46				 DB 46h
1  6003	    18BB  2B				 DB 2bh
1  6004	    18BC  4E				 DB 4eh
1  6005	    18BD  E1				 DB 0e1h
1  6006	    18BE  71				 DB 71h
1  6007	    18BF  2B				 DB 2bh
1  6008	    18C0  70				 DB 70h
1  6009	    18C1  E1			 L52F8:	 DB 0e1h
1  6010	    18C2  C3				 DB 0c3h
1  6011	    18C3  1864r				 DW  L529B
1  6012
1  6013	    18C5  AF			 L52FC:	 DB 0afh
1  6014	    18C6  32				 DB 32h
1  6015	    18C7  3F4Fr				 DW L7B95
1  6016	    18C9  32				 DB 32h
1  6017	    18CA  3F83r				 DW L7BC9
1  6018
1  6019	    18CC  CD				  DB 0cdh
1  6020	    18CD  1940r				 DW  L5377		   ; statements	ended by 'END'
1  6021
1  6022	    18CF  22FD 3F5Er			 DW 22fdh,L7BA4
1  6023	    18D3  CD				 DB 0cdh
1  6024	    18D4  2CDEr				 DW  O_JPHL
1  6025
1  6026	    18D6  2A				  DB 02ah
1  6027	    18D7  3F2Dr				 DW L7B73
1  6028
1  6029	    18D9  ED 5B			 L5310:	 DB 0edh,5bh
1  6030	    18DB  3F2Fr				 DW L7B75
1  6031	    18DD  B7				 DB 0b7h
1  6032	    18DE  ED 52				 DB 0EDH,052h
1  6033	    18E0  19				 DB 019h
1  6034	    18E1  30 49				 DB 30h,(L5363)-$-1
1  6035	    18E3  23				 DB 23h
1  6036	    18E4  4E				 DB 4eh
1  6037	    18E5  23				 DB 23h
1  6038	    18E6  46				 DB 46h
1  6039	    18E7  23				 DB 23h
1  6040	    18E8  7E				 DB 7eh
1  6041	    18E9  23				 DB 23h
1  6042	    18EA  5E				 DB 5eh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 107
msx_asm\tur_comp.ASM



1  6043	    18EB  23				 DB 23h
1  6044	    18EC  56				 DB 56h
1  6045	    18ED  E5				 DB 0e5h
1  6046	    18EE  C5				 DB 0c5h
1  6047	    18EF  47				 DB 47h
1  6048	    18F0  7A				 DB 7ah
1  6049	    18F1  B3				 DB 0b3h
1  6050	    18F2  28 0F				 DB 28h,(L533A)-$-1
1  6051	    18F4  EB				 DB 0ebh
1  6052	    18F5  2B				 DB 2bh
1  6053	    18F6  7E				 DB 7eh
1  6054	    18F7  4F				 DB 4fh
1  6055	    18F8  3C				 DB 3ch
1  6056
1  6057	    18F9  CD				 DB 0cdh
1  6058	    18FA  34DFr				 DW  L72D4		 ; Zero	--> error
1  6059	    18FC  28				 DB 28H			 ; error 40: Undefined label
1  6060
1  6061	    18FD  2B				 DB 2bh
1  6062	    18FE  56				 DB 56h
1  6063	    18FF  2B				 DB 2bh
1  6064	    1900  5E				 DB 5eh
1  6065	    1901  18 06				 DB 18h,( L5340)-$-1
1  6066
1  6067	    1903  ED 5B			 L533A:	 DB 0edh,5bh
1  6068	    1905  3F5Er				 DW L7BA4
1  6069	    1907  0E 00				 DB 0eh,0
1  6070	    1909  E1			 L5340:	 DB 0e1h
1  6071	    190A  78				 DB 78h
1  6072	    190B  91				 DB 091h
1  6073	    190C  20 05				 DB 20h,(L534A)-$-1
1  6074
1  6075	    190E  CD				  DB 0cdh
1  6076	    190F  2DA0r				 DW  L6C42		   ; update address at HL with contents	of DE
1  6077
1  6078	    1911  18 16				 DB 18h,( L5360)-$-1
1  6079
1  6080	    1913  CD			 L534A:	 DB 0cdh
1  6081	    1914  34D3r				 DW  L72C8		 ; carry set --> error
1  6082	    1916  47				 DB 47H			 ; error 71: Invalid GOTO
1  6083
1  6084	    1917  D5				 DB 0d5h
1  6085	    1918  F5				 DB 0f5h
1  6086	    1919  CD				  DB 0cdh
1  6087	    191A  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  6088	    191C  F1				 DB 0f1h
1  6089	    191D  47				 DB 47h
1  6090
1  6091	    191E  CD			 L5355:	 DB 0cdh
1  6092	    191F  2CCFr				 DW  O_POPHL
1  6093	    1921  10 FB				 DB 10h,( L5355)-$-1
1  6094
1  6095	    1923  3E C3				 DB 3eh,0C3H		 ; opcode: JP
1  6096	    1925  E1				 DB 0e1h
1  6097	    1926  CD				 DB 0cdh
1  6098	    1927  2CF0r				 DW  O_OPHL		 ; JP HL
1  6099
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 108
msx_asm\tur_comp.ASM



1  6100	    1929  E1			 L5360:	 DB 0e1h
1  6101	    192A  18 AD				 DB 18h,( L5310)-$-1
1  6102
1  6103	    192C  2A			 L5363:	 DB 02ah
1  6104	    192D  3F5Er				 DW L7BA4
1  6105	    192F  23				 DB 23h
1  6106	    1930  FD E5				 DB 0fdh,0e5h
1  6107	    1932  D1				 DB 0d1h
1  6108	    1933  1B				 DB 1bh
1  6109	    1934  1B				 DB 1bh
1  6110	    1935  B7				 DB 0b7h
1  6111	    1936  ED 52				 DB 0EDH,052h
1  6112					 ;!	 pushf
1  6113	    1938  19				 DB 019h
1  6114					 ;!	 popf
1  6115	    1939  C2				  DB 0c2h
1  6116	    193A  2D9Dr				 DW L6C3F		 ; update address at HL	with current address
1  6117	    193C  2B				 DB 2bh
1  6118	    193D  C3				 DB 0c3h
1  6119	    193E  2E20r				 DW  L6CC2
1  6120
1  6121	    1940			 L5377:	  ; statement {	; statement } end
1  6122	    1940  CD				 DB 0cdh
1  6123	    1941  194Er				 DW  L5385		 ; statement
1  6124
1  6125	    1943  CD				 DB 0cdh
1  6126	    1944  30DEr				 DW  L6E76		 ; next	word is	END ?
1  6127	    1946  3805r				 DW L7530		 ; start of reserved word: END
1  6128	    1948  C8				 DB 0c8h		 ; yes,	return
1  6129
1  6130	    1949  CD				 DB 0cdh
1  6131	    194A  31B8r				 DW  L6F50		 ; match(';')
1  6132	    194C  18 F2				 DB 18h,( L5377)-$-1		 ; repeat for next statement
1  6133
1  6134	    194E  3E 0A			 L5385:	 DB 3eh,0AH		 ; default type	= INTEGER
1  6135	    1950  32				 DB 32h
1  6136	    1951  2036r				 DW DEF_TYPE
1  6137	    1953  3E FF				 DB 3eh,0FFH
1  6138	    1955  32				 DB 32h
1  6139	    1956  3F52r				 DW L7B98
1  6140	    1958  3A				 DB 3ah
1  6141	    1959  3F57r				 DW L7B9D		 ; compiler directives
1  6142	    195B  32				 DB 32h
1  6143	    195C  3F58r				 DW L7B9E		 ; save	them
1  6144	    195E  CB 5F				 DB 0cbh,05fh			 ; 1 = User Interrupt on
1  6145	    1960  28 08				 DB 28h,(L539C)-$-1		 ; jump	if off
1  6146
1  6147	    1962  3E CF				 DB 3eh,0CFH		 ; 0CFH	= RST 0008H, patch
1  6148									 ; 0FFH	= RST 0038H
1  6149	    1964  32				 DB 32h
1  6150	    1965  3F5Ar				 DW L7BA0
1  6151
1  6152	    1967  CD				 DB 0cdh
1  6153	    1968  2CF8r				 DW  O_BYTE
1  6154
1  6155	    196A  CD			 L539C:	 DB 0cdh
1  6156	    196B  30C2r				 DW  L6E5A
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 109
msx_asm\tur_comp.ASM



1  6157	    196D  02				 DB 2			 ; 2 bytes following
1  6158	    196E  3890r				 DW L75BB		 ; start of reserved word list:
1  6159									 ; BEGIN, IF, WHILE, REPEAT, FOR
1  6160									 ; CASE, GOTO, WITH, INLINE
1  6161	    1970  28 27				 DB 28h,(L53CB)-$-1		 ; start code of found reserved	word
1  6162
1  6163	    1972  CD				 DB 0cdh
1  6164	    1973  287Dr				 DW  L67B2
1  6165	    1975  CA				 DB 0cah
1  6166	    1976  1DE9r				 DW L57EA
1  6167
1  6168	    1978  01				 DB 01h
1  6169	    1979  0500				 DW 500H	 ; procedure identifier	?
1  6170	    197B  CD				 DB 0cdh
1  6171	    197C  30BCr				 DW  L6E54		 ; check if current in id list
1  6172									 ; HL =	address	of info
1  6173	    197E  CA				  DB 0cah
1  6174	    197F  1D1Br				 DW L573D		  ; jump if procedure
1  6175
1  6176	    1981  01				 DB 01h
1  6177	    1982  0100				 DW 100H	 ; label identifier ?
1  6178	    1984  CD				 DB 0cdh
1  6179	    1985  30BCr				 DW  L6E54		 ; check if current in id list
1  6180									 ; HL =	address	of info
1  6181	    1987  28 15				 DB 28h,(L53D0)-$-1		 ; jump	if label
1  6182
1  6183	    1989  01				 DB 01h
1  6184	    198A  0600				 DW 600H	 ; function identifier ?
1  6185	    198C  CD				 DB 0cdh
1  6186	    198D  30BCr				 DW  L6E54		 ; check if current in id list
1  6187									 ; HL =	address	of info
1  6188	    198F  CA				  DB 0cah
1  6189	    1990  1F53r				 DW L591F
1  6190
1  6191	    1992  CD				 DB 0cdh
1  6192	    1993  30C2r				 DW  L6E5A
1  6193	    1995  02				 DB 2			 ; 2 byte following
1  6194	    1996  0000e				 DW L7638		 ; start of reserved word list:
1  6195									 ; standard library procedure's
1  6196									 ; WRITELN .. BIOS, 47
1  6197	    1998  C0				 DB 0c0h
1  6198
1  6199	    1999			 L53CB:	 ; jumps to the	address	at hl
1  6200						 ; in:	 HL = address of an address
1  6201						 ; out:	 -
1  6202	    1999  5E				 DB 5eh
1  6203	    199A  23				 DB 23h
1  6204	    199B  56				 DB 56h
1  6205	    199C  EB				 DB 0ebh
1  6206	    199D  E9				 DB 0e9h
1  6207
1  6208	    199E  CD			 L53D0:	 DB 0cdh
1  6209	    199F  31A8r				 DW  L6F40		 ; match(':')
1  6210	    19A1  3A				 DB 3ah
1  6211	    19A2  3F4Er				 DW L7B94
1  6212	    19A4  BE				 DB 0beh
1  6213
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 110
msx_asm\tur_comp.ASM



1  6214	    19A5  CD				 DB 0cdh
1  6215	    19A6  34E5r				 DW  L72DA		 ; NonZero --> error
1  6216	    19A8  48				 DB 48H			 ; error 72: Label not within current block
1  6217
1  6218	    19A9  2B				 DB 2bh
1  6219	    19AA  7E				 DB 7eh
1  6220	    19AB  3C				 DB 3ch
1  6221
1  6222	    19AC  CD				 DB 0cdh
1  6223	    19AD  34E5r				 DW  L72DA		 ; NonZero --> error
1  6224	    19AF  2B				 DB 2BH			 ; error 43: Duplicate identifier or label
1  6225
1  6226	    19B0  3A				 DB 3ah
1  6227	    19B1  3F4Fr				 DW L7B95
1  6228	    19B3  77				 DB 77h
1  6229	    19B4  FD E5				 DB 0fdh,0e5h
1  6230	    19B6  D1				 DB 0d1h
1  6231	    19B7  2B				 DB 2bh
1  6232	    19B8  72				 DB 72h
1  6233	    19B9  2B				 DB 2bh
1  6234	    19BA  73				 DB 73h
1  6235	    19BB  18 91				 DB 18h,( L5385)-$-1		 ; next	statement
1  6236
1  6237	    19BD  CD			 L53EF:	 DB 0cdh
1  6238	    19BE  1FFAr				 DW  L5EB0		 ; parse boolean expression
1  6239
1  6240	    19C0  CD				 DB 0cdh
1  6241	    19C1  2CACr				 DW  O_CODE
1  6242	    19C3  03				 DB 3
1  6243	    19C4  CB 45				 DB 0CBH,45H		 ; BIT 0,L
1  6244	    19C6  CA				 DB 0CAH		 ; opcode of 'JP Z,'
1  6245
1  6246	    19C7  FD E5				 DB 0fdh,0e5h
1  6247	    19C9  CD				 DB 0cdh
1  6248	    19CA  2CF3r				 DW  O_HL		 ; out:	address	for 'JP	Z,'
1  6249
1  6250	    19CC  CD				 DB 0cdh
1  6251	    19CD  30DEr				 DW  L6E76
1  6252	    19CF  383Fr				 DW L756A		 ; start of reserved word: THEN
1  6253
1  6254	    19D1  CD				 DB 0cdh
1  6255	    19D2  34E5r				 DW  L72DA		 ; NonZero --> error
1  6256	    19D4  11				 DB 11H			 ; error 17: THEN expected
1  6257
1  6258	    19D5  CD				 DB 0cdh
1  6259	    19D6  194Er				 DW  L5385		 ; statement
1  6260
1  6261	    19D8  CD				  DB 0cdh
1  6262	    19D9  30DEr				 DW  L6E76
1  6263	    19DB  3843r				 DW L756E		 ; start of reserved word: ELSE
1  6264	    19DD  20 0F				 DB 20h,(L5420)-$-1
1  6265
1  6266	    19DF  CD				  DB 0cdh
1  6267	    19E0  2CD3r				 DW  O_C3
1  6268
1  6269	    19E2  E1				  DB 0e1h
1  6270	    19E3  FD E5				 DB 0fdh,0e5h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 111
msx_asm\tur_comp.ASM



1  6271	    19E5  CD				 DB 0cdh
1  6272	    19E6  2CF3r				 DW  O_HL
1  6273
1  6274	    19E8  CD				  DB 0cdh
1  6275	    19E9  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  6276	    19EB  CD				 DB 0cdh
1  6277	    19EC  194Er				 DW  L5385		 ; statement
1  6278
1  6279	    19EE  E1			 L5420:	  DB 0e1h
1  6280	    19EF  C3				  DB 0c3h
1  6281	    19F0  2D9Dr				 DW  L6C3F		     ; update address at HL with current address
1  6282
1  6283	    19F2  00			 BOOLOPER:DB 0			 ; Zero	= lowest level
1  6284	    19F3  00			 BOOLOPTIM:DB 0			 ; Zero	= no optimization in code
1  6285									 ; NonZero = optimize code for boolean
1  6286									 ;	    evaluation
1  6287
1  6288	    19F4			 L5424:	 ; while-statement ::= WHILE expression	do statement
1  6289	    19F4  AF				 DB 0afh
1  6290	    19F5  32				 DB 32h
1  6291	    19F6  19F2r				 DW BOOLOPER		 ; default no operator
1  6292	    19F8  3D				 DB 3dh
1  6293	    19F9  32				 DB 32h
1  6294	    19FA  19F3r				 DW BOOLOPTIM		 ; boolean optimize on
1  6295	    19FC  FD E5				 DB 0fdh,0e5h
1  6296	    19FE  CD				 DB 0cdh
1  6297	    19FF  1FFAr				 DW  L5EB0		 ; parse boolean expression
1  6298	    1A01  CD				 DB 0cdh
1  6299	    1A02  30DEr				 DW  L6E76
1  6300	    1A04  3847r				 DW L7572		 ; start of reserved word: DO
1  6301
1  6302	    1A06  CD				 DB 0cdh
1  6303	    1A07  34E5r				 DW  L72DA		 ; NonZero --> error
1  6304	    1A09  0D				 DB 0DH			 ; error 13: DO	expected
1  6305
1  6306	    1A0A  CD				 DB 0cdh
1  6307	    1A0B  2CACr				 DW  O_CODE
1  6308	    1A0D  03				 DB 3
1  6309	    1A0E  CB 45				 DB 0CBH,45H		 ; BIT 0,L
1  6310	    1A10  CA				 DB 0CAH		 ; opcode of 'JP Z,'
1  6311
1  6312	    1A11  FD E5				 DB 0fdh,0e5h
1  6313	    1A13  CD				 DB 0cdh
1  6314	    1A14  2CF3r				 DW  O_HL
1  6315
1  6316	    1A16  CD				 DB 0cdh
1  6317	    1A17  194Er				 DW  L5385		 ; statement
1  6318
1  6319	    1A19  D1				 DB 0d1h
1  6320	    1A1A  E1				 DB 0e1h
1  6321
1  6322	    1A1B  3E C3				 DB 3eh,0C3H		 ; opcode: JP
1  6323	    1A1D  CD				 DB 0cdh
1  6324	    1A1E  2CF0r				 DW  O_OPHL		 ; JP HL
1  6325
1  6326	    1A20  EB				 DB 0ebh
1  6327	    1A21  C3				  DB 0c3h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 112
msx_asm\tur_comp.ASM



1  6328	    1A22  2D9Dr				 DW  L6C3F		     ; update address at HL with current address
1  6329
1  6330	    1A24			 L544C:	 ; repeat-statement ::=	REPEAT statement {; statement} UNTIL expression
1  6331	    1A24  FD E5				 DB 0fdh,0e5h
1  6332
1  6333	    1A26  CD			 L544E:	 DB 0cdh
1  6334	    1A27  194Er				 DW  L5385		 ; statement
1  6335
1  6336	    1A29  CD				 DB 0cdh
1  6337	    1A2A  30DEr				 DW  L6E76
1  6338	    1A2C  3849r				 DW L7574		 ; start of reserved word: UNTIL
1  6339	    1A2E  28 05				 DB 28h,(L545D)-$-1
1  6340
1  6341	    1A30  CD				 DB 0cdh
1  6342	    1A31  31B8r				 DW  L6F50		 ; match(';')
1  6343	    1A33  18 F1				 DB 18h,( L544E)-$-1
1  6344
1  6345	    1A35  CD			 L545D:	 DB 0cdh
1  6346	    1A36  1FFAr				 DW  L5EB0		 ; parse boolean expression
1  6347
1  6348	    1A38  CD				 DB 0cdh
1  6349	    1A39  2CACr				 DW  O_CODE
1  6350	    1A3B  03				 DB 3
1  6351	    1A3C  CB 45				 DB 0CBH,45H		 ; BIT 0,L
1  6352	    1A3E  CA				 DB 0CAH		 ; opcode for 'JP Z,'
1  6353
1  6354	    1A3F  E1				 DB 0e1h
1  6355	    1A40  C3				 DB 0c3h
1  6356	    1A41  2CF3r				 DW  O_HL
1  6357
1  6358	    1A43			 L546B:	 ; for-statement::=for control-variable:=for-list do statement
1  6359	    1A43  01				 DB 01h
1  6360	    1A44  0400				 DW 400H	 ; variable identifier ?
1  6361	    1A46  CD				 DB 0cdh
1  6362	    1A47  30BCr				 DW  L6E54		 ; check if current in id list
1  6363									 ; HL =	address	of info
1  6364
1  6365	    1A49  CD				 DB 0cdh
1  6366	    1A4A  34E5r				 DW  L72DA		 ; NonZero --> error
1  6367	    1A4C  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1  6368
1  6369	    1A4D  CD				 DB 0cdh
1  6370	    1A4E  183Fr				 DW  L5276		 ; id info at 7B5C
1  6371	    1A50  3A				 DB 3ah
1  6372	    1A51  3F11r				 DW L7B57
1  6373	    1A53  B7				 DB 0b7h
1  6374	    1A54  20 07				 DB 20h,(L5485)-$-1
1  6375
1  6376	    1A56  3A				 DB 3ah
1  6377	    1A57  3F16r				 DW L7B5C
1  6378	    1A59  FE 0A				 DB 0feh, 0AH
1  6379	    1A5B  30 04				 DB 30h,(L5489)-$-1
1  6380
1  6381	    1A5D  CD			 L5485:	 DB 0cdh
1  6382	    1A5E  34ECr				 DW  L72E1		 ; no condition
1  6383	    1A60  1E				 DB 1EH			 ; error 30: Simple type expected
1  6384
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 113
msx_asm\tur_comp.ASM



1  6385	    1A61  CD			 L5489:	 DB 0cdh
1  6386	    1A62  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  6387	    1A64  3A				 DB 3ah
1  6388	    1A65  3F16r				 DW L7B5C
1  6389	    1A67  F5				 DB 0f5h		 ; save	type before assignment
1  6390
1  6391	    1A68  CD				 DB 0cdh
1  6392	    1A69  31E6r				 DW  L6F7E		 ; match(':=')
1  6393
1  6394	    1A6B  F1				 DB 0f1h
1  6395	    1A6C  F5				 DB 0f5h
1  6396						 ; A = type of before assignment
1  6397	    1A6D  CD				 DB 0cdh
1  6398	    1A6E  204Cr				 DW  L5EE8		 ; parse expression
1  6399
1  6400	    1A70  CD				 DB 0cdh
1  6401	    1A71  2CCBr				 DW  O_PSHHL		 ; generate code to push initial value
1  6402
1  6403	    1A73  F1				 DB 0f1h
1  6404	    1A74  F5				 DB 0f5h
1  6405	    1A75  B8				 DB 0b8h		 ; types are equal ?
1  6406
1  6407	    1A76  CD				 DB 0cdh
1  6408	    1A77  34E5r				 DW  L72DA		 ; NonZero --> error
1  6409	    1A79  2C				 DB 2CH			 ; error 44: Type mismatch
1  6410
1  6411	    1A7A  CD				 DB 0cdh
1  6412	    1A7B  30C2r				 DW  L6E5A
1  6413	    1A7D  01				 DB 1			 ; 1 byte following
1  6414	    1A7E  38CAr				 DW L75F5		 ; start of reserved word list:
1  6415									 ; TO, DOWNTO
1  6416
1  6417	    1A80  CD				 DB 0cdh
1  6418	    1A81  34E5r				 DW  L72DA		 ; NonZero --> error
1  6419	    1A83  12				 DB 12H			 ; error 18: TO	or DOWNTO expected
1  6420
1  6421	    1A84  5E				 DB 5eh		 ; E = opcode for INC HL or DEC	HL
1  6422	    1A85  D5				 DB 0d5h
1  6423
1  6424	    1A86  3E 0A				 DB 3eh,0AH		 ; default type	= INTEGER
1  6425	    1A88  CD				 DB 0cdh
1  6426	    1A89  204Cr				 DW  L5EE8		 ; parse expression
1  6427
1  6428	    1A8B  D1				 DB 0d1h
1  6429	    1A8C  F1				 DB 0f1h
1  6430	    1A8D  D5				 DB 0d5h
1  6431	    1A8E  B8				 DB 0b8h
1  6432
1  6433	    1A8F  CD				 DB 0cdh
1  6434	    1A90  34E5r				 DW  L72DA		 ; NonZero --> error
1  6435	    1A92  2C				 DB 2CH			 ; error 44: Type mismatch
1  6436
1  6437	    1A93  CD				 DB 0cdh
1  6438	    1A94  30DEr				 DW  L6E76
1  6439	    1A96  3847r				 DW L7572		 ; start of reserved word: DO
1  6440
1  6441	    1A98  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 114
msx_asm\tur_comp.ASM



1  6442	    1A99  34E5r				 DW  L72DA		 ; NonZero --> error
1  6443	    1A9B  0D				 DB 0DH			 ; error 13: DO	expected
1  6444
1  6445	    1A9C  CD				 DB 0cdh
1  6446	    1A9D  2CACr				 DW  O_CODE
1  6447	    1A9F  01				 DB 1
1  6448	    1AA0  D1				 DB 0D1H		 ; POP DE
1  6449
1  6450	    1AA1  D1				 DB 0d1h		 ; E = opcode: INC HL or DEC HL
1  6451
1  6452	    1AA2  CD				 DB 0cdh
1  6453	    1AA3  2F05r				 DW  L6D63		 ; move	13, L7B57
1  6454
1  6455	    1AA5  D5				 DB 0d5h		 ; E = opcode: INC HL or DEC HL
1  6456	    1AA6  7B				 DB 7bh
1  6457	    1AA7  21				 DB 21h
1  6458	    1AA8  0851				 DW _L0666		 ; LIB,	FOR xx:=start TO end
1  6459	    1AAA  FE 23				 DB 0feh, 23H			 ; opcode: INC HL ?
1  6460	    1AAC  28 03				 DB 28h,(L54D5)-$-1
1  6461
1  6462						 ; opcode: DEC HL
1  6463	    1AAE  21				 DB 21h
1  6464	    1AAF  0861				 DW _L0676		 ; LIB,	FOR xx:=start DOWNTO end
1  6465
1  6466	    1AB1  CD			 L54D5:	 DB 0cdh
1  6467	    1AB2  2CE2r				 DW  O_CALHL
1  6468	    1AB4  FD E5				 DB 0fdh,0e5h			 ; save	current	code address
1  6469
1  6470	    1AB6  CD				 DB 0cdh
1  6471	    1AB7  2CACr				 DW  O_CODE
1  6472	    1AB9  06				 DB 6
1  6473	    1ABA  7A				 DB 7AH			 ; LD A,D
1  6474	    1ABB  B3				 DB 0B3H		 ; OR E
1  6475	    1ABC  CA 00	00			 DB 0CAH,0,0		 ; JP Z,0000H
1  6476	    1ABF  D5				 DB 0D5H		 ; PUSH	DE
1  6477
1  6478	    1AC0  CD				 DB 0cdh
1  6479	    1AC1  2683r				 DW  L661B
1  6480	    1AC3  21				 DB 21h
1  6481	    1AC4  3F4Fr				 DW L7B95
1  6482	    1AC6  34				 DB 034h
1  6483
1  6484	    1AC7  CD				 DB 0cdh
1  6485	    1AC8  194Er				 DW  L5385		 ; statement
1  6486
1  6487	    1ACA  21				 DB 21h
1  6488	    1ACB  3F4Fr				 DW L7B95
1  6489	    1ACD  35				 DB 035h
1  6490	    1ACE  E1				 DB 0e1h		 ; address of 'LD A,D'
1  6491
1  6492	    1ACF  D1				 DB 0d1h		 ; E = opcode: INC HL or DEC HL
1  6493	    1AD0  CD				 DB 0cdh
1  6494	    1AD1  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  6495
1  6496	    1AD3  E5				 DB 0e5h		 ; address of 'LD A,D'
1  6497
1  6498	    1AD4  2A				 DB 02ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 115
msx_asm\tur_comp.ASM



1  6499	    1AD5  3F12r				 DW L7B58		 ; hl =	lvalue of current id
1  6500	    1AD7  3E 2A				 DB 3eh,2AH
1  6501	    1AD9  CD				 DB 0cdh
1  6502	    1ADA  2CF0r				 DW  O_OPHL		 ; LD HL,( HL )
1  6503
1  6504	    1ADC  3A				 DB 3ah
1  6505	    1ADD  3F1Cr				 DW L7B62
1  6506	    1ADF  3D				 DB 3dh			 ; size	= 2 bytes ?
1  6507	    1AE0  20 06				 DB 20h,(L550C)-$-1		 ; jump	if size	= 2, INTEGER
1  6508
1  6509	    1AE2  CD				 DB 0cdh
1  6510	    1AE3  2CACr				 DW  O_CODE
1  6511	    1AE5  02				 DB 2
1  6512	    1AE6  26 00				 DB 26H,0		 ; LD H,0
1  6513
1  6514	    1AE8  7B			 L550C:	 DB 7bh
1  6515	    1AE9  CD				 DB 0cdh
1  6516	    1AEA  2CF8r				 DW  O_BYTE		 ; out:	INC HL or DEC HL
1  6517
1  6518	    1AEC  CD				 DB 0cdh
1  6519	    1AED  2CACr				 DW  O_CODE
1  6520	    1AEF  03				 DB 3
1  6521	    1AF0  D1				 DB 0D1H		 ; POP DE
1  6522	    1AF1  1B				 DB 01BH		 ; DEC DE
1  6523	    1AF2  C3				 DB 0C3H		 ; opcode 'JP'
1  6524
1  6525	    1AF3  E1				 DB 0e1h
1  6526	    1AF4  CD				 DB 0cdh
1  6527	    1AF5  2CF3r				 DW  O_HL		 ; out:	address	of 'LD A,D'
1  6528	    1AF7  23				 DB 23h
1  6529	    1AF8  23				 DB 23h
1  6530	    1AF9  23				 DB 23h
1  6531	    1AFA  C3				  DB 0c3h
1  6532	    1AFB  2D9Dr				 DW  L6C3F		     ; update address at HL with current address
1  6533
1  6534	    1AFD			 L5521:	 ; case-statement ::=
1  6535						 ;   case expression of	case-element { ; case-element }	end
1  6536						 ; | case expression of	case-element { ; case-element }
1  6537						 ;   otherwise statement { ; statement } end
1  6538	    1AFD  3E 0A				 DB 3eh,0AH		 ; A = default type = INTEGER
1  6539	    1AFF  CD				 DB 0cdh
1  6540	    1B00  2007r				 DW  L5EBB		 ; parse simple	expression
1  6541	    1B02  32				 DB 32h
1  6542	    1B03  3F56r				 DW L7B9C
1  6543	    1B05  AF				 DB 0afh
1  6544	    1B06  32				 DB 32h
1  6545	    1B07  3F55r				 DW L7B9B
1  6546	    1B09  CD				 DB 0cdh
1  6547	    1B0A  31F0r				 DW  L6F88		 ; match('OF')
1  6548	    1B0C  06 00				 DB 06h,0
1  6549	    1B0E  C5				 DB 0c5h
1  6550	    1B0F  06 01			 L5531:	 DB 06h,1
1  6551	    1B11  C5			 L5533:	 DB 0c5h
1  6552	    1B12  21				 DB 21h
1  6553	    1B13  3F55r				 DW L7B9B
1  6554	    1B15  CB 7E				 DB 0cbh,07eh
1  6555	    1B17  28 0E				 DB 28h,(L5549)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 116
msx_asm\tur_comp.ASM



1  6556
1  6557	    1B19  CD				 DB 0cdh
1  6558	    1B1A  2CACr				 DW  O_CODE
1  6559	    1B1C  01				 DB 1
1  6560	    1B1D  19				 DB 19H			 ; ADD HL,DE
1  6561
1  6562	    1B1E  CB 66				 DB 0cbh,066h
1  6563	    1B20  28 05				 DB 28h,(L5549)-$-1
1  6564
1  6565	    1B22  CD				 DB 0cdh
1  6566	    1B23  2CACr				 DW  O_CODE
1  6567	    1B25  01				 DB 1
1  6568	    1B26  09				 DB 09H			 ; ADD HL,BC
1  6569
1  6570	    1B27  CD			 L5549:	 DB 0cdh
1  6571	    1B28  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  6572									 ; error if not	found
1  6573	    1B2A  3A				 DB 3ah
1  6574	    1B2B  3F56r				 DW L7B9C
1  6575	    1B2D  B8				 DB 0b8h
1  6576
1  6577	    1B2E  CD				 DB 0cdh
1  6578	    1B2F  34E5r				 DW  L72DA		 ; NonZero --> error
1  6579	    1B31  2E				 DB 2EH			 ; error 46: constant and CASE selector	type
1  6580									 ;	     does not match
1  6581
1  6582	    1B32  CD				 DB 0cdh
1  6583	    1B33  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1  6584	    1B35  E5				 DB 0e5h
1  6585	    1B36  CD				 DB 0cdh
1  6586	    1B37  30DEr				 DW  L6E76
1  6587	    1B39  3855r				 DW L7580		 ; start of reserved word: ..
1  6588	    1B3B  E1				 DB 0e1h
1  6589	    1B3C  20 22				 DB 20h,(L5582)-$-1
1  6590	    1B3E  E5				 DB 0e5h
1  6591	    1B3F  CD				 DB 0cdh
1  6592	    1B40  2AC4r				 DW  L69EA		 ; parse a constant of any type
1  6593									 ; error if not	found
1  6594	    1B42  3A				 DB 3ah
1  6595	    1B43  3F56r				 DW L7B9C
1  6596	    1B45  B8				 DB 0b8h
1  6597
1  6598	    1B46  CD				 DB 0cdh
1  6599	    1B47  34E5r				 DW  L72DA		 ; NonZero --> error
1  6600	    1B49  2E				 DB 2EH			 ; error 46: constant and CASE seletector type
1  6601									 ;	     does not match
1  6602
1  6603	    1B4A  D1				 DB 0d1h
1  6604	    1B4B  B7				 DB 0b7h
1  6605	    1B4C  ED 52				 DB 0EDH,052h
1  6606	    1B4E  23				 DB 23h
1  6607	    1B4F  CD				 DB 0cdh
1  6608	    1B50  2CE6r				 DW  O_LDBC
1  6609
1  6610	    1B52  CD				 DB 0cdh
1  6611	    1B53  2CACr				 DW  O_CODE
1  6612	    1B55  06				 DB 6
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 117
msx_asm\tur_comp.ASM



1  6613	    1B56  B7				 DB 0B7H		 ; OR A
1  6614	    1B57  ED 52				 DB 0EDH,52H		 ; SBC HL,DE
1  6615	    1B59  B7				 DB 0B7H		 ; OR A
1  6616	    1B5A  ED 42				 DB 0EDH,42H		 ; SBC HL,BC
1  6617
1  6618	    1B5C  3E DA				 DB 3eh,0DAH
1  6619	    1B5E  18 09				 DB 18h,( L558B)-$-1
1  6620
1  6621	    1B60  CD			 L5582:	 DB 0cdh
1  6622	    1B61  2CACr				 DW  O_CODE
1  6623	    1B63  03				 DB 3
1  6624	    1B64  B7				 DB 0B7H		 ; OR A
1  6625	    1B65  ED 52				 DB 0EDH,52H		 ; SBC HL,DE
1  6626
1  6627	    1B67  3E CA				 DB 3eh,0CAH
1  6628	    1B69  32			 L558B:	 DB 32h
1  6629	    1B6A  3F55r				 DW L7B9B
1  6630	    1B6C  CD				 DB 0cdh
1  6631	    1B6D  3173r				 DW  L6F0B		 ; match(':'), if present
1  6632	    1B6F  C1				 DB 0c1h
1  6633	    1B70  28 11				 DB 28h,(L55A5)-$-1		 ; jump	if ':' matched
1  6634	    1B72  3A				 DB 3ah
1  6635	    1B73  3F55r				 DW L7B9B
1  6636	    1B75  CD				 DB 0cdh
1  6637	    1B76  2CF8r				 DW  O_BYTE
1  6638	    1B78  FD E5				 DB 0fdh,0e5h
1  6639	    1B7A  CD				 DB 0cdh
1  6640	    1B7B  2CF3r				 DW  O_HL
1  6641	    1B7D  CD				 DB 0cdh
1  6642	    1B7E  31C6r				 DW  L6F5E		 ; match(',')
1  6643	    1B80  04				 DB 04h
1  6644	    1B81  18 8E				 DB 18h,( L5533)-$-1
1  6645
1  6646	    1B83  FD E5			 L55A5:	 DB 0fdh,0e5h
1  6647	    1B85  D1				 DB 0d1h
1  6648	    1B86  13				 DB 13h
1  6649	    1B87  13				 DB 13h
1  6650	    1B88  13				 DB 13h
1  6651	    1B89  05			 L55AB:	 DB 05h
1  6652	    1B8A  28 06				 DB 28h,(L55B4)-$-1
1  6653	    1B8C  E1				 DB 0e1h
1  6654
1  6655	    1B8D  CD				  DB 0cdh
1  6656	    1B8E  2DA0r				 DW  L6C42		   ; update address at HL with contents	of DE
1  6657
1  6658	    1B90  18 F7				 DB 18h,( L55AB)-$-1
1  6659	    1B92  3A			 L55B4:	 DB 3ah
1  6660	    1B93  3F55r				 DW L7B9B
1  6661	    1B95  CB 9F				 DB 0cbh,09fh
1  6662	    1B97  CD				 DB 0cdh
1  6663	    1B98  2CF8r				 DW  O_BYTE
1  6664	    1B9A  C1				 DB 0c1h
1  6665	    1B9B  FD E5				 DB 0fdh,0e5h
1  6666	    1B9D  04				 DB 04h
1  6667	    1B9E  C5				 DB 0c5h
1  6668	    1B9F  CD				 DB 0cdh
1  6669	    1BA0  2CF3r				 DW  O_HL
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 118
msx_asm\tur_comp.ASM



1  6670	    1BA2  3A				 DB 3ah
1  6671	    1BA3  3F55r				 DW L7B9B
1  6672	    1BA5  F5				 DB 0f5h
1  6673	    1BA6  3A				 DB 3ah
1  6674	    1BA7  3F56r				 DW L7B9C
1  6675	    1BA9  F5				 DB 0f5h
1  6676
1  6677	    1BAA  CD				 DB 0cdh
1  6678	    1BAB  194Er				 DW  L5385		 ; statement
1  6679
1  6680	    1BAD  F1				 DB 0f1h
1  6681	    1BAE  32				 DB 32h
1  6682	    1BAF  3F56r				 DW L7B9C
1  6683	    1BB1  F1				 DB 0f1h
1  6684	    1BB2  32				 DB 32h
1  6685	    1BB3  3F55r				 DW L7B9B
1  6686	    1BB5  CD				 DB 0cdh
1  6687	    1BB6  3177r				 DW  L6F0F		 ; match(';'), if present
1  6688	    1BB8  1E 01				 DB 1eh,1
1  6689	    1BBA  28 01				 DB 28h,(L55DF)-$-1		 ; jump	if ';' matched
1  6690	    1BBC  1D				 DB 1dh
1  6691	    1BBD  D5			 L55DF:	 DB 0d5h
1  6692	    1BBE  CD				 DB 0cdh
1  6693	    1BBF  30DEr				 DW  L6E76
1  6694	    1BC1  3805r				 DW L7530		 ; start of reserved word: END
1  6695	    1BC3  D1				 DB 0d1h
1  6696	    1BC4  28 36				 DB 28h,(L561E)-$-1
1  6697	    1BC6  CD				 DB 0cdh
1  6698	    1BC7  2CD3r				 DW  O_C3
1  6699	    1BC9  C1				 DB 0c1h
1  6700	    1BCA  E1				 DB 0e1h
1  6701	    1BCB  FD E5				 DB 0fdh,0e5h
1  6702	    1BCD  C5				 DB 0c5h
1  6703	    1BCE  D5				 DB 0d5h
1  6704	    1BCF  CD				 DB 0cdh
1  6705	    1BD0  2CF3r				 DW  O_HL
1  6706
1  6707	    1BD2  CD				  DB 0cdh
1  6708	    1BD3  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  6709
1  6710	    1BD5  CD				 DB 0cdh
1  6711	    1BD6  30DEr				 DW  L6E76
1  6712	    1BD8  3843r				 DW L756E		 ; start of reserved word: ELSE
1  6713	    1BDA  D1				 DB 0d1h
1  6714	    1BDB  28 10				 DB 28h,(L560F)-$-1
1  6715	    1BDD  1D				 DB 1dh
1  6716	    1BDE  CA				 DB 0cah
1  6717	    1BDF  1B0Fr				 DW L5531
1  6718	    1BE1  3A				 DB 3ah
1  6719	    1BE2  3F52r				 DW L7B98
1  6720	    1BE4  B7				 DB 0b7h
1  6721
1  6722	    1BE5  CD				 DB 0cdh
1  6723	    1BE6  34DFr				 DW  L72D4		 ; Zero	--> error
1  6724	    1BE8  0E				 DB 0EH			 ; error 14: END expected
1  6725
1  6726	    1BE9  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 119
msx_asm\tur_comp.ASM



1  6727	    1BEA  34ECr				 DW  L72E1		 ; no condition
1  6728	    1BEC  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1  6729
1  6730	    1BED  CD			 L560F:	 DB 0cdh
1  6731	    1BEE  194Er				 DW  L5385		 ; statement
1  6732
1  6733	    1BF0  CD				 DB 0cdh
1  6734	    1BF1  30DEr				 DW  L6E76
1  6735	    1BF3  3805r				 DW L7530		 ; start of reserved word: END
1  6736	    1BF5  28 05				 DB 28h,(L561E)-$-1
1  6737
1  6738	    1BF7  CD				 DB 0cdh
1  6739	    1BF8  31B8r				 DW  L6F50		 ; match(';')
1  6740	    1BFA  18 F1				 DB 18h,( L560F)-$-1
1  6741
1  6742	    1BFC  C1			 L561E:	 DB 0c1h
1  6743	    1BFD  E1			 L561F:	 DB 0e1h
1  6744
1  6745	    1BFE  CD				  DB 0cdh
1  6746	    1BFF  2D9Dr				 DW  L6C3F		   ; update address at HL with current address
1  6747
1  6748	    1C01  10 FA				  DB 10h,( L561F)-$-1
1  6749	    1C03  C9				 DB 0c9h
1  6750
1  6751	    1C04  01			 L5626:	 DB 01h
1  6752	    1C05  0100				 DW 100H	 ; label identifier ?
1  6753	    1C07  CD				 DB 0cdh
1  6754	    1C08  30BCr				 DW  L6E54		 ; check if current in id list
1  6755									 ; HL =	address	of info
1  6756
1  6757	    1C0A  CD				 DB 0cdh
1  6758	    1C0B  34E5r				 DW  L72DA		 ; NonZero --> error
1  6759	    1C0D  28				 DB 28H			 ; error 40: Undefined label
1  6760
1  6761	    1C0E  3A				 DB 3ah
1  6762	    1C0F  3F4Er				 DW L7B94
1  6763	    1C11  BE				 DB 0beh
1  6764
1  6765	    1C12  CD				 DB 0cdh
1  6766	    1C13  34E5r				 DW  L72DA		 ; NonZero --> error
1  6767	    1C15  48				 DB 48H			 ; error 72: Label not within current block
1  6768
1  6769	    1C16  EB				 DB 0ebh
1  6770
1  6771	    1C17  CD			 L5639:	 DB 0cdh
1  6772	    1C18  2F17r				 DW  L6D75		 ; add DE to id	table
1  6773	    1C1A  3A				 DB 3ah
1  6774	    1C1B  3F4Fr				 DW L7B95
1  6775	    1C1D  CD				 DB 0cdh
1  6776	    1C1E  2F26r				 DW  L6D7A		 ; add byte to id table
1  6777	    1C20  CD				 DB 0cdh
1  6778	    1C21  2CD3r				 DW  O_C3
1  6779	    1C23  FD E5				 DB 0fdh,0e5h
1  6780	    1C25  D1				 DB 0d1h
1  6781	    1C26  CD				 DB 0cdh
1  6782	    1C27  2F17r				 DW  L6D75		 ; add DE to id	table
1  6783	    1C29  C3				 DB 0c3h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 120
msx_asm\tur_comp.ASM



1  6784	    1C2A  2CF3r				 DW  O_HL
1  6785
1  6786	    1C2C  3A			 L564E:	 DB 3ah
1  6787	    1C2D  3F83r				 DW L7BC9
1  6788	    1C2F  F5				 DB 0f5h
1  6789	    1C30  3A			 L5652:	 DB 3ah
1  6790	    1C31  3F80r				 DW L7BC6
1  6791	    1C33  21				 DB 21h
1  6792	    1C34  3F83r				 DW L7BC9
1  6793	    1C36  BE				 DB 0beh
1  6794
1  6795	    1C37  CD				 DB 0cdh
1  6796	    1C38  34DFr				 DW  L72D4		 ; Zero	--> error
1  6797	    1C3A  61				 DB 61H			 ; error 97: Too many nested WITH's
1  6798
1  6799	    1C3B  CD				 DB 0cdh
1  6800	    1C3C  284Ar				 DW  L677F		 ; parse VAR parameter
1  6801	    1C3E  3A				 DB 3ah
1  6802	    1C3F  3F16r				 DW L7B5C
1  6803	    1C41  FE 02				 DB 0feh, 2			 ; record identifier ?
1  6804
1  6805	    1C43  CD				 DB 0cdh
1  6806	    1C44  34E5r				 DW  L72DA		 ; NonZero --> error
1  6807	    1C46  1D				 DB 1DH			 ; error 29: Record variable expected
1  6808
1  6809	    1C47  21				 DB 21h
1  6810	    1C48  3F83r				 DW L7BC9
1  6811	    1C4A  5E				 DB 5eh
1  6812	    1C4B  16 00				 DB 16h,0
1  6813	    1C4D  34				 DB 034h
1  6814	    1C4E  21				 DB 21h
1  6815	    1C4F  3F86r				 DW L7BCC
1  6816	    1C51  19				 DB 019h
1  6817	    1C52  3A				 DB 3ah
1  6818	    1C53  3F17r				 DW L7B5D
1  6819	    1C55  77				 DB 77h
1  6820	    1C56  2A				 DB 02ah
1  6821	    1C57  3F84r				 DW L7BCA
1  6822	    1C59  19				 DB 019h
1  6823	    1C5A  19				 DB 019h
1  6824
1  6825	    1C5B  3E 22				 DB 3eh,22H
1  6826	    1C5D  CD				 DB 0cdh
1  6827	    1C5E  2CF0r				 DW  O_OPHL		 ; LD (	HL ),HL
1  6828
1  6829	    1C60  CD				 DB 0cdh
1  6830	    1C61  317Br				 DW  L6F13		 ; match(','), if present
1  6831	    1C63  28 CB				 DB 28h,(L5652)-$-1		 ; jump	if ',' matched
1  6832
1  6833	    1C65  CD				 DB 0cdh
1  6834	    1C66  30DEr				 DW  L6E76
1  6835	    1C68  3847r				 DW L7572		 ; start of reserved word: DO
1  6836
1  6837	    1C6A  CD			 L568C:	 DB 0cdh
1  6838	    1C6B  34E5r				 DW  L72DA		 ; NonZero --> error
1  6839	    1C6D  0D				 DB 0DH			 ; error 13: DO	expected
1  6840
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 121
msx_asm\tur_comp.ASM



1  6841	    1C6E  CD				 DB 0cdh
1  6842	    1C6F  194Er				 DW  L5385		 ; statement
1  6843
1  6844	    1C71  F1				 DB 0f1h
1  6845	    1C72  32				 DB 32h
1  6846	    1C73  3F83r				 DW L7BC9
1  6847	    1C75  C9				 DB 0c9h
1  6848
1  6849	    1C76			 L5698:	 ; statement inline
1  6850	    1C76  CD				 DB 0cdh
1  6851	    1C77  31CEr				 DW  L6F66		 ; match('(')
1  6852
1  6853	    1C79  3E 3E			 L569B:	 DB 3eh,3EH
1  6854	    1C7B  CD				 DB 0cdh
1  6855	    1C7C  3191r				 DW  L6F29		 ; match('>')
1  6856	    1C7E  3E 02				 DB 3eh,2			 ; 16 bits
1  6857	    1C80  28 0A				 DB 28h,(L56AE)-$-1		 ; jump	if matched
1  6858
1  6859	    1C82  3E 3C				 DB 3eh,3CH
1  6860	    1C84  CD				 DB 0cdh
1  6861	    1C85  3191r				 DW  L6F29		 ; match('<')
1  6862	    1C87  3E 01				 DB 3eh,1			 ; 8 bits
1  6863	    1C89  28 01				 DB 28h,(L56AE)-$-1		 ; jump	if matched
1  6864
1  6865	    1C8B  AF				 DB 0afh
1  6866
1  6867	    1C8C  32			 L56AE:	 DB 32h
1  6868	    1C8D  3F60r				 DW L7BA6		 ; 0 = automatic
1  6869									 ; 1 = always 8	bits
1  6870									 ; 2 = always 16 bits
1  6871	    1C8F  AF				 DB 0afh
1  6872	    1C90  67				 DB 67h
1  6873	    1C91  6F				 DB 6fh
1  6874	    1C92  47				 DB 47h
1  6875
1  6876	    1C93  C5			 L56B5:	 DB 0c5h
1  6877	    1C94  E5				 DB 0e5h
1  6878	    1C95  CD				 DB 0cdh
1  6879	    1C96  2AECr				 DW  L6A0D		 ; parse a constant of any type
1  6880	    1C98  20 09				 DB 20h,(L56C5)-$-1		 ; jump	if no constant parsed
1  6881
1  6882	    1C9A  78				 DB 78h
1  6883	    1C9B  FE 0A				 DB 0feh, 0AH			 ; constant type = INTEGER ?
1  6884	    1C9D  28 41				 DB 28h,(L5702)-$-1
1  6885
1  6886	    1C9F  CD				 DB 0cdh
1  6887	    1CA0  34ECr				 DW  L72E1		 ; no condition
1  6888	    1CA2  16				 DB 16H			 ; error 22: Integer constant expected
1  6889
1  6890	    1CA3  21			 L56C5:	 DB 21h
1  6891	    1CA4  3F60r				 DW L7BA6
1  6892	    1CA6  7E				 DB 7eh
1  6893	    1CA7  B7				 DB 0b7h
1  6894	    1CA8  20 02				 DB 20h,(L56CE)-$-1
1  6895	    1CAA  36 02				 DB 36h,2
1  6896
1  6897	    1CAC  3E 2A			 L56CE:	 DB 3eh,2AH
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 122
msx_asm\tur_comp.ASM



1  6898	    1CAE  CD				 DB 0cdh
1  6899	    1CAF  3191r				 DW  L6F29		 ; match('*')
1  6900	    1CB1  20 05				 DB 20h,(L56DA)-$-1		 ; jump	if not matched
1  6901
1  6902	    1CB3  FD E5				 DB 0fdh,0e5h			 ; IY =	current	position in code
1  6903	    1CB5  E1				 DB 0e1h
1  6904	    1CB6  18 28				 DB 18h,( L5702)-$-1
1  6905
1  6906	    1CB8  01			 L56DA:	 DB 01h
1  6907	    1CB9  0400				 DW 400H	 ; variable identifier ?
1  6908	    1CBB  CD				 DB 0cdh
1  6909	    1CBC  30BCr				 DW  L6E54		 ; check if current in id list,	pointer
1  6910									 ; HL =	address	of info
1  6911	    1CBE  20 08				 DB 20h,(L56EA)-$-1
1  6912
1  6913	    1CC0  CD				 DB 0cdh
1  6914	    1CC1  183Fr				 DW  L5276		 ; id info at 7B5C
1  6915	    1CC3  2A				 DB 02ah
1  6916	    1CC4  3F12r				 DW L7B58		 ; hl =	lvalue of current id
1  6917	    1CC6  18 18				 DB 18h,( L5702)-$-1
1  6918
1  6919	    1CC8  01			 L56EA:	 DB 01h
1  6920	    1CC9  0500				 DW 500H	 ; procedure identifier	?
1  6921	    1CCB  CD				 DB 0cdh
1  6922	    1CCC  30BCr				 DW  L6E54		 ; check if current in id list
1  6923									 ; HL =	address	of info
1  6924	    1CCE  28 0A				  DB 28h,(L56FC)-$-1
1  6925
1  6926	    1CD0  01				 DB 01h
1  6927	    1CD1  0600				 DW 600H	 ; function identifier ?
1  6928	    1CD3  CD				 DB 0cdh
1  6929	    1CD4  30BCr				 DW  L6E54		 ; check if current in id list
1  6930									 ; HL =	address	of info
1  6931
1  6932	    1CD6  CD				 DB 0cdh
1  6933	    1CD7  34E5r				 DW  L72DA		 ; NonZero --> error
1  6934	    1CD9  4A				 DB 4AH			 ; error 74: INLINE error
1  6935
1  6936	    1CDA  2B			 L56FC:	 DB 2bh
1  6937	    1CDB  2B				 DB 2bh
1  6938	    1CDC  56				 DB 56h
1  6939	    1CDD  2B				 DB 2bh
1  6940	    1CDE  5E				 DB 5eh
1  6941	    1CDF  EB				 DB 0ebh
1  6942
1  6943	    1CE0  D1			 L5702:	 DB 0d1h
1  6944	    1CE1  C1				 DB 0c1h
1  6945	    1CE2  05				 DB 05h
1  6946	    1CE3  20 03				 DB 20h,(L570A)-$-1
1  6947	    1CE5  CD				 DB 0cdh
1  6948	    1CE6  2B13r				 DW  L6A30
1  6949
1  6950	    1CE8  19			 L570A:	 DB 019h
1  6951	    1CE9  06 00				 DB 06h,0
1  6952	    1CEB  3E 2B				 DB 3eh,2BH
1  6953	    1CED  CD				 DB 0cdh
1  6954	    1CEE  3191r				 DW  L6F29		 ; match('+')
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 123
msx_asm\tur_comp.ASM



1  6955	    1CF0  28 A1				 DB 28h,(L56B5)-$-1		 ; jump	if matched
1  6956
1  6957	    1CF2  04				 DB 04h
1  6958	    1CF3  3E 2D				 DB 3eh,2DH		 ; match('-')
1  6959	    1CF5  CD				 DB 0cdh
1  6960	    1CF6  3191r				 DW  L6F29		 ; jump	if matched
1  6961	    1CF8  28 99				 DB 28h,(L56B5)-$-1
1  6962
1  6963	    1CFA  3A				 DB 3ah
1  6964	    1CFB  3F60r				 DW L7BA6
1  6965	    1CFD  FE 01				 DB 0feh, 1			 ; 8 bits ?
1  6966	    1CFF  28 06				 DB 28h,(L5729)-$-1		 ; jump	if 8 bits
1  6967
1  6968	    1D01  30 0A				 DB 30h,(L572F)-$-1		 ; jump	if A = 2, output 16 bits value
1  6969
1  6970	    1D03  24				 DB 24h
1  6971	    1D04  25				 DB 25h
1  6972	    1D05  20 06				 DB 20h,(L572F)-$-1		 ; jump	if HL >= 256, output HL
1  6973
1  6974	    1D07			 L5729:	 ; output 8 bits value
1  6975	    1D07  7D				 DB 7dh
1  6976	    1D08  CD				 DB 0cdh
1  6977	    1D09  2CF8r				 DW  O_BYTE
1  6978	    1D0B  18 03				 DB 18h,( L5732)-$-1
1  6979
1  6980	    1D0D			 L572F:	 ; output 16 bits value
1  6981	    1D0D  CD				 DB 0cdh
1  6982	    1D0E  2CF3r				 DW  O_HL
1  6983
1  6984	    1D10  3E 2F			 L5732:	 DB 3eh,2FH
1  6985	    1D12  CD				 DB 0cdh
1  6986	    1D13  3191r				 DW  L6F29		 ; match('/')
1  6987	    1D15  CA				 DB 0cah
1  6988	    1D16  1C79r				 DW L569B		 ; repeat while	'/' matched
1  6989
1  6990	    1D18  C3				 DB 0c3h
1  6991	    1D19  31D6r				 DW  L6F6E		 ; match(')')
1  6992
1  6993	    1D1B			 L573D:	  ; procedure
1  6994	    1D1B  2B				  DB 2bh		     ; skip update flag
1  6995
1  6996	    1D1C  46				  DB 46h		  ; B =	# of different types
1  6997	    1D1D  2B				 DB 2bh
1  6998
1  6999	    1D1E  56				  DB 56h		  ; address of procedure/function
1  7000	    1D1F  2B				 DB 2bh
1  7001	    1D20  5E				 DB 5eh
1  7002	    1D21  2B				 DB 2bh
1  7003	    1D22  D5				  DB 0d5h		     ; save start address of procedure/function
1  7004
1  7005	    1D23  56				  DB 56h		  ; DE = function type definition address
1  7006	    1D24  2B				 DB 2bh
1  7007	    1D25  5E				 DB 5eh
1  7008	    1D26  2B				 DB 2bh
1  7009	    1D27  D5				 DB 0d5h
1  7010
1  7011	    1D28  2B				  DB 2bh		     ; skip address of function	result variable
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 124
msx_asm\tur_comp.ASM



1  7012	    1D29  2B				 DB 2bh
1  7013
1  7014
1  7015	    1D2A  56				  DB 56h		  ; DE = first 128 byte	block number of
1  7016									     ; function/procedure in overlay
1  7017									     ;Ok$$$$, will become long
1  7018									     ;	      push long	!!
1  7019	    1D2B  2B				 DB 2bh
1  7020	    1D2C  5E				 DB 5eh
1  7021	    1D2D  2B				 DB 2bh
1  7022	    1D2E  D5				  DB 0d5h		     ; push high-word
1  7023
1  7024	    1D2F  56				  DB 56h		  ; push low-word
1  7025	    1D30  2B				  DB 2bh
1  7026	    1D31  5E				  DB 5eh
1  7027	    1D32  2B				  DB 2bh
1  7028	    1D33  D5				  DB 0d5h
1  7029
1  7030
1  7031	    1D34  56				  DB 56h		  ; DE = length	in blocks of 128 bytes of
1  7032									     ; the largest overlay part
1  7033									     ;Ok$$$$, will become length in bytes
1  7034	    1D35  2B				 DB 2bh
1  7035	    1D36  5E				 DB 5eh
1  7036	    1D37  2B				 DB 2bh
1  7037	    1D38  D5				 DB 0d5h
1  7038
1  7039	    1D39  04				  DB 04h		      ;	# different type = 0, no variables ?
1  7040	    1D3A  05				 DB 05h
1  7041	    1D3B  CA				  DB 0cah
1  7042	    1D3C  1DC1r				 DW L57D6		  ; jump if no variables
1  7043
1  7044	    1D3E  CD				 DB 0cdh
1  7045	    1D3F  31CEr				 DW  L6F66		 ; match('(')
1  7046
1  7047	    1D41  C5			 L575E:	 DB 0c5h
1  7048	    1D42  46				 DB 46h
1  7049	    1D43  2B				 DB 2bh
1  7050	    1D44  7E				 DB 7eh
1  7051	    1D45  2B				 DB 2bh
1  7052	    1D46  32				 DB 32h
1  7053	    1D47  3F11r				 DW L7B57
1  7054	    1D49  56				 DB 56h
1  7055	    1D4A  2B				 DB 2bh
1  7056	    1D4B  5E				 DB 5eh
1  7057	    1D4C  2B				 DB 2bh
1  7058	    1D4D  48				 DB 48h
1  7059	    1D4E  CB 7E			 L576B:	 DB 0cbh,07eh
1  7060					 ;!	 pushf
1  7061	    1D50  2B				 DB 2bh
1  7062					 ;!	 popf
1  7063	    1D51  28 FB				 DB 28h,(L576B)-$-1
1  7064	    1D53  10 F9				 DB 10h,( L576B)-$-1
1  7065	    1D55  41				 DB 41h
1  7066	    1D56  E5				 DB 0e5h
1  7067	    1D57  EB				 DB 0ebh
1  7068	    1D58  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 125
msx_asm\tur_comp.ASM



1  7069	    1D59  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  7070
1  7071	    1D5B  C5			 L5778:	 DB 0c5h
1  7072	    1D5C  3A				 DB 3ah
1  7073	    1D5D  3F11r				 DW L7B57
1  7074	    1D5F  B7				 DB 0b7h
1  7075	    1D60  20 32				 DB 20h,(L57A9)-$-1
1  7076	    1D62  3A				 DB 3ah
1  7077	    1D63  3F16r				 DW L7B5C
1  7078	    1D65  FE 03				 DB 0feh, 3
1  7079	    1D67  38 23				 DB 38h,(L57A1)-$-1
1  7080
1  7081						 ; A = default type
1  7082	    1D69  CD				 DB 0cdh
1  7083	    1D6A  1FC9r				 DW  L5E84		 ; parse a sub expression
1  7084	    1D6C  CD				 DB 0cdh
1  7085	    1D6D  1E63r				 DW  L5864		 ; make	type casts
1  7086
1  7087	    1D6F  3A				 DB 3ah
1  7088	    1D70  3F16r				 DW L7B5C
1  7089	    1D72  FE 04				 DB 0feh, 4
1  7090	    1D74  28 32				 DB 28h,(L57BD)-$-1
1  7091
1  7092	    1D76  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  7093	    1D78  28 0B				 DB 28h,(L57781)-$-1
1  7094
1  7095	    1D7A  FE 09				 DB 0feh, 9
1  7096	    1D7C  38 2D				 DB 38h,(L57C0)-$-1
1  7097
1  7098	    1D7E  20 28				 DB 20h,(L57BD)-$-1		 ; jump	to O_PSHHL if type = INTEGER,
1  7099									 ; BOOLEAN or CHAR
1  7100
1  7101						 ; generate code to push rest of a REAL, HL is always pushed
1  7102	    1D80  3E C5				 DB 3eh,0C5H
1  7103	    1D82  CD				 DB 0cdh
1  7104	    1D83  2CF8r				 DW  O_BYTE		 ; out:	'PUSH BC'
1  7105
1  7106	    1D85  3E D5			 L57781: DB 3eh,0D5H
1  7107	    1D87  CD				 DB 0cdh
1  7108	    1D88  2CF8r				 DW  O_BYTE		 ; out:	'PUSH DE'
1  7109	    1D8A  18 1C				 DB 18h,( L57BD)-$-1
1  7110
1  7111	    1D8C  CD			 L57A1:	 DB 0cdh
1  7112	    1D8D  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  7113	    1D8F  CD				 DB 0cdh
1  7114	    1D90  2814r				 DW  L6749
1  7115	    1D92  18 06				 DB 18h,( L57AF)-$-1
1  7116
1  7117	    1D94  CD			 L57A9:	 DB 0cdh
1  7118	    1D95  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  7119	    1D97  CD				 DB 0cdh
1  7120	    1D98  284Ar				 DW  L677F		 ; parse VAR parameter
1  7121
1  7122	    1D9A  CD			 L57AF:	 DB 0cdh
1  7123	    1D9B  2EFFr				 DW  L6D5D		 ; move	13, L7B64
1  7124	    1D9D  3A				 DB 3ah
1  7125	    1D9E  3F23r				 DW L7B69
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 126
msx_asm\tur_comp.ASM



1  7126	    1DA0  FE 00				 DB 0feh, 0
1  7127	    1DA2  C4				 DB 0c4h
1  7128	    1DA3  1EF9r				 DW L58C5		 ; NonZero --> perform type checking
1  7129	    1DA5  CD				 DB 0cdh
1  7130	    1DA6  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  7131
1  7132	    1DA8  CD			 L57BD:	 DB 0cdh
1  7133	    1DA9  2CCBr				 DW  O_PSHHL
1  7134
1  7135	    1DAB  C1			 L57C0:	 DB 0c1h
1  7136	    1DAC  05				 DB 05h
1  7137	    1DAD  28 05				 DB 28h,(L57C9)-$-1
1  7138	    1DAF  CD				 DB 0cdh
1  7139	    1DB0  31C6r				 DW  L6F5E		 ; match(',')
1  7140	    1DB2  18 A7				 DB 18h,( L5778)-$-1
1  7141
1  7142	    1DB4  E1			 L57C9:	 DB 0e1h
1  7143	    1DB5  C1				 DB 0c1h
1  7144	    1DB6  05				 DB 05h
1  7145	    1DB7  28 05				 DB 28h,(L57D3)-$-1
1  7146	    1DB9  CD				 DB 0cdh
1  7147	    1DBA  31C6r				 DW  L6F5E		 ; match(',')
1  7148	    1DBC  18 83				 DB 18h,( L575E)-$-1
1  7149
1  7150	    1DBE  CD			 L57D3:	 DB 0cdh
1  7151	    1DBF  31D6r				 DW  L6F6E		 ; match(')')
1  7152
1  7153
1  7154	    1DC1			 L57D6:
1  7155	    1DC1  C1				  DB 0c1h		      ;	length of data to read from overlay
1  7156									     ;Ok$$$$, must be in BC in bytes
1  7157
1  7158	    1DC2  E1				  DB 0e1h		      ;	first block of data where to read from
1  7159									     ; in overlay
1  7160									     ;Ok$$$$, must be a	long
1  7161									     ;	     pop long !!
1  7162	    1DC3  D1				  DB 0d1h
1  7163
1  7164	    1DC4  78				  DB 78h		     ; length =	0 ?
1  7165	    1DC5  B1				  DB 0b1h
1  7166	    1DC6  28 1A				  DB 28h,(L57E3)-$-1		     ; jump if procedure/function is no	overlay
1  7167
1  7168	    1DC8  78				  DB 78h
1  7169	    1DC9  A1				  DB 0a1h
1  7170	    1DCA  3C				  DB 3ch
1  7171	    1DCB  20 08				  DB 20h,(L57E0)-$-1		    ; jump if not -1
1  7172
1  7173	    1DCD  CD				  DB 0cdh
1  7174	    1DCE  2CACr				 DW  O_CODE
1  7175	    1DD0  02				  DB 2
1  7176	    1DD1  16 40				  DB 16h,40H		     ; LD D,40H
1  7177
1  7178	    1DD3  18 0D				  DB 18h,( L57E3)-$-1
1  7179
1  7180	    1DD5			 L57E0:
1  7181	    1DD5  C5				  DB 0c5h
1  7182
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 127
msx_asm\tur_comp.ASM



1  7183	    1DD6  EB				  DB 0ebh
1  7184	    1DD7  CD				  DB 0cdh
1  7185	    1DD8  2CEAr				 DW  O_LDDE		   ; high-word of position
1  7186	    1DDA  EB				  DB 0ebh
1  7187	    1DDB  CD				  DB 0cdh
1  7188	    1DDC  2CEEr				 DW  O_LDHL		   ; low-word of position
1  7189
1  7190	    1DDE  E1				  DB 0e1h
1  7191	    1DDF  CD				  DB 0cdh
1  7192	    1DE0  2CE6r				 DW  O_LDBC		   ; length of data block to read from overlay
1  7193
1  7194					 ;	   CALL	O_LDHL
1  7195					 ;	   EX DE,HL
1  7196					 ;	   CALL	O_LDDE		      ;	output:	'LD DE,value HL'
1  7197
1  7198
1  7199	    1DE2			 L57E3:
1  7200	    1DE2  D1				  DB 0d1h		      ;	DE = function type definition address
1  7201
1  7202	    1DE3  E1				  DB 0e1h		      ;	HL = start address of procedure/function
1  7203
1  7204	    1DE4  3E CD				 DB 3eh,0CDH
1  7205	    1DE6  C3				 DB 0c3h
1  7206	    1DE7  2CF0r				 DW  O_OPHL		 ; CALL	HL
1  7207
1  7208	    1DE9  3A			 L57EA:	 DB 3ah
1  7209	    1DEA  3F16r				 DW L7B5C
1  7210	    1DEC  FE 00				 DB 0feh, 0			 ; 0 ?
1  7211	    1DEE  28 08				 DB 28h,(L57F9)-$-1		 ; yes --> illegal assignment
1  7212	    1DF0  FE 05				 DB 0feh, 5			 ; < 5 ?
1  7213	    1DF2  38 08				 DB 38h,(L57FD)-$-1		 ; yes --> correct assignment
1  7214	    1DF4  FE 08				 DB 0feh, 8			 ;>= 8 ?
1  7215	    1DF6  30 04				 DB 30h,(L57FD)-$-1		 ; yes --> correct assignment
1  7216
1  7217						 ; illegal assignment with:
1  7218						 ; 0, 5	(typed file), 6	(text) and 7 (untyped file)
1  7219	    1DF8  CD			 L57F9:	 DB 0cdh
1  7220	    1DF9  34ECr				 DW  L72E1		 ; no condition
1  7221	    1DFB  36				 DB 36H			 ; error 54: Illegal assignment
1  7222
1  7223	    1DFC  3A			 L57FD:	 DB 3ah
1  7224	    1DFD  3F77r				 DW L7BBD
1  7225	    1DFF  CB 4F				 DB 0cbh,04fh
1  7226	    1E01  20 0E				 DB 20h,(L5812)-$-1
1  7227
1  7228	    1E03  CB 47				 DB 0cbh,047h
1  7229	    1E05  28 02				 DB 28h,(L580A)-$-1		 ; jump	if L7BBD = 0
1  7230
1  7231	    1E07  3E FF				 DB 3eh,0FFH
1  7232	    1E09  2A			 L580A:	 DB 02ah
1  7233	    1E0A  3F78r				 DW L7BBE
1  7234	    1E0C  22				 DB 22h
1  7235	    1E0D  3F12r				 DW L7B58		 ; new lvalue of id
1  7236	    1E0F  18 08				 DB 18h,( L581A)-$-1
1  7237
1  7238	    1E11  CD			 L5812:	 DB 0cdh
1  7239	    1E12  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 128
msx_asm\tur_comp.ASM



1  7240									 ; 00 =	LD HL, value in	L7BBE
1  7241									 ; 01 =	LD HL,(value in	L7BBE)
1  7242									 ; 10 =	LD DE, value in	L7BBE
1  7243									 ;	ADD HL,DE
1  7244									 ; 11 =	no output
1  7245	    1E14  CD				 DB 0cdh
1  7246	    1E15  2CCBr				 DW  O_PSHHL
1  7247	    1E17  3E 01				 DB 3eh,1
1  7248
1  7249	    1E19  32			 L581A:	 DB 32h
1  7250	    1E1A  3F11r				 DW L7B57		 ; = 1	    if bit 1,(L7BBD) = '1'
1  7251									 ; = 255    if bit 1,0,(L7BBD) = '0','1'
1  7252									 ; = (L7BBD) if	bit 1,0,(L7BBD)	= '0','0'
1  7253	    1E1C  CD				 DB 0cdh
1  7254	    1E1D  31E6r				 DW  L6F7E		 ; match(':=')
1  7255	    1E1F  3A				 DB 3ah
1  7256	    1E20  3F16r				 DW L7B5C
1  7257	    1E22  FE 03				 DB 0feh, 3			 ; >= 3	?
1  7258	    1E24  D2				 DB 0d2h
1  7259	    1E25  1F71r				 DW L593A
1  7260
1  7261	    1E27  CD				 DB 0cdh
1  7262	    1E28  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  7263
1  7264	    1E2A  CD				 DB 0cdh
1  7265	    1E2B  2814r				 DW  L6749
1  7266
1  7267	    1E2D  CD				 DB 0cdh
1  7268	    1E2E  2EE5r				 DW  L6D43		 ; pop 13, L7B64
1  7269
1  7270	    1E30  CD				 DB 0cdh
1  7271	    1E31  1EF9r				 DW  L58C5		 ; perform type	checking
1  7272
1  7273	    1E33  3A				 DB 3ah
1  7274	    1E34  3F1Er				 DW L7B64
1  7275	    1E36  3D				 DB 3dh
1  7276	    1E37  28 18				 DB 28h,(L5852)-$-1
1  7277	    1E39  3C				 DB 3ch
1  7278	    1E3A  28 08				 DB 28h,(L5845)-$-1
1  7279
1  7280	    1E3C  CD				 DB 0cdh
1  7281	    1E3D  2CACr				 DW  O_CODE
1  7282	    1E3F  02				 DB 2
1  7283	    1E40  ED 5B				 DB 0EDH,05BH		 ; opcode: 'LD DE,()'
1  7284
1  7285	    1E42  18 05				 DB 18h,( L584A)-$-1
1  7286
1  7287	    1E44  CD			 L5845:	 DB 0cdh
1  7288	    1E45  2CACr				 DW  O_CODE
1  7289	    1E47  01				 DB 1
1  7290	    1E48  11				 DB 11H			 ; opcode: 'LD DE,'
1  7291
1  7292	    1E49  2A			 L584A:	 DB 02ah
1  7293	    1E4A  3F1Fr				 DW L7B65
1  7294	    1E4C  CD				 DB 0cdh
1  7295	    1E4D  2CF3r				 DW  O_HL
1  7296	    1E4F  18 05				 DB 18h,( L5857)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 129
msx_asm\tur_comp.ASM



1  7297
1  7298	    1E51  CD			 L5852:	 DB 0cdh
1  7299	    1E52  2CACr				 DW  O_CODE
1  7300	    1E54  01				 DB 1
1  7301	    1E55  D1				 DB 0D1H		 ; POP DE
1  7302
1  7303	    1E56  2A			 L5857:	 DB 02ah
1  7304	    1E57  3F29r				 DW L7B6F		 ; length of structured	type
1  7305	    1E59  CD				 DB 0cdh
1  7306	    1E5A  2CE6r				 DW  O_LDBC
1  7307
1  7308	    1E5C  CD				 DB 0cdh
1  7309	    1E5D  2CACr				 DW  O_CODE
1  7310	    1E5F  02				 DB 2
1  7311	    1E60  ED B0				 DB 0EDH,0B0H		 ; LDIR
1  7312
1  7313	    1E62  C9				 DB 0c9h
1  7314
1  7315	    1E63			 L5864:	 ; ---------------------------------------------------------
1  7316						 ; make	necessary type casts
1  7317						 ; ---------------------------------------------------------
1  7318						 ; in:	 (L7B5C) = type	of lvalue
1  7319						 ;	 B = type of rvalue
1  7320	    1E63  3A				 DB 3ah
1  7321	    1E64  3F16r				 DW L7B5C
1  7322	    1E66  FE 09				 DB 0feh, 9			 ; lvalue type = REAL ?
1  7323	    1E68  20 17				 DB 20h,(L5877)-$-1
1  7324
1  7325						 ; lvalue type = REAL
1  7326	    1E6A  78				 DB 78h
1  7327	    1E6B  FE 0A				 DB 0feh, 0AH			 ; type	rvalue = INTEGER ?
1  7328	    1E6D  20 07				 DB 20h,(L58641)-$-1
1  7329
1  7330						 ; lvalue type = REAL, rvalue type = INTEGER
1  7331	    1E6F  06 09				 DB 06h,9			 ; new rvalue type = REAL
1  7332	    1E71  21				 DB 21h
1  7333	    1E72  1581				 DW _L1008		 ; LIB,	convert	integer	HL to REAL HLDEBC
1  7334	    1E74  18 58				 DB 18h,( L589A)-$-1
1  7335
1  7336	    1E76  FE 0E			 L58641: DB 0feh, 0EH			 ; type	rvalue = LONGINT ?
1  7337	    1E78  20 57				 DB 20h,(L589D)-$-1
1  7338
1  7339						 ; lvalue type = REAL, rvalue type = LONGINT
1  7340	    1E7A  06 09				 DB 06h,9			 ; new rvalue type = REAL
1  7341	    1E7C  21				 DB 21h
1  7342	    1E7D  15A0				 DW _L_R	 ; LIB,	convert	LONGINT	DE:HL to REAL HLDEBC
1  7343	    1E7F  18 4D				 DB 18h,( L589A)-$-1
1  7344
1  7345	    1E81  FE 08			 L5877:	 DB 0feh, 8			 ; lvalue type = STRING	?
1  7346	    1E83  20 11				 DB 20h,(L588C)-$-1		 ; jump	if not
1  7347
1  7348						 ; lvalue type = STRING
1  7349	    1E85  78				 DB 78h
1  7350	    1E86  FE 0C				 DB 0feh, 0CH			 ; rvalue type = CHAR ?
1  7351	    1E88  20 47				 DB 20h,(L589D)-$-1
1  7352
1  7353						 ; lvalue type = STRING, rvalue	type = CHAR
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 130
msx_asm\tur_comp.ASM



1  7354	    1E8A  06 08				 DB 06h,8			 ; new rvalue type = CHAR
1  7355
1  7356	    1E8C  CD				 DB 0cdh
1  7357	    1E8D  2CACr				 DW  O_CODE
1  7358	    1E8F  04				 DB 4
1  7359	    1E90  65				 DB 65H			 ; LD H,L  = character data
1  7360	    1E91  2E 01				 DB 2EH,01H		 ; LD L,1  = length
1  7361	    1E93  E5				 DB 0E5H		 ; PUSH	HL, push string	on stack
1  7362
1  7363	    1E94  18 3B				 DB 18h,( L589D)-$-1
1  7364
1  7365	    1E96  FE 0C			 L588C:	 DB 0feh, 0CH			 ; lvalue type = CHAR ?
1  7366	    1E98  20 0C				 DB 20h,(L588C1)-$-1		 ; jump	if not
1  7367
1  7368						 ; lvalue type = CHAR
1  7369	    1E9A  78				 DB 78h
1  7370	    1E9B  FE 08				 DB 0feh, 8			 ; STRING ?
1  7371	    1E9D  20 32				 DB 20h,(L589D)-$-1
1  7372
1  7373						 ; lvalue = CHAR, rvalue = STRING
1  7374	    1E9F  06 0C				 DB 06h,0CH		 ; CHAR
1  7375	    1EA1  21				 DB 21h
1  7376	    1EA2  0EBF				 DW _L0996		 ; LIB,	convert	STRING to CHAR,	clear
1  7377	    1EA4  18 28				 DB 18h,( L589A)-$-1
1  7378
1  7379	    1EA6  FE 0E			 L588C1: DB 0feh, 0EH			 ; lvalue type = LONGINT ?
1  7380	    1EA8  20 17				 DB 20h,(L588C3)-$-1		 ; jump	if not
1  7381
1  7382						 ; lvalue type = LONGINT
1  7383	    1EAA  78				 DB 78h
1  7384	    1EAB  FE 0A				 DB 0feh, 0AH			 ; rvalue type = INTEGER ?
1  7385	    1EAD  20 07				 DB 20h,(L588C2)-$-1		 ; jump	if not
1  7386
1  7387						 ; lvalue type = LONGINT, rvalue = INTEGER
1  7388	    1EAF  06 0E				 DB 06h,0EH		 ; new rvalue type = LONGINT
1  7389	    1EB1  CD				 DB 0cdh
1  7390	    1EB2  2419r				 DW  OP_L_I		 ; code	to convert INTEGER to LONGINT with
1  7391									 ; sign	extension
1  7392	    1EB4  18 1B				 DB 18h,( L589D)-$-1
1  7393
1  7394	    1EB6  FE 09			 L588C2: DB 0feh, 9			 ; rvalue type = REAL ?
1  7395	    1EB8  20 17				 DB 20h,(L589D)-$-1
1  7396
1  7397						 ; lvalue type = LONGINT, rvalue type =	REAL
1  7398	    1EBA  06 0E				 DB 06h,0EH		 ; new rvalue type = LONGINT
1  7399	    1EBC  21				 DB 21h
1  7400	    1EBD  15C4				 DW _R_L	 ; LIB,	convert	REAL HLDEBC to LONGINT
1  7401	    1EBF  18 0D				 DB 18h,( L589A)-$-1
1  7402
1  7403	    1EC1  FE 0A			 L588C3: DB 0feh, 0AH			 ; lvalue type = INTEGER ?
1  7404	    1EC3  20 0C				 DB 20h,(L589D)-$-1		 ; jump	if not
1  7405
1  7406						 ; lvalue type = INTEGER
1  7407	    1EC5  78				 DB 78h
1  7408	    1EC6  FE 0E				 DB 0feh, 0EH			 ; rvalue type = LONGINT ?
1  7409	    1EC8  20 07				 DB 20h,(L589D)-$-1		 ; jump	if not
1  7410
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 131
msx_asm\tur_comp.ASM



1  7411	    1ECA  06 0A				 DB 06h,0AH		 ; new rvalue type = INTEGER
1  7412	    1ECC  18 03				 DB 18h,( L589D)-$-1
1  7413
1  7414	    1ECE  CD			 L589A:	 DB 0cdh
1  7415	    1ECF  2CE2r				 DW  O_CALHL
1  7416
1  7417	    1ED1			 L589D:	 ; all possible	casts have been	made now
1  7418	    1ED1  3A				 DB 3ah
1  7419	    1ED2  3F16r				 DW L7B5C
1  7420	    1ED4  B8				 DB 0b8h		 ; lvalue and expression have same type	?
1  7421	    1ED5  20 1E				 DB 20h,(L58C1)-$-1		 ; jump	for Type mismatch
1  7422
1  7423	    1ED7  FE 03				 DB 0feh, 3			 ; lvalue type = 3 ?
1  7424	    1ED9  20 0A				 DB 20h,(L58B1)-$-1
1  7425
1  7426	    1EDB  79				 DB 79h
1  7427	    1EDC  B7				 DB 0b7h
1  7428	    1EDD  C8				 DB 0c8h
1  7429	    1EDE  2A				 DB 02ah
1  7430	    1EDF  3F18r				 DW L7B5E
1  7431	    1EE1  BE				 DB 0beh
1  7432	    1EE2  C8				 DB 0c8h
1  7433	    1EE3  18 10				 DB 18h,( L58C1)-$-1		 ; jump	for Type mismatch
1  7434
1  7435	    1EE5  FE 04			 L58B1:	 DB 0feh, 4			 ; lvalue type = 4 ?
1  7436	    1EE7  C0				 DB 0c0h
1  7437	    1EE8  2A				 DB 02ah
1  7438	    1EE9  3F45r				 DW L7B8B
1  7439	    1EEB  7C				 DB 7ch
1  7440	    1EEC  B5				 DB 0b5h
1  7441	    1EED  C8				 DB 0c8h
1  7442	    1EEE  ED 5B				 DB 0edh,5bh
1  7443	    1EF0  3F18r				 DW L7B5E
1  7444	    1EF2  ED 52				 DB 0EDH,052h
1  7445	    1EF4  C8				 DB 0c8h
1  7446
1  7447	    1EF5  CD			 L58C1:	 DB 0cdh
1  7448	    1EF6  34ECr				 DW  L72E1		 ; no condition
1  7449	    1EF8  2C				 DB 2CH			 ; error 44: Type mismatch
1  7450
1  7451
1  7452
1  7453						 ; ----------------------------------------------------------
1  7454						 ; perform type	checking
1  7455						 ; ----------------------------------------------------------
1  7456						 ; in:	 (L7B5C) = current type
1  7457						 ;
1  7458	    1EF9  3A			 L58C5:	 DB 3ah
1  7459	    1EFA  3F16r				 DW L7B5C
1  7460	    1EFC  FE 00				 DB 0feh, 0			 ; lvalue type = 0 ?
1  7461	    1EFE  28 4F				 DB 28h,(L591B)-$-1		 ; jump, type mismatch
1  7462
1  7463	    1F00  0E BF				 DB 0eh,0BFH		 ; 10111111
1  7464	    1F02  FE 0A				 DB 0feh, 0AH			 ; lvalue type = INTEGER,BOOLEAN,CHAR
1  7465									 ;		or LONGINT ?
1  7466	    1F04  30 34				 DB 30h,(L5906)-$-1
1  7467
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 132
msx_asm\tur_comp.ASM



1  7468	    1F06  0E 83				 DB 0eh,83H		 ; 10000011
1  7469	    1F08  FE 08				 DB 0feh, 8			 ; lvalue type = STRING	?
1  7470	    1F0A  20 0B				 DB 20h,(L58E3)-$-1
1  7471
1  7472						 ; check if Var-parameter checking is ON for strings
1  7473	    1F0C  3A				 DB 3ah
1  7474	    1F0D  3F58r				 DW L7B9E		 ; compiler directives
1  7475	    1F0F  CB 6F				 DB 0cbh,06fh			 ; 1 = Var-parameter Type Checking on
1  7476	    1F11  20 27				 DB 20h,(L5906)-$-1		 ; jump	if on
1  7477
1  7478	    1F13  0E 80				 DB 0eh,80H		 ; 10000000
1  7479									 ; when	bit 0,1	are zero the length will
1  7480									 ; not be checked, checks only the type
1  7481	    1F15  18 23				 DB 18h,( L5906)-$-1
1  7482
1  7483	    1F17  FE 06			 L58E3:	 DB 0feh, 6			 ; lvalue type = TEXT,UNTYPED F.,STRING,REAL
1  7484	    1F19  30 1F				 DB 30h,(L5906)-$-1
1  7485
1  7486	    1F1B  0E B3				 DB 0eh,0B3H		 ; 10110011
1  7487	    1F1D  FE 03				 DB 0feh, 3
1  7488	    1F1F  30 19				 DB 30h,(L5906)-$-1
1  7489
1  7490	    1F21  0E C3				 DB 0eh,0C3H		 ; 11000011
1  7491	    1F23  FE 02				 DB 0feh, 2
1  7492	    1F25  30 13				 DB 30h,(L5906)-$-1
1  7493
1  7494	    1F27  2A				 DB 02ah
1  7495	    1F28  3F1Ar				 DW L7B60
1  7496	    1F2A  7C				 DB 7ch
1  7497	    1F2B  B5				 DB 0b5h
1  7498	    1F2C  0E BF				 DB 0eh,0BFH		 ; 10111111
1  7499	    1F2E  20 0A				 DB 20h,(L5906)-$-1
1  7500
1  7501	    1F30  2A				 DB 02ah
1  7502	    1F31  3F27r				 DW L7B6D
1  7503	    1F33  7E				 DB 7eh
1  7504	    1F34  FE 0A				 DB 0feh, 0AH
1  7505	    1F36  20 17				 DB 20h,(L591B)-$-1
1  7506
1  7507	    1F38  0E B3				 DB 0eh,0B3H		 ; 10110011
1  7508
1  7509	    1F3A  21			 L5906:	 DB 21h
1  7510	    1F3B  3F16r				 DW L7B5C
1  7511	    1F3D  11				 DB 11h
1  7512	    1F3E  3F23r				 DW L7B69
1  7513	    1F40  06 08				 DB 06h,8
1  7514	    1F42  CB 11			 L590E:	 DB 0cbh,11h
1  7515	    1F44  30 04				 DB 30h,(L5916)-$-1		 ; jump	if byte	not to compare
1  7516
1  7517	    1F46  1A				 DB 1ah
1  7518	    1F47  BE				 DB 0beh
1  7519	    1F48  20 05				 DB 20h,(L591B)-$-1		 ; jump	if not equal, type mismatch
1  7520
1  7521	    1F4A  23			 L5916:	 DB 23h
1  7522	    1F4B  13				 DB 13h
1  7523	    1F4C  10 F4				 DB 10h,( L590E)-$-1
1  7524	    1F4E  C9				 DB 0c9h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 133
msx_asm\tur_comp.ASM



1  7525
1  7526	    1F4F  CD			 L591B:	 DB 0cdh
1  7527	    1F50  34ECr				 DW  L72E1		 ; no condition
1  7528	    1F52  2C				 DB 2CH			 ; error 44: Type mismatch
1  7529
1  7530
1  7531	    1F53  11			 L591F:	 DB 11h
1  7532	    1F54  FFFC				 DW -4
1  7533	    1F56  19				 DB 019h
1  7534	    1F57  56				 DB 56h
1  7535	    1F58  2B				 DB 2bh
1  7536	    1F59  5E				 DB 5eh
1  7537	    1F5A  2B				 DB 2bh
1  7538	    1F5B  D5				 DB 0d5h
1  7539	    1F5C  56				 DB 56h
1  7540	    1F5D  2B				 DB 2bh
1  7541	    1F5E  5E				 DB 5eh
1  7542	    1F5F  53ED 3F12r			 DW 53edh,L7B58		 ; save	lvalue of id
1  7543	    1F63  E1				 DB 0e1h
1  7544	    1F64  CD				 DB 0cdh
1  7545	    1F65  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  7546	    1F67  AF				 DB 0afh
1  7547	    1F68  32				 DB 32h
1  7548	    1F69  3F11r				 DW L7B57
1  7549	    1F6B  CD				 DB 0cdh
1  7550	    1F6C  31E6r				 DW  L6F7E		 ; match(':=')
1  7551
1  7552	    1F6E  3A				 DB 3ah
1  7553	    1F6F  3F16r				 DW L7B5C		 ; A = default type
1  7554
1  7555	    1F71  CD			 L593A:	 DB 0cdh
1  7556	    1F72  1FC9r				 DW  L5E84		 ; parse a sub expression
1  7557	    1F74  CD				 DB 0cdh
1  7558	    1F75  1E63r				 DW  L5864		 ; make	type casts
1  7559	    1F77  C3				 DB 0c3h
1  7560	    1F78  2683r				 DW  L661B
1  7561
1  7562	    1F7A			 L59E9:	 ; generate a CALL according to	the type in L7B5C
1  7563						 ; in:	 HL = address of table with three routine addresses
1  7564						 ;	 1e word = typed file,	 L7B5C = 5
1  7565						 ;	 2e word = text	file,	 L7B5C = 6
1  7566						 ;	 3e word = untyped file, L7B5C = 7
1  7567	    1F7A  3A				 DB 3ah
1  7568	    1F7B  3F16r				 DW L7B5C
1  7569	    1F7D  D6 05				 DB 0d6h, 5
1  7570	    1F7F  CD				 DB 0cdh
1  7571	    1F80  3F9Dr				 DW  TABLEINDEX2
1  7572
1  7573					 ;	  ADD A,A
1  7574					 ;	  LD E,A
1  7575					 ;	  LD D,0
1  7576					 ;	  ADD HL,DE
1  7577					 ;	  LD E,(HL)
1  7578					 ;	  INC HL
1  7579					 ;	  LD D,(HL)
1  7580					 ;	  EX DE,HL
1  7581
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 134
msx_asm\tur_comp.ASM



1  7582	    1F82  C3				 DB 0c3h
1  7583	    1F83  2CE2r				 DW  O_CALHL
1  7584
1  7585	    1F85			 L5A0C:	 ; parse '(' and file parameter
1  7586	    1F85  CD				 DB 0cdh
1  7587	    1F86  31CEr				 DW  L6F66		 ; match('(')
1  7588	    1F88  CD				 DB 0cdh
1  7589	    1F89  1F90r				 DW  L5A17		 ; parse file parameter
1  7590	    1F8B  C8				 DB 0c8h
1  7591
1  7592	    1F8C  CD				 DB 0cdh
1  7593	    1F8D  34ECr				 DW  L72E1		 ; no condition
1  7594	    1F8F  15				 DB 15H			 ; error 21: File variable expected
1  7595
1  7596	    1F90			 L5A17:	 ; parses a file parameter
1  7597						 ; out:	 NonZero and Carry, no name parsed
1  7598						 ;	 NonZero and NonCarry, name parsed but it is not a file
1  7599						 ;			     parameter
1  7600						 ;	 Zero and NonCarry, file parameter parsed
1  7601						 ;	 A = type of file parameter
1  7602	    1F90  CD				 DB 0cdh
1  7603	    1F91  287Dr				 DW  L67B2		 ; parse var parameter
1  7604	    1F93  37				 DB 37h
1  7605	    1F94  C0				 DB 0c0h		 ; return with NonZero and Carry
1  7606
1  7607	    1F95  3A				 DB 3ah
1  7608	    1F96  3F16r				 DW L7B5C
1  7609	    1F98  FE 05				 DB 0feh, 5
1  7610	    1F9A  38 0C				 DB 38h,(L5A2F)-$-1		 ; type	< 5, not a file	type
1  7611	    1F9C  FE 08				 DB 0feh, 8
1  7612	    1F9E  30 08				 DB 30h,(L5A2F)-$-1		 ; type	> 7, not a file	type
1  7613
1  7614	    1FA0  CD				 DB 0cdh
1  7615	    1FA1  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1  7616									 ; 00 =	LD HL, value in	L7BBE
1  7617									 ; 01 =	LD HL,(value in	L7BBE)
1  7618									 ; 10 =	LD DE, value in	L7BBE
1  7619									 ;	ADD HL,DE
1  7620									 ; 11 =	no output
1  7621	    1FA3  AF				 DB 0afh		 ; return NonCarry and Zero
1  7622	    1FA4  3A				 DB 3ah
1  7623	    1FA5  3F16r				 DW L7B5C		 ; return type
1  7624	    1FA7  C9				 DB 0c9h
1  7625
1  7626	    1FA8  AF			 L5A2F:	 DB 0afh		 ; no carry
1  7627	    1FA9  3D				 DB 3dh			 ; return with NonZero,	A = 255
1  7628	    1FAA  C9				 DB 0c9h
1  7629
1  7630	    1FAB			 L5CAD:	 ; parses a VAR	string variable
1  7631	    1FAB  CD				 DB 0cdh
1  7632	    1FAC  284Ar				 DW  L677F		 ; parse VAR parameter
1  7633	    1FAE  3A				 DB 3ah
1  7634	    1FAF  3F16r				 DW L7B5C
1  7635	    1FB1  FE 08				 DB 0feh, 8			 ; string var ?
1  7636	    1FB3  C8				 DB 0c8h		 ; return if string var
1  7637
1  7638	    1FB4  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 135
msx_asm\tur_comp.ASM



1  7639	    1FB5  34ECr				 DW  L72E1		 ; no condition
1  7640	    1FB7  22				 DB 22H			 ; error 34: String variable expected
1  7641
1  7642	    1FB8  E5			 L5D76:	 DB 0e5h
1  7643	    1FB9  CD				 DB 0cdh
1  7644	    1FBA  2CCBr				 DW  O_PSHHL
1  7645	    1FBC  CD				 DB 0cdh
1  7646	    1FBD  31C6r				 DW  L6F5E		 ; match(',')
1  7647	    1FBF  CD				 DB 0cdh
1  7648	    1FC0  1FDCr				 DW  L5E97		 ; parse integer expression
1  7649	    1FC2  E1				 DB 0e1h
1  7650
1  7651	    1FC3  CD			 L5960:	 DB 0cdh
1  7652	    1FC4  31D6r				 DW  L6F6E		 ; match(')')
1  7653	    1FC6  C3				 DB 0c3h
1  7654	    1FC7  2CE2r				 DW  O_CALHL
1  7655
1  7656	    1FC9			 L5E84:	 ; parses a sub	expression
1  7657						 ; in:	 A = default type
1  7658	    1FC9  CD				 DB 0cdh
1  7659	    1FCA  2ECCr				 DW  L6D2A		 ; push	13, L7B57
1  7660	    1FCC  CD				 DB 0cdh
1  7661	    1FCD  204Cr				 DW  L5EE8		 ; parse expression
1  7662	    1FCF  CD				 DB 0cdh
1  7663	    1FD0  2EEBr				 DW  L6D49		 ; pop 13, L7B57
1  7664	    1FD2  C9				 DB 0c9h
1  7665
1  7666	    1FD3			 L5E8E:	 ; parses an array index, ':=' and integer expression
1  7667	    1FD3  CD				 DB 0cdh
1  7668	    1FD4  2628r				 DW  L65D5		 ; parse an array index
1  7669	    1FD6  CD				 DB 0cdh
1  7670	    1FD7  31E6r				 DW  L6F7E		 ; match(':=')
1  7671	    1FD9  CD				 DB 0cdh
1  7672	    1FDA  2CCBr				 DW  O_PSHHL		 ; push	index result
1  7673
1  7674	    1FDC			 L5E97:	 ; parses an integer expression
1  7675	    1FDC  3E 0A				 DB 3eh,0AH		 ; default type	= INTEGER
1  7676	    1FDE  CD				 DB 0cdh
1  7677	    1FDF  204Cr				 DW  L5EE8		 ; parse expression
1  7678	    1FE1  78				 DB 78h
1  7679	    1FE2  FE 0A				 DB 0feh, 00AH			 ; expression type = integer ?
1  7680	    1FE4  C8				 DB 0c8h		 ; yes,	ok
1  7681
1  7682	    1FE5  CD				 DB 0cdh
1  7683	    1FE6  34ECr				 DW  L72E1		 ; no condition
1  7684	    1FE8  17				 DB 17H			 ; error 23: Integer expression	expected
1  7685
1  7686	    1FE9			 L5EA2:	 ; parses an integer, longint or real expression
1  7687						 ; in:	 A = default expression
1  7688	    1FE9  CD				 DB 0cdh
1  7689	    1FEA  204Cr				 DW  L5EE8		 ; parse expression
1  7690	    1FEC  78				 DB 78h
1  7691	    1FED  FE 0A				 DB 0feh, 00AH
1  7692	    1FEF  C8				 DB 0c8h		 ; return if type = INTEGER
1  7693	    1FF0  FE 09				 DB 0feh, 9
1  7694	    1FF2  C8				 DB 0c8h		 ; return if type = REAL
1  7695	    1FF3  FE 0E				 DB 0feh, 00EH
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 136
msx_asm\tur_comp.ASM



1  7696	    1FF5  C8				 DB 0c8h		 ; return if type = LONGINT
1  7697
1  7698	    1FF6  CD				 DB 0cdh
1  7699	    1FF7  34ECr				 DW  L72E1		 ; no condition
1  7700	    1FF9  1A				 DB 1AH			 ; error 26: Integer or	real expression	expected
1  7701
1  7702	    1FFA			 L5EB0:	 ; parses a boolean expression
1  7703	    1FFA  3E 0B				 DB 3eh,0BH		 ; default boolean
1  7704	    1FFC  CD				 DB 0cdh
1  7705	    1FFD  204Cr				 DW  L5EE8		 ; parse expression
1  7706	    1FFF  78				 DB 78h
1  7707	    2000  FE 0B				 DB 0feh, 00BH
1  7708	    2002  C8				 DB 0c8h		 ; return if type = BOOLEAN
1  7709
1  7710	    2003  CD				 DB 0cdh
1  7711	    2004  34ECr				 DW  L72E1		 ; no condition
1  7712	    2006  14				 DB 14H			 ; error 20: Boolean expression	expected
1  7713
1  7714	    2007			 L5EBB:	 ; parses a simple expression
1  7715	    2007  CD				 DB 0cdh
1  7716	    2008  204Cr				 DW  L5EE8		 ; parse expression
1  7717
1  7718	    200A  78			 L5EBE:	 DB 78h
1  7719	    200B  FE 0A				 DB 0feh, 00AH			 ; return if type = INTEGER, BOOLEAN or	CHAR
1  7720									 ;		or LONGINT
1  7721	    200D  D0				 DB 0d0h
1  7722	    200E  FE 08				 DB 0feh, 8
1  7723
1  7724	    2010  CD				 DB 0cdh
1  7725	    2011  34E5r				 DW  L72DA		 ; NonZero --> error
1  7726	    2013  1F				 DB 1FH			 ; error 31: Simple expression expected
1  7727
1  7728	    2014  06 0C				 DB 06h,00CH
1  7729	    2016  21				 DB 21h
1  7730	    2017  0EBF				 DW _L0996		 ; LIB,	convert	STRING to CHAR,	clear
1  7731	    2019  C3				 DB 0c3h
1  7732	    201A  2CE2r				 DW  O_CALHL
1  7733
1  7734	    201C			 L5ED0:	 ; parse a string expression
1  7735	    201C  3E 08				 DB 3eh,8			 ; default type	= STRING
1  7736	    201E  CD				 DB 0cdh
1  7737	    201F  204Cr				 DW  L5EE8		 ; parse expression
1  7738	    2021  78				 DB 78h
1  7739	    2022  FE 08				 DB 0feh, 8
1  7740	    2024  C8				 DB 0c8h
1  7741	    2025  FE 0C				 DB 0feh, 00CH
1  7742
1  7743	    2027  CD				 DB 0cdh
1  7744	    2028  34E5r				 DW  L72DA		 ; NonZero --> error
1  7745	    202A  21				 DB 21H			 ; error 33: String expression expected
1  7746
1  7747	    202B			 L5EDD:	 ; generate code to push CHAR in L as STRING with length = 1
1  7748						 ; out:	 type =	STRING,	B = 8
1  7749	    202B  06 08				 DB 06h,8
1  7750
1  7751	    202D  CD				 DB 0cdh
1  7752	    202E  2CACr				 DW  O_CODE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 137
msx_asm\tur_comp.ASM



1  7753	    2030  04				 DB 4
1  7754	    2031  65				 DB 65H			 ; LD H,L
1  7755	    2032  2E 01				 DB 2EH,01H		 ; LD L,1
1  7756	    2034  E5				 DB 0E5H		 ; PUSH	HL
1  7757
1  7758	    2035  C9				 DB 0c9h
1  7759
1  7760	    2036  0A			 DEF_TYPE:DB 0AH
1  7761
1  7762	    2037			 SETDFT: ; set new default type
1  7763						 ; in:	 A = type,
1  7764						 ; out:	 A = type,
1  7765						 ; changes: F
1  7766	    2037  FE FF				 DB 0feh, 0FFH
1  7767	    2039  28 0D				 DB 28h,(SETDF1)-$-1
1  7768	    203B  FE 0A				 DB 0feh, 0AH
1  7769	    203D  28 09				 DB 28h,(SETDF1)-$-1
1  7770	    203F  FE 0E				 DB 0feh, 0EH
1  7771	    2041  28 05				 DB 28h,(SETDF1)-$-1
1  7772	    2043  FE 09				 DB 0feh, 09H
1  7773	    2045  C0				 DB 0c0h		 ; leave old value if not INTEGER or LONGINT
1  7774
1  7775	    2046  3E FF				 DB 3eh,0FFH
1  7776
1  7777	    2048  32			 SETDF1: DB 32h
1  7778	    2049  2036r				 DW DEF_TYPE
1  7779	    204B  C9				 DB 0c9h
1  7780
1  7781	    204C			 L5EE8:	 ; parse a complete expression
1  7782						 ; SYNTAX: expression ::= simple-expression
1  7783						 ;			{ relational-operator simple-expression	}
1  7784
1  7785	    204C  CD				 DB 0cdh
1  7786	    204D  2037r				 DW  SETDFT
1  7787
1  7788	    204F  21				 DB 21h
1  7789	    2050  19F2r				 DW BOOLOPER
1  7790	    2052  34				 DB 034h		 ; increase one	level
1  7791									 ; 1 = the FIRST level
1  7792
1  7793	    2053  CD				 DB 0cdh
1  7794	    2054  2151r				 DW  L5F98		 ; simple-expression
1  7795									 ; B = type
1  7796	    2056  78				 DB 78h
1  7797	    2057  CD				 DB 0cdh
1  7798	    2058  2037r				 DW  SETDFT		 ; set new default type
1  7799
1  7800	    205A			 L5EEB:	 ; { relational-operator simple-expression }
1  7801	    205A  C5				 DB 0c5h
1  7802	    205B  CD				 DB 0cdh
1  7803	    205C  30C2r				 DW  L6E5A		 ; is '=' the next word
1  7804	    205E  01				 DB 1			 ; 1 byte following
1  7805	    205F  38FAr				 DW L7625		 ; list	of reserved words:
1  7806									 ; =, <>, >=, <=, >, <,	IN
1  7807	    2061  C1				 DB 0c1h
1  7808	    2062  C0				 DB 0c0h		 ; return if no	relational-operator
1  7809
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 138
msx_asm\tur_comp.ASM



1  7810	    2063  7E				 DB 7eh		 ; 0 = =, 1 = <>, 2 = >=, 3 = <=
1  7811									 ; 4 = >, 5 = <,  ffh =	IN
1  7812	    2064  3C				 DB 3ch
1  7813	    2065  28 56				 DB 28h,(L5F34)-$-1		 ; jump	if 'IN'
1  7814
1  7815	    2067  3D				 DB 3dh
1  7816	    2068  F5				 DB 0f5h		 ; save	relational-operator
1  7817	    2069  C5				 DB 0c5h		 ; save	type
1  7818
1  7819	    206A  CD				 DB 0cdh
1  7820	    206B  237Er				 DW  L6148		 ; generate code to push REAL, INTEGER,
1  7821									 ; BOOLEAN, CHAR, POINTER or LONGINT
1  7822									 ; on the stack
1  7823
1  7824	    206D  2A				 DB 02ah
1  7825	    206E  3F45r				 DW L7B8B
1  7826	    2070  E5				 DB 0e5h
1  7827	    2071  CD				 DB 0cdh
1  7828	    2072  2151r				 DW  L5F98		 ; simple-expression
1  7829									 ; B = type
1  7830	    2074  E1				 DB 0e1h
1  7831	    2075  22				 DB 22h
1  7832	    2076  3F47r				 DW L7B8D
1  7833	    2078  D1				 DB 0d1h		 ; D = type of previous	simple-expression
1  7834	    2079  CD				 DB 0cdh
1  7835	    207A  239Er				 DW  L6160		 ; convert previous and	current	to same	type
1  7836
1  7837	    207C  78				 DB 78h
1  7838	    207D  CD				 DB 0cdh
1  7839	    207E  2037r				 DW  SETDFT		 ; set new default type
1  7840
1  7841	    2080  F1				 DB 0f1h		 ; restore relational-operator
1  7842
1  7843	    2081  87				 DB 087h		 ; * 2
1  7844	    2082  87				 DB 087h		 ; * 4
1  7845	    2083  87				 DB 087h		 ; * 8
1  7846	    2084  87				 DB 087h		 ; * 16
1  7847	    2085  5F				 DB 5fh			 ; DE =	16 * A
1  7848	    2086  16 00				 DB 16h,0
1  7849	    2088  21				 DB 21h
1  7850	    2089  20F1r				 DW L5F68
1  7851	    208B  19				 DB 019h	 ;+0  =	=,+16 =	<>,+32 = >=,+48	= <=
1  7852									 ;+64 =	>,+80 =	<
1  7853	    208C  78				 DB 78h
1  7854	    208D  FE 03				 DB 0feh, 3			 ; operator type = SET ?
1  7855	    208F  28 20				 DB 28h,(L5F28)-$-1		 ; jump	if operator at SET
1  7856
1  7857	    2091  23				 DB 23h
1  7858	    2092  23				 DB 23h
1  7859	    2093  FE 09				 DB 0feh, 9			 ; operator type = REAL	?
1  7860	    2095  28 1A				 DB 28h,(L5F28)-$-1		 ; jump	if operator at REAL
1  7861
1  7862	    2097  23				 DB 23h
1  7863	    2098  23				 DB 23h
1  7864	    2099  FE 08				 DB 0feh, 8			 ; operator type = STRING ?
1  7865	    209B  28 14				 DB 28h,(L5F28)-$-1		 ; jump	if operator at STRING
1  7866
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 139
msx_asm\tur_comp.ASM



1  7867	    209D  23				 DB 23h
1  7868	    209E  23				 DB 23h
1  7869	    209F  FE 0E				 DB 0feh, 0EH			 ; operator type = LONGINT ?
1  7870	    20A1  28 0E				 DB 28h,(L5F28)-$-1		 ; jump	if LONGINT
1  7871
1  7872	    20A3  23				 DB 23h
1  7873	    20A4  23				 DB 23h
1  7874	    20A5  FE 0A				 DB 0feh, 0AH			 ; operator type = INTEGER ?
1  7875	    20A7  28 08				 DB 28h,(L5F28)-$-1		 ; jump	if INTEGER
1  7876
1  7877	    20A9  23				 DB 23h
1  7878	    20AA  23				 DB 23h
1  7879	    20AB  FE 0B				 DB 0feh, 0BH			 ; operator type = BOOLEAN ?
1  7880	    20AD  28 02				 DB 28h,(L5F28)-$-1		 ; jump	if BOOLEAN
1  7881
1  7882	    20AF  23				 DB 23h
1  7883	    20B0  23				 DB 23h
1  7884						 ; operator type = CHARACTER
1  7885
1  7886	    20B1  5E			 L5F28:	 DB 5eh
1  7887	    20B2  23				 DB 23h
1  7888	    20B3  56				 DB 56h
1  7889	    20B4  7A				 DB 7ah
1  7890	    20B5  B3				 DB 0b3h
1  7891
1  7892	    20B6  CD				 DB 0cdh
1  7893	    20B7  34DFr				 DW  L72D4		 ; Zero	--> error
1  7894	    20B9  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  7895									 ;	     operator
1  7896	    20BA  EB				 DB 0ebh
1  7897	    20BB  18 2E				 DB 18h,( L5F62)-$-1
1  7898
1  7899	    20BD			 L5F34:	 ; operator = 'IN'
1  7900	    20BD  78				 DB 78h
1  7901	    20BE  FE 0A				 DB 0feh, 00AH
1  7902	    20C0  30 0E				 DB 30h,(L5F47)-$-1		 ; jump	if type	= INTEGER, BOOLEAN or CHAR
1  7903
1  7904	    20C2  FE 08				 DB 0feh, 8			 ; type	= STRING ?
1  7905
1  7906	    20C4  CD				 DB 0cdh
1  7907	    20C5  34E5r				 DW  L72DA		 ; NonZero --> error
1  7908	    20C7  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  7909									 ;	     operator
1  7910
1  7911	    20C8  21				 DB 21h
1  7912	    20C9  0EBF				 DW _L0996		 ; LIB,	convert	STRING to CHAR,	clear
1  7913	    20CB  CD				 DB 0cdh
1  7914	    20CC  2CE2r				 DW  O_CALHL
1  7915	    20CE  06 0C				 DB 06h,00CH		 ; result type = CHAR
1  7916
1  7917	    20D0  C5			 L5F47:	 DB 0c5h
1  7918
1  7919						 ; generate code to save the value to search in	the 'SET'
1  7920	    20D1  CD				 DB 0cdh
1  7921	    20D2  2CCBr				 DW  O_PSHHL
1  7922
1  7923	    20D4  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 140
msx_asm\tur_comp.ASM



1  7924	    20D5  2151r				 DW  L5F98		 ; simple-expression
1  7925									 ; B = type
1  7926	    20D7  D1				 DB 0d1h
1  7927	    20D8  78				 DB 78h
1  7928	    20D9  FE 03				 DB 0feh, 3			 ; type	= SET ?
1  7929
1  7930	    20DB  CD				 DB 0cdh
1  7931	    20DC  34E5r				 DW  L72DA		 ; NonZero --> error
1  7932	    20DE  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  7933									 ;	     operator
1  7934
1  7935	    20DF  79				 DB 79h
1  7936	    20E0  B7				 DB 0b7h
1  7937	    20E1  28 05				 DB 28h,(L5F5F)-$-1
1  7938	    20E3  BA				 DB 0bah
1  7939
1  7940	    20E4  CD				 DB 0cdh
1  7941	    20E5  34E5r				 DW  L72DA		 ; NonZero --> error
1  7942	    20E7  2C				 DB 2CH			 ; error 44: Type mismatch
1  7943
1  7944	    20E8  21			 L5F5F:	 DB 21h
1  7945	    20E9  191C				 DW _L134F		 ; LIB,	clear
1  7946
1  7947	    20EB  CD			 L5F62:	 DB 0cdh
1  7948	    20EC  2CE2r				 DW  O_CALHL
1  7949	    20EE  06 0B				 DB 06h,00BH		 ; return type = boolean
1  7950	    20F0  C9				 DB 0c9h
1  7951
1  7952	    20F1  18AE			 L5F68:	 DW _L12E1		 ; LIB,	clear, =  SET
1  7953	    20F3  0889				 DW _L0688		 ; LIB,	clear, =  REAL
1  7954	    20F5  088F				 DW _L068D		 ; LIB,	clear, =  STRING
1  7955	    20F7  0883				 DW _L_EQ		 ; LIB,	      =	 LONGINT
1  7956	    20F9  086A				 DW _L067F		 ; LIB,	clear, =  INTEGER
1  7957	    20FB  086A				 DW _L067F		 ; LIB,	clear, =  BOOLEAN
1  7958	    20FD  086A				 DW _L067F		 ; LIB,	clear, =  CHAR
1  7959	    20FF  0000				 DW 0
1  7960
1  7961	    2101  18AA				 DW _L12DD		 ; LIB,	clear, <> SET
1  7962	    2103  08A3				 DW _L069B		 ; LIB,	clear, <> REAL
1  7963	    2105  08A8				 DW _L06A0		 ; LIB,	clear, <> STRING
1  7964	    2107  089E				 DW _L_NEQ		 ; LIB,	      <> LONGINT
1  7965	    2109  0895				 DW _L0692		 ; LIB,	clear, <> INTEGER
1  7966	    210B  0895				 DW _L0692		 ; LIB,	clear, <> BOOLEAN
1  7967	    210D  0895				 DW _L0692		 ; LIB,	clear, <> CHAR
1  7968	    210F  0000				 DW 0
1  7969
1  7970	    2111  18CD				 DW _L1300		 ; LIB,	clear, >= SET
1  7971	    2113  08BB				 DW _L06AE		 ; LIB,	clear, >= REAL
1  7972	    2115  08C0				 DW _L06B3		 ; LIB,	clear, >= STRING
1  7973	    2117  08B6				 DW _L_GTE		 ; LIB,	      >= LONGINT
1  7974	    2119  08AD				 DW _L06A5		 ; LIB,	clear, >= INTEGER
1  7975	    211B  08AD				 DW _L06A5		 ; LIB,	clear, >= BOOLEAN
1  7976	    211D  08AD				 DW _L06A5		 ; LIB,	clear, >= CHAR
1  7977	    211F  0000				 DW 0
1  7978
1  7979	    2121  18C9				 DW _L12FC		 ; LIB,	clear, <= SET
1  7980	    2123  08D4				 DW _L06C2		 ; LIB,	clear, <= REAL
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 141
msx_asm\tur_comp.ASM



1  7981	    2125  08D9				 DW _L06C7		 ; LIB,	clear, <= STRING
1  7982	    2127  08CF				 DW _L_LSE		 ; LIB,	      <= LONGINT
1  7983	    2129  08C5				 DW _L06B8		 ; LIB,	clear, <= INTEGER
1  7984	    212B  08C5				 DW _L06B8		 ; LIB,	clear, <= BOOLEAN
1  7985	    212D  08C5				 DW _L06B8		 ; LIB,	clear, <= CHAR
1  7986	    212F  0000				 DW 0
1  7987
1  7988	    2131  0000				 DW 0			 ; ----	    , >	 SET
1  7989	    2133  08ED				 DW _L06D6		 ; LIB,	clear, >  REAL
1  7990	    2135  08F2				 DW _L06DB		 ; LIB,	clear, >  STRING
1  7991	    2137  08E8				 DW _L_GT		 ; LIB,	      >	 LONGINT
1  7992	    2139  08DE				 DW _L06CC		 ; LIB,	clear, >  INTEGER
1  7993	    213B  08DE				 DW _L06CC		 ; LIB,	clear, >  BOOLEAN
1  7994	    213D  08DE				 DW _L06CC		 ; LIB,	clear, >  CHAR
1  7995	    213F  0000				 DW 0
1  7996
1  7997	    2141  0000				 DW 0			 ; ----	    , <	 SET
1  7998	    2143  0905				 DW _L06E9		 ; LIB,	clear, <  REAL
1  7999	    2145  090A				 DW _L06EE		 ; LIB,	clear, <  STRING
1  8000	    2147  0900				 DW _L_LS		 ; LIB,	      <	 LONGINT
1  8001	    2149  08F7				 DW _L06E0		 ; LIB,	clear, <  INTEGER
1  8002	    214B  08F7				 DW _L06E0		 ; LIB,	clear, <  BOOLEAN
1  8003	    214D  08F7				 DW _L06E0		 ; LIB,	clear, <  CHAR
1  8004	    214F  0000				 DW 0
1  8005
1  8006	    2151			 L5F98:	 ; SYNTAX: simple-expression ::= term {	adding-operator	term }
1  8007						 ; out:	 B = type
1  8008
1  8009	    2151  CD				 DB 0cdh
1  8010	    2152  2230r				 DW  L6054		 ; term
1  8011									 ; B = type
1  8012
1  8013	    2154  78				 DB 78h
1  8014	    2155  CD				 DB 0cdh
1  8015	    2156  2037r				 DW  SETDFT		 ; set new default type
1  8016
1  8017	    2158			 L5F9B:	 ; { adding-operator term }
1  8018	    2158  C5				 DB 0c5h		 ; save	type
1  8019	    2159  CD				 DB 0cdh
1  8020	    215A  30C2r				 DW  L6E5A
1  8021	    215C  01				 DB 1			 ; 1 byte following
1  8022	    215D  38EEr				 DW L7619		 ; start of reserved word list:
1  8023									 ; +, -, OR, XOR
1  8024	    215F  C1				 DB 0c1h		 ; restore type
1  8025	    2160  C0				 DB 0c0h		 ; return if no	adding-operator
1  8026
1  8027						 ; pointer types do not	match with an adding-operator
1  8028	    2161  78				 DB 78h
1  8029	    2162  FE 04				 DB 0feh, 4			 ; type	= POINTER ?
1  8030	    2164  CD				 DB 0cdh
1  8031	    2165  34DFr				 DW  L72D4		 ; Zero	--> error
1  8032	    2167  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8033									 ;	     operator
1  8034
1  8035	    2168  7E				 DB 7eh		 ; 0 = +,  1 = -,
1  8036									 ; 2 = OR  3 = XOR
1  8037	    2169  F5				 DB 0f5h		 ; save	operator
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 142
msx_asm\tur_comp.ASM



1  8038
1  8039	    216A  C5				 DB 0c5h		 ; save	type of	previous term
1  8040	    216B  CD				 DB 0cdh
1  8041	    216C  237Er				 DW  L6148		 ; generate code to push REAL, INTEGER,
1  8042									 ; BOOLEAN, CHAR, POINTER or LONGINT
1  8043									 ; on the stack
1  8044
1  8045	    216E  CD				 DB 0cdh
1  8046	    216F  2230r				 DW  L6054		 ; term
1  8047									 ; B = type of term
1  8048
1  8049	    2171  D1				 DB 0d1h		 ; D = type of previous	term
1  8050
1  8051	    2172  F1				 DB 0f1h		 ; A = operator
1  8052									 ; 0 = +,  1 = -,
1  8053									 ; 2 = OR  3 = XOR
1  8054	    2173  F5				 DB 0f5h		 ; save	operator
1  8055	    2174  B7				 DB 0b7h
1  8056	    2175  20 0F				 DB 20h,(L5FC9)-$-1		 ; jump	if operator = 1, 2 or 3
1  8057
1  8058
1  8059	    2177  78				 DB 78h
1  8060	    2178  FE 0C				 DB 0feh, 00CH			 ; current type	= CHAR ?
1  8061	    217A  20 0A				 DB 20h,(L5FC9)-$-1		 ; jump	if not
1  8062
1  8063						 ; generate code to concatenate	two strings
1  8064
1  8065						 ; generate code to convert HL (CHAR) in to a string
1  8066	    217C  CD				 DB 0cdh
1  8067	    217D  2CACr				 DW  O_CODE
1  8068	    217F  04				 DB 4
1  8069	    2180  65				 DB 65H			 ; LD H,L
1  8070	    2181  2E 01				 DB 2EH,01H		 ; LD L,1
1  8071	    2183  E5				 DB 0E5H		 ; PUSH	HL
1  8072
1  8073	    2184  06 08				 DB 06h,8			 ; current type	= STRING
1  8074
1  8075	    2186  CD			 L5FC9:	 DB 0cdh
1  8076	    2187  239Er				 DW  L6160		 ; convert previous and	current	to same	type
1  8077
1  8078	    2189  78				 DB 78h
1  8079	    218A  CD				 DB 0cdh
1  8080	    218B  2037r				 DW  SETDFT		 ; set new default type
1  8081
1  8082	    218D  F1				 DB 0f1h		 ; A = operator
1  8083	    218E  FE 02				 DB 0feh, 2
1  8084	    2190  30 57				 DB 30h,(L601B)-$-1		 ; jump	if 'OR'	or 'XOR'
1  8085
1  8086						 ; operator = '+' or '-'
1  8087	    2192  F5				 DB 0f5h
1  8088	    2193  78				 DB 78h
1  8089	    2194  21				 DB 21h
1  8090	    2195  18E5				 DW _L1318		 ; LIB,	SET + SET
1  8091	    2197  11				 DB 11h
1  8092	    2198  18F3				 DW _L1326		 ; LIB,	SET - SET
1  8093	    219A  FE 03				 DB 0feh, 3			 ; type	= SET ?
1  8094	    219C  28 35				 DB 28h,(L6006)-$-1		 ; jump	if type	= SET
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 143
msx_asm\tur_comp.ASM



1  8095
1  8096	    219E  21				 DB 21h
1  8097	    219F  0F12				 DW _L09E9		 ; LIB,	REAL + REAL
1  8098	    21A1  11				 DB 11h
1  8099	    21A2  0F1B				 DW _L09F2		 ; LIB,	REAL - REAL
1  8100	    21A4  FE 09				 DB 0feh, 9			 ; type	= REAL ?
1  8101	    21A6  28 2B				 DB 28h,(L6006)-$-1		 ; jump	if type	= REAL
1  8102
1  8103	    21A8  21				 DB 21h
1  8104	    21A9  0A74				 DW _L_ADD
1  8105	    21AB  11				 DB 11h
1  8106	    21AC  0A7F				 DW _L_SUB
1  8107	    21AE  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  8108	    21B0  28 21				 DB 28h,(L6006)-$-1		 ; jump	if type	= LONGINT
1  8109
1  8110	    21B2  FE 08				 DB 0feh, 8			 ; type	= STRING ?
1  8111	    21B4  28 28				 DB 28h,(L6010)-$-1		 ; jump	if type	= STRING
1  8112
1  8113	    21B6  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8114
1  8115	    21B8  CD				 DB 0cdh
1  8116	    21B9  34E5r				 DW  L72DA		 ; NonZero --> error
1  8117	    21BB  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8118									 ;	     operator
1  8119
1  8120	    21BC  F1				 DB 0f1h
1  8121	    21BD  3D				 DB 3dh			 ; type	= '-'
1  8122	    21BE  28 08				 DB 28h,(L5FFC)-$-1		 ; jump	if type	= '-'
1  8123
1  8124						 ; generate code to add	two INTEGERS
1  8125	    21C0  CD				 DB 0cdh
1  8126	    21C1  2CACr				 DW  O_CODE
1  8127	    21C3  01				 DB 1
1  8128	    21C4  19				 DB 19H			 ; ADD HL,DE
1  8129
1  8130	    21C5  C3				 DB 0c3h
1  8131	    21C6  2158r				 DW  L5F9B		 ; repeat { adding-operator term }
1  8132
1  8133	    21C8			 L5FFC:	 ; generate code to subtract two INTEGERS
1  8134	    21C8  CD				 DB 0cdh
1  8135	    21C9  2CACr				 DW  O_CODE
1  8136	    21CB  04				 DB 4
1  8137	    21CC  EB				 DB 0EBH		 ; EX DE,HL
1  8138	    21CD  B7				 DB 0B7H		 ; OR A
1  8139	    21CE  ED 52				 DB 0EDH,52H		 ; SBC HL,DE
1  8140
1  8141	    21D0  C3				 DB 0c3h
1  8142	    21D1  2158r				 DW  L5F9B
1  8143
1  8144	    21D3  F1			 L6006:	 DB 0f1h
1  8145	    21D4  3D				 DB 3dh
1  8146	    21D5  20 01				 DB 20h,(L600B)-$-1		 ; jump	if operator = '+'
1  8147
1  8148	    21D7  EB				 DB 0ebh
1  8149						 ; HL =	address	of '-' routine
1  8150
1  8151	    21D8  CD			 L600B:	 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 144
msx_asm\tur_comp.ASM



1  8152	    21D9  2CE2r				 DW  O_CALHL
1  8153	    21DB  C3				 DB 0c3h
1  8154	    21DC  2158r				 DW  L5F9B
1  8155
1  8156	    21DE  F1			 L6010:	 DB 0f1h
1  8157	    21DF  3D				 DB 3dh			 ; operator = '-' ?
1  8158
1  8159	    21E0  CD				 DB 0cdh
1  8160	    21E1  34DFr				 DW  L72D4		 ; Zero	--> error
1  8161	    21E3  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8162									 ;	     operator
1  8163
1  8164	    21E4  21				 DB 21h
1  8165	    21E5  0D66				 DW _L083D		 ; LIB,	STRING + STRING
1  8166	    21E7  18 EF				 DB 18h,( L600B)-$-1
1  8167
1  8168	    21E9			 L601B:	 ; generate code for 'OR' and 'XOR' operators
1  8169	    21E9  78				 DB 78h
1  8170	    21EA  20 22				 DB 20h,(L6039)-$-1		 ; jump	if operator = 'XOR'
1  8171
1  8172						 ; operator = 'OR'
1  8173
1  8174	    21EC  FE 0B				 DB 0feh, 00BH			 ; type	= BOOLEAN ?
1  8175	    21EE  28 14				 DB 28h,(L602F)-$-1		 ; jump	if boolean
1  8176
1  8177	    21F0  21				 DB 21h
1  8178	    21F1  0A30				 DW _L_OR
1  8179	    21F3  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  8180	    21F5  28 E1				 DB 28h,(L600B)-$-1
1  8181
1  8182	    21F7  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8183
1  8184	    21F9  CD				 DB 0cdh
1  8185	    21FA  34E5r				 DW  L72DA		 ; NonZero --> error
1  8186	    21FC  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8187									 ;	     operator
1  8188
1  8189	    21FD  CD				 DB 0cdh
1  8190	    21FE  2CACr				 DW  O_CODE
1  8191	    2200  03				 DB 3
1  8192	    2201  7C				 DB 7CH			 ; LD A,H
1  8193	    2202  B2				 DB 0B2H		 ; OR D
1  8194	    2203  67				 DB 67H			 ; LD H,A
1  8195
1  8196	    2204  CD			 L602F:	 DB 0cdh
1  8197	    2205  2CACr				 DW  O_CODE
1  8198	    2207  03				 DB 3
1  8199	    2208  7D				 DB 7DH			 ; LD A,L
1  8200	    2209  B3				 DB 0B3H		 ; OR E
1  8201	    220A  6F				 DB 6FH			 ; LD L,A
1  8202
1  8203	    220B  C3				 DB 0c3h
1  8204	    220C  2158r				 DW  L5F9B
1  8205
1  8206	    220E			 L6039:	 ; operator = 'XOR'
1  8207
1  8208	    220E  FE 0B				 DB 0feh, 00BH			 ; type	= BOOLEAN ?
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 145
msx_asm\tur_comp.ASM



1  8209	    2210  28 14				 DB 28h,(L604A)-$-1		 ; jump	if type	= BOOLEAN
1  8210
1  8211	    2212  21				 DB 21h
1  8212	    2213  0A42				 DW _L_XOR
1  8213	    2215  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  8214	    2217  28 BF				 DB 28h,(L600B)-$-1		 ; jump	if type	= LONGINT
1  8215
1  8216	    2219  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8217
1  8218	    221B  CD				 DB 0cdh
1  8219	    221C  34E5r				 DW  L72DA		 ; NonZero --> error
1  8220	    221E  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8221									 ;	     operator
1  8222
1  8223	    221F  CD				 DB 0cdh
1  8224	    2220  2CACr				 DW  O_CODE
1  8225	    2222  03				 DB 3
1  8226	    2223  7C				 DB 7CH			 ; LD A,H
1  8227	    2224  AA				 DB 0AAH		 ; XOR D
1  8228	    2225  67				 DB 67H			 ; LD H,A
1  8229
1  8230	    2226  CD			 L604A:	 DB 0cdh
1  8231	    2227  2CACr				 DW  O_CODE
1  8232	    2229  03				 DB 3
1  8233	    222A  7D				 DB 7DH			 ; LD A,L
1  8234	    222B  AB				 DB 0ABH		 ; XOR E
1  8235	    222C  6F				 DB 6FH			 ; LD L,A
1  8236
1  8237	    222D  C3				 DB 0c3h
1  8238	    222E  2158r				 DW  L5F9B
1  8239
1  8240	    2230			 L6054:	 ; SYNTAX: term	::= complemented factor	|
1  8241						 ;		  { multiplying-operator complemented-factor }
1  8242						 ; out:	 B = type
1  8243
1  8244	    2230  CD				 DB 0cdh
1  8245	    2231  2300r				 DW  L60E9		 ; complemented	factor
1  8246									 ; B = type
1  8247
1  8248	    2233  78				 DB 78h
1  8249	    2234  CD				 DB 0cdh
1  8250	    2235  2037r				 DW  SETDFT		 ; set new default type
1  8251
1  8252	    2237  C5			 L6057:	 DB 0c5h
1  8253	    2238  CD				 DB 0cdh
1  8254	    2239  30C2r				 DW  L6E5A
1  8255	    223B  01				 DB 1			 ; 1 byte following
1  8256	    223C  38D5r				 DW L7600		 ; start of reserved word list:
1  8257									 ; *, /, AND, DIV, MOD,	SHL, SHR
1  8258	    223E  C1				 DB 0c1h
1  8259	    223F  C0				 DB 0c0h		 ; return if no	multiplying operator
1  8260
1  8261						 ; pointer types do not	match with an multiplying-operator
1  8262	    2240  78				 DB 78h
1  8263	    2241  FE 04				 DB 0feh, 4			 ; type	= POINTER ?
1  8264	    2243  CD				 DB 0cdh
1  8265	    2244  34DFr				 DW  L72D4		 ; Zero	--> error
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 146
msx_asm\tur_comp.ASM



1  8266	    2246  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8267									 ;	     operator
1  8268
1  8269	    2247  7E				 DB 7eh		 ; 0 = *,   1 =	/, 2 = AND,
1  8270									 ; 3 = DIV, 4 =	MOD,
1  8271									 ; 5 = SHL, 6 =	SHR
1  8272	    2248  F5				 DB 0f5h
1  8273	    2249  C5				 DB 0c5h
1  8274	    224A  CD				 DB 0cdh
1  8275	    224B  237Er				 DW  L6148		 ; generate code to push REAL, INTEGER,
1  8276									 ; BOOLEAN, CHAR, POINTER or LONGINT
1  8277									 ; on the stack
1  8278
1  8279	    224D  CD				 DB 0cdh
1  8280	    224E  2300r				 DW  L60E9		 ; complemented	factor
1  8281									 ; B = type
1  8282
1  8283	    2250  D1				 DB 0d1h
1  8284	    2251  F1				 DB 0f1h		 ; A = multiplying-operator
1  8285	    2252  F5				 DB 0f5h
1  8286	    2253  3D				 DB 3dh
1  8287	    2254  20 0D				 DB 20h,(L6083)-$-1		 ; jump	if operator 0, 2, 3, 4,	5 or 6
1  8288
1  8289	    2256  78				 DB 78h
1  8290	    2257  FE 0A				 DB 0feh, 00AH			 ; current type	= INTEGER ?
1  8291	    2259  20 08				 DB 20h,(L6083)-$-1
1  8292
1  8293	    225B  21				 DB 21h
1  8294	    225C  1581				 DW _L1008		 ; LIB,	convert	integer	HL to REAL HLDEBC
1  8295	    225E  CD				 DB 0cdh
1  8296	    225F  2CE2r				 DW  O_CALHL
1  8297	    2261  06 09				 DB 06h,9			 ; current type	= REAL
1  8298
1  8299	    2263  CD			 L6083:	 DB 0cdh
1  8300	    2264  239Er				 DW  L6160		 ; convert previous and	current	to same	type
1  8301
1  8302	    2266  78				 DB 78h
1  8303	    2267  CD				 DB 0cdh
1  8304	    2268  2037r				 DW  SETDFT		 ; set new default type
1  8305
1  8306	    226A  F1				 DB 0f1h
1  8307	    226B  5F				 DB 5fh			 ; E = multiplying-operator
1  8308
1  8309	    226C  78				 DB 78h
1  8310	    226D  1C				 DB 1ch
1  8311	    226E  1D				 DB 1dh
1  8312	    226F  20 24				 DB 20h,(L60A9)-$-1
1  8313
1  8314						 ; multiplying-operator	= 0, *
1  8315	    2271  21				 DB 21h
1  8316	    2272  1900				 DW _L1333		 ; LIB,	multiply two SETS
1  8317	    2274  FE 03				 DB 0feh, 3
1  8318	    2276  28 17				 DB 28h,(L60A4)-$-1
1  8319
1  8320	    2278  21				 DB 21h
1  8321	    2279  0911				 DW _L06F5		 ; LIB,	multiply two INTEGERS
1  8322	    227B  FE 0A				 DB 0feh, 00AH
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 147
msx_asm\tur_comp.ASM



1  8323	    227D  28 10				 DB 28h,(L60A4)-$-1
1  8324
1  8325	    227F  21				 DB 21h
1  8326	    2280  0A9A				 DW _L_MUL		 ; LIB,	multiply two LONGS
1  8327	    2282  FE 0E				 DB 0feh, 00EH			 ; LONG	?
1  8328	    2284  28 09				 DB 28h,(L60A4)-$-1
1  8329
1  8330	    2286  21				 DB 21h
1  8331	    2287  0F23				 DW _L09FA		 ; LIB,	multiply two REALS
1  8332
1  8333	    2289  FE 09			 L609E:	 DB 0feh, 9			 ; REAL	?
1  8334
1  8335	    228B  CD				 DB 0cdh
1  8336	    228C  34E5r				 DW  L72DA		 ; NonZero --> error
1  8337	    228E  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8338									 ;	    operator
1  8339
1  8340	    228F  CD			 L60A4:	 DB 0cdh
1  8341	    2290  2CE2r				 DW  O_CALHL
1  8342	    2292  C3				 DB 0c3h
1  8343	    2293  2237r				 DW  L6057		 ; repeat {
1  8344									 ;    multiplying-operator
1  8345									 ;    complemented-factor
1  8346									 ; }
1  8347
1  8348	    2295  21			 L60A9:	 DB 21h
1  8349	    2296  0F28				 DW _L09FF		 ; LIB,	divide two REALS
1  8350	    2298  1D				 DB 1dh			 ; multiplying-operator	= '/' =	1
1  8351	    2299  28 EE				 DB 28h,(L609E)-$-1
1  8352
1  8353	    229B  1D				 DB 1dh
1  8354	    229C  20 22				 DB 20h,(L60CC)-$-1		 ; jump	if >= 2, DIV, MOD, SHL,	SHR
1  8355
1  8356						 ; multiplying-operator	= 'AND'
1  8357	    229E  21				 DB 21h
1  8358	    229F  0A1E				 DW _L_AND		 ; LIB,	LONGINT	AND LONGINT
1  8359	    22A1  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  8360	    22A3  28 EA				 DB 28h,(L60A4)-$-1		 ; jump	if type	= LONGINT ?
1  8361
1  8362	    22A5  FE 0B				 DB 0feh, 00BH			 ; type	= BOOLEAN ?
1  8363	    22A7  28 0D				 DB 28h,(L60C3)-$-1		 ; jump	if BOOLEAN
1  8364
1  8365	    22A9  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8366
1  8367	    22AB  CD				 DB 0cdh
1  8368	    22AC  34E5r				 DW  L72DA		 ; NonZero --> error
1  8369	    22AE  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8370									 ;	     operator
1  8371
1  8372	    22AF  CD				 DB 0cdh
1  8373	    22B0  2CACr				 DW  O_CODE
1  8374	    22B2  03				 DB 3
1  8375	    22B3  7C				 DB 7CH			 ; LD A,H
1  8376	    22B4  A2				 DB 0A2H		 ; AND D
1  8377	    22B5  67				 DB 67H			 ; LD H,A
1  8378
1  8379	    22B6  CD			 L60C3:	 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 148
msx_asm\tur_comp.ASM



1  8380	    22B7  2CACr				 DW  O_CODE
1  8381	    22B9  03				 DB 3
1  8382	    22BA  7D				 DB 7DH			 ; LD A,L
1  8383	    22BB  A3				 DB 0A3H		 ; AND E
1  8384	    22BC  6F				 DB 6FH			 ; LD L,A
1  8385
1  8386	    22BD  C3				 DB 0c3h
1  8387	    22BE  2237r				 DW  L6057
1  8388
1  8389	    22C0  FE 0A			 L60CC:	 DB 0feh, 00AH			 ; operator type = INTEGER ?
1  8390	    22C2  20 1B				 DB 20h,(L60CC1)-$-1		 ; jump	if not
1  8391
1  8392	    22C4  CD				 DB 0cdh
1  8393	    22C5  34E5r				 DW  L72DA		 ; NonZero --> error
1  8394	    22C7  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8395									 ;	     operator
1  8396
1  8397	    22C8  21				 DB 21h
1  8398	    22C9  092B				 DW _L070F		 ; LIB,	X div Y, INTEGER
1  8399	    22CB  1D				 DB 1dh
1  8400	    22CC  28 C1				 DB 28h,(L60A4)-$-1
1  8401	    22CE  21				 DB 21h
1  8402	    22CF  09A3				 DW _L0745		 ; LIB,	X mod Y, INTEGER
1  8403	    22D1  1D				 DB 1dh
1  8404	    22D2  28 BB				 DB 28h,(L60A4)-$-1
1  8405	    22D4  21				 DB 21h
1  8406	    22D5  09B0				 DW _L074E		 ; LIB,	X shl Y, INTEGER
1  8407	    22D7  1D				 DB 1dh
1  8408	    22D8  28 B5				 DB 28h,(L60A4)-$-1
1  8409	    22DA  21				 DB 21h
1  8410	    22DB  09B8				 DW _L0756		 ; LIB,	X shr Y, INTEGER
1  8411	    22DD  18 B0				 DB 18h,( L60A4)-$-1
1  8412
1  8413	    22DF  FE 0E			 L60CC1: DB 0feh, 00EH			 ; operator type = LONGINT ?
1  8414
1  8415	    22E1  CD				 DB 0cdh
1  8416	    22E2  34E5r				 DW  L72DA		 ; NonZero --> error
1  8417	    22E4  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8418									 ;	     operator
1  8419
1  8420	    22E5  21				 DB 21h
1  8421	    22E6  0B16				 DW _L_DIV		 ; LIB,	X div Y, LONGINT
1  8422	    22E8  1D				 DB 1dh
1  8423	    22E9  28 A4				 DB 28h,(L60A4)-$-1
1  8424	    22EB  21				 DB 21h
1  8425	    22EC  0B2C				 DW _L_MOD		 ; LIB,	X mod Y, LONGINT
1  8426	    22EE  1D				 DB 1dh
1  8427	    22EF  28 9E				 DB 28h,(L60A4)-$-1
1  8428	    22F1  21				 DB 21h
1  8429	    22F2  0BD5				 DW _L_SHL		 ; LIB,	X shl Y, INTEGER
1  8430	    22F4  1D				 DB 1dh
1  8431	    22F5  28 98				 DB 28h,(L60A4)-$-1
1  8432	    22F7  21				 DB 21h
1  8433	    22F8  0BF1				 DW _L_SHR		 ; LIB,	X shr Y, LONGINT
1  8434	    22FA  18 93				 DB 18h,( L60A4)-$-1
1  8435
1  8436	    22FC  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 149
msx_asm\tur_comp.ASM



1  8437	    22FD  34ECr				 DW  L72E1		 ; no condition
1  8438	    22FF  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8439									 ;	     operator
1  8440
1  8441	    2300			 L60E9:	 ; SYNTAX: complemented	factor ::= signed-factor | not signed-factor
1  8442						 ; out:	 B = type
1  8443	    2300  CD				 DB 0cdh
1  8444	    2301  30DEr				 DW  L6E76
1  8445	    2303  384Er				 DW L7579		 ; start of reserved word: NOT
1  8446	    2305  20 2F				 DB 20h,(L6112)-$-1		 ; jump	if no NOT, signed-factor
1  8447
1  8448						 ; NOT found in	the text
1  8449
1  8450	    2307  CD				 DB 0cdh
1  8451	    2308  2336r				 DW  L6112		 ; signed-factor
1  8452									 ; out:	B = type
1  8453	    230A  78				 DB 78h
1  8454	    230B  CD				 DB 0cdh
1  8455	    230C  2037r				 DW  SETDFT		 ; set new default type
1  8456
1  8457	    230E  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8458	    2310  28 13				 DB 28h,(L6107)-$-1		 ; jump	if type	= INTEGER
1  8459
1  8460	    2312  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  8461	    2314  28 1A				 DB 28h,(L61071)-$-1		 ; jump	if type	= LONGINT
1  8462
1  8463	    2316  FE 0B				 DB 0feh, 00BH			 ; type	= BOOLEAN;
1  8464
1  8465	    2318  CD				 DB 0cdh
1  8466	    2319  34E5r				 DW  L72DA		 ; NonZero --> error
1  8467	    231B  2F				 DB 2FH			 ; error 47: Operand type(s) does not match
1  8468									 ;	     operator
1  8469
1  8470						 ; generate code for a NOT <BOOLEAN>
1  8471	    231C  CD				 DB 0cdh
1  8472	    231D  2CACr				 DW  O_CODE
1  8473	    231F  04				 DB 4
1  8474	    2320  7D				 DB 7DH			 ; LD A,L
1  8475	    2321  EE 01				 DB 0EEH,01H		 ; XOR 1
1  8476	    2323  6F				 DB 6FH			 ; LD L,A
1  8477
1  8478	    2324  C9				 DB 0c9h
1  8479
1  8480	    2325			 L6107:	 ; generate code for a NOT <integer>
1  8481	    2325  CD				 DB 0cdh
1  8482	    2326  2CACr				 DW  O_CODE
1  8483	    2328  06				 DB 6
1  8484	    2329  7D				 DB 7DH			 ; LD A,L
1  8485	    232A  2F				 DB 2FH			 ; CPL
1  8486	    232B  6F				 DB 6FH			 ; LD L,A
1  8487	    232C  7C				 DB 7CH			 ; LD A,H
1  8488	    232D  2F				 DB 2FH			 ; CPL
1  8489	    232E  67				 DB 67H			 ; LD H,A
1  8490
1  8491	    232F  C9				 DB 0c9h
1  8492
1  8493	    2330			 L61071: ; generate code for a NOT <longint>
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 150
msx_asm\tur_comp.ASM



1  8494	    2330  21				 DB 21h
1  8495	    2331  0A54				 DW _L_NOT
1  8496	    2333  C3				 DB 0c3h
1  8497	    2334  2CE2r				 DW  O_CALHL
1  8498
1  8499	    2336			 L6112:	 ; SYNTAX: signed-factor ::= factor | sign factor
1  8500						 ; out:	 B = type
1  8501	    2336  3A				 DB 3ah
1  8502	    2337  3F5Br				 DW L7BA1		 ; 255 = minus sign
1  8503									 ;   0 = no sign
1  8504									 ;   1 = plus sign
1  8505	    2339  F5				 DB 0f5h		 ; save	old sign
1  8506
1  8507	    233A  CD				 DB 0cdh
1  8508	    233B  2B1Fr				 DW  L6A39		 ; get current sign, E = 0 if no sign
1  8509	    233D  7B				 DB 7bh
1  8510	    233E  32				 DB 32h
1  8511	    233F  3F5Br				 DW L7BA1		 ; 255 = minus sign
1  8512									 ;   0 = no sign
1  8513									 ;   1 = plus sign
1  8514
1  8515	    2341  CD				 DB 0cdh
1  8516	    2342  24B5r				 DW  L621D		 ; factor
1  8517									 ; B = type
1  8518
1  8519	    2344  78				 DB 78h
1  8520	    2345  CD				 DB 0cdh
1  8521	    2346  2037r				 DW  SETDFT		 ; set new default type
1  8522
1  8523	    2348  3A				 DB 3ah
1  8524	    2349  3F5Br				 DW L7BA1
1  8525	    234B  5F				 DB 5fh			 ; 255 = minus sign
1  8526									 ;   0 = no sign
1  8527									 ;   1 = plus sign
1  8528
1  8529	    234C  CD				 DB 0cdh
1  8530	    234D  2B30r				 DW  L6A4A		 ; sign	= '-' ?
1  8531	    234F  28 28				 DB 28h,(L6143)-$-1		 ; jump	if no minus sign
1  8532
1  8533	    2351  78				 DB 78h
1  8534	    2352  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1  8535	    2354  20 0D				 DB 20h,(L61121)-$-1		 ; jump	if not
1  8536
1  8537						 ; generate code for integer negation
1  8538					 ;	  PUSH HL
1  8539					 ;	  LD HL,_L0783
1  8540					 ;	  CALL O_CALHL		 ; a call is shorter, but slower !!
1  8541					 ;	  POP HL
1  8542	    2356  CD				 DB 0cdh
1  8543	    2357  2CACr				 DW  O_CODE		 ; out:	code for negation of HL
1  8544	    2359  07				 DB 7
1  8545	    235A  7D				 DB 7DH			 ; LD A,L
1  8546	    235B  2F				 DB 2FH			 ; CPL
1  8547	    235C  6F				 DB 6FH			 ; LD L,A
1  8548	    235D  7C				 DB 7CH			 ; LD A,H
1  8549	    235E  2F				 DB 2FH			 ; CPL
1  8550	    235F  67				 DB 67H			 ; LD H,A
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 151
msx_asm\tur_comp.ASM



1  8551	    2360  23				 DB 23H			 ; INC HL
1  8552
1  8553	    2361  18 16				 DB 18h,( L6143)-$-1
1  8554
1  8555	    2363  FE 0E			 L61121: DB 0feh, 00EH			 ; type	= LONGINT ?
1  8556	    2365  20 0A				 DB 20h,(L613B)-$-1		 ; jump	if not
1  8557
1  8558						 ; generate code for LONGINT negation
1  8559	    2367  E5				 DB 0e5h
1  8560	    2368  21				 DB 21h
1  8561	    2369  0A64				 DW _L_NEG
1  8562	    236B  CD				 DB 0cdh
1  8563	    236C  2CE2r				 DW  O_CALHL
1  8564	    236E  E1				 DB 0e1h
1  8565	    236F  18 08				 DB 18h,( L6143)-$-1
1  8566
1  8567	    2371			 L613B:	 ; generate code for REAL negation
1  8568	    2371  CD				 DB 0cdh
1  8569	    2372  2CACr				 DW  O_CODE
1  8570	    2374  04				 DB 4
1  8571	    2375  78				 DB 78H			 ; LD A,B
1  8572	    2376  EE 80				 DB 0EEH,80H		 ; XOR 80H
1  8573	    2378  47				 DB 47H			 ; LD B,A
1  8574
1  8575	    2379  F1			 L6143:	 DB 0f1h		 ; restore old sign
1  8576	    237A  32				 DB 32h
1  8577	    237B  3F5Br				 DW L7BA1		 ; 255 = minus sign
1  8578									 ;   0 = no sign
1  8579									 ;   1 = plus sign
1  8580	    237D  C9				 DB 0c9h
1  8581
1  8582	    237E			 L6148:	 ; generates code to PUSH a REAL, INTEGER, BOOLEAN, CHAR,
1  8583						 ;			 POINTER or LONGINT on the stack
1  8584						 ; on the stack
1  8585						 ; in:	 B = type
1  8586						 ; out:	 -
1  8587						 ; changes: AF
1  8588	    237E  78				 DB 78h
1  8589	    237F  FE 0E				 DB 0feh, 00EH
1  8590	    2381  28 13				 DB 28h,(O_PSHLONG)-$-1
1  8591
1  8592	    2383  FE 0A				 DB 0feh, 00AH
1  8593	    2385  30 14				 DB 30h,(L615D)-$-1		 ; jump	if type	= INTEGER, BOOLEAN or CHAR
1  8594
1  8595	    2387  FE 04				 DB 0feh, 4
1  8596	    2389  28 10				 DB 28h,(L615D)-$-1		 ; jump	if type	= POINTER
1  8597
1  8598	    238B  FE 08				 DB 0feh, 8
1  8599	    238D  C8				 DB 0c8h		 ; return if type = STRING
1  8600									 ; strings are already on the stack
1  8601
1  8602	    238E  FE 03				 DB 0feh, 3
1  8603	    2390  C8				 DB 0c8h		 ; return if type = SET
1  8604									 ; sets	are already on the stack
1  8605
1  8606	    2391  3E C5				 DB 3eh,0C5H
1  8607	    2393  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 152
msx_asm\tur_comp.ASM



1  8608	    2394  2CF8r				 DW  O_BYTE		 ; output: PUSH	BC
1  8609
1  8610	    2396			 O_PSHLONG:
1  8611	    2396  3E D5				 DB 3eh,0D5H
1  8612	    2398  CD				 DB 0cdh
1  8613	    2399  2CF8r				 DW  O_BYTE		 ; output: PUSH	DE
1  8614
1  8615	    239B  C3			 L615D:	 DB 0c3h
1  8616	    239C  2CCBr				 DW  O_PSHHL		 ; output: PUSH	HL
1  8617
1  8618	    239E			 L6160:	 ; in:	 D = previous type, data is already pushed onto	the stack
1  8619						 ;	 E = type of SET, if previous type = SET
1  8620						 ;	 B = current type,  data is in registers
1  8621						 ;	 C = type of SET, if current type = SET
1  8622
1  8623					 ;	  LD A,D
1  8624					 ;	  CP B
1  8625					 ;	  JR Z,OP_TYPES_EQ
1  8626
1  8627	    239E  D5				 DB 0d5h
1  8628	    239F  7A				 DB 7ah
1  8629	    23A0  87				 DB 087h
1  8630	    23A1  87				 DB 087h
1  8631	    23A2  87				 DB 087h
1  8632	    23A3  87				 DB 087h
1  8633	    23A4  B0				 DB 0b0h		 ; A = ppppcccc, combination of	operands
1  8634
1  8635	    23A5  21				 DB 21h
1  8636	    23A6  2471r				 DW OP_CNVTAB
1  8637	    23A8			 OP_CNV_SRCH:
1  8638	    23A8  34				 DB 034h		 ; end of table	?
1  8639	    23A9  35				 DB 035h
1  8640	    23AA  CA				 DB 0cah
1  8641	    23AB  243Cr				 DW OP_CNV_END		 ; jump	to quit	search
1  8642
1  8643	    23AD  BE				 DB 0beh		 ; operand combination found ?
1  8644	    23AE  28 06				 DB 28h,(OP_CNV_FOUND)-$-1
1  8645
1  8646	    23B0  23				 DB 23h
1  8647	    23B1  23				 DB 23h
1  8648	    23B2  23				 DB 23h
1  8649	    23B3  C3				 DB 0c3h
1  8650	    23B4  23A8r				 DW  OP_CNV_SRCH
1  8651
1  8652	    23B6			 OP_CNV_FOUND:
1  8653	    23B6  23				 DB 23h
1  8654	    23B7  7E				 DB 7eh
1  8655	    23B8  23				 DB 23h
1  8656	    23B9  66				 DB 66h
1  8657	    23BA  6F				 DB 6fh
1  8658
1  8659	    23BB  EB				 DB 0ebh
1  8660	    23BC  21				 DB 21h
1  8661	    23BD  2443r				 DW L61D3
1  8662	    23BF  E3				 DB 0e3h	 ; push	return address L61D3 and
1  8663									 ; restore pushed DE
1  8664	    23C0  EB				 DB 0ebh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 153
msx_asm\tur_comp.ASM



1  8665
1  8666	    23C1  E9				 DB 0e9h
1  8667
1  8668	    23C2  CD			 OP_R_R: DB 0cdh
1  8669	    23C3  2CACr				 DW  O_CODE
1  8670	    23C5  04				 DB 4
1  8671	    23C6  D9				 DB 0D9H		 ; EXX	       ; HLDEBC' = current
1  8672	    23C7  E1				 DB 0E1H		 ; POP HL
1  8673	    23C8  D1				 DB 0D1H		 ; POP DE
1  8674	    23C9  C1				 DB 0C1H		 ; POP BC	; HLDEBC = previous
1  8675	    23CA  C9				 DB 0c9h
1  8676
1  8677	    23CB  CD			 OP_R_I: DB 0cdh
1  8678	    23CC  2CACr				 DW  O_CODE
1  8679	    23CE  07				 DB 7
1  8680	    23CF  CD				 DB 0CDH		 ; CALL	_L1008	; convert HL to	REAL HLDEBC
1  8681	    23D0  1581				 DW _L1008
1  8682	    23D2  D9				 DB 0D9H		 ; EXX	       ; HLDEBC' = current
1  8683	    23D3  E1				 DB 0E1H		 ; POP HL
1  8684	    23D4  D1				 DB 0D1H		 ; POP DE
1  8685	    23D5  C1				 DB 0C1H		 ; POP BC	; HLDEBC = previous
1  8686
1  8687	    23D6  06 09				 DB 06h,9			 ; previous type = REAL
1  8688	    23D8  C9				 DB 0c9h
1  8689
1  8690	    23D9  CD			 OP_R_L: DB 0cdh
1  8691	    23DA  2CACr				 DW  O_CODE
1  8692	    23DC  07				 DB 7
1  8693	    23DD  CD				 DB 0CDH		 ; CALL	_L_R	; convert DE:HL	to REAL
1  8694	    23DE  15A0				 DW _L_R
1  8695	    23E0  D9				 DB 0D9H		 ; EXX	       ; HLDEBC' = current
1  8696	    23E1  E1				 DB 0E1H		 ; POP HL
1  8697	    23E2  D1				 DB 0D1H		 ; POP DE
1  8698	    23E3  C1				 DB 0C1H		 ; POP BC	; HLDEBC = previous
1  8699
1  8700	    23E4  06 09				 DB 06h,9			 ; previous type = REAL
1  8701	    23E6  C9				 DB 0c9h
1  8702
1  8703	    23E7  CD			 OP_I_R: DB 0cdh
1  8704	    23E8  2CACr				 DW  O_CODE
1  8705	    23EA  05				 DB 5
1  8706	    23EB  D9				 DB 0D9H		 ; EXX	       ; HLDEBC' = current
1  8707	    23EC  E1				 DB 0E1H		 ; POP HL	; HL = value of	previous
1  8708	    23ED  CD				 DB 0CDH		 ; CALL	_L1008	; convert HL to	REAL
1  8709	    23EE  1581				 DW _L1008
1  8710
1  8711	    23F0  16 09				 DB 16h,9			 ; previous type = REAL
1  8712	    23F2  C9				 DB 0c9h
1  8713
1  8714	    23F3  CD			 OP_L_R: DB 0cdh
1  8715	    23F4  2CACr				 DW  O_CODE
1  8716	    23F6  06				 DB 6
1  8717	    23F7  D9				 DB 0D9H		 ; EXX	       ; HLDEBC' = current
1  8718	    23F8  E1				 DB 0E1H		 ; POP HL	; DE:HL	= value	of previous
1  8719	    23F9  D1				 DB 0D1H		 ; POP DE	;
1  8720	    23FA  CD				 DB 0CDH		 ; CALL	_L_R	; convert DE:HL	to REAL
1  8721	    23FB  15A0				 DW _L_R
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 154
msx_asm\tur_comp.ASM



1  8722
1  8723	    23FD  16 09				 DB 16h,9			 ; previous type = REAL
1  8724	    23FF  C9				 DB 0c9h
1  8725
1  8726	    2400			 OP_SCALAR:
1  8727	    2400			 OP_B_B:
1  8728	    2400			 OP_C_C:
1  8729	    2400			 OP_I_I: ; DE =	previous, HL = current
1  8730	    2400  3E D1				 DB 3eh,0D1H		 ; opcode: 'POP	DE'
1  8731	    2402  C3				 DB 0c3h
1  8732	    2403  2CF8r				 DW  O_BYTE
1  8733
1  8734	    2405			 OP_S_C: ; generate code to convert CHAR to STRING (on the stack)
1  8735
1  8736	    2405  CD				 DB 0cdh
1  8737	    2406  2CACr				 DW  O_CODE
1  8738	    2408  04				 DB 4
1  8739	    2409  65				 DB 65H			 ; LD H,L
1  8740	    240A  2E 01				 DB 2EH,01H		 ; LD L,1
1  8741	    240C  E5				 DB 0E5H		 ; PUSH	HL
1  8742
1  8743	    240D  06 08				 DB 06h,8			 ; current type	= STRING
1  8744	    240F  C9				 DB 0c9h
1  8745
1  8746	    2410  21			 OP_C_S: DB 21h
1  8747	    2411  0ECB				 DW _L09A2		 ; LIB,	clear
1  8748	    2413  CD				 DB 0cdh
1  8749	    2414  2CE2r				 DW  O_CALHL		 ; convert the previous	type to	a STRING
1  8750
1  8751	    2416  16 08				 DB 16h,8			 ; previous type = STRING
1  8752	    2418  C9				 DB 0c9h
1  8753
1  8754	    2419			 OP_L_I:  ; previous LONGINT DE:HL on stack
1  8755						 ; current  INTEGER in HL --> LONGINT DE:HL
1  8756	    2419  CD				 DB 0cdh
1  8757	    241A  2CACr				 DW  O_CODE
1  8758	    241C  08				 DB 8
1  8759	    241D  11 00	00			 DB 11H,0,0		 ;	 LD DE,0
1  8760	    2420  CB 7C				 DB 0CBH,7CH		 ;	 BIT 7,H
1  8761	    2422  28 01				 DB 28H,1		 ;	 JR Z,continue
1  8762	    2424  1B				 DB 1BH			 ;	 DEC DE
1  8763									 ; continue:
1  8764
1  8765	    2425  06 0E				 DB 06h,0EH		 ; current type	= LONGINT
1  8766	    2427  C9				 DB 0c9h
1  8767
1  8768	    2428			 OP_I_L: ; previous INTEGER on stack --> LONGINT DE:HL on stack
1  8769						 ; current  LONGINT in DE:HL
1  8770	    2428  CD				 DB 0cdh
1  8771	    2429  2CACr				 DW  O_CODE
1  8772	    242B  0D				 DB 13
1  8773	    242C  D9				 DB 0D9H		 ;	 EXX
1  8774	    242D  E1				 DB 0E1H		 ;	 POP HL
1  8775	    242E  11 00	00			 DB 11H,0,0		 ;	 LD DE,0
1  8776	    2431  CB 7C				 DB 0CBH,7CH		 ;	 BIT 7,H
1  8777	    2433  28 01				 DB 28H,1		 ;	 JR Z,continue
1  8778	    2435  1B				 DB 1BH			 ;	 DEC DE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 155
msx_asm\tur_comp.ASM



1  8779									 ; continue:
1  8780
1  8781	    2436  D5				 DB 0D5H		 ;	 PUSH DE
1  8782	    2437  E5				 DB 0E5H		 ;	 PUSH HL
1  8783	    2438  D9				 DB 0D9H		 ;	 EXX
1  8784
1  8785	    2439  16 0E				 DB 16h,0EH		 ; previous type = LONGINT
1  8786	    243B  C9				 DB 0c9h
1  8787
1  8788	    243C			 OP_CNV_END:
1  8789	    243C  D1				 DB 0d1h
1  8790
1  8791	    243D  7A				 DB 7ah
1  8792	    243E  FE 10				 DB 0feh, 10H
1  8793	    2440  D4				 DB 0d4h
1  8794	    2441  2400r				 DW OP_SCALAR	 ; SCALAR type ?
1  8795
1  8796	    2443  78			 L61D3:	 DB 78h
1  8797	    2444  BA				 DB 0bah		 ; types are equal ?
1  8798
1  8799	    2445  CD				 DB 0cdh
1  8800	    2446  34E5r				 DW  L72DA		 ; NonZero --> error
1  8801	    2448  2C				 DB 2CH			 ; error 44: Type mismatch
1  8802
1  8803	    2449			 L61D31: ; types equal
1  8804	    2449  FE 03				 DB 0feh, 3			 ; type	= SET ?
1  8805	    244B  20 0D				 DB 20h,(L61EA)-$-1		 ; jump	if not
1  8806
1  8807						 ; type	= SET
1  8808	    244D  7B				 DB 7bh
1  8809	    244E  B9				 DB 0b9h
1  8810									 ; SET types compatible	?
1  8811	    244F  C8				 DB 0c8h		 ; yes,	return
1  8812
1  8813	    2450  B7				 DB 0b7h		 ; previous SET	= empty	SET ?
1  8814	    2451  C8				 DB 0c8h		 ; return C = type of current SET
1  8815
1  8816	    2452  79				 DB 79h
1  8817	    2453  4B				 DB 4bh			 ; C = previous	SET type
1  8818	    2454  B7				 DB 0b7h		 ; current SET = empty SET ?
1  8819	    2455  C8				 DB 0c8h		 ; return C = type of previous SET
1  8820
1  8821	    2456  CD				 DB 0cdh
1  8822	    2457  34ECr				 DW  L72E1		 ; no condition
1  8823	    2459  2C				 DB 2CH			 ; error 44: Type mismatch
1  8824
1  8825	    245A  FE 04			 L61EA:	 DB 0feh, 4			 ; type	= POINTER ?
1  8826	    245C  C0				 DB 0c0h		 ; return if not
1  8827
1  8828	    245D  2A				 DB 02ah
1  8829	    245E  3F45r				 DW L7B8B
1  8830	    2460  7C				 DB 7ch
1  8831	    2461  B5				 DB 0b5h
1  8832	    2462  C8				 DB 0c8h
1  8833
1  8834	    2463  ED 5B				 DB 0edh,5bh
1  8835	    2465  3F47r				 DW L7B8D
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 156
msx_asm\tur_comp.ASM



1  8836	    2467  7A				 DB 7ah
1  8837	    2468  B3				 DB 0b3h
1  8838	    2469  C8				 DB 0c8h
1  8839	    246A  ED 52				 DB 0EDH,052h
1  8840	    246C  C8				 DB 0c8h
1  8841
1  8842	    246D  CD				 DB 0cdh
1  8843	    246E  34ECr				 DW  L72E1		 ; no condition
1  8844	    2470  2C				 DB 2CH			 ; error 44: Type mismatch
1  8845
1  8846	    2471			 OP_CNVTAB:
1  8847	    2471  AA				 DB 0AAH		 ; integer   integer
1  8848	    2472  2400r				 DW OP_I_I
1  8849
1  8850	    2474  BB				 DB 0BBH		 ; boolean   boolean
1  8851	    2475  2400r				 DW OP_B_B
1  8852
1  8853	    2477  CC				 DB 0CCH		 ; character character
1  8854	    2478  2400r				 DW OP_C_C
1  8855
1  8856	    247A  44				  DB 044H		     ; 33e, pointer   pointer
1  8857	    247B  2400r				  DW OP_I_I		     ; 33e
1  8858
1  8859	    247D  99				 DB 99H			 ; real	    real
1  8860	    247E  23C2r				 DW OP_R_R
1  8861
1  8862	    2480  9A				 DB 9AH			 ; real	    integer
1  8863	    2481  23CBr				 DW OP_R_I
1  8864
1  8865	    2483  9E				 DB 9EH			 ; real	    long
1  8866	    2484  23D9r				 DW OP_R_L
1  8867
1  8868	    2486  A9				 DB 0A9H		 ; integer   real
1  8869	    2487  23E7r				 DW OP_I_R
1  8870
1  8871	    2489  E9				 DB 0E9H		 ; long	    real
1  8872	    248A  23F3r				 DW OP_L_R
1  8873
1  8874	    248C  8C				 DB 8CH			 ; string    character
1  8875	    248D  2405r				 DW OP_S_C
1  8876
1  8877	    248F  C8				 DB 0C8H		 ; character string
1  8878	    2490  2410r				 DW OP_C_S
1  8879
1  8880	    2492  EA				 DB 0EAH		 ; long	    integer
1  8881	    2493  2419r				 DW OP_L_I
1  8882
1  8883	    2495  AE				 DB 0AEH		 ; integer   long
1  8884	    2496  2428r				 DW OP_I_L
1  8885
1  8886	    2498  00				 DB 0			 ; end of table
1  8887
1  8888	    2499  11			 L6201:	 DB 11h
1  8889	    249A  205Ar				 DW L5EEB		 ; { relational-operator simple-expression }
1  8890	    249C  D5				 DB 0d5h
1  8891	    249D  11				 DB 11h
1  8892	    249E  2158r				 DW L5F9B		 ; { adding-operator term }
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 157
msx_asm\tur_comp.ASM



1  8893	    24A0  D5				 DB 0d5h
1  8894	    24A1  11				 DB 11h
1  8895	    24A2  2237r				 DW L6057		 ; { multiplying-operator complemented-factor }
1  8896	    24A4  D5				 DB 0d5h
1  8897	    24A5  18 1E				 DB 18h,( L622D)-$-1		 ; after parsing of an unsigned-constant
1  8898
1  8899	    24A7  11			 L620F:	 DB 11h
1  8900	    24A8  205Ar				 DW L5EEB		 ; { relational-operator simple-expression }
1  8901	    24AA  D5				 DB 0d5h
1  8902	    24AB  11				 DB 11h
1  8903	    24AC  2158r				 DW L5F9B		 ; { adding-operator term }
1  8904	    24AE  D5				 DB 0d5h
1  8905	    24AF  11				 DB 11h
1  8906	    24B0  2237r				 DW L6057		 ; { multiplying-operator complemented-factor }
1  8907	    24B2  D5				 DB 0d5h
1  8908	    24B3  18 6C				 DB 18h,( L6276)-$-1
1  8909
1  8910	    24B5			 L621D:	 ; SYNTAX: factor ::= variable | unsigned-constant | (expression) |
1  8911						 ;		    function-designator	| set
1  8912						 ; in:	 E = sign (0 = no sign,	255 = minus, 1 = plus)
1  8913						 ; out:	 B = type
1  8914	    24B5  CD				 DB 0cdh
1  8915	    24B6  2B47r				 DW  L6A5C		 ; unsigned-constant
1  8916									 ; parse constant or constant identifier
1  8917	    24B8  20 46				 DB 20h,(L6257)-$-1		 ; jump	if no constant parsed
1  8918
1  8919						 ; constant parsed
1  8920	    24BA  3A				 DB 3ah
1  8921	    24BB  3F5Br				 DW L7BA1
1  8922	    24BD  5F				 DB 5fh			 ; 255 = minus sign
1  8923									 ;   0 = no sign
1  8924									 ;   1 = plus sign
1  8925
1  8926	    24BE  CD				 DB 0cdh
1  8927	    24BF  2AFEr				 DW  L6A1F		 ; negate REAL or INTEGER constant if there
1  8928									 ; is a	'-' sign
1  8929
1  8930	    24C1  AF				 DB 0afh
1  8931	    24C2  32				 DB 32h
1  8932	    24C3  3F5Br				 DW L7BA1		 ; 255 = minus sign
1  8933									 ;   0 = no sign
1  8934									 ;   1 = plus sign
1  8935
1  8936	    24C5			 L622D:	 ; continue just parsing an unsigned-constant
1  8937	    24C5  78				 DB 78h
1  8938	    24C6  FE 09				 DB 0feh, 9
1  8939	    24C8  20 17				 DB 20h,(L6249)-$-1		 ; type	= real ?, no skip
1  8940
1  8941						 ; generate code for real constant:
1  8942						 ; 'LD HL,'
1  8943						 ; 'LD DE,'
1  8944						 ; 'LD BC,'
1  8945	    24CA  D9				 DB 0d9h
1  8946	    24CB  C5				 DB 0c5h		 ; push	real on	compiler stack
1  8947	    24CC  D5				 DB 0d5h
1  8948	    24CD  E5				 DB 0e5h
1  8949	    24CE  01				 DB 01h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 158
msx_asm\tur_comp.ASM



1  8950	    24CF  0331				 DW 331H	 ; B = 3 times,	C = 21H	+ 10H
1  8951	    24D1  79			 L6239:	 DB 79h
1  8952	    24D2  D6 10				 DB 0d6h, 010H
1  8953	    24D4  4F				 DB 4fh
1  8954	    24D5  CD				 DB 0cdh
1  8955	    24D6  2CF8r				 DW  O_BYTE		 ; output opcode 'LD HL,' or
1  8956									 ;		'LD DE,' or
1  8957									 ;		'LD BC,'
1  8958	    24D8  E1				 DB 0e1h		 ; get 16 bits value
1  8959	    24D9  CD				 DB 0cdh
1  8960	    24DA  2CF3r				 DW  O_HL
1  8961	    24DC  10 F3				 DB 10h,( L6239)-$-1
1  8962	    24DE  06 09				 DB 06h,9			 ; return type = real
1  8963	    24E0  C9				 DB 0c9h
1  8964
1  8965	    24E1  FE 08			 L6249:	 DB 0feh, 8			 ; type	= STRING ?
1  8966	    24E3  C2				 DB 0c2h
1  8967	    24E4  24EFr				 DW L62491		 ; jump	if not
1  8968
1  8969	    24E6  21				 DB 21h
1  8970	    24E7  0738				 DW _L054D		 ; LIB,	clear
1  8971	    24E9  CD				 DB 0cdh
1  8972	    24EA  2CE2r				 DW  O_CALHL
1  8973	    24EC  C3				 DB 0c3h
1  8974	    24ED  2CBAr				 DW  L6B5E		 ; output length (C) and data at L7A57
1  8975
1  8976	    24EF  FE 0E			 L62491: DB 0feh, 0EH			 ; type	= LONGINT ?
1  8977	    24F1  C2				 DB 0c2h
1  8978	    24F2  2CEEr				 DW O_LDHL		 ; jump	if not,	assume INTEGER,	CHAR, BOOL
1  8979
1  8980						 ; generate code for LONGINT constant
1  8981	    24F4  D9				 DB 0d9h
1  8982	    24F5  CD				 DB 0cdh
1  8983	    24F6  2CEEr				 DW  O_LDHL
1  8984	    24F8  EB				 DB 0ebh
1  8985	    24F9  CD				 DB 0cdh
1  8986	    24FA  2CEAr				 DW  O_LDDE
1  8987	    24FC  EB				 DB 0ebh
1  8988	    24FD  06 0E				 DB 06h,0EH		 ; return type = LONGINT
1  8989	    24FF  C9				 DB 0c9h
1  8990
1  8991	    2500  01			 L6257:	 DB 01h
1  8992	    2501  0600				 DW 600H	 ; function identifier ?
1  8993	    2503  CD				 DB 0cdh
1  8994	    2504  30BCr				 DW  L6E54		 ; check if current in id list
1  8995									 ; HL =	address	of info
1  8996	    2506  20 14				 DB 20h,(L6271)-$-1		 ; jump	if no function identifier
1  8997
1  8998						 ; function identifer
1  8999	    2508  CD				 DB 0cdh
1  9000	    2509  1D1Br				 DW  L573D
1  9001	    250B  EB				 DB 0ebh
1  9002	    250C  CD				 DB 0cdh
1  9003	    250D  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  9004	    250F  2A				 DB 02ah
1  9005	    2510  3F18r				 DW L7B5E		 ; HL =	address	of functions type definition
1  9006	    2512  22				 DB 22h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 159
msx_asm\tur_comp.ASM



1  9007	    2513  3F45r				 DW L7B8B		 ; save	type definition
1  9008	    2515  3A				 DB 3ah
1  9009	    2516  3F16r				 DW L7B5C
1  9010	    2518  47				 DB 47h			 ; B = result type of function
1  9011	    2519  C3				 DB 0c3h
1  9012	    251A  2037r				 DW  SETDFT		 ; set new default type
1  9013
1  9014	    251C  CD			 L6271:	 DB 0cdh
1  9015	    251D  287Dr				 DW  L67B2
1  9016	    251F  20 5C				 DB 20h,(L62D2)-$-1
1  9017
1  9018	    2521  3A			 L6276:	 DB 3ah
1  9019	    2522  3F16r				 DW L7B5C
1  9020	    2524  FE 08				 DB 0feh, 8
1  9021	    2526  30 08				 DB 30h,(L6285)-$-1
1  9022	    2528  FE 03				 DB 0feh, 3
1  9023	    252A  28 04				 DB 28h,(L6285)-$-1
1  9024	    252C  FE 04				 DB 0feh, 4
1  9025	    252E  20 18				 DB 20h,(L629D)-$-1
1  9026
1  9027	    2530  CD			 L6285:	 DB 0cdh
1  9028	    2531  2780r				 DW  L66DA
1  9029	    2533  2A				 DB 02ah
1  9030	    2534  3F18r				 DW L7B5E
1  9031	    2536  22				 DB 22h
1  9032	    2537  3F45r				 DW L7B8B
1  9033	    2539  3A				 DB 3ah
1  9034	    253A  3F16r				 DW L7B5C
1  9035	    253C  47				 DB 47h
1  9036	    253D  FE 03				 DB 0feh, 3			 ; type	= SET ?
1  9037	    253F  C0				 DB 0c0h		 ; return if not SET
1  9038
1  9039						 ; type	= SET
1  9040	    2540  CD				 DB 0cdh
1  9041	    2541  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1  9042	    2543  3A				 DB 3ah
1  9043	    2544  3F16r				 DW L7B5C
1  9044	    2546  4F				 DB 4fh
1  9045	    2547  C9				 DB 0c9h
1  9046
1  9047	    2548  FE 01			 L629D:	 DB 0feh, 1
1  9048
1  9049	    254A  CD				 DB 0cdh
1  9050	    254B  34E5r				 DW  L72DA		 ; NonZero --> error
1  9051	    254D  3E				 DB 3EH			 ; error 62: Structured	variables are not
1  9052									 ;	     allowed here
1  9053
1  9054	    254E  CD				 DB 0cdh
1  9055	    254F  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1  9056									 ; 00 =	LD HL, value in	L7BBE
1  9057									 ; 01 =	LD HL,(value in	L7BBE)
1  9058									 ; 10 =	LD DE, value in	L7BBE
1  9059									 ;	ADD HL,DE
1  9060									 ; 11 =	no output
1  9061	    2551  2A				 DB 02ah
1  9062	    2552  3F18r				 DW L7B5E
1  9063	    2554  7E				 DB 7eh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 160
msx_asm\tur_comp.ASM



1  9064	    2555  FE 0C				 DB 0feh, 00CH
1  9065
1  9066	    2557  CD				 DB 0cdh
1  9067	    2558  34E5r				 DW  L72DA		 ; NonZero --> error
1  9068	    255A  3E				 DB 3EH			 ; error 62: Structured	variables are not
1  9069									 ;	     allowed here
1  9070
1  9071	    255B  2A				 DB 02ah
1  9072	    255C  3F1Ar				 DW L7B60
1  9073	    255E  7E				 DB 7eh
1  9074	    255F  FE 0A				 DB 0feh, 00AH
1  9075
1  9076	    2561  CD				 DB 0cdh
1  9077	    2562  34E5r				 DW  L72DA		 ; NonZero --> error
1  9078	    2564  3E				 DB 3EH			 ; error 62: Structured	variables are not
1  9079									 ;	     allowed here
1  9080
1  9081	    2565  2A				 DB 02ah
1  9082	    2566  3F1Cr				 DW L7B62		 ; HL =	length
1  9083	    2568  7C				 DB 7ch			 ; length >= 256 ?
1  9084	    2569  B7				 DB 0b7h
1  9085
1  9086	    256A  CD				 DB 0cdh
1  9087	    256B  34E5r				 DW  L72DA		 ; NonZero --> error
1  9088	    256D  3E				 DB 3EH			 ; error 62: Structured	variables are not
1  9089									 ;	     allowed here
1  9090
1  9091	    256E  65				 DB 65h			 ; H = length, operand
1  9092	    256F  2E 06				 DB 2eh,6			 ; L = opcode 'LD B,'
1  9093	    2571  CD				 DB 0cdh
1  9094	    2572  2CF3r				 DW  O_HL
1  9095
1  9096	    2574  21				 DB 21h
1  9097	    2575  0823				 DW _L0638		 ; LIB,	clear
1  9098	    2577  CD				 DB 0cdh
1  9099	    2578  2CE2r				 DW  O_CALHL
1  9100
1  9101	    257A  06 08				 DB 06h,8			 ; result type = STRING
1  9102	    257C  C9				 DB 0c9h
1  9103
1  9104	    257D  CD			 L62D2:	 DB 0cdh
1  9105	    257E  3148r				 DW  L6EE0		 ; match('[') or match('(.')
1  9106	    2580  20 49				 DB 20h,(L631C)-$-1		 ; jump	if not matched
1  9107
1  9108	    2582  21				 DB 21h
1  9109	    2583  076C				 DW _L0581		 ; LIB,	push new empty SET on stack
1  9110	    2585  CD				 DB 0cdh
1  9111	    2586  2CE2r				 DW  O_CALHL
1  9112	    2588  CD				 DB 0cdh
1  9113	    2589  315Fr				 DW  L6EF7		 ; match(']') or match('.)')
1  9114	    258B  01				 DB 01h
1  9115	    258C  0300				 DW 300H	 ; C = 0, no first time	yet
1  9116									 ; B = 3, type = SET
1  9117	    258E  C8				 DB 0c8h		 ; return if matched
1  9118
1  9119	    258F  C5			 L62E4:	 DB 0c5h
1  9120	    2590  3E 0A				 DB 3eh,0AH		 ; A = default type = INTEGER
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 161
msx_asm\tur_comp.ASM



1  9121	    2592  CD				 DB 0cdh
1  9122	    2593  2007r				 DW  L5EBB		 ; parse simple	expression
1  9123	    2595  78				 DB 78h
1  9124	    2596  C1				 DB 0c1h
1  9125	    2597  0C				 DB 0ch			 ; already filled yet ?
1  9126	    2598  0D				 DB 0dh
1  9127	    2599  20 01				 DB 20h,(L62EF)-$-1		 ; jump	if already filled
1  9128
1  9129	    259B  4F				 DB 4fh
1  9130
1  9131	    259C  B9			 L62EF:	 DB 0b9h
1  9132
1  9133	    259D  CD				 DB 0cdh
1  9134	    259E  34E5r				 DW  L72DA		 ; NonZero --> error
1  9135	    25A0  2C				 DB 2CH			 ; error 44: Type mismatch
1  9136
1  9137	    25A1  C5				 DB 0c5h
1  9138
1  9139	    25A2  CD				 DB 0cdh
1  9140	    25A3  30DEr				 DW  L6E76
1  9141	    25A5  3855r				 DW L7580		 ; start of reserved word: ..
1  9142
1  9143	    25A7  21				 DB 21h
1  9144	    25A8  077C				 DW _L0591		 ; LIB,	done
1  9145	    25AA  20 13				 DB 20h,(L6310)-$-1		 ; jump	if no '..' found
1  9146
1  9147	    25AC  CD				 DB 0cdh
1  9148	    25AD  2CCBr				 DW  O_PSHHL
1  9149
1  9150	    25AF  3E 0A				 DB 3eh,0AH		 ; A = default type = INTEGER
1  9151	    25B1  CD				 DB 0cdh
1  9152	    25B2  2007r				 DW  L5EBB		 ; parse simple	expression
1  9153	    25B4  78				 DB 78h
1  9154	    25B5  C1				 DB 0c1h
1  9155	    25B6  C5				 DB 0c5h
1  9156	    25B7  B9				 DB 0b9h
1  9157
1  9158	    25B8  CD				 DB 0cdh
1  9159	    25B9  34E5r				 DW  L72DA		 ; NonZero --> error
1  9160	    25BB  2C				 DB 2CH			 ; error 44: Type mismatch
1  9161
1  9162	    25BC  21				 DB 21h
1  9163	    25BD  0786				 DW _L059B		 ; LIB,	done
1  9164
1  9165	    25BF  CD			 L6310:	 DB 0cdh
1  9166	    25C0  2CE2r				 DW  O_CALHL
1  9167	    25C2  C1				 DB 0c1h
1  9168	    25C3  CD				 DB 0cdh
1  9169	    25C4  317Br				 DW  L6F13		 ; match(','), if present
1  9170	    25C6  28 C7				 DB 28h,(L62E4)-$-1		 ; jump	if ',' matched
1  9171
1  9172	    25C8  C3				 DB 0c3h
1  9173	    25C9  31A0r				 DW  L6F38		 ; match(']')
1  9174
1  9175	    25CB  CD			 L631C:	 DB 0cdh
1  9176	    25CC  3183r				 DW  L6F1B		 ; match('('), if present
1  9177	    25CE  20 06				 DB 20h,(L6327)-$-1		 ; jump	if '(' not matched
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 162
msx_asm\tur_comp.ASM



1  9178
1  9179	    25D0  CD				 DB 0cdh
1  9180	    25D1  204Cr				 DW  L5EE8		 ; parse expression
1  9181	    25D3  C3				 DB 0c3h
1  9182	    25D4  31D6r				 DW  L6F6E		 ; match(')')
1  9183
1  9184	    25D6  CD			 L6327:	 DB 0cdh
1  9185	    25D7  30C2r				 DW  L6E5A
1  9186	    25D9  02				 DB 2			 ; 2 bytes following
1  9187	    25DA  0000e				 DW L77B1		 ; start of reserved word list:
1  9188									 ; standard library functions
1  9189									 ; CHR .. BIOS,	47
1  9190	    25DC  20 06				 DB 20h,(L6335)-$-1
1  9191	    25DE  5E				 DB 5eh
1  9192	    25DF  23				 DB 23h
1  9193	    25E0  56				 DB 56h
1  9194	    25E1  EB				 DB 0ebh
1  9195	    25E2  AF				 DB 0afh
1  9196	    25E3  E9				 DB 0e9h
1  9197
1  9198	    25E4  CD			 L6335:	 DB 0cdh
1  9199	    25E5  30DEr				 DW  L6E76
1  9200	    25E7  3851r				 DW L757C		 ; start of reserved word: NIL
1  9201	    25E9  20 0F				 DB 20h,(L6345)-$-1		 ; jump	if NIL not parsed
1  9202
1  9203						 ; generate code for the NIL value
1  9204	    25EB  21				 DB 21h
1  9205	    25EC  0000				 DW 0000
1  9206	    25EE  CD				 DB 0cdh
1  9207	    25EF  2CEEr				 DW  O_LDHL
1  9208
1  9209	    25F1  21				 DB 21h
1  9210	    25F2  0000				 DW 0000
1  9211	    25F4  22				 DB 22h
1  9212	    25F5  3F45r				 DW L7B8B
1  9213	    25F7  06 04				 DB 06h,4			 ; type	= pointer
1  9214	    25F9  C9				 DB 0c9h
1  9215
1  9216	    25FA  01			 L6345:	 DB 01h
1  9217	    25FB  0300				 DW 300H	 ; type	identifier ?
1  9218	    25FD  CD				 DB 0cdh
1  9219	    25FE  30BCr				 DW  L6E54		 ; check if current in id list,	types
1  9220									 ; HL =	address	of info
1  9221
1  9222					 ;	  CALL Print_ABC
1  9223
1  9224	    2600  CD				 DB 0cdh
1  9225	    2601  34E5r				 DW  L72DA		 ; NonZero --> error
1  9226	    2603  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1  9227
1  9228	    2604  56				 DB 56h
1  9229	    2605  2B				 DB 2bh
1  9230	    2606  5E				 DB 5eh
1  9231	    2607  1A				 DB 1ah
1  9232	    2608  FE 0A				 DB 0feh, 00AH
1  9233
1  9234	    260A  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 163
msx_asm\tur_comp.ASM



1  9235	    260B  34D3r				 DW  L72C8		 ; carry set --> error
1  9236	    260D  1E				 DB 1EH			 ; error 30: Simple type expected
1  9237
1  9238	    260E  F5				 DB 0f5h
1  9239						 ; A = default type
1  9240	    260F  CD				 DB 0cdh
1  9241	    2610  265Br				 DW  L65EF
1  9242	    2612  F1				 DB 0f1h
1  9243	    2613  47				 DB 47h
1  9244	    2614  C9				 DB 0c9h
1  9245
1  9246	    2615  CD			 L6540:	 DB 0cdh
1  9247	    2616  31D6r				 DW  L6F6E		 ; match(')')
1  9248
1  9249	    2618  CD				 DB 0cdh
1  9250	    2619  2CE2r				 DW  O_CALHL
1  9251
1  9252	    261B  F1				 DB 0f1h		 ; pop flag
1  9253	    261C  06 0A				 DB 06h,00AH		 ; set result type = INTEGER
1  9254	    261E  B7				 DB 0b7h
1  9255	    261F  C0				 DB 0c0h		 ; return if called as PROCEDURE
1  9256
1  9257						 ; code	to convert A in	HL to return as	function result
1  9258	    2620  CD				 DB 0cdh
1  9259	    2621  2CACr				 DW  O_CODE
1  9260	    2623  03				 DB 3
1  9261	    2624  6F				 DB 6FH			 ; LD L,A
1  9262	    2625  26 00				 DB 26H,00H		 ; LD H,0
1  9263
1  9264	    2627  C9				 DB 0c9h
1  9265
1  9266	    2628			 L65D5:	 ; parses an array index
1  9267	    2628  CD				 DB 0cdh
1  9268	    2629  3198r				 DW  L6F30		 ; match('[')
1  9269	    262B  CD				 DB 0cdh
1  9270	    262C  1FDCr				 DW  L5E97		 ; parse integer expression
1  9271	    262E  C3				 DB 0c3h
1  9272	    262F  31A0r				 DW  L6F38		 ; match(']')
1  9273
1  9274	    2631			 L65DE:	 ; parses a '('	integer	expr. ')'
1  9275	    2631  CD				 DB 0cdh
1  9276	    2632  31CEr				 DW  L6F66		 ; match('(')
1  9277	    2634  CD				 DB 0cdh
1  9278	    2635  1FDCr				 DW  L5E97		 ; parse integer expression
1  9279	    2637  C3			 L65E4:	 DB 0c3h
1  9280	    2638  31D6r				 DW  L6F6E		 ; match(')')
1  9281
1  9282	    263A  F5			 L65E7:	 DB 0f5h
1  9283	    263B  CD				 DB 0cdh
1  9284	    263C  31CEr				 DW  L6F66		 ; match('(')
1  9285	    263E  F1				 DB 0f1h
1  9286	    263F  CD				 DB 0cdh
1  9287	    2640  1FE9r				 DW  L5EA2		 ; parse integer, longint or real expression
1  9288	    2642  C3				 DB 0c3h
1  9289	    2643  31D6r				 DW  L6F6E		 ; match(')')
1  9290
1  9291	    2645			 PARSE_O_IL_C:
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 164
msx_asm\tur_comp.ASM



1  9292	    2645  F5				 DB 0f5h
1  9293	    2646  CD				 DB 0cdh
1  9294	    2647  31CEr				 DW  L6F66		 ; match('(')
1  9295	    2649  F1				 DB 0f1h
1  9296	    264A  CD				 DB 0cdh
1  9297	    264B  1FE9r				 DW  L5EA2		 ; parse integer, longint or real expression
1  9298
1  9299	    264D  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1  9300	    264F  CA				 DB 0cah
1  9301	    2650  31D6r				 DW L6F6E		 ; match(')') if type =	LONGINT
1  9302
1  9303	    2652  FE 0A				 DB 0feh, 0AH
1  9304
1  9305	    2654  CD				 DB 0cdh
1  9306	    2655  34E5r				 DW  L72DA		 ; NonZero --> error
1  9307	    2657  2C				 DB 2CH			 ; error 44: Type mismatch
1  9308
1  9309	    2658  C3				 DB 0c3h
1  9310	    2659  31D6r				 DW  L6F6E		 ; match(')')
1  9311
1  9312	    265B  F5			 L65EF:	 DB 0f5h
1  9313	    265C  CD				 DB 0cdh
1  9314	    265D  31CEr				 DW  L6F66		 ; match('(')
1  9315	    265F  F1				 DB 0f1h
1  9316	    2660  CD				 DB 0cdh
1  9317	    2661  2007r				 DW  L5EBB		 ; parse simple	expression
1  9318	    2663  18 D2				 DB 18h,( L65E4)-$-1		 ; match(')')
1  9319
1  9320	    2665  CD			 L65F7:	 DB 0cdh
1  9321	    2666  3183r				 DW  L6F1B		 ; match('('), if present
1  9322	    2668  28 0C				 DB 28h,(L6608)-$-1		 ; jump	if '(' matched
1  9323	    266A  21				 DB 21h
1  9324	    266B  018A				 DW _OUTPUT		 ; LIB
1  9325	    266D  CD				 DB 0cdh
1  9326	    266E  2CEEr				 DW  O_LDHL
1  9327
1  9328	    2670  3E 06				 DB 3eh,6			 ; type	= text
1  9329	    2672  32				 DB 32h
1  9330	    2673  3F16r				 DW L7B5C
1  9331	    2675  C9				 DB 0c9h
1  9332
1  9333	    2676  CD			 L6608:	 DB 0cdh
1  9334	    2677  1F90r				 DW  L5A17		 ; parse a file	parameter
1  9335
1  9336	    2679  CD				 DB 0cdh
1  9337	    267A  34E5r				 DW  L72DA		 ; NonZero --> error
1  9338	    267C  15				 DB 15H			 ; error 21: File variable expected
1  9339
1  9340	    267D  F5				 DB 0f5h
1  9341	    267E  CD				 DB 0cdh
1  9342	    267F  31D6r				 DW  L6F6E		 ; match(')')
1  9343	    2681  F1				 DB 0f1h
1  9344	    2682  C9				 DB 0c9h
1  9345
1  9346	    2683			 L661B:	 ; generate code to store a SET, STRING, REAL, POINTER,	INTEGER,
1  9347						 ; BOOLEAN, CHAR, LONGINT
1  9348						 ;
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 165
msx_asm\tur_comp.ASM



1  9349						 ; in:	 (L7B57) = 0, store direct
1  9350						 ;	 (L7B57) = 1, store at pushed address
1  9351						 ;	 (L7B57) = 2, store at indirect	address
1  9352	    2683  3A				 DB 3ah
1  9353	    2684  3F11r				 DW L7B57
1  9354	    2686  4F				 DB 4fh
1  9355
1  9356	    2687  2A				 DB 02ah
1  9357	    2688  3F12r				 DW L7B58		 ; HL =	lvalue of id
1  9358	    268A  3A				 DB 3ah
1  9359	    268B  3F16r				 DW L7B5C
1  9360	    268D  FE 03				 DB 0feh, 3			 ; type	= SET ?
1  9361	    268F  20 0B				 DB 20h,(L6634)-$-1		 ; jump	if not
1  9362
1  9363						 ; type	is SET
1  9364
1  9365						 ; generate 'LD	BC,offset * 256	+ length'
1  9366	    2691  CD				 DB 0cdh
1  9367	    2692  27FFr				 DW  L6734
1  9368
1  9369	    2694  21				 DB 21h
1  9370	    2695  080E				 DW _L0623		 ; LIB,	save SET at pushed HL
1  9371	    2697  11				 DB 11h
1  9372	    2698  07FD				 DW _L0612		 ; LIB,	save SET at HL
1  9373	    269A  18 14				 DB 18h,( L6648)-$-1
1  9374
1  9375	    269C  FE 08			 L6634:	 DB 0feh, 8			 ; type	= STRING ?
1  9376	    269E  20 26				 DB 20h,(L665E)-$-1		 ; jump	if not
1  9377
1  9378						 ; type	is STRING
1  9379	    26A0  3A				 DB 3ah
1  9380	    26A1  3F1Cr				 DW L7B62
1  9381	    26A3  3D				 DB 3dh
1  9382	    26A4  67				 DB 67h
1  9383	    26A5  2E 06				 DB 2eh,6
1  9384	    26A7  CD				 DB 0cdh
1  9385	    26A8  2CF3r				 DW  O_HL		 ; output: 'LD B,max length of string'
1  9386
1  9387	    26AA  21				 DB 21h
1  9388	    26AB  07EC				 DW _L0601		 ; LIB,	save string at pushed HL
1  9389	    26AD  11				 DB 11h
1  9390	    26AE  07CD				 DW _L05E2		 ; LIB,	save string at HL
1  9391
1  9392	    26B0  0D			 L6648:	 DB 0dh
1  9393	    26B1  28 10				 DB 28h,(L665B)-$-1		 ; jump	if C = 1, used pushed version
1  9394
1  9395	    26B3  EB				 DB 0ebh		 ; use call with destination directly in HL
1  9396
1  9397	    26B4  3E 21			 L664C:	 DB 3eh,021H		 ; LD HL,
1  9398	    26B6  0C				 DB 0ch
1  9399	    26B7  28 02				 DB 28h,(L6653)-$-1		 ; jump	if C = 0
1  9400
1  9401						 ; C = 2
1  9402	    26B9  3E 2A				 DB 3eh,02AH		 ; LD HL,()
1  9403
1  9404	    26BB  E5			 L6653:	 DB 0e5h
1  9405	    26BC  2A				 DB 02ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 166
msx_asm\tur_comp.ASM



1  9406	    26BD  3F12r				 DW L7B58		 ; HL =	lvalue of id
1  9407	    26BF  CD				 DB 0cdh
1  9408	    26C0  2CF0r				 DW  O_OPHL
1  9409	    26C2  E1				 DB 0e1h
1  9410
1  9411	    26C3  C3			 L665B:	 DB 0c3h
1  9412	    26C4  2CE2r				 DW  O_CALHL
1  9413
1  9414	    26C6  FE 09			 L665E:	 DB 0feh, 9			 ; type	= REAL ?
1  9415	    26C8  20 11				 DB 20h,(L6672)-$-1		 ; jump	if not
1  9416
1  9417						 ; type	is REAL
1  9418
1  9419						 ; CODE: HLDEBC	= current REAL
1  9420	    26CA  CD				 DB 0cdh
1  9421	    26CB  2CACr				 DW  O_CODE
1  9422	    26CD  01				 DB 1
1  9423	    26CE  D9				 DB 0D9H		 ; opcode: EXX
1  9424
1  9425	    26CF  21				 DB 21h
1  9426	    26D0  07BC				 DW _L05D1		 ; LIB,	PUTFLT,	save HLDEBC' at	HL
1  9427	    26D2  0D				 DB 0dh
1  9428	    26D3  20 DF				 DB 20h,(L664C)-$-1		 ; jump	if C = 0 or C =	2
1  9429
1  9430						 ; C = 1, destination address is pushed	at stack
1  9431	    26D5  CD				 DB 0cdh
1  9432	    26D6  2CCFr				 DW  O_POPHL
1  9433	    26D8  C3				 DB 0c3h
1  9434	    26D9  2CE2r				 DW  O_CALHL		 ; generate call PUTFLT
1  9435
1  9436	    26DB  FE 0E			 L6672:	 DB 0feh, 0EH			 ; type	= LONGINT ?
1  9437	    26DD  28 68				 DB 28h,(ST_LONG)-$-1		 ; generate code to store a LONGINT
1  9438
1  9439	    26DF  FE 04				 DB 0feh, 4			 ; type	= POINTER ?
1  9440	    26E1  28 27				 DB 28h,(L669D)-$-1		 ; jump	if POINTER
1  9441
1  9442	    26E3  3A				 DB 3ah
1  9443	    26E4  3F58r				 DW L7B9E		 ; compiler directives
1  9444	    26E6  CB 4F				 DB 0cbh,04fh			 ; 1 = Index Range Checking on
1  9445	    26E8  28 20				 DB 28h,(L669D)-$-1		 ; jump	if off
1  9446
1  9447	    26EA  2A				 DB 02ah
1  9448	    26EB  3F18r				 DW L7B5E		 ; start address of variable
1  9449	    26ED  ED 5B				 DB 0edh,5bh
1  9450	    26EF  3F1Ar				 DW L7B60
1  9451	    26F1  13				 DB 13h
1  9452	    26F2  B7				 DB 0b7h
1  9453	    26F3  ED 52				 DB 0EDH,052h
1  9454					 ;!	 pushf
1  9455	    26F5  19				 DB 019h
1  9456					 ;!	 popf
1  9457	    26F6  28 12				 DB 28h,(L669D)-$-1		 ; no checking if base = 0
1  9458	    26F8  1B				 DB 1bh
1  9459	    26F9  CD				 DB 0cdh
1  9460	    26FA  2CEAr				 DW  O_LDDE		 ; output: LD DE,base=HL
1  9461	    26FC  EB				 DB 0ebh
1  9462	    26FD  B7				 DB 0b7h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 167
msx_asm\tur_comp.ASM



1  9463	    26FE  ED 52				 DB 0EDH,052h
1  9464	    2700  23				 DB 23h
1  9465	    2701  CD				 DB 0cdh
1  9466	    2702  2CE6r				 DW  O_LDBC		 ; output: LD BC,length
1  9467	    2704  21				 DB 21h
1  9468	    2705  0841				 DW _L0656		 ; LIB,	clear
1  9469	    2707  CD				 DB 0cdh
1  9470	    2708  2CE2r				 DW  O_CALHL		 ; output call for range checking
1  9471
1  9472	    270A  0D			 L669D:	 DB 0dh
1  9473	    270B  20 17				 DB 20h,(L66B7)-$-1		 ; jump	if C = 0 or C =	2
1  9474
1  9475						 ; C = 1, use pushed version
1  9476	    270D  CD				 DB 0cdh
1  9477	    270E  2CACr				 DW  O_CODE
1  9478	    2710  02				 DB 2
1  9479	    2711  EB				 DB 0EBH		 ; EX DE,HL
1  9480	    2712  E1				 DB 0E1H		 ; POP HL	 ; HL =	destination address
1  9481
1  9482	    2713  CD			 L66A6:	 DB 0cdh
1  9483	    2714  2CACr				 DW  O_CODE
1  9484	    2716  01				 DB 1
1  9485	    2717  73				 DB 73H			 ; LD (HL),E
1  9486
1  9487	    2718  3A				 DB 3ah
1  9488	    2719  3F1Cr				 DW L7B62
1  9489	    271B  3D				 DB 3dh
1  9490	    271C  C8				 DB 0c8h
1  9491
1  9492	    271D  CD				 DB 0cdh
1  9493	    271E  2CACr				 DW  O_CODE
1  9494	    2720  02				 DB 2
1  9495	    2721  23				 DB 23H			 ; INC HL
1  9496	    2722  72				 DB 72H			 ; LD (HL),D
1  9497
1  9498	    2723  C9				 DB 0c9h
1  9499
1  9500	    2724  2A			 L66B7:	 DB 02ah
1  9501	    2725  3F12r				 DW L7B58		 ; HL =	lvalue of id
1  9502	    2727  0C				 DB 0ch
1  9503	    2728  20 12				 DB 20h,(L66CF)-$-1
1  9504
1  9505						 ; C = 0, store	direct
1  9506						 ; generates code to save a byte size expression or an integer size
1  9507						 ; expression
1  9508	    272A  3A				 DB 3ah
1  9509	    272B  3F1Cr				 DW L7B62		 ; A = low byte	of length of lvalue
1  9510	    272D  3D				 DB 3dh			 ; expression is word or byte?
1  9511
1  9512	    272E  3E 22				 DB 3eh,22H		 ; assume: opcode 'LD (),HL'
1  9513	    2730  20 07				 DB 20h,(L66CC)-$-1
1  9514
1  9515						 ; expression is byte
1  9516	    2732  CD				 DB 0cdh
1  9517	    2733  2CACr				 DW  O_CODE
1  9518	    2735  01				 DB 1
1  9519	    2736  7D				 DB 7DH			 ; LD A,L
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 168
msx_asm\tur_comp.ASM



1  9520
1  9521	    2737  3E 32				 DB 3eh,32H		 ; opcode 'LD (),A'
1  9522
1  9523	    2739  C3			 L66CC:	 DB 0c3h
1  9524	    273A  2CF0r				 DW  O_OPHL		 ; out:	LD (LVALUE),A or LD (LVALUE),HL
1  9525
1  9526	    273C			 L66CF:	 ; C = 2, store	indirect
1  9527	    273C  CD				 DB 0cdh
1  9528	    273D  2CACr				 DW  O_CODE
1  9529	    273F  02				 DB 2
1  9530	    2740  EB				 DB 0EBH		 ; EX DE,HL
1  9531	    2741  2A				 DB 2AH			 ; opcode: 'LD HL,()'
1  9532
1  9533	    2742  CD				 DB 0cdh
1  9534	    2743  2CF3r				 DW  O_HL		 ; output destination address
1  9535	    2745  18 CC				 DB 18h,( L66A6)-$-1
1  9536
1  9537	    2747  0D			 ST_LONG: DB 0dh
1  9538	    2748  20 13				 DB 20h,(ST_LONG02)-$-1		 ; jump	if C = 0 or C =	2
1  9539
1  9540						 ; C = 1, use pushed version
1  9541	    274A  CD				 DB 0cdh
1  9542	    274B  2CACr				 DW  O_CODE
1  9543	    274D  03				 DB 3
1  9544	    274E  4D				 DB 4DH			 ; LD C,L
1  9545	    274F  44				 DB 44H			 ; LD B,H
1  9546	    2750  E1				 DB 0E1H		 ; POP HL	 ; HL =	destination address
1  9547
1  9548	    2751			 ST_LONG_HL:
1  9549	    2751  CD				 DB 0cdh
1  9550	    2752  2CACr				 DW  O_CODE
1  9551	    2754  07				 DB 7
1  9552	    2755  71				 DB 71H			 ; LD (HL),C	 ; store low-word
1  9553	    2756  23				 DB 23H			 ; INC HL
1  9554	    2757  70				 DB 70H			 ; LD (HL),B
1  9555	    2758  23				 DB 23H			 ; INC HL
1  9556	    2759  73				 DB 73H			 ; LD (HL),E	 ; store high-word
1  9557	    275A  23				 DB 23H			 ; INC HL
1  9558	    275B  72				 DB 72H			 ; LD (HL),D
1  9559
1  9560	    275C  C9				 DB 0c9h
1  9561
1  9562	    275D			 ST_LONG02:
1  9563	    275D  2A				 DB 02ah
1  9564	    275E  3F12r				 DW L7B58		 ; HL =	lvalue of id
1  9565	    2760  0C				 DB 0ch
1  9566	    2761  20 11				 DB 20h,(ST_LONG_INDIRECT)-$-1	 ; jump	if C = 2
1  9567
1  9568						 ; C = 0
1  9569	    2763  3E 22				 DB 3eh,22H
1  9570	    2765  CD				 DB 0cdh
1  9571	    2766  2CF0r				 DW  O_OPHL		 ; LD (lvalue),HL
1  9572
1  9573	    2768  23				 DB 23h
1  9574	    2769  23				 DB 23h
1  9575	    276A  3E ED				 DB 3eh,0EDH
1  9576	    276C  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 169
msx_asm\tur_comp.ASM



1  9577	    276D  2CF8r				 DW  O_BYTE
1  9578	    276F  3E 53				 DB 3eh,53H
1  9579	    2771  C3				 DB 0c3h
1  9580	    2772  2CF0r				 DW  O_OPHL		 ; LD (lvalue+2),DE
1  9581
1  9582	    2774			 ST_LONG_INDIRECT:
1  9583						 ; C = 2, store	indirect
1  9584	    2774  CD				 DB 0cdh
1  9585	    2775  2CACr				 DW  O_CODE
1  9586	    2777  03				 DB 3
1  9587	    2778  4D				 DB 4DH			 ; LD C,L
1  9588	    2779  44				 DB 44H			 ; LD B,H
1  9589	    277A  2A				 DB 2AH			 ; opcode: 'LD HL,()'
1  9590
1  9591	    277B  CD				 DB 0cdh
1  9592	    277C  2CF3r				 DW  O_HL		 ; output loading of destination address
1  9593	    277E  18 D1				 DB 18h,( ST_LONG_HL)-$-1
1  9594
1  9595	    2780			 L66DA:	 ; generate code to load a REAL, STRING, SET, INTEGER, BOOLEAN,
1  9596						 ; CHAR	or LONGINT
1  9597	    2780  3A				 DB 3ah
1  9598	    2781  3F16r				 DW L7B5C
1  9599	    2783  FE 0A				 DB 0feh, 00AH
1  9600	    2785  30 20				 DB 30h,(L6701)-$-1		 ; jump	if INTEGER, BOOLEAN, CHAR or LONGINT
1  9601
1  9602	    2787  FE 04				 DB 0feh, 4
1  9603	    2789  28 1C				 DB 28h,(L6701)-$-1		 ; jump	if pointer
1  9604
1  9605	    278B  F5				 DB 0f5h
1  9606	    278C  CD				 DB 0cdh
1  9607	    278D  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1  9608									 ; 00 =	LD HL, value in	L7BBE
1  9609									 ; 01 =	LD HL,(value in	L7BBE)
1  9610									 ; 10 =	LD DE, value in	L7BBE
1  9611									 ;	ADD HL,DE
1  9612									 ; 11 =	no output
1  9613	    278F  F1				 DB 0f1h
1  9614
1  9615	    2790  21				 DB 21h
1  9616	    2791  0717				 DW _L052C		 ; LIB,	GETFLT,	clear
1  9617	    2793  FE 09				 DB 0feh, 9
1  9618	    2795  28 0D				 DB 28h,(L66FE)-$-1		 ; jump	if REAL
1  9619
1  9620	    2797  21				 DB 21h
1  9621	    2798  0725				 DW _L053A		 ; LIB,	clear
1  9622	    279A  FE 08				 DB 0feh, 8
1  9623	    279C  28 06				 DB 28h,(L66FE)-$-1		 ; jump	if STRING
1  9624
1  9625						 ; generate 'LD	BC,offset * 256	+ length'
1  9626	    279E  CD				 DB 0cdh
1  9627	    279F  27FFr				 DW  L6734
1  9628	    27A1  21				 DB 21h
1  9629	    27A2  0748				 DW _L055D		 ; LIB,	push a set on to a stack
1  9630
1  9631	    27A4  C3			 L66FE:	 DB 0c3h
1  9632	    27A5  2CE2r				 DW  O_CALHL
1  9633
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 170
msx_asm\tur_comp.ASM



1  9634	    27A7  3A			 L6701:	 DB 3ah
1  9635	    27A8  3F77r				 DW L7BBD
1  9636	    27AA  B7				 DB 0b7h		 ; indexed or VAR ?
1  9637	    27AB  20 27				 DB 20h,(L671B)-$-1
1  9638
1  9639						 ; normal addressing of	variable
1  9640	    27AD  3E 2A				 DB 3eh,02AH
1  9641	    27AF  2A				 DB 02ah
1  9642	    27B0  3F78r				 DW L7BBE
1  9643	    27B2  CD				 DB 0cdh
1  9644	    27B3  2CF0r				 DW  O_OPHL		 ; LD HL,( HL )
1  9645
1  9646	    27B5  3A				 DB 3ah
1  9647	    27B6  3F16r				 DW L7B5C
1  9648	    27B8  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1  9649	    27BA  20 0C				 DB 20h,(L67011)-$-1		 ; jump	if not
1  9650
1  9651						 ; output code to load high-word of longint
1  9652	    27BC  3E ED				 DB 3eh,0EDH		 ; opcode: LD DE,()
1  9653	    27BE  CD				 DB 0cdh
1  9654	    27BF  2CF8r				 DW  O_BYTE
1  9655	    27C1  3E 5B				 DB 3eh,5BH
1  9656	    27C3  23				 DB 23h
1  9657	    27C4  23				 DB 23h
1  9658	    27C5  C3				 DB 0c3h
1  9659	    27C6  2CF0r				 DW  O_OPHL		 ; LD DE,( L7BBE+2 )
1  9660
1  9661	    27C8  3A			 L67011: DB 3ah
1  9662	    27C9  3F1Cr				 DW L7B62
1  9663	    27CB  3D				 DB 3dh			 ; size	= 1 ?
1  9664	    27CC  C0				 DB 0c0h		 ; return if size > 1
1  9665
1  9666	    27CD  CD			 L6714:	 DB 0cdh
1  9667	    27CE  2CACr				 DW  O_CODE
1  9668	    27D0  02				 DB 2
1  9669	    27D1  26 00				 DB 26H,00H		 ; LD H,0
1  9670
1  9671	    27D3  C9				 DB 0c9h
1  9672
1  9673	    27D4  CD			 L671B:	 DB 0cdh
1  9674	    27D5  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1  9675									 ; 00 =	LD HL, value in	L7BBE
1  9676									 ; 01 =	LD HL,(value in	L7BBE)
1  9677									 ; 10 =	LD DE, value in	L7BBE
1  9678									 ;	ADD HL,DE
1  9679									 ; 11 =	no output
1  9680	    27D7  3A				 DB 3ah
1  9681	    27D8  3F1Cr				 DW L7B62
1  9682	    27DA  FE 04				 DB 0feh, 4			 ; size	= 4 ?
1  9683	    27DC  28 0A				 DB 28h,(O_LDLONG)-$-1		 ; output load indirect	long
1  9684
1  9685	    27DE  3D				 DB 3dh			 ; size	= 1 ?
1  9686	    27DF  20 15				 DB 20h,(L672B)-$-1		 ; jump	if size	> 1
1  9687
1  9688						 ; size	= 1
1  9689	    27E1  CD				 DB 0cdh
1  9690	    27E2  2CACr				 DW  O_CODE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 171
msx_asm\tur_comp.ASM



1  9691	    27E4  01				 DB 1
1  9692	    27E5  6E				 DB 6EH			 ; LD L,(HL)
1  9693
1  9694	    27E6  18 E5				 DB 18h,( L6714)-$-1		 ; LD H,0
1  9695
1  9696	    27E8  CD			 O_LDLONG:DB 0cdh
1  9697	    27E9  2CACr				 DW  O_CODE
1  9698	    27EB  09				 DB 9
1  9699	    27EC  5E				 DB 5EH			 ; LD E,(HL)	 ; DE =	low-word
1  9700	    27ED  23				 DB 23H			 ; INC HL
1  9701	    27EE  56				 DB 56H			 ; LD D,(HL)
1  9702	    27EF  23				 DB 23H			 ; INC HL
1  9703	    27F0  7E				 DB 7EH			 ; LD A,(HL)
1  9704	    27F1  23				 DB 23H			 ; INC HL
1  9705	    27F2  66				 DB 66H			 ; LD H,(HL)	 ; HL =	high-word
1  9706	    27F3  6F				 DB 6FH			 ; LD L,A
1  9707	    27F4  EB				 DB 0EBH		 ; EX DE,HL	 ; complete LONGINT DE:HL
1  9708
1  9709	    27F5  C9				 DB 0c9h
1  9710
1  9711	    27F6  CD			 L672B:	 DB 0cdh
1  9712	    27F7  2CACr				 DW  O_CODE
1  9713	    27F9  04				 DB 4
1  9714	    27FA  5E				 DB 5EH			 ; LD E,(HL)
1  9715	    27FB  23				 DB 23H			 ; INC HL
1  9716	    27FC  56				 DB 56H			 ; LD D,(HL)
1  9717	    27FD  EB				 DB 0EBH		 ; EX DE,HL
1  9718
1  9719	    27FE  C9				 DB 0c9h
1  9720
1  9721	    27FF			 L6734:	 ; generate 'LD	BC,offset * 256	+ length'
1  9722	    27FF  2A				 DB 02ah
1  9723	    2800  3F18r				 DW L7B5E		 ; HL =	address	of type	definition
1  9724	    2802  CD				 DB 0cdh
1  9725	    2803  183Ar				 DW  L5271		 ; 8 bytes from	HL (down) to 7B69 (up)
1  9726
1  9727	    2805  2A				 DB 02ah
1  9728	    2806  3F1Cr				 DW L7B62		 ; L = lenght of SET in	bytes
1  9729	    2808  3A				 DB 3ah
1  9730	    2809  3F25r				 DW L7B6B		 ; A = low byte	of lower bound
1  9731	    280B  1F				 DB 1fh
1  9732	    280C  1F				 DB 1fh
1  9733	    280D  1F				 DB 1fh
1  9734	    280E  E6 1F				 DB 0e6h, 01FH
1  9735	    2810  67				 DB 67h			 ; H = byte offset in SET
1  9736
1  9737	    2811  C3				 DB 0c3h
1  9738	    2812  2CE6r				 DW  O_LDBC		 ; B = offset, C = length
1  9739
1  9740	    2814  CD			 L6749:	 DB 0cdh
1  9741	    2815  2AECr				 DW  L6A0D		 ; parse a constant of any type
1  9742	    2817  20 31				 DB 20h,(L677F)-$-1		 ; jump	to parse var parameter
1  9743
1  9744	    2819  78				 DB 78h
1  9745	    281A  FE 08				 DB 0feh, 8			 ; type	= STRING ?
1  9746
1  9747	    281C  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 172
msx_asm\tur_comp.ASM



1  9748	    281D  34E5r				 DW  L72DA		 ; NonZero --> error
1  9749	    281F  3C				 DB 3CH			 ; error 60: Constants are not allowed here
1  9750
1  9751	    2820  2E 18				 DB 2eh,018H		 ; opcode: JR
1  9752	    2822  61				 DB 61h			 ; H = length of STRING	constant
1  9753	    2823  CD				 DB 0cdh
1  9754	    2824  2CF3r				 DW  O_HL		 ; jump	over constant 'JR length'
1  9755
1  9756	    2826  22FD 3F12r			 DW 22fdh,L7B58		 ; save	address	of STRING constant
1  9757	    282A  3E 01				 DB 3eh,1
1  9758	    282C  32				 DB 32h
1  9759	    282D  3F16r				 DW L7B5C
1  9760	    282F  21				 DB 21h
1  9761	    2830  37AFr				 DW L74E2		 ; definition of a char
1  9762	    2832  22				 DB 22h
1  9763	    2833  3F18r				 DW L7B5E
1  9764	    2835  21				 DB 21h
1  9765	    2836  0000				 DW 0000
1  9766	    2838  22				 DB 22h
1  9767	    2839  3F1Ar				 DW L7B60
1  9768	    283B  69				 DB 69h
1  9769	    283C  22				 DB 22h
1  9770	    283D  3F1Cr				 DW L7B62		 ; size	of constant
1  9771	    283F  CD				 DB 0cdh
1  9772	    2840  2CBEr				 DW  L6B62
1  9773	    2842  3E 21				 DB 3eh,021H		 ; opcode: LD HL,
1  9774	    2844  2A				 DB 02ah
1  9775	    2845  3F12r				 DW L7B58		 ; HL =	address	of STRING constant
1  9776	    2847  C3				 DB 0c3h
1  9777	    2848  2CF0r				 DW  O_OPHL		 ; LD HL, HL
1  9778
1  9779					 ;Print_ABC:
1  9780					 ;	  PUSH AF
1  9781					 ;	  LD A,13
1  9782					 ;	  CALL L03C9
1  9783					 ;	  LD A,10
1  9784					 ;	  CALL L03C9
1  9785					 ;	  LD A,'A'
1  9786					 ;	  CALL L03C9
1  9787					 ;	  LD A,'B'
1  9788					 ;	  CALL L03C9
1  9789					 ;	  LD A,'C'
1  9790					 ;	  CALL L03C9
1  9791					 ;	  LD A,13
1  9792					 ;	  CALL L03C9
1  9793					 ;	  LD A,10
1  9794					 ;	  CALL L03C9
1  9795					 ;	  POP AF
1  9796					 ;	  RET
1  9797
1  9798	    284A			 L677F:	 ; parses a var	parameter
1  9799						 ; out:	 A = type of parsed var	parameter
1  9800	    284A  CD				 DB 0cdh
1  9801	    284B  2852r				 DW  L6787
1  9802	    284D  C8				 DB 0c8h
1  9803
1  9804	    284E  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 173
msx_asm\tur_comp.ASM



1  9805	    284F  34ECr				 DW  L72E1		 ; no condition
1  9806	    2851  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1  9807
1  9808	    2852  CD			 L6787:	 DB 0cdh
1  9809	    2853  287Dr				 DW  L67B2
1  9810	    2855  C0				 DB 0c0h
1  9811
1  9812	    2856			 L678B:	 ; bit 0,1 of (L7BBD)
1  9813						 ; 00 =	LD HL, value in	L7BBE
1  9814						 ; 01 =	LD HL,(value in	L7BBE)
1  9815						 ; 10 =	LD DE, value in	L7BBE
1  9816						 ;	ADD HL,DE
1  9817						 ; 11 =	no output
1  9818						 ; out:
1  9819
1  9820	    2856  3A				 DB 3ah
1  9821	    2857  3F77r				 DW L7BBD
1  9822	    2859  2A				 DB 02ah
1  9823	    285A  3F78r				 DW L7BBE		 ; HL =	address	or normal value
1  9824	    285C  CB 4F				 DB 0cbh,04fh
1  9825	    285E  20 0D				 DB 20h,(L67A2)-$-1
1  9826	    2860  CB 47				 DB 0cbh,047h
1  9827	    2862  3E 21				 DB 3eh,021H		 ; LD HL,
1  9828	    2864  28 02				 DB 28h,(L679D)-$-1
1  9829	    2866  3E 2A				 DB 3eh,02AH		 ; LD HL,()
1  9830
1  9831	    2868  CD			 L679D:	 DB 0cdh
1  9832	    2869  2CF0r				 DW  O_OPHL
1  9833	    286B  AF				 DB 0afh		 ; return carry	= 0, A = 0
1  9834	    286C  C9				 DB 0c9h
1  9835
1  9836	    286D  CB 47			 L67A2:	 DB 0cbh,047h
1  9837	    286F  20 0A				 DB 20h,(L67B0)-$-1		 ; jump	if no output, return carry=0, A	= 0
1  9838
1  9839	    2871  3E 11				 DB 3eh,011H		 ; LD DE,
1  9840	    2873  CD				 DB 0cdh
1  9841	    2874  2CF0r				 DW  O_OPHL
1  9842
1  9843	    2876  CD				 DB 0cdh
1  9844	    2877  2CACr				 DW  O_CODE
1  9845	    2879  01				 DB 1
1  9846	    287A  19				 DB 19H			 ; ADD HL,DE
1  9847
1  9848	    287B  AF			 L67B0:	 DB 0afh		 ; return carry	= 0, A = 0
1  9849	    287C  C9				 DB 0c9h
1  9850
1  9851	    287D  CD			 L67B2:	 DB 0cdh
1  9852	    287E  28D7r				 DW  L680C
1  9853	    2880  28 22				 DB 28h,(L67D9)-$-1
1  9854
1  9855	    2882  01				 DB 01h
1  9856	    2883  0400				 DW 400H	 ; variable identifier ?
1  9857	    2885  CD				 DB 0cdh
1  9858	    2886  30BCr				 DW  L6E54		 ; check if current in id list
1  9859									 ; HL =	address	of info
1  9860	    2888  20 2E				 DB 20h,(L67ED)-$-1		 ; jump	if no variable identifier
1  9861
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 174
msx_asm\tur_comp.ASM



1  9862						 ; variable identifier found
1  9863	    288A  CD				 DB 0cdh
1  9864	    288B  183Fr				 DW  L5276		 ; id info at 7B5C
1  9865	    288D  3A				 DB 3ah
1  9866	    288E  3F11r				 DW L7B57
1  9867	    2890  B7				 DB 0b7h		 ; 0?, 0 = no VAR, 1 = VAR
1  9868	    2891  3E 21				 DB 3eh,021H		 ; opcode 'ld hl,'
1  9869	    2893  06 00				 DB 06h,0
1  9870	    2895  28 03				 DB 28h,(L67CF)-$-1		 ; jump	if no VAR
1  9871
1  9872	    2897  3E 2A				 DB 3eh,02AH		 ; opcode 'ld hl,()'
1  9873	    2899  04				 DB 04h			 ; B = 1
1  9874
1  9875	    289A  21			 L67CF:	 DB 21h
1  9876	    289B  3F77r				 DW L7BBD
1  9877	    289D  70				 DB 70h		 ; B = 0: 'LD HL,'
1  9878									 ; B = 1: 'LD HL,()'
1  9879
1  9880	    289E  2A				 DB 02ah
1  9881	    289F  3F12r				 DW L7B58		 ; HL =	lvalue of id
1  9882	    28A1  22				 DB 22h
1  9883	    28A2  3F78r				 DW L7BBE		 ; current address of variable
1  9884
1  9885	    28A4  CD			 L67D9:	 DB 0cdh
1  9886	    28A5  2905r				 DW  L683A
1  9887	    28A7  28 FB				 DB 28h,(L67D9)-$-1
1  9888
1  9889	    28A9  CD				 DB 0cdh
1  9890	    28AA  2A0Br				 DW  L6931		 ; '.' variablename ?
1  9891	    28AC  28 F6				 DB 28h,(L67D9)-$-1		 ; yes,	repeat for next
1  9892
1  9893	    28AE  CD				 DB 0cdh
1  9894	    28AF  2A4Er				 DW  L6974		 ; variablename	'^' ?
1  9895	    28B1  28 F1				 DB 28h,(L67D9)-$-1		 ; yes,	repeat for next
1  9896
1  9897	    28B3  CD				 DB 0cdh
1  9898	    28B4  2A79r				 DW  L699F
1  9899	    28B6  AF				 DB 0afh
1  9900	    28B7  C9				 DB 0c9h
1  9901
1  9902	    28B8  CD			 L67ED:	 DB 0cdh
1  9903	    28B9  30DEr				 DW  L6E76		 ; MEM is following ?
1  9904	    28BB  390Dr				 DW L78FA		 ; start of reserved word: MEM
1  9905	    28BD  C0				 DB 0c0h		 ; quit	if not
1  9906
1  9907	    28BE  CD				 DB 0cdh
1  9908	    28BF  2628r				 DW  L65D5		 ; parses an array index
1  9909
1  9910	    28C1  3E 0A				 DB 3eh,00AH
1  9911	    28C3  32				 DB 32h
1  9912	    28C4  3F16r				 DW L7B5C		 ; type	= byte / integer
1  9913	    28C6  21				 DB 21h
1  9914	    28C7  0001				 DW 1
1  9915	    28C9  22				 DB 22h
1  9916	    28CA  3F1Cr				 DW L7B62		 ; size	= 2
1  9917	    28CC  2D				 DB 2dh
1  9918	    28CD  22				 DB 22h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 175
msx_asm\tur_comp.ASM



1  9919	    28CE  3F18r				 DW L7B5E		 ; = 0	   , min value
1  9920	    28D0  2D				 DB 2dh
1  9921	    28D1  22				 DB 22h
1  9922	    28D2  3F1Ar				 DW L7B60		 ; = 0FFFFH , max value
1  9923	    28D4  C3				 DB 0c3h
1  9924	    28D5  29DDr				 DW  L6903
1  9925
1  9926	    28D7  3A			 L680C:	 DB 3ah
1  9927	    28D8  3F83r				 DW L7BC9
1  9928	    28DA  47				 DB 47h
1  9929
1  9930	    28DB  05			 L6810:	 DB 05h
1  9931	    28DC  F8				 DB 0f8h		 ; quit	if < 0
1  9932	    28DD  C5				 DB 0c5h
1  9933	    28DE  58				 DB 58h
1  9934	    28DF  16 00				 DB 16h,0
1  9935	    28E1  21				 DB 21h
1  9936	    28E2  3F86r				 DW L7BCC
1  9937	    28E4  19				 DB 019h
1  9938	    28E5  7E				 DB 7eh
1  9939	    28E6  4F				 DB 4fh
1  9940	    28E7  06 04				 DB 06h,4			 ; variable identifier ?
1  9941	    28E9  CD				 DB 0cdh
1  9942	    28EA  30BCr				 DW  L6E54		 ; check if current in id list
1  9943									 ; HL =	address	of info
1  9944	    28EC  C1				 DB 0c1h
1  9945	    28ED  20 EC				 DB 20h,(L6810)-$-1
1  9946
1  9947	    28EF  E5				 DB 0e5h
1  9948	    28F0  78				 DB 78h
1  9949	    28F1  87				 DB 087h
1  9950	    28F2  5F				 DB 5fh
1  9951	    28F3  16 00				 DB 16h,0
1  9952	    28F5  2A				 DB 02ah
1  9953	    28F6  3F84r				 DW L7BCA
1  9954	    28F8  19				 DB 019h
1  9955	    28F9  22				 DB 22h
1  9956	    28FA  3F78r				 DW L7BBE
1  9957	    28FC  21				 DB 21h
1  9958	    28FD  3F77r				 DW L7BBD
1  9959	    28FF  36 01				 DB 36h,1
1  9960	    2901  E1				 DB 0e1h
1  9961	    2902  C3				 DB 0c3h
1  9962	    2903  2A22r				 DW  L6948
1  9963
1  9964	    2905  3A			 L683A:	 DB 3ah
1  9965	    2906  3F16r				 DW L7B5C
1  9966	    2908  FE 01				 DB 0feh, 1
1  9967	    290A  C0				 DB 0c0h
1  9968
1  9969	    290B  CD				 DB 0cdh
1  9970	    290C  3148r				 DW  L6EE0		 ; match('[') or match('(.')
1  9971	    290E  C0				 DB 0c0h		 ; quit	if no '[' or '(.' matched
1  9972
1  9973	    290F  CD				 DB 0cdh
1  9974	    2910  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1  9975									 ; 00 =	LD HL, value in	L7BBE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 176
msx_asm\tur_comp.ASM



1  9976									 ; 01 =	LD HL,(value in	L7BBE)
1  9977									 ; 10 =	LD DE, value in	L7BBE
1  9978									 ;	ADD HL,DE
1  9979									 ; 11 =	no output
1  9980
1  9981	    2912  CD			 L6847:	 DB 0cdh
1  9982	    2913  2CCBr				 DW  O_PSHHL
1  9983
1  9984	    2915  3A				 DB 3ah
1  9985	    2916  3F16r				 DW L7B5C		 ; A = default type
1  9986	    2918  CD				 DB 0cdh
1  9987	    2919  1FC9r				 DW  L5E84		 ; parse a sub expression
1  9988
1  9989	    291B  2A				 DB 02ah
1  9990	    291C  3F1Ar				 DW L7B60
1  9991	    291E  CD				 DB 0cdh
1  9992	    291F  183Ar				 DW  L5271		 ; 8 bytes from	HL (down) to 7B69 (up)
1  9993	    2921  3A				 DB 3ah
1  9994	    2922  3F23r				 DW L7B69
1  9995	    2924  B8				 DB 0b8h
1  9996
1  9997	    2925  CD				 DB 0cdh
1  9998	    2926  34E5r				 DW  L72DA		 ; NonZero --> error
1  9999	    2928  2C				 DB 2CH			 ; error 44: Type mismatch
1 10000
1 10001	    2929  2A				 DB 02ah
1 10002	    292A  3F25r				 DW L7B6B
1 10003	    292C  7C				 DB 7ch
1 10004	    292D  B7				 DB 0b7h
1 10005	    292E  20 12				 DB 20h,(L6874)-$-1
1 10006	    2930  7D				 DB 7dh
1 10007	    2931  FE 04				 DB 0feh, 4
1 10008	    2933  30 21				 DB 30h,(L6888)-$-1
1 10009
1 10010	    2935  B7			 L6867:	 DB 0b7h
1 10011	    2936  28 29				 DB 28h,(L6893)-$-1
1 10012	    2938  F5				 DB 0f5h
1 10013
1 10014	    2939  CD				 DB 0cdh
1 10015	    293A  2CACr				 DW  O_CODE
1 10016	    293C  01				 DB 1
1 10017	    293D  2B				 DB 2BH			 ; DEC HL
1 10018
1 10019	    293E  F1				 DB 0f1h
1 10020	    293F  3D				 DB 3dh
1 10021	    2940  18 F3				 DB 18h,( L6867)-$-1
1 10022
1 10023	    2942  3C			 L6874:	 DB 3ch
1 10024	    2943  20 11				 DB 20h,(L6888)-$-1
1 10025	    2945  7D				 DB 7dh
1 10026	    2946  FE FD				 DB 0feh, 0FDH
1 10027	    2948  38 0C				 DB 38h,(L6888)-$-1
1 10028
1 10029	    294A  F5			 L687C:	 DB 0f5h
1 10030
1 10031	    294B  CD				 DB 0cdh
1 10032	    294C  2CACr				 DW  O_CODE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 177
msx_asm\tur_comp.ASM



1 10033	    294E  01				 DB 1
1 10034	    294F  23				 DB 23H			 ; INC HL
1 10035
1 10036	    2950  F1				 DB 0f1h
1 10037	    2951  3C				 DB 3ch
1 10038	    2952  20 F6				 DB 20h,(L687C)-$-1
1 10039	    2954  18 0B				 DB 18h,( L6893)-$-1
1 10040
1 10041	    2956  CD			 L6888:	 DB 0cdh
1 10042	    2957  2B13r				 DW  L6A30
1 10043	    2959  CD				 DB 0cdh
1 10044	    295A  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1 10045
1 10046	    295C  CD				 DB 0cdh
1 10047	    295D  2CACr				 DW  O_CODE
1 10048	    295F  01				 DB 1
1 10049	    2960  19				 DB 19H			 ; ADD HL,DE
1 10050
1 10051	    2961  3A			 L6893:	 DB 3ah
1 10052	    2962  3F58r				 DW L7B9E		 ; compiler directives
1 10053	    2964  CB 4F				 DB 0cbh,04fh			 ; 1 = Index Range Checking on
1 10054	    2966  28 14				 DB 28h,(L68AE)-$-1		 ; jump	if off
1 10055
1 10056	    2968  2A				 DB 02ah
1 10057	    2969  3F27r				 DW L7B6D
1 10058	    296B  ED 5B				 DB 0edh,5bh
1 10059	    296D  3F25r				 DW L7B6B
1 10060	    296F  B7				 DB 0b7h
1 10061	    2970  ED 52				 DB 0EDH,052h
1 10062	    2972  23				 DB 23h
1 10063	    2973  CD				 DB 0cdh
1 10064	    2974  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1 10065	    2976  21				 DB 21h
1 10066	    2977  0837				 DW _L064C		 ; LIB
1 10067	    2979  CD				 DB 0cdh
1 10068	    297A  2CE2r				 DW  O_CALHL
1 10069
1 10070	    297C  2A			 L68AE:	 DB 02ah
1 10071	    297D  3F18r				 DW L7B5E
1 10072	    297F  CD				 DB 0cdh
1 10073	    2980  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1 10074
1 10075	    2982  2A				 DB 02ah
1 10076	    2983  3F1Cr				 DW L7B62		 ; HL =	variable size
1 10077	    2985  7C				 DB 7ch
1 10078	    2986  B7				 DB 0b7h
1 10079	    2987  20 29				 DB 20h,(L68D8)-$-1		 ; jump	if size	>= 256
1 10080
1 10081	    2989  7D				 DB 7dh
1 10082	    298A  3D				 DB 3dh			 ; size	= 1 ?
1 10083	    298B  28 3A				 DB 28h,(L68ED)-$-1		 ; jump	if size	= 1
1 10084
1 10085	    298D  3D				 DB 3dh			 ; size	= 2 ?
1 10086	    298E  20 07				 DB 20h,(L68AE1)-$-1		 ; jump	if not
1 10087
1 10088						 ; size	= 2
1 10089	    2990  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 178
msx_asm\tur_comp.ASM



1 10090	    2991  2CACr				 DW  O_CODE
1 10091	    2993  01				 DB 1
1 10092	    2994  29				 DB 29H			 ; ADD HL,HL
1 10093
1 10094	    2995  18 30				 DB 18h,( L68ED)-$-1		 ; add base
1 10095
1 10096	    2997  FE 02			 L68AE1: DB 0feh, 2			 ; size	= 4 ?, already 2 subtracted
1 10097	    2999  20 08				 DB 20h,(L68C9)-$-1
1 10098
1 10099						 ; size	= 4
1 10100	    299B  CD				 DB 0cdh
1 10101	    299C  2CACr				 DW  O_CODE
1 10102	    299E  02				 DB 2
1 10103	    299F  29				 DB 29H			 ; ADD HL,HL
1 10104	    29A0  29				 DB 29H			 ; ADD HL,HL
1 10105
1 10106	    29A1  18 24				 DB 18h,( L68ED)-$-1		 ; add base
1 10107
1 10108	    29A3  FE 04			 L68C9:	 DB 0feh, 4			 ; size	= 6 ?, already 2 subtracted
1 10109	    29A5  20 0B				 DB 20h,(L68D8)-$-1
1 10110
1 10111						 ; generate code for HL	* 6, size = 6
1 10112	    29A7  CD				 DB 0cdh
1 10113	    29A8  2CACr				 DW  O_CODE
1 10114	    29AA  05				 DB 5
1 10115	    29AB  29				 DB 29H			 ; ADD HL,HL   , * 2
1 10116	    29AC  5D				 DB 5DH			 ; LD E,L
1 10117	    29AD  54				 DB 54H			 ; LD D,H
1 10118	    29AE  29				 DB 29H			 ; ADD HL,HL   , * 4
1 10119	    29AF  19				 DB 19H			 ; ADD HL,DE   , * 2 + * 4
1 10120
1 10121	    29B0  18 15				 DB 18h,( L68ED)-$-1		 ; add base
1 10122
1 10123	    29B2  3A			 L68D8:	 DB 3ah
1 10124	    29B3  3F58r				 DW L7B9E		 ; compiler directives
1 10125	    29B5  CB 67				 DB 0cbh,067h			 ; 1 = Array Optimization on
1 10126	    29B7  20 0B				 DB 20h,(L68EA)-$-1		 ; jump	if on
1 10127
1 10128	    29B9  CD				 DB 0cdh
1 10129	    29BA  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1 10130	    29BC  21				 DB 21h
1 10131	    29BD  0911				 DW _L06F5		 ; LIB
1 10132	    29BF  CD				 DB 0cdh
1 10133	    29C0  2CE2r				 DW  O_CALHL
1 10134	    29C2  18 03				 DB 18h,( L68ED)-$-1
1 10135
1 10136	    29C4  CD			 L68EA:	 DB 0cdh
1 10137	    29C5  29E4r				 DW  L690A
1 10138
1 10139	    29C7  CD			 L68ED:	 DB 0cdh
1 10140	    29C8  2CACr				 DW  O_CODE
1 10141	    29CA  02				 DB 2
1 10142	    29CB  D1				 DB 0D1H		 ; POP DE
1 10143	    29CC  19				 DB 19H			 ; ADD HL,DE
1 10144
1 10145	    29CD  3A				 DB 3ah
1 10146	    29CE  3F16r				 DW L7B5C
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 179
msx_asm\tur_comp.ASM



1 10147	    29D0  FE 01				 DB 0feh, 1
1 10148	    29D2  20 06				 DB 20h,(L6900)-$-1
1 10149	    29D4  CD				 DB 0cdh
1 10150	    29D5  317Br				 DW  L6F13		 ; match(','), if present
1 10151	    29D7  CA				 DB 0cah
1 10152	    29D8  2912r				 DW L6847		 ; jump	if ',' matched
1 10153	    29DA  CD			 L6900:	 DB 0cdh
1 10154	    29DB  31A0r				 DW  L6F38		 ; match(']')
1 10155
1 10156	    29DD  3E 03			 L6903:	 DB 3eh,3
1 10157	    29DF  32				 DB 32h
1 10158	    29E0  3F77r				 DW L7BBD
1 10159	    29E2  AF				 DB 0afh
1 10160	    29E3  C9				 DB 0c9h
1 10161
1 10162	    29E4  06 01			 L690A:	 DB 06h,1
1 10163
1 10164	    29E6  7C			 L690C:	 DB 7ch
1 10165	    29E7  B7				 DB 0b7h
1 10166	    29E8  20 04				 DB 20h,(L6914)-$-1		 ; HL non-zero
1 10167
1 10168	    29EA  7D				 DB 7dh
1 10169	    29EB  3D				 DB 3dh
1 10170	    29EC  28 13				 DB 28h,(L6927)-$-1
1 10171
1 10172	    29EE  CB 45			 L6914:	 DB 0cbh,045h			 ; bit 0 = '0' ?
1 10173	    29F0  28 04				 DB 28h,(L691C)-$-1		 ; jump	if '0',	generate 'ADD HL,HL'
1 10174
1 10175						 ; save	current	value to be added later
1 10176	    29F2  CD				 DB 0cdh
1 10177	    29F3  2CCBr				 DW  O_PSHHL
1 10178	    29F5  04				 DB 04h
1 10179
1 10180	    29F6  CD			 L691C:	 DB 0cdh
1 10181	    29F7  2CACr				 DW  O_CODE
1 10182	    29F9  01				 DB 1
1 10183	    29FA  29				 DB 29H			 ; ADD HL,HL
1 10184
1 10185	    29FB  CB 3C				 DB 0cbh,3ch			 ; HL =	HL / 2
1 10186	    29FD  CB 1D				 DB 0cbh,1dh
1 10187	    29FF  18 E5				 DB 18h,( L690C)-$-1
1 10188
1 10189	    2A01  05			 L6927:	 DB 05h
1 10190	    2A02  C8				 DB 0c8h
1 10191
1 10192	    2A03  CD				 DB 0cdh
1 10193	    2A04  2CACr				 DW  O_CODE
1 10194	    2A06  02				 DB 2
1 10195	    2A07  D1				 DB 0D1H		 ; POP DE
1 10196	    2A08  19				 DB 19H			 ; ADD HL,DE
1 10197
1 10198	    2A09  18 F6				 DB 18h,( L6927)-$-1
1 10199
1 10200	    2A0B  3A			 L6931:	 DB 3ah
1 10201	    2A0C  3F16r				 DW L7B5C
1 10202	    2A0E  FE 02				 DB 0feh, 2			 ; record type ?
1 10203	    2A10  C0				 DB 0c0h		 ; return if not
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 180
msx_asm\tur_comp.ASM



1 10204
1 10205	    2A11  CD				 DB 0cdh
1 10206	    2A12  317Fr				 DW  L6F17		 ; match('.'), if present
1 10207	    2A14  C0				 DB 0c0h		 ; return if '.' not matched
1 10208
1 10209	    2A15  3A				 DB 3ah
1 10210	    2A16  3F17r				 DW L7B5D
1 10211	    2A18  4F				 DB 4fh			 ; level within	record
1 10212	    2A19  06 04				 DB 06h,4			 ; variable identifier ?
1 10213	    2A1B  CD				 DB 0cdh
1 10214	    2A1C  30BCr				 DW  L6E54		 ; check if current in id list
1 10215									 ; HL =	address	of info
1 10216
1 10217	    2A1E  CD				 DB 0cdh
1 10218	    2A1F  34E5r				 DW  L72DA		 ; NonZero --> error
1 10219	    2A21  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1 10220
1 10221	    2A22  CD			 L6948:	 DB 0cdh
1 10222	    2A23  183Fr				 DW  L5276		 ; id info at 7B5C
1 10223	    2A25  2A				 DB 02ah
1 10224	    2A26  3F12r				 DW L7B58		 ; HL =	lvalue of id or	offset of base of id
1 10225	    2A28  7C				 DB 7ch
1 10226	    2A29  B5				 DB 0b5h
1 10227	    2A2A  C8				 DB 0c8h		 ; quit	if lvalue of id	== 0
1 10228									 ; can only be 0 if it is an offset which
1 10229									 ; is zero (first variable in a	record),
1 10230									 ; it generates	no code
1 10231
1 10232	    2A2B  21				 DB 21h
1 10233	    2A2C  3F77r				 DW L7BBD
1 10234	    2A2E  CB 46				 DB 0cbh,046h
1 10235	    2A30  28 0F				 DB 28h,(L6967)-$-1		 ; jump	if LD HL, value	in L7BBE
1 10236									 ;	or LD DE, value	in L7BBE
1 10237									 ;	  ADD HL,DE
1 10238
1 10239	    2A32  E5				 DB 0e5h
1 10240	    2A33  CD				 DB 0cdh
1 10241	    2A34  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1 10242									 ; 00 =	LD HL, value in	L7BBE
1 10243									 ; 01 =	LD HL,(value in	L7BBE)
1 10244									 ; 10 =	LD DE, value in	L7BBE
1 10245									 ;	ADD HL,DE
1 10246									 ; 11 =	no output
1 10247	    2A36  E1				 DB 0e1h
1 10248	    2A37  36 02				 DB 36h,2
1 10249	    2A39  2A				 DB 02ah
1 10250	    2A3A  3F12r				 DW L7B58		 ; HL =	lvalue of id
1 10251	    2A3C  22				 DB 22h
1 10252	    2A3D  3F78r				 DW L7BBE		 ; set new current address of variable
1 10253
1 10254	    2A3F  AF				 DB 0afh		 ; return Zero
1 10255	    2A40  C9				 DB 0c9h
1 10256
1 10257	    2A41  2A			 L6967:	 DB 02ah
1 10258	    2A42  3F78r				 DW L7BBE
1 10259	    2A44  ED 5B				 DB 0edh,5bh
1 10260	    2A46  3F12r				 DW L7B58		 ; HL =	offset to field	id
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 181
msx_asm\tur_comp.ASM



1 10261	    2A48  19				 DB 019h
1 10262	    2A49  22				 DB 22h
1 10263	    2A4A  3F78r				 DW L7BBE		 ; set new current address of variable
1 10264
1 10265	    2A4C  AF				 DB 0afh		 ; return Zero
1 10266	    2A4D  C9				 DB 0c9h
1 10267
1 10268	    2A4E			 L6974:	 ; variablename	'^'
1 10269	    2A4E  3A				 DB 3ah
1 10270	    2A4F  3F16r				 DW L7B5C
1 10271	    2A51  FE 04				 DB 0feh, 4			 ; type	= POINTER ?
1 10272	    2A53  C0				 DB 0c0h		 ; return if not a pointer
1 10273
1 10274	    2A54  CD				 DB 0cdh
1 10275	    2A55  318Fr				 DW  L6F27		 ; match('^')
1 10276	    2A57  C0				 DB 0c0h
1 10277
1 10278	    2A58  21				 DB 21h
1 10279	    2A59  3F77r				 DW L7BBD
1 10280	    2A5B  7E				 DB 7eh
1 10281	    2A5C  B7				 DB 0b7h
1 10282	    2A5D  20 03				 DB 20h,(L6988)-$-1
1 10283
1 10284						 ; direct value	--> make indirect
1 10285	    2A5F  34				 DB 034h		 ; 01 =	LD HL,(value in	L7BBE)
1 10286	    2A60  18 0F				 DB 18h,( L6997)-$-1
1 10287
1 10288	    2A62  E5			 L6988:	 DB 0e5h
1 10289	    2A63  CD				 DB 0cdh
1 10290	    2A64  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1 10291									 ; 00 =	LD HL, value in	L7BBE
1 10292									 ; 01 =	LD HL,(value in	L7BBE)
1 10293									 ; 10 =	LD DE, value in	L7BBE
1 10294									 ;	ADD HL,DE
1 10295									 ; 11 =	no output
1 10296	    2A66  E1				 DB 0e1h
1 10297	    2A67  36 03				 DB 36h,3		 ; no output next time
1 10298
1 10299	    2A69  CD				 DB 0cdh
1 10300	    2A6A  2CACr				 DW  O_CODE
1 10301	    2A6C  04				 DB 4
1 10302	    2A6D  5E				 DB 5EH			 ; LD E,(HL)
1 10303	    2A6E  23				 DB 23H			 ; INC HL
1 10304	    2A6F  56				 DB 56H			 ; LD D,(HL)
1 10305	    2A70  EB				 DB 0EBH		 ; EX DE,HL
1 10306
1 10307	    2A71  2A			 L6997:	 DB 02ah
1 10308	    2A72  3F18r				 DW L7B5E
1 10309	    2A74  CD				 DB 0cdh
1 10310	    2A75  1850r				 DW  L5287		 ; 8 bytes from	HL (down) to 7B5C (up)
1 10311
1 10312	    2A77  AF				 DB 0afh		 ; return Zero
1 10313	    2A78  C9				 DB 0c9h
1 10314
1 10315	    2A79  3A			 L699F:	 DB 3ah
1 10316	    2A7A  3F16r				 DW L7B5C
1 10317	    2A7C  FE 08				 DB 0feh, 8			 ; type	= STRING ?
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 182
msx_asm\tur_comp.ASM



1 10318	    2A7E  C0				 DB 0c0h
1 10319
1 10320	    2A7F  CD				 DB 0cdh
1 10321	    2A80  3148r				 DW  L6EE0		 ; match('[') or match('(.')
1 10322	    2A82  C0				 DB 0c0h		 ; quit	if no '[' or '(.' matched
1 10323
1 10324	    2A83  CD				 DB 0cdh
1 10325	    2A84  2856r				 DW  L678B		 ; bit 0,1 of (L7BBD)
1 10326									 ; 00 =	LD HL, value in	L7BBE
1 10327									 ; 01 =	LD HL,(value in	L7BBE)
1 10328									 ; 10 =	LD DE, value in	L7BBE
1 10329									 ;	ADD HL,DE
1 10330									 ; 11 =	no output
1 10331	    2A86  CD				 DB 0cdh
1 10332	    2A87  2CCBr				 DW  O_PSHHL
1 10333	    2A89  2A				 DB 02ah
1 10334	    2A8A  3F1Cr				 DW L7B62
1 10335	    2A8C  E5				 DB 0e5h
1 10336	    2A8D  CD				 DB 0cdh
1 10337	    2A8E  1FDCr				 DW  L5E97		 ; parse integer expression
1 10338	    2A90  E1				 DB 0e1h
1 10339	    2A91  3A				 DB 3ah
1 10340	    2A92  3F58r				 DW L7B9E		 ; compiler directives
1 10341	    2A94  CB 4F				 DB 0cbh,04fh			 ; 1 = Index Range Checking on
1 10342	    2A96  28 09				 DB 28h,(L69C7)-$-1		 ; jump	if off
1 10343	    2A98  CD				 DB 0cdh
1 10344	    2A99  2CEAr				 DW  O_LDDE		 ; output: 'LD DE,value	HL'
1 10345	    2A9B  21				 DB 21h
1 10346	    2A9C  0837				 DW _L064C		 ; LIB
1 10347	    2A9E  CD				 DB 0cdh
1 10348	    2A9F  2CE2r				 DW  O_CALHL
1 10349
1 10350	    2AA1  CD			 L69C7:	 DB 0cdh
1 10351	    2AA2  2CACr				 DW  O_CODE
1 10352	    2AA4  02				 DB 2
1 10353	    2AA5  D1				 DB 0D1H		 ; POP DE
1 10354	    2AA6  19				 DB 19H			 ; ADD HL,DE
1 10355
1 10356	    2AA7  CD				 DB 0cdh
1 10357	    2AA8  31A0r				 DW  L6F38		 ; match(']')
1 10358	    2AAA  3E 0C				 DB 3eh,00CH
1 10359	    2AAC  32				 DB 32h
1 10360	    2AAD  3F16r				 DW L7B5C
1 10361	    2AAF  21				 DB 21h
1 10362	    2AB0  0001				 DW 0001
1 10363	    2AB2  22				 DB 22h
1 10364	    2AB3  3F1Cr				 DW L7B62
1 10365	    2AB5  2B				 DB 2bh
1 10366	    2AB6  22				 DB 22h
1 10367	    2AB7  3F18r				 DW L7B5E
1 10368	    2AB9  2D				 DB 2dh
1 10369	    2ABA  22				 DB 22h
1 10370	    2ABB  3F1Ar				 DW L7B60
1 10371	    2ABD  3E 03				 DB 3eh,3
1 10372	    2ABF  32				 DB 32h
1 10373	    2AC0  3F77r				 DW L7BBD
1 10374	    2AC2  AF				 DB 0afh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 183
msx_asm\tur_comp.ASM



1 10375	    2AC3  C9				 DB 0c9h
1 10376
1 10377	    2AC4  CD			 L69EA:	 DB 0cdh
1 10378	    2AC5  2AECr				 DW  L6A0D		 ; parse a constant of any type
1 10379	    2AC7  C8				 DB 0c8h
1 10380
1 10381	    2AC8  CD				 DB 0cdh
1 10382	    2AC9  34ECr				 DW  L72E1		 ; no condition
1 10383	    2ACB  29				 DB 29H			 ; error 41: Unknown identifier	or syntax error
1 10384
1 10385	    2ACC			 L69F2:	 ; parses an integer constant
1 10386	    2ACC  3E 0A				 DB 3eh,0AH
1 10387	    2ACE  32				 DB 32h
1 10388	    2ACF  2036r				 DW DEF_TYPE		 ; default type	= INTEGER
1 10389	    2AD1  CD				 DB 0cdh
1 10390	    2AD2  2AC4r				 DW  L69EA		 ; parse a constant of any type
1 10391									 ; error if not	found
1 10392	    2AD4  78				 DB 78h
1 10393	    2AD5  FE 0A				 DB 0feh, 00AH
1 10394	    2AD7  C8				 DB 0c8h
1 10395
1 10396	    2AD8  CD				 DB 0cdh
1 10397	    2AD9  34ECr				 DW  L72E1		 ; no condition
1 10398	    2ADB  16				 DB 16H			 ; error 22: Integer constant expected
1 10399
1 10400	    2ADC			 L69FD:	 ; parses a string constant
1 10401						 ; out:	 B = 8,	character constant will	be casted to string constant
1 10402						 ;	 C = length of string constant
1 10403	    2ADC  CD				 DB 0cdh
1 10404	    2ADD  2AC4r				 DW  L69EA		 ; parse a constant of any type
1 10405									 ; error if not	found
1 10406	    2ADF  78				 DB 78h
1 10407	    2AE0  FE 08				 DB 0feh, 8			 ; STRING constant ?
1 10408	    2AE2  C8				 DB 0c8h		 ; return if STRING constant
1 10409
1 10410	    2AE3  FE 0C				 DB 0feh, 00CH			 ; CHAR	constant ?
1 10411
1 10412	    2AE5  CD				 DB 0cdh
1 10413	    2AE6  34E5r				 DW  L72DA		 ; NonZero --> error
1 10414	    2AE8  20				 DB 20H			 ; error 32: String constant expected
1 10415
1 10416	    2AE9  06 08				 DB 06h,8			 ; return as STRING constant
1 10417	    2AEB  C9				 DB 0c9h
1 10418
1 10419	    2AEC			 L6A0D:	 ; parses a constant of	any type
1 10420	    2AEC  CD				 DB 0cdh
1 10421	    2AED  2B1Fr				 DW  L6A39		 ; get current sign, E = 0 if no sign
1 10422	    2AEF  D5				 DB 0d5h
1 10423
1 10424	    2AF0  CD				 DB 0cdh
1 10425	    2AF1  2B47r				 DW  L6A5C		 ; unsigned-constant
1 10426									 ; parse constant or constant identifier
1 10427	    2AF3  D1				 DB 0d1h
1 10428	    2AF4  28 08				 DB 28h,(L6A1F)-$-1		 ; jump	to negate constant if the sign = '-'
1 10429
1 10430	    2AF6  1C				 DB 1ch			 ; sign	before constant	?
1 10431	    2AF7  1D				 DB 1dh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 184
msx_asm\tur_comp.ASM



1 10432
1 10433	    2AF8  CD				 DB 0cdh
1 10434	    2AF9  34E5r				 DW  L72DA		 ; NonZero --> error
1 10435	    2AFB  19				 DB 19H			 ; error 25: Integer or	real constant expected
1 10436
1 10437	    2AFC  1D				 DB 1dh			 ; return E = 255
1 10438	    2AFD  C9				 DB 0c9h
1 10439
1 10440	    2AFE			 L6A1F:	 ; negates the REAL, LONGINT or	INTEGER	constant if there is a '-' sign	?
1 10441	    2AFE  CD				 DB 0cdh
1 10442	    2AFF  2B30r				 DW  L6A4A		 ; sign	= '-' ?
1 10443	    2B01  C8				 DB 0c8h		 ; return if no	minus sign
1 10444
1 10445	    2B02  78				 DB 78h
1 10446	    2B03  FE 09				 DB 0feh, 9			 ; type	= REAL ?
1 10447	    2B05  20 08				 DB 20h,(L6A1F1)-$-1		 ; jump	if not
1 10448
1 10449						 ; negate REAL constant	internally
1 10450	    2B07  D9				 DB 0d9h
1 10451	    2B08  78				 DB 78h
1 10452	    2B09  EE 80				 DB 0eeh, 080H
1 10453	    2B0B  47				 DB 47h
1 10454	    2B0C  D9				 DB 0d9h
1 10455	    2B0D  AF				 DB 0afh
1 10456	    2B0E  C9				 DB 0c9h
1 10457
1 10458	    2B0F  FE 0A			 L6A1F1: DB 0feh, 0AH			 ; type	= INTEGER ?
1 10459	    2B11  20 05				 DB 20h,(L6A31)-$-1		 ; jump	if not
1 10460
1 10461	    2B13  CD			 L6A30:	 DB 0cdh
1 10462	    2B14  0000e				 DW  L0783		 ; negate INTEGER constant internally
1 10463	    2B16  AF				 DB 0afh
1 10464	    2B17  C9				 DB 0c9h
1 10465
1 10466	    2B18			 L6A31:	 ; negate LONGINT constant internally
1 10467	    2B18  D9				 DB 0d9h
1 10468	    2B19  CD				 DB 0cdh
1 10469	    2B1A  0000e				 DW  L_NEG
1 10470	    2B1C  D9				 DB 0d9h
1 10471	    2B1D  AF				 DB 0afh
1 10472	    2B1E  C9				 DB 0c9h
1 10473
1 10474	    2B1F			 L6A39:	 ; SYNTAX: sign	::= + |	-
1 10475						 ; in:	 IX = current text pointer
1 10476						 ; out:	 E = 255, if current character	= '-'
1 10477						 ;	 E =   0, if current character != '+', no sign
1 10478						 ;	 E =   1, if current character	= '+'
1 10479	    2B1F  1E FF				 DB 1eh,0FFH
1 10480	    2B21  DD 7E	00			 DB 0ddh,7eh,+0
1 10481	    2B24  FE 2D				 DB 0feh, '-'			  ; '-'	?
1 10482	    2B26  28 05				 DB 28h,(L6A47)-$-1		 ; next	non-blank if '-' found
1 10483
1 10484	    2B28  1C				 DB 1ch			 ; E = 0
1 10485	    2B29  FE 2B				 DB 0feh, '+'			  ; '+'	?
1 10486	    2B2B  C0				 DB 0c0h		 ; quit	if no '-' nor '+'
1 10487
1 10488	    2B2C  1C				 DB 1ch			 ; E = 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 185
msx_asm\tur_comp.ASM



1 10489	    2B2D  C3			 L6A47:	 DB 0c3h
1 10490	    2B2E  31FAr				 DW  L6F92		 ; to next non-blank
1 10491
1 10492	    2B30			 L6A4A:	 ; in:	 E = sign, 255 = '-', 0	= no sign, 1 = '+'
1 10493						 ;	 B = type
1 10494	    2B30  1C				 DB 1ch
1 10495	    2B31  1D				 DB 1dh
1 10496	    2B32  C8				 DB 0c8h		 ; return if no	sign
1 10497	    2B33  78				 DB 78h
1 10498	    2B34  FE 0A				 DB 0feh, 00AH			 ; type	= INTEGER ?
1 10499	    2B36  28 08				 DB 28h,(L6A56)-$-1
1 10500
1 10501	    2B38  FE 09				 DB 0feh, 9			 ; type	= REAL ?
1 10502	    2B3A  28 04				 DB 28h,(L6A56)-$-1
1 10503
1 10504	    2B3C  FE 0E				 DB 0feh, 0EH			 ; type	= LONGINT ?
1 10505	    2B3E  20 02				 DB 20h,(L6A58)-$-1		 ; jump	if error
1 10506
1 10507	    2B40  1D			 L6A56:	 DB 1dh			 ; return NZ if	sign = '-'
1 10508	    2B41  C9				 DB 0c9h
1 10509
1 10510	    2B42  CD			 L6A58:	 DB 0cdh
1 10511	    2B43  34ECr				 DW  L72E1		 ; no condition
1 10512	    2B45  19				 DB 19H			 ; error 25: Integer, longint or real constant expected
1 10513
1 10514	    2B46			 L6A5C_SIGN:
1 10515	    2B46  00				 DB 0
1 10516
1 10517	    2B47			 L6A5C:	 ; SYNTAX: unsigned-constant ::= unsigned-number | string |
1 10518						 ;			      constant-identifier
1 10519						 ; in:	 IX = current text pointer
1 10520						 ;	 E = sign (0 = no sign,	255 = minus, 1 = plus)
1 10521						 ; out:	 B = 08h, type = string, C = length, L7A57 filled with value
1 10522						 ;	 B = 0Ch, type = char,	 C = 1,	HL character value
1 10523						 ;	 B = 09h, type = real,	 HLDEBC' = real	value
1 10524						 ;	 B = 0Ah, type = integer, HL = integer value
1 10525						 ;	 E = 0Eh, type = longint, DEHL'	= longint value
1 10526						 ;	 Z-flag	= 1, succeeded
1 10527						 ;	 Z-flag	= 0, not a constant nor	a constant variable identifier
1 10528	    2B47  7B				 DB 7bh
1 10529	    2B48  32				 DB 32h
1 10530	    2B49  2B46r				 DW L6A5C_SIGN
1 10531	    2B4B  CD				 DB 0cdh
1 10532	    2B4C  2B90r				 DW  L6A99		 ; check for an	unsigned-constant | string
1 10533	    2B4E  C8				 DB 0c8h		 ; return if a constant	found
1 10534
1 10535	    2B4F  01				 DB 01h
1 10536	    2B50  0200				 DW 200H	 ; constant identifier ?
1 10537	    2B52  CD				 DB 0cdh
1 10538	    2B53  30BCr				 DW  L6E54		 ; check if current in id list
1 10539									 ; HL =	address	of info
1 10540	    2B55  C0				 DB 0c0h		 ; return if not in id list
1 10541
1 10542	    2B56  46				 DB 46h		 ; B = type of constant	name
1 10543	    2B57  78				 DB 78h
1 10544	    2B58  2B				 DB 2bh
1 10545
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 186
msx_asm\tur_comp.ASM



1 10546	    2B59  FE 0E				 DB 0feh, 00EH			 ; type	= LONGINT ?
1 10547	    2B5B  28 1F				 DB 28h,(L6A741)-$-1		 ; jump	if type	= LONGINT
1 10548
1 10549	    2B5D  FE 0A				 DB 0feh, 00AH			 ; not an INTEGER, BYTE, CHAR nor BOOLEAN
1 10550	    2B5F  38 06				 DB 38h,(L6A74)-$-1		 ; jump	if type	< 10
1 10551
1 10552						 ; return INTEGER, BYTE, CHAR or BOOLEAN constant in HL
1 10553	    2B61  56				 DB 56h
1 10554	    2B62  2B				 DB 2bh
1 10555	    2B63  5E				 DB 5eh
1 10556	    2B64  EB				 DB 0ebh
1 10557
1 10558	    2B65  AF				 DB 0afh		 ; return with Zero
1 10559	    2B66  C9				 DB 0c9h
1 10560
1 10561	    2B67  FE 09			 L6A74:	 DB 0feh, 9
1 10562	    2B69  20 14				 DB 20h,(L6A88)-$-1		 ; jump	if type	not REAL
1 10563
1 10564						 ; return REAL value in	HLDEBC'
1 10565	    2B6B  C5				 DB 0c5h
1 10566
1 10567	    2B6C  46				 DB 46h
1 10568	    2B6D  2B				 DB 2bh
1 10569	    2B6E  4E				 DB 4eh
1 10570	    2B6F  2B				 DB 2bh
1 10571
1 10572	    2B70  56			 L6A742: DB 56h
1 10573	    2B71  2B				 DB 2bh
1 10574	    2B72  5E				 DB 5eh
1 10575	    2B73  2B				 DB 2bh
1 10576	    2B74  7E				 DB 7eh
1 10577	    2B75  2B				 DB 2bh
1 10578	    2B76  6E				 DB 6eh
1 10579	    2B77  67				 DB 67h
1 10580	    2B78  D9				 DB 0d9h
1 10581
1 10582	    2B79  AF				 DB 0afh		 ; return with Zero
1 10583	    2B7A  C1				 DB 0c1h
1 10584	    2B7B  C9				 DB 0c9h
1 10585
1 10586	    2B7C			 L6A741: ; return LONGINT constant in DEHL'
1 10587	    2B7C  C5				 DB 0c5h
1 10588	    2B7D  18 F1				 DB 18h,( L6A742)-$-1
1 10589
1 10590	    2B7F  4E			 L6A88:	 DB 4eh		 ; C = length
1 10591	    2B80  11				 DB 11h
1 10592	    2B81  3E11r				 DW L7A57
1 10593	    2B83  C5				 DB 0c5h
1 10594	    2B84  0C				 DB 0ch
1 10595
1 10596	    2B85  0D			 L6A8E:	 DB 0dh
1 10597	    2B86  28 06				 DB 28h,(L6A97)-$-1		 ; jump	and return with	Zero
1 10598
1 10599	    2B88  2B				 DB 2bh
1 10600	    2B89  7E				 DB 7eh
1 10601	    2B8A  12				 DB 12h
1 10602	    2B8B  13				 DB 13h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 187
msx_asm\tur_comp.ASM



1 10603	    2B8C  18 F7				 DB 18h,( L6A8E)-$-1
1 10604
1 10605	    2B8E  C1			 L6A97:	 DB 0c1h
1 10606	    2B8F  C9				 DB 0c9h
1 10607
1 10608	    2B90			 L6A99:	 ; in:	 IX = current text position
1 10609						 ; out:	 B = 08h, type = string, C = length, L7A57 filled with value
1 10610						 ;	 B = 0Ch, type = char,	 C = 1,	HL character value
1 10611						 ;	 B = 09h, type = real,	 HLDEBC' = real	value
1 10612						 ;	 B = 0Ah, type = integer, HL = integer value
1 10613						 ;	 B = 0Eh, type = longint, DE'HL' = longint value
1 10614						 ;	 Z-flag	= 1, succeeded
1 10615	    2B90  DD 7E	00			 DB 0ddh,7eh,+0
1 10616	    2B93  FE 27				 DB 0feh, 27H			 ; ', start of string constant ?
1 10617	    2B95  28 08				 DB 28h,(L6AA8)-$-1		 ; jump	if true
1 10618
1 10619	    2B97  FE 5E				 DB 0feh, '^'			  ; start of CTRL-<character> constant ?
1 10620	    2B99  28 04				 DB 28h,(L6AA8)-$-1		 ; jump	if true
1 10621
1 10622	    2B9B  FE 23				 DB 0feh, '#'			  ; start of #<num> constant ?
1 10623	    2B9D  20 66				 DB 20h,(L6B0E)-$-1		 ; jump	if not string nor character constant
1 10624
1 10625	    2B9F			 L6AA8:	 ; read	multiple <string>, <num> or CTRL-<character> constants
1 10626	    2B9F  21				 DB 21h
1 10627	    2BA0  3E11r				 DW L7A57
1 10628	    2BA2  0E 00				 DB 0eh,0
1 10629	    2BA4  DD 7E	00		 L6AAD:	 DB 0ddh,7eh,+0
1 10630	    2BA7  FE 5E				 DB 0feh, '^'
1 10631	    2BA9  28 26				 DB 28h,(L6AD8)-$-1		 ; jump	for CTRL-<character> constant
1 10632
1 10633	    2BAB  FE 23				 DB 0feh, '#'
1 10634	    2BAD  28 36				 DB 28h,(L6AEE)-$-1		 ; jump	for #<num> constant
1 10635
1 10636	    2BAF  FE 27				 DB 0feh, 27H			 ; ', start of string constant ?
1 10637	    2BB1  20 42				 DB 20h,(L6AFE)-$-1		 ; quit	if none	of these constants
1 10638
1 10639						 ; read	<string> constant
1 10640	    2BB3  DD 23			 L6ABC:	 DB 0ddh,23h
1 10641	    2BB5  DD 7E	00			 DB 0ddh,7eh,+0
1 10642	    2BB8  B7				 DB 0b7h
1 10643
1 10644	    2BB9  28 12				 DB 28h,(L6AD31)-$-1
1 10645					 ;	  CALL L72D4		  ; Zero --> error
1 10646					 ;	  DB 37H		  ; error 55: String constant exceeds line
1 10647
1 10648	    2BBB  FE 27				 DB 0feh, 027H			 ; last	character = ' ?
1 10649	    2BBD  20 09				 DB 20h,(L6AD3)-$-1		 ; jump	and store character if not
1 10650
1 10651	    2BBF  DD 23				 DB 0ddh,23h
1 10652	    2BC1  DD 7E	00			 DB 0ddh,7eh,+0
1 10653	    2BC4  FE 27				 DB 0feh, 027H			 ; two '-characters in a row ?
1 10654	    2BC6  20 DC				 DB 20h,(L6AAD)-$-1		 ; if not, jump	to end string
1 10655
1 10656						 ; store a '-character
1 10657
1 10658	    2BC8  77			 L6AD3:	 DB 77h		 ; store character
1 10659	    2BC9  23				 DB 23h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 188
msx_asm\tur_comp.ASM



1 10660	    2BCA  0C				 DB 0ch			 ; increase string length
1 10661	    2BCB  18 E6				 DB 18h,( L6ABC)-$-1		 ; repeat
1 10662
1 10663	    2BCD  CD			 L6AD31: DB 0cdh
1 10664	    2BCE  34ECr				 DW  L72E1		 ; Zero	--> error
1 10665	    2BD0  37				 DB 37H			 ; error 55: String constant exceeds line
1 10666
1 10667	    2BD1			 L6AD8:	 ; read	CTRL-<character> constant
1 10668	    2BD1  DD 23				 DB 0ddh,23h
1 10669	    2BD3  DD 7E	00			 DB 0ddh,7eh,+0
1 10670	    2BD6  CD				 DB 0cdh
1 10671	    2BD7  0000e				 DW  L04A6		 ; upcase
1 10672	    2BD9  B7				 DB 0b7h
1 10673
1 10674	    2BDA  28 F1				 DB 28h,(L6AD31)-$-1
1 10675					 ;	  CALL L72D4		  ; Zero --> error
1 10676					 ;	  DB 37H		  ; error 55: String constant exceeds line
1 10677
1 10678	    2BDC  EE 40				 DB 0eeh, 040H		 ; ^A =	#1, ^B = #2 etc.
1 10679	    2BDE  DD 23				 DB 0ddh,23h
1 10680
1 10681	    2BE0  77			 L6AE9:	 DB 77h
1 10682	    2BE1  23				 DB 23h
1 10683	    2BE2  0C				 DB 0ch
1 10684	    2BE3  18 BF				 DB 18h,( L6AAD)-$-1		 ; repeat for next string constant
1 10685
1 10686	    2BE5			 L6AEE:	 ; read	#<num> constant
1 10687	    2BE5  DD 23				 DB 0ddh,23h
1 10688	    2BE7  C5				 DB 0c5h
1 10689	    2BE8  E5				 DB 0e5h
1 10690	    2BE9  CD				 DB 0cdh
1 10691	    2BEA  0000e				 DW  L07F7		 ; convert hexadecimal or decimal to HL
1 10692	    2BEC  7D				 DB 7dh
1 10693	    2BED  E1				 DB 0e1h
1 10694	    2BEE  C1				 DB 0c1h
1 10695
1 10696	    2BEF  CD				 DB 0cdh
1 10697	    2BF0  34D3r				 DW  L72C8		 ; carry set --> error
1 10698	    2BF2  38				 DB 38H			 ; error 56: Error in integer constant
1 10699
1 10700	    2BF3  18 EB				 DB 18h,( L6AE9)-$-1
1 10701
1 10702	    2BF5  06 08			 L6AFE:	 DB 06h,8			 ; assume type = STRING
1 10703	    2BF7  79				 DB 79h
1 10704	    2BF8  3D				 DB 3dh
1 10705	    2BF9  20 07				 DB 20h,(L6B0B)-$-1		 ; STRING if length > 1
1 10706
1 10707	    2BFB  67				 DB 67h			 ; H = 0
1 10708	    2BFC  3A				 DB 3ah
1 10709	    2BFD  3E11r				 DW L7A57
1 10710	    2BFF  6F				 DB 6fh			 ; HL =	character
1 10711	    2C00  06 0C				 DB 06h,00CH		 ; type	= CHAR
1 10712
1 10713	    2C02  C3			 L6B0B:	 DB 0c3h
1 10714	    2C03  31FDr				 DW  L6F95		 ; get non-blank
1 10715
1 10716	    2C05  FE 24			 L6B0E:	 DB 0feh, '$'			  ; hexadecimal	constant ?
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 189
msx_asm\tur_comp.ASM



1 10717	    2C07  28 33				 DB 28h,(L6B45)-$-1
1 10718
1 10719	    2C09  CD				 DB 0cdh
1 10720	    2C0A  34ABr				 DW  L7286		 ; carry reset if A = digit
1 10721	    2C0C  30 03			 L6B15:	 DB 30h,(L6B1A)-$-1		 ; jump	for start of REAL or integer
1 10722	    2C0E  AF				 DB 0afh
1 10723	    2C0F  3D				 DB 3dh			 ; return A = 255, and NonZero
1 10724	    2C10  C9				 DB 0c9h
1 10725
1 10726	    2C11  DD E5			 L6B1A:	 DB 0ddh,0e5h
1 10727	    2C13  D1				 DB 0d1h
1 10728	    2C14  13			 L6B1D:	 DB 13h
1 10729	    2C15  1A				 DB 1ah
1 10730	    2C16  CD				 DB 0cdh
1 10731	    2C17  34ABr				 DW  L7286		 ; carry reset if A = digit
1 10732	    2C19  30 F9				 DB 30h,(L6B1D)-$-1		 ; yes,	check next character
1 10733
1 10734	    2C1B  CD				 DB 0cdh
1 10735	    2C1C  0000e				 DW  L04A6		 ; upcase
1 10736	    2C1E  FE 45				 DB 0feh, 'E'			  ; 'E'	from exponent ?
1 10737	    2C20  28 0E				 DB 28h,(L6B39)-$-1		 ; make	REAL conversion	to HLDEBC'
1 10738	    2C22  FE 2E				 DB 0feh, '.'			  ; comma ?
1 10739	    2C24  20 16				 DB 20h,(L6B45)-$-1		 ; make	integer	conversion to HL
1 10740
1 10741	    2C26  13				 DB 13h
1 10742	    2C27  1A				 DB 1ah
1 10743	    2C28  FE 2E				 DB 0feh, '.'			  ; <num>.. ?
1 10744	    2C2A  28 10				 DB 28h,(L6B45)-$-1		 ; make	integer	conversion to HL
1 10745	    2C2C  FE 29				 DB 0feh, ')'			  ; <num>)
1 10746	    2C2E  28 0C				 DB 28h,(L6B45)-$-1		 ; make	integer	conversion to HL
1 10747
1 10748	    2C30			 L6B39:	 ; converts ascii REAL to HLDEBC
1 10749						 ; out:	 HLDEBC' = binary REAL
1 10750						 ;	 B = 9,	type = real
1 10751	    2C30  CD				 DB 0cdh
1 10752	    2C31  0000e				 DW  L11A3		 ; convert ascii REAL to binary	REAL HLDEBC
1 10753
1 10754	    2C33  CD				 DB 0cdh
1 10755	    2C34  34D3r				 DW  L72C8		 ; carry set --> error
1 10756	    2C36  39				 DB 39H			 ; error 57: Error in real constant
1 10757
1 10758	    2C37  D9				 DB 0d9h
1 10759	    2C38  06 09				 DB 06h,9			 ; type	of real
1 10760	    2C3A  18 C6				 DB 18h,( L6B0B)-$-1		 ; to next non-blank
1 10761
1 10762	    2C3C			 L6B45:	 ; converts integer to HL or longint to	DE'HL'
1 10763						 ; out:	 HL = integer value
1 10764						 ;	 B = 0Ah, type = INTEGER
1 10765						 ;	 DE'HL'	= longint value
1 10766						 ;	 B = 0Eh, type = LONGINT
1 10767	    2C3C  CD				 DB 0cdh
1 10768	    2C3D  0000e				 DW  A2L		 ; convert hexadecimal or decimal to DE:HL
1 10769
1 10770	    2C3F  CD				 DB 0cdh
1 10771	    2C40  34D3r				 DW  L72C8		 ; carry set --> error
1 10772	    2C42  38				 DB 38H			 ; error 56: Error in integer constant
1 10773
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 190
msx_asm\tur_comp.ASM



1 10774	    2C43  4F				 DB 4fh			 ; C = 0 if hexadecimal	parsed
1 10775
1 10776	    2C44  3A				 DB 3ah
1 10777	    2C45  2036r				 DW DEF_TYPE
1 10778	    2C47  FE FF				 DB 0feh, 0FFH
1 10779	    2C49  28 44				 DB 28h,(SMART_CONST)-$-1
1 10780
1 10781	    2C4B  FE 0A				 DB 0feh, 0AH
1 10782	    2C4D  28 1F				 DB 28h,(L6B46)-$-1		 ; check on integer
1 10783
1 10784	    2C4F			 SMART_CONST_LONGINT:
1 10785						 ; check on longint
1 10786	    2C4F  0C				 DB 0ch			 ; hexadecimal parsed ?
1 10787	    2C50  0D				 DB 0dh
1 10788	    2C51  28 15				 DB 28h,(L6B451)-$-1		 ; yes,	don't check sign
1 10789
1 10790						 ; DE =	0
1 10791	    2C53  CB 7A				 DB 0cbh,07ah			 ; DE negative ?
1 10792	    2C55  CA				 DB 0cah
1 10793	    2C56  2C68r				 DW L6B451		 ; jump	if not,	OK
1 10794
1 10795	    2C58  3A				 DB 3ah
1 10796	    2C59  2B46r				 DW L6A5C_SIGN
1 10797	    2C5B  3C				 DB 3ch			 ; 255 ?, a minus sign present ?
1 10798	    2C5C  C2				 DB 0c2h
1 10799	    2C5D  1036r				 DW L4AE7		 ; error: constant out of range
1 10800
1 10801	    2C5F  7A				 DB 7ah			 ; long	> MAXLONGINT + 1
1 10802	    2C60  E6 7F				 DB 0e6h, 7FH
1 10803	    2C62  B3				 DB 0b3h
1 10804	    2C63  B4				 DB 0b4h
1 10805	    2C64  B5				 DB 0b5h
1 10806	    2C65  C2				 DB 0c2h
1 10807	    2C66  1036r				 DW L4AE7		 ; error: constant out of range
1 10808
1 10809	    2C68  D9			 L6B451: DB 0d9h		 ; save	in DE'HL'
1 10810	    2C69  06 0E				 DB 06h,0EH
1 10811	    2C6B  C3				 DB 0c3h
1 10812	    2C6C  2C02r				 DW  L6B0B
1 10813
1 10814	    2C6E			 L6B46:	 ; constant must be integer
1 10815	    2C6E  7A				 DB 7ah
1 10816	    2C6F  B3				 DB 0b3h
1 10817	    2C70  C2				 DB 0c2h
1 10818	    2C71  1036r				 DW L4AE7		 ; error: constant out of range
1 10819
1 10820	    2C73			 SMART_CONST_INTEGER:
1 10821	    2C73  0C				 DB 0ch			 ; hexadecimal parsed ?
1 10822	    2C74  0D				 DB 0dh
1 10823	    2C75  28 13				 DB 28h,(L6B461)-$-1		 ; jump	if hexadecimal
1 10824
1 10825	    2C77  CB 7C				 DB 0cbh,07ch			 ; HL >= 0 and HL <= 32767 ?
1 10826	    2C79  CA				 DB 0cah
1 10827	    2C7A  2C8Ar				 DW L6B461		 ; jump	if OK
1 10828
1 10829	    2C7C  3A				 DB 3ah
1 10830	    2C7D  2B46r				 DW L6A5C_SIGN
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 191
msx_asm\tur_comp.ASM



1 10831	    2C7F  3C				 DB 3ch			 ; 255 ?, a minus sign present ?
1 10832	    2C80  C2				 DB 0c2h
1 10833	    2C81  1036r				 DW L4AE7		 ; error: constant out of range
1 10834
1 10835	    2C83  7C				 DB 7ch
1 10836	    2C84  E6 7F				 DB 0e6h, 7FH
1 10837	    2C86  B5				 DB 0b5h
1 10838	    2C87  C2				 DB 0c2h
1 10839	    2C88  1036r				 DW L4AE7		 ; error: constant out of range
1 10840
1 10841	    2C8A  06 0A			 L6B461: DB 06h,0AH		 ; type	integer
1 10842	    2C8C  C3				 DB 0c3h
1 10843	    2C8D  2C02r				 DW  L6B0B		 ; to next non-blank
1 10844
1 10845	    2C8F			 SMART_CONST:
1 10846	    2C8F  7A				 DB 7ah
1 10847	    2C90  B3				 DB 0b3h
1 10848	    2C91  20 BC				 DB 20h,(SMART_CONST_LONGINT)-$-1
1 10849
1 10850	    2C93  0C				 DB 0ch			 ; hexadecimal parsed ?
1 10851	    2C94  0D				 DB 0dh
1 10852	    2C95  28 F3				 DB 28h,(L6B461)-$-1		 ; return type = INTEGER
1 10853
1 10854	    2C97  CB 7C				 DB 0cbh,07ch			 ; HL >= 32768 and HL <= 65535 ?
1 10855	    2C99  28 EF				 DB 28h,(L6B461)-$-1		 ; jump	if within INTEGER positive range
1 10856
1 10857	    2C9B  3A				 DB 3ah
1 10858	    2C9C  2B46r				 DW L6A5C_SIGN
1 10859	    2C9E  3C				 DB 3ch			 ; 255 ?, a minus sign present ?
1 10860	    2C9F  C2				 DB 0c2h
1 10861	    2CA0  2C68r				 DW L6B451		 ; no sign but out of range >> LONGINT
1 10862
1 10863	    2CA2  7C				 DB 7ch
1 10864	    2CA3  E6 7F				 DB 0e6h, 7FH
1 10865	    2CA5  B5				 DB 0b5h
1 10866	    2CA6  CA				 DB 0cah
1 10867	    2CA7  2C8Ar				 DW L6B461		 ; if 8000h then return	type = INTEGER
1 10868
1 10869	    2CA9  C3				 DB 0c3h
1 10870	    2CAA  2C68r				 DW  L6B451		 ; return type = LONGINT
1 10871
1 10872					 ;	  JR NZ,L6B451		  ; INTEGER out	of range >> LONGINT
1 10873					 ;
1 10874					 ;	  JR L6B461		  ; return type	= INTEGER
1 10875
1 10876	    2CAC			 O_CODE: ; in:	 first byte after call-instruction is non-zero length
1 10877						 ;	 followed by 'length' data byte	outputted by 'O_BYTE'
1 10878						 ; changes: HL,	BC unchanged
1 10879	    2CAC  E3				 DB 0e3h
1 10880	    2CAD  C5				 DB 0c5h
1 10881	    2CAE  46				 DB 46h		 ; B = length
1 10882	    2CAF  23			 L6B53:	 DB 23h
1 10883	    2CB0  7E			 L6B54:	 DB 7eh
1 10884	    2CB1  CD				 DB 0cdh
1 10885	    2CB2  2CF8r				 DW  O_BYTE
1 10886	    2CB4  23				 DB 23h
1 10887	    2CB5  10 F9				 DB 10h,( L6B54)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 192
msx_asm\tur_comp.ASM



1 10888	    2CB7  C1				 DB 0c1h
1 10889	    2CB8  E3				 DB 0e3h	 ; jump	to byte	after last data	byte
1 10890	    2CB9  C9				 DB 0c9h
1 10891
1 10892	    2CBA			 L6B5E:	 ; outputs length byte (C) and data at L7A57
1 10893						 ; in:	 C = length of data
1 10894						 ; out:	 C = 0
1 10895						 ;	 Z-flag	= 1
1 10896						 ;	 B = unchanged !
1 10897	    2CBA  79				 DB 79h			 ; output first	'C' bytes from L7A57
1 10898	    2CBB  CD				 DB 0cdh
1 10899	    2CBC  2CF8r				 DW  O_BYTE
1 10900
1 10901	    2CBE  21			 L6B62:	 DB 21h
1 10902	    2CBF  3E11r				 DW L7A57
1 10903	    2CC1  0C				 DB 0ch
1 10904	    2CC2  0D			 L6B66:	 DB 0dh
1 10905	    2CC3  C8				 DB 0c8h
1 10906
1 10907	    2CC4  7E				 DB 7eh
1 10908	    2CC5  23				 DB 23h
1 10909	    2CC6  CD				 DB 0cdh
1 10910	    2CC7  2CF8r				 DW  O_BYTE
1 10911
1 10912	    2CC9  18 F7				 DB 18h,( L6B66)-$-1
1 10913
1 10914	    2CCB  3E E5			 O_PSHHL: DB 3eh,0E5H		  ; out: push hl
1 10915	    2CCD  18 29				 DB 18h,( O_BYTE)-$-1
1 10916
1 10917	    2CCF  3E E1			 O_POPHL: DB 3eh,0E1H		  ; out: pop hl
1 10918	    2CD1  18 25				 DB 18h,( O_BYTE)-$-1
1 10919
1 10920	    2CD3  3E C3			 O_C3:	 DB 3eh,0C3H		 ; out:	'jp' opcode
1 10921	    2CD5  18 21				 DB 18h,( O_BYTE)-$-1
1 10922
1 10923	    2CD7  7B			 O_DE:	 DB 7bh			 ; out:	value of de
1 10924	    2CD8  CD				 DB 0cdh
1 10925	    2CD9  2CF8r				 DW  O_BYTE
1 10926	    2CDB  7A				 DB 7ah
1 10927	    2CDC  18 1A				 DB 18h,( O_BYTE)-$-1
1 10928
1 10929	    2CDE  3E C3			 O_JPHL: DB 3eh,0C3H		 ; out:	'jp' opcode + value of hl
1 10930	    2CE0  18 0E				 DB 18h,( O_OPHL)-$-1
1 10931
1 10932	    2CE2  3E CD			 O_CALHL: DB 3eh,0CDH		       ; out: 'call' opcode + value of hl
1 10933	    2CE4  18 0A				 DB 18h,( O_OPHL)-$-1
1 10934
1 10935	    2CE6  3E 01			 O_LDBC: DB 3eh,1			 ; out:	'ld bc,' opcode	+ value	of hl
1 10936	    2CE8  18 06				 DB 18h,( O_OPHL)-$-1
1 10937
1 10938	    2CEA  3E 11			 O_LDDE: DB 3eh,11H		 ; out:	'ld de,' opcode	+ value	of hl
1 10939	    2CEC  18 02				 DB 18h,( O_OPHL)-$-1
1 10940
1 10941	    2CEE  3E 21			 O_LDHL: DB 3eh,21H		 ; out:	'ld hl,' opcode	+ value	of hl
1 10942
1 10943	    2CF0  CD			 O_OPHL: DB 0cdh
1 10944	    2CF1  2CF8r				 DW  O_BYTE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 193
msx_asm\tur_comp.ASM



1 10945
1 10946	    2CF3  7D			 O_HL:	 DB 7dh			 ; out:	value of hl
1 10947	    2CF4  CD				 DB 0cdh
1 10948	    2CF5  2CF8r				 DW  O_BYTE
1 10949	    2CF7  7C				 DB 7ch
1 10950
1 10951	    2CF8			 O_BYTE:			 ; out:	value of a
1 10952	    2CF8  C5				 DB 0c5h
1 10953	    2CF9  47				 DB 47h
1 10954	    2CFA  3A				 DB 3ah
1 10955	    2CFB  3913r				 DW L7900		 ; 0 = compile to memory
1 10956									 ; 1 = code generation to disk
1 10957									 ; 2 = search address
1 10958
1 10959					 ;	  OR A
1 10960					 ;	  JR NZ,L6BA7		  ; jump if not	compiling to memory
1 10961					 ;
1 10962					 ;	  LD (IY+0),B
1 10963					 ;
1 10964					 ;L6BA7:
1 10965	    2CFD  FD 23				 DB 0fdh,23h
1 10966					 ;	  OR A
1 10967					 ;	  JR Z,L6BC6		  ; jump if compiling to memory
1 10968
1 10969	    2CFF  E5				 DB 0e5h
1 10970	    2D00  D5				 DB 0d5h
1 10971
1 10972	    2D01  3D				 DB 3dh			 ; A = 1 ?
1 10973	    2D02  28 10				 DB 28h,(L6BC1)-$-1		 ; jump	if compiling to	disk
1 10974
1 10975	    2D04  FD E5				 DB 0fdh,0e5h
1 10976	    2D06  D1				 DB 0d1h
1 10977	    2D07  1B				 DB 1bh
1 10978	    2D08  2A				 DB 02ah
1 10979	    2D09  0000e				 DW L00CE
1 10980	    2D0B  B7				 DB 0b7h
1 10981	    2D0C  ED 52				 DB 0EDH,052h
1 10982
1 10983	    2D0E  CD				 DB 0cdh
1 10984	    2D0F  34DFr				 DW  L72D4		 ; Zero	--> error
1 10985	    2D11  C8				 DB 0C8H		 ; error 200: run-time error address found
1 10986
1 10987	    2D12  18 03				 DB 18h,( L6BC4)-$-1
1 10988
1 10989	    2D14  CD			 L6BC1:	 DB 0cdh
1 10990	    2D15  2D48r				 DW  L6C02		 ; write B in record to	update
1 10991
1 10992	    2D17  D1			 L6BC4:	 DB 0d1h
1 10993	    2D18  E1				 DB 0e1h
1 10994	    2D19  C1			 L6BC6:	 DB 0c1h
1 10995
1 10996	    2D1A			 L6BC7:	 ; check compiler/memory overflow
1 10997						 ; in:	 -
1 10998						 ; out:	 -
1 10999	    2D1A  E5				 DB 0e5h
1 11000	    2D1B  D5				 DB 0d5h
1 11001
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 194
msx_asm\tur_comp.ASM



1 11002	    2D1C  ED 5B				 DB 0edh,5bh
1 11003	    2D1E  3F96r				 DW L7BE1		 ; start of free area +	1024
1 11004
1 11005						 ; DE =	lowest address that is still free
1 11006
1 11007	    2D20  53ED 2D3Cr			 DW 53edh,COMPCUR		 ; current compiler address
1 11008	    2D24  2A				 DB 02ah
1 11009	    2D25  3F2Dr				 DW L7B73		 ; top of variable table
1 11010	    2D27  25				 DB 25h			 ; 256 bytes tolerance
1 11011	    2D28  37				 DB 37h
1 11012	    2D29  ED 52				 DB 0EDH,052h
1 11013	    2D2B  38 17				 DB 38h,(ERR63)-$-1
1 11014
1 11015					 ;	  CALL L72C8		  ; carry set --> error
1 11016					 ;	  DB 63H		  ; error 99: Compiler overflow
1 11017
1 11018	    2D2D  FD E5				 DB 0fdh,0e5h
1 11019	    2D2F  D1				 DB 0d1h		 ; DE =	destination address for	code
1 11020
1 11021	    2D30  2A				 DB 02ah
1 11022	    2D31  391Br				 DW L7908		 ; HL =	data start address
1 11023	    2D33  25				 DB 25h			 ; minus 512 bytes tolerance
1 11024	    2D34  25				 DB 25h
1 11025	    2D35  ED 52				 DB 0EDH,052h
1 11026
1 11027	    2D37  38 07				 DB 38h,(ERR62)-$-1
1 11028
1 11029	    2D39  D1				 DB 0d1h
1 11030	    2D3A  E1				 DB 0e1h
1 11031	    2D3B  C9				 DB 0c9h
1 11032
1 11033						 ; these are used for printing more info during	compilation about
1 11034						 ; the amount of free compiler memory and free space for code
1 11035	    2D3C  0000			 COMPCUR: DW 0
1 11036	    2D3E  0000			 EMCUR:	 DW 0
1 11037
1 11038
1 11039	    2D40  CD			 ERR62:	 DB 0cdh
1 11040	    2D41  34ECr				 DW  L72E1		 ; no condition
1 11041	    2D43  62				 DB 62H			 ; error 98: Memory overflow
1 11042
1 11043	    2D44  CD			 ERR63:	 DB 0cdh
1 11044	    2D45  34ECr				 DW  L72E1		 ; no condition
1 11045	    2D47  63				 DB 63H			 ; error 99: Compiler overflow
1 11046
1 11047
1 11048	    2D48			 L6C02:	 ; With	this routine a previous	written	block can be updated.
1 11049						 ; Used	by FORWARD ?
1 11050						 ; in:	 B = data byte to write	in 128 byte buffer L7957
1 11051						 ;
1 11052	    2D48  21				 DB 21h
1 11053	    2D49  3F91r				 DW L7BDB
1 11054	    2D4B  CB CE				 DB 0cbh,0ceh		 ; block is dirty
1 11055
1 11056	    2D4D  CB 46				 DB 0cbh,046h		 ; already read	?
1 11057	    2D4F  28 07				 DB 28h,(L6C12)-$-1		 ; jump	if block already read
1 11058
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 195
msx_asm\tur_comp.ASM



1 11059	    2D51  CB 86				 DB 0cbh,086h		 ; make	already	read
1 11060
1 11061	    2D53  C5				 DB 0c5h
1 11062	    2D54  CD				  DB 0cdh
1 11063	    2D55  2E70r				 DW  L6CF9		   ; read record to update in buffer L7957
1 11064	    2D57  C1				 DB 0c1h
1 11065
1 11066
1 11067	    2D58			 L6C12:	 ; in:	 B = data byte to write	in 128 byte buffer L7957
1 11068						 ; out:	 L7BDC increased to next byte in block
1 11069						 ;	 reset if 0 if it became equal to block	size
1 11070
1 11071						  ; CodeFileBufferPos
1 11072					 ;	   LD A,(L7BDC)		      ;	A = index to 128 byte buffer
1 11073					 ;	   LD E,A
1 11074					 ;	   LD D,0
1 11075					 ;	   LD HL,L7957		      ;	start of block buffer
1 11076	    2D58  ED 5B				  DB 0edh,5bh
1 11077	    2D5A  398Er				 DW CODEFILEBUFFERPOS
1 11078	    2D5C  21				  DB 21h
1 11079	    2D5D  3990r				 DW CODEFILEBUFFER
1 11080	    2D5F  19				 DB 019h
1 11081
1 11082	    2D60  70				  DB 70h		  ; write data byte to buffer
1 11083
1 11084					 ;	   INC A
1 11085					 ;	   JP P,L6C2C		      ;	jump if	index <= 127
1 11086
1 11087	    2D61  13				  DB 13h
1 11088	    2D62  CB 52				  DB 0cbh,052h			  ; test tenth bit, equals 1024	?
1 11089	    2D64  CA				  DB 0cah
1 11090	    2D65  2D88r				 DW L6C2C		  ; jump if < 1024
1 11091
1 11092	    2D67  CD				  DB 0cdh
1 11093	    2D68  2E96r				 DW  L6CFD		   ; write to file
1 11094
1 11095	    2D6A  E5				  DB 0e5h
1 11096	    2D6B  2A				  DB 02ah
1 11097	    2D6C  3962r				 DW CODEFILEPOS
1 11098	    2D6E  2E 00				  DB 2eh,0
1 11099	    2D70  7C				  DB 7ch
1 11100	    2D71  E6 FC				  DB 0e6h, 0FCH
1 11101	    2D73  67				  DB 67h
1 11102					 ;	   LD A,L
1 11103					 ;	   AND 80H		      ;	CodeFileBufferSize
1 11104					 ;	   LD L,A
1 11105
1 11106					 ;	   LD DE,128		      ;	CodeFileBufferSize
1 11107	    2D74  11				  DB 11h
1 11108	    2D75  0400				 DW CODEFILEBUFFERSIZE
1 11109	    2D77  19				  DB 019h
1 11110	    2D78  22				  DB 22h
1 11111	    2D79  3962r				 DW CODEFILEPOS
1 11112	    2D7B  E1				  DB 0e1h
1 11113
1 11114	    2D7C  30 07				  DB 30h,(L6C2B)-$-1
1 11115
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 196
msx_asm\tur_comp.ASM



1 11116	    2D7E  2A				  DB 02ah
1 11117	    2D7F  3964r				 DW CODEFILEPOS+2
1 11118	    2D81  23				  DB 23h
1 11119	    2D82  22				  DB 22h
1 11120	    2D83  3964r				 DW CODEFILEPOS+2
1 11121
1 11122	    2D85			 L6C2B:
1 11123					 ;	   LD HL,(L7954)	      ;	increase file block count
1 11124					 ;	   INC HL		      ;	because	RANDOM READ/WRITE don't	update
1 11125					 ;	   LD (L7954),HL	      ;	the block count
1 11126
1 11127					 ;	   XOR A		      ;	start all over with index = 0
1 11128	    2D85  11				  DB 11h
1 11129	    2D86  0000				 DW 0			 ; start over at byte 0	of buffer
1 11130
1 11131	    2D88			 L6C2C:
1 11132	    2D88  53ED 398Er			  DW 53edh,CODEFILEBUFFERPOS
1 11133					 ;	   LD (L7BDC),A		      ;	save for next byte
1 11134	    2D8C  C9				 DB 0c9h
1 11135
1 11136	    2D8D			 L6C30:	 ;
1 11137						 ; in:	 DE = number of	data bytes to allocate
1 11138						 ; out:	 -
1 11139	    2D8D  2A				 DB 02ah
1 11140	    2D8E  391Br				 DW L7908		 ; HL =	data start address
1 11141	    2D90  B7				 DB 0b7h
1 11142	    2D91  ED 52				 DB 0EDH,052h		 ; carry set if	(L7908)	< DE
1 11143
1 11144	    2D93  CD				 DB 0cdh
1 11145	    2D94  34D3r				 DW  L72C8		 ; carry set --> error
1 11146	    2D96  62				 DB 62H			 ; error 98: Memory overflow
1 11147
1 11148	    2D97  22				 DB 22h
1 11149	    2D98  391Br				 DW L7908		 ; set new data	start address
1 11150	    2D9A  C3				  DB 0c3h
1 11151	    2D9B  2D1Ar				 DW  L6BC7		     ; check compiler, memory overflow
1 11152
1 11153	    2D9D			 L6C3F:	  ; update address at HL with current address in IY
1 11154						  ; in:	   HL =	address	to update
1 11155	    2D9D  FD E5				  DB 0fdh,0e5h
1 11156	    2D9F  D1				 DB 0d1h
1 11157
1 11158	    2DA0			 L6C42:	  ; in:	   HL =	address	to update
1 11159						 ;	 DE = data to update address HL	with
1 11160	    2DA0  3A				 DB 3ah
1 11161	    2DA1  3913r				 DW L7900
1 11162	    2DA3  3D				 DB 3dh
1 11163	    2DA4  28 0B				 DB 28h,(L6C53)-$-1		 ; jump	if compiling to	disk
1 11164
1 11165						 ; update directly in RAM
1 11166	    2DA6  FD E5				 DB 0fdh,0e5h			 ; save	old code address
1 11167
1 11168	    2DA8  E5				 DB 0e5h
1 11169	    2DA9  FD E1				 DB 0fdh,0e1h			 ; set destination address for data
1 11170	    2DAB  CD				 DB 0cdh
1 11171	    2DAC  2CD7r				 DW  O_DE		 ; update data
1 11172
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 197
msx_asm\tur_comp.ASM



1 11173	    2DAE  FD E1				 DB 0fdh,0e1h			 ; restore code	address
1 11174	    2DB0  C9				 DB 0c9h
1 11175
1 11176	    2DB1  C5			 L6C53:	 DB 0c5h
1 11177	    2DB2  D5				 DB 0d5h		 ; save	update data
1 11178	    2DB3  E5				 DB 0e5h		 ; save	address	to update
1 11179
1 11180	    2DB4  2A				 DB 02ah
1 11181	    2DB5  3F94r				 DW L7BDF		 ; start address of update table
1 11182
1 11183	    2DB7  3A				 DB 3ah
1 11184	    2DB8  3F98r				 DW L7BE3
1 11185	    2DBA  47				 DB 47h			 ; B = number of update	entries	in table
1 11186	    2DBB  04				 DB 04h
1 11187
1 11188						 ; insert an entry in the update table
1 11189						 ; table is sorted from	high to	low
1 11190						 ; 7FFFH, 7865H, 7600H,	75FEH etc.
1 11191	    2DBC  05			 L6C5E:	 DB 05h
1 11192	    2DBD  28 23				 DB 28h,(L6C84)-$-1		 ; jump	if end of table	reached
1 11193
1 11194	    2DBF  5E				 DB 5eh
1 11195	    2DC0  23				 DB 23h
1 11196	    2DC1  56				 DB 56h
1 11197
1 11198	    2DC2  E3				  DB 0e3h		  ; push update	table pointer
1 11199									 ; pop address to update in HL
1 11200	    2DC3  B7				 DB 0b7h
1 11201	    2DC4  ED 52				 DB 0EDH,052h		 ; update address - DE
1 11202	    2DC6  19				 DB 019h
1 11203
1 11204	    2DC7  E3				  DB 0e3h		  ; pop	update table pointer
1 11205									 ; push	address	to update
1 11206
1 11207	    2DC8  38 05				 DB 38h,(L6C71)-$-1		 ; jump	if update address < DE
1 11208									 ; in range
1 11209
1 11210	    2DCA  23				 DB 23h			 ; next	entry in update	table
1 11211	    2DCB  23				 DB 23h
1 11212	    2DCC  23				 DB 23h
1 11213	    2DCD  18 ED				 DB 18h,( L6C5E)-$-1
1 11214
1 11215	    2DCF			 L6C71:	 ; DE =	address	read from update table
1 11216	    2DCF  2B				 DB 2bh
1 11217
1 11218	    2DD0  EB				 DB 0ebh		 ; DE =	pointer	to first byte of entry
1 11219									 ; in update table
1 11220	    2DD1  68				 DB 68h
1 11221	    2DD2  26 00				 DB 26h,0
1 11222	    2DD4  29				 DB 029h	 ; HL =	4 * entries left in update table
1 11223	    2DD5  29				 DB 029h
1 11224	    2DD6  44				 DB 44h			 ; BC =	size of	entries	left
1 11225	    2DD7  4D				 DB 4dh
1 11226	    2DD8  19				 DB 019h
1 11227	    2DD9  54				 DB 54h
1 11228	    2DDA  5D				 DB 5dh
1 11229	    2DDB  2B				 DB 2bh			 ; HL =	address	last byte of lastused entry
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 198
msx_asm\tur_comp.ASM



1 11230
1 11231	    2DDC  13				 DB 13h
1 11232	    2DDD  13				 DB 13h
1 11233	    2DDE  13				 DB 13h			 ; DE =
1 11234	    2DDF  ED B8				 DB 0edh,0b8h
1 11235
1 11236	    2DE1  23				 DB 23h
1 11237						 ; HL =	address	of new free inserted entry
1 11238
1 11239	    2DE2  D1			 L6C84:	  DB 0d1h		      ;	pop address to update
1 11240	    2DE3  73				 DB 73h
1 11241	    2DE4  23				 DB 23h
1 11242	    2DE5  72				 DB 72h
1 11243	    2DE6  23				 DB 23h
1 11244	    2DE7  D1				  DB 0d1h		      ;	pop update data
1 11245	    2DE8  73				 DB 73h
1 11246	    2DE9  23				 DB 23h
1 11247	    2DEA  72				 DB 72h
1 11248	    2DEB  C1				 DB 0c1h
1 11249	    2DEC  21				 DB 21h
1 11250	    2DED  3F98r				 DW L7BE3		 ; increase number to update ?
1 11251	    2DEF  34				 DB 034h
1 11252	    2DF0  C0				 DB 0c0h
1 11253
1 11254	    2DF1  AF				 DB 0afh		 ; write 256 updates
1 11255	    2DF2  18 05				 DB 18h,( L6C9B)-$-1
1 11256
1 11257	    2DF4  3A			 L6C96:	 DB 3ah
1 11258	    2DF5  3F98r				 DW L7BE3
1 11259	    2DF7  B7				 DB 0b7h
1 11260	    2DF8  C8				 DB 0c8h		 ; return if no	updates
1 11261
1 11262	    2DF9  C5			 L6C9B:	 DB 0c5h
1 11263	    2DFA  D5				 DB 0d5h
1 11264	    2DFB  FD E5				 DB 0fdh,0e5h
1 11265	    2DFD  47				 DB 47h
1 11266	    2DFE  2A				 DB 02ah
1 11267	    2DFF  3F94r				 DW L7BDF
1 11268
1 11269	    2E01  C5			 L6CA3:	 DB 0c5h		 ; save	number of updates left
1 11270
1 11271	    2E02  5E				 DB 5eh
1 11272	    2E03  23				 DB 23h
1 11273	    2E04  56				 DB 56h
1 11274	    2E05  23				 DB 23h
1 11275
1 11276	    2E06  E5				 DB 0e5h
1 11277	    2E07  EB				 DB 0ebh
1 11278	    2E08  CD				 DB 0cdh
1 11279	    2E09  2E20r				 DW  L6CC2
1 11280	    2E0B  E1				 DB 0e1h
1 11281
1 11282	    2E0C  46				 DB 46h
1 11283	    2E0D  23				 DB 23h
1 11284
1 11285	    2E0E  E5				 DB 0e5h
1 11286	    2E0F  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 199
msx_asm\tur_comp.ASM



1 11287	    2E10  2D48r				 DW  L6C02		 ; write B in record to	update
1 11288	    2E12  E1				 DB 0e1h
1 11289
1 11290	    2E13  46				 DB 46h
1 11291	    2E14  23				 DB 23h
1 11292	    2E15  E5				 DB 0e5h
1 11293
1 11294	    2E16  CD				  DB 0cdh
1 11295	    2E17  2D48r				 DW  L6C02		   ; write B in	record to update
1 11296
1 11297	    2E19  E1				  DB 0e1h
1 11298
1 11299	    2E1A  C1				 DB 0c1h		 ; B = number of updates left
1 11300	    2E1B  10 E4				 DB 10h,( L6CA3)-$-1
1 11301
1 11302	    2E1D  E1				 DB 0e1h
1 11303	    2E1E  D1				 DB 0d1h
1 11304	    2E1F  C1				 DB 0c1h
1 11305
1 11306	    2E20			 L6CC2:	  ; in:	   HL =	addres to update
1 11307						 ; out:	 IY = HL
1 11308						 ; unchanged: BC, DE
1 11309	    2E20  E5				 DB 0e5h
1 11310	    2E21  FD E1				 DB 0fdh,0e1h			 ; init	IY with	code address
1 11311
1 11312	    2E23  3A				 DB 3ah
1 11313	    2E24  3913r				 DW L7900
1 11314	    2E26  3D				 DB 3dh
1 11315	    2E27  C0				 DB 0c0h		 ; return if searching
1 11316
1 11317	    2E28  D5				 DB 0d5h
1 11318	    2E29  C5				 DB 0c5h
1 11319
1 11320						 ; calculate from current address in HL	the
1 11321						 ; block position and
1 11322						 ; relative block number
1 11323	    2E2A  ED 5B				 DB 0edh,5bh
1 11324	    2E2C  3915r				 DW L7902
1 11325	    2E2E  B7				 DB 0b7h
1 11326	    2E2F  ED 52				 DB 0EDH,052h		 ; HL =	relative address to start of code
1 11327
1 11328					 ;	   LD A,L
1 11329					 ;	   AND 07FH
1 11330					 ;	   LD (L7BDC),A		      ;	set position within block
1 11331
1 11332					 ;	   LD A,L
1 11333					 ;	   AND 80H
1 11334					 ;	   LD L,A
1 11335
1 11336	    2E31  ED 5B				  DB 0edh,5bh
1 11337	    2E33  3966r				 DW CODEFILESTART
1 11338	    2E35  19				  DB 019h
1 11339
1 11340	    2E36  ED 5B				  DB 0edh,5bh
1 11341	    2E38  3968r				 DW CODEFILESTART+2
1 11342	    2E3A  30 01				  DB 30h,(L6CC3)-$-1
1 11343
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 200
msx_asm\tur_comp.ASM



1 11344	    2E3C  13				  DB 13h
1 11345	    2E3D			 L6CC3:
1 11346
1 11347					 ;	   LD A,L
1 11348					 ;	   AND 07FH
1 11349					 ;	   LD (L7BDC),A		      ;	set position within block
1 11350	    2E3D  7D				  DB 7dh
1 11351	    2E3E  32				  DB 32h
1 11352	    2E3F  398Er				 DW CODEFILEBUFFERPOS
1 11353	    2E41  7C				  DB 7ch
1 11354	    2E42  E6 03				  DB 0e6h, 3
1 11355	    2E44  32				  DB 32h
1 11356	    2E45  398Fr				 DW CODEFILEBUFFERPOS+1	; mask for CodeFileBufferSize =	1024
1 11357
1 11358					 ;	   LD A,L
1 11359					 ;	   AND 80H
1 11360					 ;	   LD C,A
1 11361
1 11362					 ;	   ADD HL,HL
1 11363					 ;	   LD L,H
1 11364					 ;	   RLA
1 11365					 ;	   AND 1
1 11366					 ;	   LD H,A		      ;	HL = relative block number
1 11367					 ;
1 11368					 ;	   LD DE,(L7BDD)	      ;	DE = first block of current part
1 11369					 ;	   ADD HL,DE
1 11370
1 11371					 ;	   LD A,(CodeFilePos)
1 11372					 ;	   AND 80H
1 11373					 ;	   CP C
1 11374					 ;	   JR NZ,L6CC4
1 11375
1 11376	    2E47  7C				  DB 7ch
1 11377	    2E48  E6 FC				  DB 0e6h, 0FCH			  ; mask for CodeFileBufferSize	= 1024
1 11378	    2E4A  4F				  DB 4fh
1 11379
1 11380	    2E4B  3A				  DB 3ah
1 11381	    2E4C  3963r				 DW CODEFILEPOS+1
1 11382	    2E4E  E6 FC				  DB 0e6h, 0FCH			  ; mask for CodeFileBufferSize	= 1024
1 11383	    2E50  B9				  DB 0b9h
1 11384	    2E51  20 0C				  DB 20h,(L6CC4)-$-1
1 11385
1 11386	    2E53  3A				  DB 3ah
1 11387	    2E54  3964r				 DW CODEFILEPOS+2
1 11388	    2E56  BB				  DB 0bbh
1 11389	    2E57  20 06				  DB 20h,(L6CC4)-$-1
1 11390
1 11391	    2E59  3A				  DB 3ah
1 11392	    2E5A  3965r				 DW CODEFILEPOS+3
1 11393	    2E5C  BA				  DB 0bah
1 11394	    2E5D  28 0E				  DB 28h,(L6CF6)-$-1
1 11395
1 11396					 ;	   LD DE,(L7954)	      ;	DE = current block
1 11397					 ;	   OR A
1 11398					 ;	   SBC HL,DE
1 11399					 ;;!	   pushf
1 11400					 ;	   ADD HL,DE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 201
msx_asm\tur_comp.ASM



1 11401					 ;;!	   popf
1 11402					 ;	   JR Z,L6CF6		      ;	jump if	equal to current block
1 11403
1 11404	    2E5F			 L6CC4:
1 11405	    2E5F  D5				  DB 0d5h
1 11406	    2E60  E5				  DB 0e5h
1 11407	    2E61  CD				 DB 0cdh
1 11408	    2E62  2E96r				 DW  L6CFD		 ; write 128 bytes to file
1 11409	    2E64  E1				 DB 0e1h
1 11410	    2E65  D1				  DB 0d1h
1 11411
1 11412	    2E66  22				  DB 22h
1 11413	    2E67  3962r				 DW CODEFILEPOS
1 11414	    2E69  53ED 3964r			  DW 53edh,CODEFILEPOS+2
1 11415					 ;	   LD (L7954),HL
1 11416
1 11417	    2E6D  C1			 L6CF6:	 DB 0c1h
1 11418	    2E6E  D1				 DB 0d1h
1 11419	    2E6F  C9				 DB 0c9h
1 11420
1 11421	    2E70			 L6CF9:	  ; in:	   FCB at L7933	filled in
1 11422						 ; out:	 read 128 bytes	from FCB to buffer at L7957
1 11423						 ; changes: HL,	DE, BC
1 11424						 ; unchanged: IY
1 11425
1 11426	    2E70  FD E5				  DB 0fdh,0e5h
1 11427
1 11428	    2E72  2A				  DB 02ah
1 11429	    2E73  3962r				 DW CODEFILEPOS
1 11430	    2E75  2E 00				  DB 2eh,0
1 11431	    2E77  7C				  DB 7ch
1 11432	    2E78  E6 FC				  DB 0e6h, 0FCH			  ; mask for CodeFileBufferSize	== 1024
1 11433	    2E7A  67				  DB 67h
1 11434					 ;	   LD A,L
1 11435					 ;	   AND 80H		      ;	CodeFileBufferSize
1 11436					 ;	   LD L,A
1 11437	    2E7B  ED 5B				  DB 0edh,5bh
1 11438	    2E7D  3964r				 DW CODEFILEPOS+2
1 11439	    2E7F  01				  DB 01h
1 11440	    2E80  3921r				 DW CODEFILE
1 11441	    2E82  CD				  DB 0cdh
1 11442	    2E83  0000e				 DW  FILESEEK		   ; set to current position
1 11443
1 11444	    2E85  21				  DB 21h
1 11445	    2E86  0400				 DW CODEFILEBUFFERSIZE	 ; read	128 bytes from file
1 11446									     ; CodeFileBufferSize
1 11447	    2E88  11				  DB 11h
1 11448	    2E89  3990r				 DW CODEFILEBUFFER	 ; L7957
1 11449	    2E8B  CD				  DB 0cdh
1 11450	    2E8C  0000e				 DW  READFILE		   ; read from file
1 11451
1 11452	    2E8E  FD E1				  DB 0fdh,0e1h
1 11453
1 11454	    2E90  B7				  DB 0b7h
1 11455	    2E91  C8				  DB 0c8h		       ; quit if no errors
1 11456
1 11457	    2E92  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 202
msx_asm\tur_comp.ASM



1 11458	    2E93  34ECr				 DW  L72E1		 ; no condition
1 11459	    2E95  FA				 DB 0FAH		 ; error 250: Disk or directory	full
1 11460
1 11461					 ;	   LD C,021H		      ;	random record read 128 bytes
1 11462					 ;	   JR L6D09
1 11463
1 11464	    2E96			 L6CFD:
1 11465						 ; in:	 FCB at	L7933 filled in
1 11466						 ; out:	 writes	128 byte buffer	at L7957 to file
1 11467						 ;	 no errors
1 11468						 ; changes: HL,	DE, BC
1 11469						 ; unchanged: IY
1 11470	    2E96  21				 DB 21h
1 11471	    2E97  3F91r				 DW L7BDB
1 11472	    2E99  CB C6				 DB 0cbh,0c6h		 ; 1 = no record read to update
1 11473
1 11474	    2E9B  CB 4E				 DB 0cbh,04eh
1 11475	    2E9D  C8				 DB 0c8h		 ; return if not busy updating
1 11476
1 11477	    2E9E  CB 8E				 DB 0cbh,08eh		 ; 0 = updating	finished
1 11478					 ;	   LD C,022H		      ;	random record write 128	bytes
1 11479
1 11480	    2EA0			 L6D09:	 ; in:	 C = 21H, read
1 11481						 ;	 C = 22H, write
1 11482						 ; unchanged: IY
1 11483
1 11484	    2EA0  FD E5				  DB 0fdh,0e5h
1 11485	    2EA2  2A				  DB 02ah
1 11486	    2EA3  3962r				 DW CODEFILEPOS
1 11487	    2EA5  2E 00				  DB 2eh,0
1 11488	    2EA7  7C				  DB 7ch
1 11489	    2EA8  E6 FC				  DB 0e6h, 0FCH			  ; mask for CodeFileBufferSize	== 1024
1 11490	    2EAA  67				  DB 67h
1 11491					 ;	   LD A,L
1 11492					 ;	   AND 80H		      ;	CodeFileBufferSize
1 11493					 ;	   LD L,A
1 11494	    2EAB  ED 5B				  DB 0edh,5bh
1 11495	    2EAD  3964r				 DW CODEFILEPOS+2
1 11496	    2EAF  01				  DB 01h
1 11497	    2EB0  3921r				 DW CODEFILE
1 11498	    2EB2  CD				  DB 0cdh
1 11499	    2EB3  0000e				 DW  FILESEEK		   ; set to current position
1 11500
1 11501	    2EB5  21				  DB 21h
1 11502	    2EB6  0400				 DW CODEFILEBUFFERSIZE	 ; read	128 bytes from file
1 11503									     ; CodeFileBufferSize
1 11504	    2EB8  11				  DB 11h
1 11505	    2EB9  3990r				 DW CODEFILEBUFFER
1 11506	    2EBB  CD				  DB 0cdh
1 11507	    2EBC  0000e				 DW  WRITEFILE		   ; read to file
1 11508	    2EBE  FD E1				  DB 0fdh,0e1h
1 11509
1 11510	    2EC0  B7				  DB 0b7h
1 11511
1 11512					 ;	   PUSH	BC
1 11513					 ;	   LD DE,L7957		      ;	buffer
1 11514					 ;	   LD C,01AH
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 203
msx_asm\tur_comp.ASM



1 11515					 ;	   CALL	DOSIXIY		      ;	set dma	address
1 11516					 ;	   POP BC
1 11517					 ;	   LD DE,L7933
1 11518					 ;	   CALL	DOSIXIY		      ;	random record read/write 128 bytes
1 11519					 ;	   OR A
1 11520					 ;	   RET Z		      ;	return if no error
1 11521					 ;	   DEC A
1 11522					 ;	   RET Z		      ;	return if end of file or disk full error
1 11523					 ;	   CP 3
1 11524	    2EC1  C8				  DB 0c8h		       ; return	if ???
1 11525
1 11526	    2EC2  CD				 DB 0cdh
1 11527	    2EC3  34ECr				 DW  L72E1		 ; no condition
1 11528	    2EC5  FA				 DB 0FAH		 ; error 250: Disk or directory	full
1 11529
1 11530	    2EC6			 L6D24:	 ; pushes 13 bytes starting at L7B64 to	the stack
1 11531						 ; changes: HL',DE',BC'
1 11532	    2EC6  D9				 DB 0d9h
1 11533	    2EC7  11				 DB 11h
1 11534	    2EC8  3F1Er				 DW L7B64
1 11535	    2ECA  18 04				 DB 18h,( L6D2E)-$-1
1 11536
1 11537	    2ECC			 L6D2A:	 ; pushes 13 bytes starting at L7B57 to	the stack
1 11538						 ; changes: HL',DE',BC'
1 11539	    2ECC  D9				 DB 0d9h
1 11540	    2ECD  11				 DB 11h
1 11541	    2ECE  3F11r				 DW L7B57
1 11542	    2ED0  E1			 L6D2E:	 DB 0e1h
1 11543	    2ED1  22				 DB 22h
1 11544	    2ED2  3F8Fr				 DW L7BD5		 ; temporary save return address
1 11545	    2ED4  21				 DB 21h
1 11546	    2ED5  FFF3				 DW -13
1 11547	    2ED7  39				 DB 039h
1 11548	    2ED8  F9				 DB 0f9h
1 11549	    2ED9  EB				 DB 0ebh
1 11550	    2EDA  01				 DB 01h
1 11551	    2EDB  000D				 DW 13
1 11552	    2EDD  ED B0				 DB 0edh,0b0h
1 11553	    2EDF  2A			 L6D3D:	 DB 02ah
1 11554	    2EE0  3F8Fr				 DW L7BD5		 ; restore return address
1 11555	    2EE2  E5				 DB 0e5h
1 11556	    2EE3  D9				 DB 0d9h
1 11557	    2EE4  C9				 DB 0c9h
1 11558
1 11559	    2EE5			 L6D43:	 ; pops	13 bytes to L7B64
1 11560						 ; changes: HL',DE',BC'
1 11561	    2EE5  D9				 DB 0d9h
1 11562	    2EE6  11				 DB 11h
1 11563	    2EE7  3F1Er				 DW L7B64
1 11564	    2EE9  18 04				 DB 18h,( L6D4D)-$-1
1 11565
1 11566	    2EEB			 L6D49:	 ; pops	13 bytes to L7B57
1 11567						 ; changes: HL',DE',BC'
1 11568	    2EEB  D9				 DB 0d9h
1 11569	    2EEC  11				 DB 11h
1 11570	    2EED  3F11r				 DW L7B57
1 11571	    2EEF  E1			 L6D4D:	 DB 0e1h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 204
msx_asm\tur_comp.ASM



1 11572	    2EF0  22				 DB 22h
1 11573	    2EF1  3F8Fr				 DW L7BD5
1 11574	    2EF3  21				 DB 21h
1 11575	    2EF4  0000				 DW 0
1 11576	    2EF6  39				 DB 039h
1 11577	    2EF7  01				 DB 01h
1 11578	    2EF8  000D				 DW 13
1 11579	    2EFA  ED B0				 DB 0edh,0b0h
1 11580	    2EFC  F9				 DB 0f9h
1 11581	    2EFD  18 E0				 DB 18h,( L6D3D)-$-1
1 11582
1 11583	    2EFF			 L6D5D:	 ; moves 13 bytes from stack+2 to L7B64
1 11584						 ; changes: HL',DE',BC'
1 11585	    2EFF  D9				 DB 0d9h
1 11586	    2F00  11				 DB 11h
1 11587	    2F01  3F1Er				 DW L7B64
1 11588	    2F03  18 04				 DB 18h,( L6D67)-$-1
1 11589
1 11590	    2F05			 L6D63:	 ; moves 13 bytes from stack+2 to L7B57
1 11591						 ; changes: HL',DE',BC'
1 11592	    2F05  D9				 DB 0d9h
1 11593	    2F06  11				 DB 11h
1 11594	    2F07  3F11r				 DW L7B57
1 11595	    2F09  21			 L6D67:	 DB 21h
1 11596	    2F0A  0002				 DW 2
1 11597	    2F0C  39				 DB 039h
1 11598	    2F0D  01				 DB 01h
1 11599	    2F0E  000D				 DW 13
1 11600	    2F10  ED B0				 DB 0edh,0b0h
1 11601	    2F12  D9				 DB 0d9h
1 11602	    2F13  C9				 DB 0c9h
1 11603
1 11604	    2F14			 L6D72:	 ; add IY to id	table
1 11605	    2F14  FD E5				 DB 0fdh,0e5h
1 11606	    2F16  D1				 DB 0d1h
1 11607
1 11608	    2F17			 L6D75:	 ; add DE to id	table
1 11609					 ;	  LD A,D
1 11610					 ;	  CALL L6D7A		  ; add	byte to	id table
1 11611					 ;	  LD A,E
1 11612	    2F17  E5				 DB 0e5h
1 11613	    2F18  2A				 DB 02ah
1 11614	    2F19  3F2Dr				 DW L7B73
1 11615	    2F1B  72				 DB 72h
1 11616	    2F1C  2B				 DB 2bh			 ; decrease bottom of the table
1 11617	    2F1D  73				 DB 73h
1 11618	    2F1E  2B				 DB 2bh			 ; decrease bottom of the table
1 11619	    2F1F  22				 DB 22h
1 11620	    2F20  3F2Dr				 DW L7B73
1 11621	    2F22  E1				 DB 0e1h
1 11622	    2F23  C3				 DB 0c3h
1 11623	    2F24  2D1Ar				 DW  L6BC7		 ; check compiler, memory overflow
1 11624
1 11625	    2F26			 L6D7A:	 ; in:	 A = data byte to be added to the identifier table
1 11626						 ; out:	 -
1 11627	    2F26  E5				 DB 0e5h
1 11628	    2F27  2A				 DB 02ah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 205
msx_asm\tur_comp.ASM



1 11629	    2F28  3F2Dr				 DW L7B73
1 11630	    2F2A  77				 DB 77h
1 11631	    2F2B  2B				 DB 2bh			 ; decrease bottom of the table
1 11632	    2F2C  22				 DB 22h
1 11633	    2F2D  3F2Dr				 DW L7B73
1 11634	    2F2F  E1				 DB 0e1h
1 11635	    2F30  C3				 DB 0c3h
1 11636	    2F31  2D1Ar				 DW  L6BC7		 ; check compiler, memory overflow
1 11637
1 11638	    2F33			 L6D87:	 ; add the identifier at address IX to the identifier table
1 11639						 ; in:	 -
1 11640						 ; out:	 -
1 11641	    2F33  DD 7E	00			 DB 0ddh,7eh,+0
1 11642	    2F36  CD				 DB 0cdh
1 11643	    2F37  3496r				 DW  L7271		 ; letter or underscore?
1 11644
1 11645	    2F39  CD			 L6D8D:	 DB 0cdh
1 11646	    2F3A  34D3r				 DW  L72C8		 ; carry set --> error
1 11647	    2F3C  3A				 DB 3AH			 ; error 58: Illegal character in identifier
1 11648
1 11649	    2F3D  CD				 DB 0cdh
1 11650	    2F3E  3138r				 DW  L6ED0		 ; check if already in identifier table
1 11651
1 11652	    2F40  CD			 L6D94:	 DB 0cdh
1 11653	    2F41  3120r				 DW  L6EB8		 ; test	if reserved word
1 11654									 ; gives error 53 if word is reserved
1 11655	    2F43  DD 7E	00			 DB 0ddh,7eh,+0		 ; A = first letter
1 11656	    2F46  FE 61			 L6D9A:	 DB 0feh, 'a'
1 11657	    2F48  38 06				 DB 38h,(L6DA4)-$-1
1 11658	    2F4A  FE 7B				 DB 0feh, 'z'+1
1 11659	    2F4C  30 02				 DB 30h,(L6DA4)-$-1
1 11660	    2F4E  D6 20				 DB 0d6h, 'a'-'A'
1 11661	    2F50  CD			 L6DA4:	 DB 0cdh
1 11662	    2F51  2F26r				 DW  L6D7A		 ; add byte to id table
1 11663	    2F53  DD 23				 DB 0ddh,23h
1 11664	    2F55  DD 7E	00			 DB 0ddh,7eh,+0
1 11665	    2F58  CD				 DB 0cdh
1 11666	    2F59  34A7r				 DW  L7282		 ; letter, underscore or decimal
1 11667	    2F5B  30 E9				 DB 30h,(L6D9A)-$-1
1 11668	    2F5D  2A				 DB 02ah
1 11669	    2F5E  3F2Dr				 DW L7B73
1 11670	    2F60  23				 DB 23h
1 11671	    2F61  CB FE				 DB 0cbh,0feh		 ; mark	end of added identifier
1 11672	    2F63  C3				 DB 0c3h
1 11673	    2F64  31FDr				 DW  L6F95		 ; get to next non-blank
1 11674
1 11675	    2F66  DD 7E	00		 L6DBA:	 DB 0ddh,7eh,+0
1 11676	    2F69  CD				 DB 0cdh
1 11677	    2F6A  3496r				 DW  L7271		 ; letter or underscore?
1 11678
1 11679	    2F6C  CD				 DB 0cdh
1 11680	    2F6D  34D3r				 DW  L72C8		 ; carry set --> error
1 11681	    2F6F  3A				 DB 3AH			 ; error 58: Illegal character in identifier
1 11682
1 11683	    2F70  18 CE				 DB 18h,( L6D94)-$-1
1 11684
1 11685	    2F72			 L6DC6:	 ; calculates and adds the length of the newly defined struct
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 206
msx_asm\tur_comp.ASM



1 11686						 ; as a	word to	the id table
1 11687						 ; in:	 (L7B75), (L7B73)
1 11688						 ; out:	 added (L7B75) - (L7B73)
1 11689						 ;	 (L7B75) = (L7B73)
1 11690	    2F72  2A				 DB 02ah
1 11691	    2F73  3F2Fr				 DW L7B75		 ; HL =	top of id table	before
1 11692	    2F75  ED 5B				 DB 0edh,5bh
1 11693	    2F77  3F2Dr				 DW L7B73		 ; DE =	top of id table	after
1 11694	    2F79  B7				 DB 0b7h
1 11695	    2F7A  ED 52				 DB 0EDH,052h		 ; calculate the difference
1 11696	    2F7C  EB				 DB 0ebh
1 11697	    2F7D  CD				 DB 0cdh
1 11698	    2F7E  2F17r				 DW  L6D75		 ; add the length of the variable declaration
1 11699	    2F80  2A				 DB 02ah
1 11700	    2F81  3F2Dr				 DW L7B73
1 11701	    2F83  22				 DB 22h
1 11702	    2F84  3F2Fr				 DW L7B75		 ; equal top before and	top after
1 11703	    2F86  C9				 DB 0c9h
1 11704
1 11705	    2F87			 L6DDB:	 ; in:	 B =
1 11706						 ;	 C =
1 11707	    2F87  2A				 DB 02ah
1 11708	    2F88  3F35r				 DW L7B7B		 ; HL =	start of identifier list
1 11709	    2F8A  18 03				 DB 18h,( L6DE3)-$-1
1 11710
1 11711	    2F8C			 L6DE0:	 ; out:	 -
1 11712	    2F8C  2A				 DB 02ah
1 11713	    2F8D  3F31r				 DW L7B77		 ; HL =	absolute top of	id list
1 11714
1 11715	    2F8F			 L6DE3:	 ; in:	 HL = end of list to search
1 11716						 ;	 B = 1 = LABEL,	 2 = CONSTANT
1 11717						 ;	     3 = TYPE,	 4 = VARIABLE
1 11718						 ;	     5 = PROCEDURE 6 = FUNCTION
1 11719	    2F8F  22				 DB 22h
1 11720	    2F90  3F37r				 DW L7B7D
1 11721	    2F92  3A				 DB 3ah
1 11722	    2F93  3F7Ar				 DW L7BC0
1 11723	    2F95  B9				 DB 0b9h
1 11724	    2F96  CA				 DB 0cah
1 11725	    2F97  30B0r				 DW L6E48
1 11726	    2F99  79				 DB 79h
1 11727	    2F9A  32				 DB 32h
1 11728	    2F9B  3F7Ar				 DW L7BC0
1 11729	    2F9D  2A				 DB 02ah
1 11730	    2F9E  3F2Fr				 DW L7B75
1 11731	    2FA0			 L6DF3:
1 11732	    2FA0  ED 5B				 DB 0edh,5bh
1 11733	    2FA2  3F37r				 DW L7B7D
1 11734
1 11735	    2FA4  7B				 DB 7bh
1 11736	    2FA5  BD				 DB 0bdh
1 11737	    2FA6  C2				 DB 0c2h
1 11738	    2FA7  2FB3r				 DW L6E03
1 11739	    2FA9  7A				 DB 7ah
1 11740	    2FAA  BC				 DB 0bch
1 11741	    2FAB  20 06				 DB 20h,(L6E03)-$-1
1 11742
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 207
msx_asm\tur_comp.ASM



1 11743					 ;	  XOR A
1 11744					 ;	  SBC HL,DE		  ; tabel is empty if HL = DE
1 11745					 ;;!	  pushf
1 11746					 ;	  ADD HL,DE
1 11747					 ;;!	  popf
1 11748					 ;	  JR NZ,L6E03		  ; no,	tabel is not empty
1 11749	    2FAD  AF				 DB 0afh
1 11750	    2FAE  32				 DB 32h
1 11751	    2FAF  3F7Br				 DW L7BC1
1 11752	    2FB1  3D				 DB 3dh			 ; return with 255 and NonZero
1 11753									 ; not found
1 11754	    2FB2  C9				 DB 0c9h
1 11755
1 11756	    2FB3  23			 L6E03:	 DB 23h
1 11757	    2FB4  5E				 DB 5eh		 ; DE =	offset,	# bytes	of struct
1 11758	    2FB5  23				 DB 23h
1 11759	    2FB6  56				 DB 56h
1 11760	    2FB7  19				 DB 019h
1 11761	    2FB8  7E				 DB 7eh
1 11762	    2FB9  B7				 DB 0b7h		 ; first byte zero, does not contain a name
1 11763	    2FBA  28 E4				 DB 28h,(L6DF3)-$-1		 ; yes,	search next
1 11764	    2FBC  2B				 DB 2bh
1 11765	    2FBD  7E				 DB 7eh
1 11766	    2FBE  23				 DB 23h
1 11767	    2FBF  B9				 DB 0b9h		 ; gelijk C?
1 11768	    2FC0  20 DE				 DB 20h,(L6DF3)-$-1		 ; no, search next
1 11769
1 11770	    2FC2  C5				 DB 0c5h
1 11771	    2FC3  E5				 DB 0e5h
1 11772	    2FC4  11				 DB 11h
1 11773	    2FC5  301Fr				 DW TEMPID
1 11774	    2FC7  2B				 DB 2bh
1 11775	    2FC8  2B				 DB 2bh			 ; HL =	address	of first letter	of ID
1 11776
1 11777	    2FC9  CD				 DB 0cdh
1 11778	    2FCA  2FD3r				 DW  FASTCMPR
1 11779	    2FCC  CA				 DB 0cah
1 11780	    2FCD  309Fr				 DW L6E3B		 ; jump	if equal
1 11781
1 11782					 ;L6E19:  LD A,(DE)		  ; A =	byte from text
1 11783					 ;	  INC DE
1 11784					 ;	  CP (HL)
1 11785					 ;	  JR NZ,L6E37		  ; quit if not	equal
1 11786					 ;	  DEC HL
1 11787					 ;	  BIT 7,A
1 11788					 ;	  JR Z,L6E19		  ; repeat until end of	string
1 11789
1 11790					 ;	  JP L6E3B		  ; jump if equal
1 11791
1 11792					 ;L6E19:  LD B,(HL)
1 11793					 ;	  LD A,(DE)		  ; A =	byte from text
1 11794					 ;	  DEC HL		  ; next from id tab
1 11795					 ;	  INC DE		  ; next from text
1 11796					 ;	  LD C,B
1 11797					 ;	  RES 7,B
1 11798					 ;	  CP 'a'		     ; >= 'a' ?
1 11799					 ;	  JR C,L6E2A
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 208
msx_asm\tur_comp.ASM



1 11800					 ;	  CP 'z'+1		     ; < 'z'+1 ?
1 11801					 ;	  JR NC,L6E2A
1 11802					 ;	  SUB 'a'-'A'		     ; up case
1 11803					 ;L6E2A:  CP B
1 11804					 ;	  JR NZ,L6E37
1 11805					 ;	  BIT 7,C		  ; end	of this	string?
1 11806					 ;	  JR Z,L6E19		  ; no,	compare	next
1 11807					 ;	  LD A,(DE)		  ; A =	next letter to compare from DE string
1 11808					 ;	  CALL L7282		  ; test if this character did not belong to
1 11809					 ;				  ; the	compared word
1 11810					 ;	  JR C,L6E3B		  ; carry set if this string was terminated too
1 11811	    2FCF  E1			 L6E37:	 DB 0e1h
1 11812	    2FD0  C1				 DB 0c1h
1 11813	    2FD1  18 CD				 DB 18h,( L6DF3)-$-1		 ; search next
1 11814
1 11815	    2FD3			 FASTCMPR:; in:	 HL = address of identifier from id table, downwards
1 11816						 ;	 DE = address of upcased text identifier, upwards
1 11817						 ; out:	 HL = position below last keyword character
1 11818						 ;	 Z-flag	= 1, found
1 11819						 ;	 Z-flag	= 0, not found
1 11820	    2FD3  1A				 DB 1ah		 ; A = byte from text
1 11821	    2FD4  13				 DB 13h
1 11822	    2FD5  BE				 DB 0beh
1 11823	    2FD6  C0				 DB 0c0h		 ; quit	if not equal
1 11824	    2FD7  2B				 DB 2bh
1 11825	    2FD8  CB 7F				 DB 0cbh,07fh
1 11826	    2FDA  28 F7				 DB 28h,(FASTCMPR)-$-1		 ; repeat until	end of string
1 11827	    2FDC  AF				 DB 0afh
1 11828	    2FDD  C9				 DB 0c9h
1 11829
1 11830	    2FDE			 FASTCMP: ; in:	 HL = address keyword, upwards
1 11831						 ;	 DE = address of upcased text identifier, upwards
1 11832						 ; out:	 HL = position after last keyword character
1 11833						 ;	 DE = position after identifier	in text
1 11834						 ;	 Z-flag	= 1, found
1 11835						 ;	 Z-flag	= 0, not found
1 11836	    2FDE  C5				 DB 0c5h
1 11837	    2FDF  11				 DB 11h
1 11838	    2FE0  301Fr				 DW TEMPID
1 11839	    2FE2  1A			 FASTCMPL:DB 1ah	 ; A = byte from text
1 11840	    2FE3  13				 DB 13h
1 11841	    2FE4  BE				 DB 0beh
1 11842					 ;!	 pushf
1 11843	    2FE5  23				 DB 23h
1 11844					 ;!	 popf
1 11845	    2FE6  20 0A				 DB 20h,(FASTCMPQ)-$-1
1 11846	    2FE8  C0				 DB 0c0h		 ; quit	if not equal
1 11847	    2FE9  B7				 DB 0b7h
1 11848	    2FEA  F2				 DB 0f2h
1 11849	    2FEB  2FE2r				 DW FASTCMPL		 ; repeat until	end of string
1 11850	    2FED  ED 5B				 DB 0edh,5bh
1 11851	    2FEF  301Dr				 DW TEMPPTR
1 11852	    2FF1  AF				 DB 0afh
1 11853	    2FF2  C1			 FASTCMPQ:DB 0c1h
1 11854	    2FF3  C9				 DB 0c9h
1 11855
1 11856	    2FF4			 BUILDID: ; out: IX = current text pointer
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 209
msx_asm\tur_comp.ASM



1 11857						 ;	 TEMPPTR = position after word in text
1 11858	    2FF4  D5				 DB 0d5h
1 11859	    2FF5  DD E5				 DB 0ddh,0e5h
1 11860	    2FF7  D1				 DB 0d1h
1 11861	    2FF8  21				 DB 21h
1 11862	    2FF9  301Er				 DW TEMPID-1
1 11863	    2FFB  1A				 DB 1ah		 ; A = first byte from text
1 11864	    2FFC  CD				 DB 0cdh
1 11865	    2FFD  0000e				 DW  L04A6		 ; up case
1 11866	    2FFF  13				 DB 13h
1 11867	    3000  23				 DB 23h
1 11868	    3001  77				 DB 77h
1 11869	    3002  CD				 DB 0cdh
1 11870	    3003  34A7r				 DW  L7282
1 11871	    3005  38 0E				 DB 38h,(BUILDI2)-$-1		 ; quit	if no character	of word
1 11872
1 11873	    3007  1A			 BUILDI1: DB 1ah
1 11874	    3008  CD				 DB 0cdh
1 11875	    3009  34A7r				 DW  L7282		 ; legal character ?
1 11876	    300B  38 08				 DB 38h,(BUILDI2)-$-1
1 11877
1 11878	    300D  CD				 DB 0cdh
1 11879	    300E  0000e				 DW  L04A6		 ; up case
1 11880	    3010  13				 DB 13h			 ; next	from text
1 11881	    3011  23				 DB 23h
1 11882	    3012  77				 DB 77h		 ; save	character
1 11883	    3013  18 F2				 DB 18h,( BUILDI1)-$-1
1 11884
1 11885	    3015			 BUILDI2:
1 11886	    3015  CB FE				 DB 0cbh,0feh
1 11887	    3017  53ED 301Dr			 DW 53edh,TEMPPTR
1 11888	    301B  D1				 DB 0d1h
1 11889	    301C  C9				 DB 0c9h
1 11890
1 11891					 ;	  LD A,(DE)
1 11892					 ;BUILDI1: INC DE			  ; next from text
1 11893					 ;	  CALL L04A6		  ; up case
1 11894					 ;	  INC HL
1 11895					 ;	  LD (HL),A		  ; save character
1 11896					 ;	  LD A,(DE)
1 11897					 ;	  CALL L7282		  ; test if this character did not belong to
1 11898					 ;				  ; the	compared word
1 11899					 ;	  JR NC,BUILDI1		  ; carry set if this string was terminated too
1 11900					 ;	  SET 7,(HL)
1 11901					 ;	  LD (TEMPPTR),DE
1 11902					 ;	  POP DE
1 11903					 ;	  RET
1 11904
1 11905	    301D  0000			 TEMPPTR: DW 0
1 11906	    301F  80*(00)		 TEMPID: db 128	dup (0)
1 11907
1 11908	    309F  22			 L6E3B:	 DB 22h
1 11909	    30A0  3F7Cr				 DW L7BC2		 ; save	position before	known word
1 11910	    30A2  ED 5B				 DB 0edh,5bh
1 11911	    30A4  301Dr				 DW TEMPPTR
1 11912	    30A6  53ED 3F7Er			 DW 53edh,L7BC4		 ; save	position after word in text
1 11913	    30AA  E1				 DB 0e1h		 ; HL =	start of known word declaration
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 210
msx_asm\tur_comp.ASM



1 11914	    30AB  C1				 DB 0c1h		 ; BC =	(300H for type identifier or
1 11915									 ;	 200H for constant identifier)
1 11916	    30AC  7E				 DB 7eh		 ; A = type of known word
1 11917	    30AD  32				 DB 32h
1 11918	    30AE  3F7Br				 DW L7BC1
1 11919
1 11920	    30B0			 L6E48:	 ; in:	 B =
1 11921						 ;	 C =
1 11922						 ; out:	 Z-flag	set if B = (L7BC1)
1 11923						 ;	 HL = position before known word
1 11924						 ;	 DE = position after word in text
1 11925	    30B0  2A				 DB 02ah
1 11926	    30B1  3F7Cr				 DW L7BC2
1 11927	    30B3  ED 5B				 DB 0edh,5bh
1 11928	    30B5  3F7Er				 DW L7BC4
1 11929	    30B7  3A				 DB 3ah
1 11930	    30B8  3F7Br				 DW L7BC1
1 11931	    30BA  B8				 DB 0b8h		 ; identical types?
1 11932	    30BB  C9				 DB 0c9h
1 11933
1 11934	    30BC			 L6E54:	 ; searches if current word is an identifier list
1 11935						 ; in:	 B = 1 = LABEL,	  2 = CONSTANT
1 11936						 ;	     3 = TYPE,	  4 = VARIABLE
1 11937						 ;	     5 = PROCEDURE, 6 =	FUNCTION
1 11938						 ;	 C =
1 11939						 ; out:	 Z-flag	= NonZero if not found
1 11940						 ;		 Zero if found
1 11941	    30BC  CD				 DB 0cdh
1 11942	    30BD  2F8Cr				 DW  L6DE0
1 11943	    30BF  C0				 DB 0c0h		 ; return if not found
1 11944	    30C0  18 3C				 DB 18h,( L6E96)-$-1		 ; go to next non-blank
1 11945
1 11946	    30C2			 L6E5A:	 ; in:	 first byte after call instruction is #bytes following the name
1 11947						 ;	 second	two byte form an address of a reserved word list
1 11948						 ; out:	 Z-flag	set if a reserved word is found	that equals the	word
1 11949						 ;	 at position IX. HL then contains the address of the byte
1 11950						 ;	 directly after	the reserved word
1 11951	    30C2  E3				 DB 0e3h
1 11952	    30C3  4E				 DB 4eh
1 11953	    30C4  23				 DB 23h
1 11954	    30C5  5E				 DB 5eh
1 11955	    30C6  23				 DB 23h
1 11956	    30C7  56				 DB 56h
1 11957	    30C8  23				 DB 23h
1 11958	    30C9  E3				 DB 0e3h
1 11959	    30CA  EB				 DB 0ebh
1 11960
1 11961	    30CB  CD			 L6E63:	 DB 0cdh
1 11962	    30CC  30E5r				 DW  L6E7D
1 11963	    30CE  C8				 DB 0c8h		 ; quit	if okay
1 11964
1 11965	    30CF  2B				 DB 2bh			 ; go back to last character tested
1 11966	    30D0  CB 7E			 L6E68:	 DB 0cbh,07eh		 ; was this the	last character?
1 11967					 ;!	 pushf
1 11968	    30D2  23				 DB 23h
1 11969					 ;!	 popf
1 11970	    30D3  28 FB				 DB 28h,(L6E68)-$-1		 ; no, try again
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 211
msx_asm\tur_comp.ASM



1 11971	    30D5  06 00				 DB 06h,0
1 11972	    30D7  09				 DB 09h
1 11973	    30D8  7E				 DB 7eh
1 11974	    30D9  B7				 DB 0b7h		 ; last	word of	this table checked?
1 11975	    30DA  20 EF				 DB 20h,(L6E63)-$-1		 ; no, continue	searching
1 11976	    30DC  3D				 DB 3dh			 ; return with A = 255 and NonZero
1 11977									 ; for not found
1 11978	    30DD  C9				 DB 0c9h
1 11979
1 11980	    30DE			 L6E76:	 ; searches for	the word in the	text at	IX in the given	list
1 11981						 ;
1 11982	    30DE  E3				 DB 0e3h
1 11983	    30DF  5E				 DB 5eh		 ; DE =	address	of reserved word
1 11984	    30E0  23				 DB 23h
1 11985	    30E1  56				 DB 56h
1 11986	    30E2  23				 DB 23h
1 11987	    30E3  E3				 DB 0e3h	 ; new return address after 2 data bytes
1 11988	    30E4  EB				 DB 0ebh		 ; HL =	address	of reserved word
1 11989
1 11990	    30E5  DD E5			 L6E7D:	 DB 0ddh,0e5h
1 11991	    30E7  D1				 DB 0d1h
1 11992	    30E8  7E				 DB 7eh		 ; get first character
1 11993	    30E9  CD				 DB 0cdh
1 11994	    30EA  3496r				 DW  L7271		 ; check if letter or underscore
1 11995	    30EC  38 0C				 DB 38h,(L6E92)-$-1		 ; carry set if	error
1 11996	    30EE  CD				 DB 0cdh
1 11997	    30EF  2FDEr				 DW  L6E9C		 ; compare strings
1 11998	    30F1  C0				 DB 0c0h		 ; quit	if not equal
1 11999
1 12000						 ; at this point the strings are equal
1 12001	    30F2  1A				 DB 1ah
1 12002	    30F3  CD				 DB 0cdh
1 12003	    30F4  34A7r				 DW  L7282		 ; letter, underscore or decimal
1 12004	    30F6  38 06				 DB 38h,(L6E96)-$-1		 ; jump	if not letter, underscore or decimal
1 12005
1 12006	    30F8  B7				 DB 0b7h
1 12007	    30F9  C9				 DB 0c9h
1 12008
1 12009	    30FA  CD			 L6E92:	 DB 0cdh
1 12010	    30FB  3104r				 DW  L6E9C1		 ; compare strings
1 12011	    30FD  C0				 DB 0c0h		 ; quit	if not equal
1 12012
1 12013	    30FE			 L6E96:	 ; in:	 DE = current text pointer
1 12014						 ; out:	 IX = updated text pointer to next non-blank
1 12015	    30FE  D5				 DB 0d5h
1 12016	    30FF  DD E1				 DB 0ddh,0e1h			 ; update text pointer to text buffer 79D7
1 12017	    3101  C3				 DB 0c3h
1 12018	    3102  31FDr				 DW  L6F95		 ; moves IX to the next	non-blank
1 12019
1 12020					 L6E9C	 EQU FASTCMP
1 12021						 ; compares string at HL with string at	DE
1 12022						 ; stops if string at HL has bit 7 set or the current character
1 12023						 ; does	not match
1 12024						 ; characters from DE are UPCASEed if necessary
1 12025						 ; in:	 HL = string terminated	by setting bit 7 of the	last byte
1 12026						 ;	 DE = string to	compare	with
1 12027						 ; out:	 BC unchanged
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 212
msx_asm\tur_comp.ASM



1 12028						 ;	 NonZero if the	strings	where not the same
1 12029						 ;	 Zero if the strings are the same
1 12030						 ;	 HL = first byte after the string
1 12031						 ;	 DE = first byte after the string to compare with
1 12032					 ;	  LD DE,TEMPID
1 12033					 ;	  PUSH BC
1 12034					 ;	  CALL FASTCMP
1 12035					 ;	  POP BC
1 12036					 ;	  RET
1 12037
1 12038	    3104  C5			 L6E9C1: DB 0c5h
1 12039	    3105  46			 L6E9D:	 DB 46h
1 12040	    3106  1A				 DB 1ah
1 12041	    3107  23				 DB 23h
1 12042	    3108  13				 DB 13h
1 12043	    3109  48				 DB 48h
1 12044	    310A  CB B8				 DB 0cbh,0b8h
1 12045	    310C  FE 61				 DB 0feh, 'a'			  ; < 'a'?
1 12046	    310E  38 06				 DB 38h,(L6EAE)-$-1		 ; yes,	continue
1 12047	    3110  FE 7B				 DB 0feh, 'z'+1			  ; > 'z'?
1 12048	    3112  30 02				 DB 30h,(L6EAE)-$-1		 ; yes,	continue
1 12049	    3114  D6 20				 DB 0d6h, 'a'-'A'
1 12050	    3116  B8			 L6EAE:	 DB 0b8h		 ; equal characters?
1 12051	    3117  20 05				 DB 20h,(L6EB6)-$-1		 ; no, return with NonZero
1 12052	    3119  CB 79				 DB 0cbh,079h			 ; last	character of string in HL tested ?
1 12053	    311B  28 E8				 DB 28h,(L6E9D)-$-1		 ; no, go for then next
1 12054	    311D  AF				 DB 0afh		 ; found, return with Zero
1 12055	    311E  C1			 L6EB6:	 DB 0c1h
1 12056	    311F  C9				 DB 0c9h
1 12057
1 12058	    3120			 L6EB8:	 ; tests if the	current	name is	a reserved word, slow!!!
1 12059	    3120  21				 DB 21h
1 12060	    3121  37E8r				 DW L7513
1 12061	    3123  4E			 L6EBB:	 DB 4eh
1 12062	    3124  0C				 DB 0ch
1 12063	    3125  C8				 DB 0c8h		 ; quit	if C was 255
1 12064	    3126  0D				 DB 0dh
1 12065	    3127  23				 DB 23h
1 12066	    3128  5E				 DB 5eh		 ; DE =	address	to table of reserved words
1 12067	    3129  23				 DB 23h
1 12068	    312A  56				 DB 56h
1 12069	    312B  23				 DB 23h
1 12070	    312C  E5				 DB 0e5h
1 12071	    312D  EB				 DB 0ebh
1 12072	    312E  CD				 DB 0cdh
1 12073	    312F  30CBr				 DW  L6E63
1 12074	    3131  E1				 DB 0e1h
1 12075	    3132  20 EF				 DB 20h,(L6EBB)-$-1
1 12076
1 12077	    3134  CD				 DB 0cdh
1 12078	    3135  34ECr				 DW  L72E1		 ; no condition
1 12079	    3137  35				 DB 35H			 ; error 53: Reserved word
1 12080
1 12081	    3138  3A			 L6ED0:	 DB 3ah
1 12082	    3139  3F4Br				 DW L7B91
1 12083	    313B  4F				 DB 4fh
1 12084	    313C  CD				 DB 0cdh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 213
msx_asm\tur_comp.ASM



1 12085	    313D  2F87r				 DW  L6DDB
1 12086
1 12087	    313F  3A			 L6ED7:	 DB 3ah
1 12088	    3140  3F7Br				 DW L7BC1
1 12089	    3142  B7				 DB 0b7h
1 12090	    3143  C8				 DB 0c8h
1 12091
1 12092	    3144  CD				 DB 0cdh
1 12093	    3145  34ECr				 DW  L72E1		 ; no condition
1 12094	    3147  2B				 DB 2BH			 ; error 43: Duplicate identifier or label
1 12095
1 12096	    3148			 L6EE0:	 ; in:	 -
1 12097						 ; out:	 Zero if '[' parsed
1 12098						 ;	 Zero if '(.' parsed
1 12099	    3148  3E 5B				 DB 3eh,'['
1 12100	    314A  CD				 DB 0cdh
1 12101	    314B  3191r				 DW  L6F29		 ; match('[')
1 12102	    314D  C8				 DB 0c8h		 ; return if matched
1 12103
1 12104	    314E  DD 7E	00			 DB 0ddh,7eh,+0
1 12105	    3151  FE 28				 DB 0feh, '('			  ; match('(')
1 12106	    3153  C0				 DB 0c0h		 ; return if not '(' matched
1 12107
1 12108	    3154  DD 7E	01			 DB 0ddh,7eh,+1
1 12109	    3157  FE 2E				 DB 0feh, '.'
1 12110	    3159  C0				 DB 0c0h		 ; return if not '(.' matched
1 12111
1 12112	    315A  DD 23			 L6EF2:	 DB 0ddh,23h
1 12113	    315C  C3				 DB 0c3h
1 12114	    315D  31FAr				 DW  L6F92		 ; to next non-blank
1 12115
1 12116	    315F			 L6EF7:	 ; in:	 -
1 12117						 ; out:	 Zero if ']' parsed
1 12118						 ;	 Zero if '.)' parsed
1 12119	    315F  3E 5D				 DB 3eh,']'
1 12120	    3161  CD				 DB 0cdh
1 12121	    3162  3191r				 DW  L6F29		 ; match(']')
1 12122	    3164  C8				 DB 0c8h
1 12123	    3165  DD 7E	00			 DB 0ddh,7eh,+0
1 12124	    3168  FE 2E				 DB 0feh, '.'
1 12125	    316A  C0				 DB 0c0h
1 12126	    316B  DD 7E	01			 DB 0ddh,7eh,+1
1 12127	    316E  FE 29				 DB 0feh, ')'
1 12128	    3170  C0				 DB 0c0h
1 12129	    3171  18 E7				 DB 18h,( L6EF2)-$-1
1 12130
1 12131	    3173			 L6F0B:	 ; matches ':',	if present
1 12132						 ; returns NZ if not matched
1 12133	    3173  3E 3A				 DB 3eh,':'
1 12134	    3175  18 1A				 DB 18h,( L6F29)-$-1
1 12135
1 12136	    3177			 L6F0F:	 ; matches ';',	if present
1 12137						 ; returns NZ if not matched
1 12138	    3177  3E 3B				 DB 3eh,';'
1 12139	    3179  18 16				 DB 18h,( L6F29)-$-1
1 12140
1 12141	    317B			 L6F13:	 ; matches ',',	if present
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 214
msx_asm\tur_comp.ASM



1 12142						 ; returns NZ if not matched
1 12143	    317B  3E 2C				 DB 3eh,','		      ;	checkes	if ',' is the next symbol
1 12144	    317D  18 12				 DB 18h,( L6F29)-$-1
1 12145
1 12146	    317F			 L6F17:	 ; matches '.',	if present
1 12147						 ; returns NZ if not matched
1 12148	    317F  3E 2E				 DB 3eh,'.'
1 12149	    3181  18 0E				 DB 18h,( L6F29)-$-1
1 12150
1 12151	    3183			 L6F1B:	 ; matches '(',	if present
1 12152						 ; returns NZ if not matched
1 12153	    3183  3E 28				 DB 3eh,'('
1 12154	    3185  18 0A				 DB 18h,( L6F29)-$-1
1 12155
1 12156	    3187			 L6F1F:	 ; matches ')',	if present
1 12157						 ; returns NZ if not matched
1 12158	    3187  3E 29				 DB 3eh,')'
1 12159	    3189  18 06				 DB 18h,( L6F29)-$-1
1 12160
1 12161	    318B			 L6F23:	 ; matches '=',	if present
1 12162						 ; returns NZ if not matched
1 12163	    318B  3E 3D				 DB 3eh,'='
1 12164	    318D  18 02				 DB 18h,( L6F29)-$-1
1 12165
1 12166	    318F			 L6F27:	 ; matches '^',	if present
1 12167						 ; returns NZ if not matched
1 12168	    318F  3E 5E				 DB 3eh,'^'
1 12169
1 12170	    3191			 L6F29:	 ; matches character in	A, if this is the next character
1 12171						 ; returns NZ if this is not the next character
1 12172	    3191  DD BE	00			 DB 0ddh,0beh,+0
1 12173	    3194  C0				 DB 0c0h		 ; quit	if not equal
1 12174	    3195  C3				 DB 0c3h
1 12175	    3196  31FAr				 DW  L6F92		 ; get next non-blank character	if equal
1 12176
1 12177	    3198			 L6F30:	 ; matches a '[' or '(.' and gives error 8 otherwise
1 12178	    3198  CD				 DB 0cdh
1 12179	    3199  3148r				 DW  L6EE0		 ; match('[') or match('(.')
1 12180	    319B  C8				 DB 0c8h		 ; quit	if '[' or '(.' matched
1 12181
1 12182	    319C  CD				 DB 0cdh
1 12183	    319D  34ECr				 DW  L72E1		 ; no condition
1 12184	    319F  08				 DB 8			 ; error 8: '['	expected
1 12185
1 12186	    31A0			 L6F38:	 ; matches a ']' and gives error 9 otherwise
1 12187	    31A0  CD				 DB 0cdh
1 12188	    31A1  315Fr				 DW  L6EF7		 ; match(']') or match('.)')
1 12189	    31A3  C8				 DB 0c8h		 ; return if matched
1 12190
1 12191	    31A4  CD				 DB 0cdh
1 12192	    31A5  34ECr				 DW  L72E1		 ; no condition
1 12193	    31A7  09				 DB 9			 ; error 9: ']'	expected
1 12194
1 12195	    31A8			 L6F40:	 ; matches a ':' and gives error 2 otherwise
1 12196	    31A8  CD				 DB 0cdh
1 12197	    31A9  3173r				 DW  L6F0B		 ; match(':'), if present
1 12198	    31AB  C8				 DB 0c8h		 ; return if ':' matched
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 215
msx_asm\tur_comp.ASM



1 12199
1 12200	    31AC  CD				 DB 0cdh
1 12201	    31AD  34ECr				 DW  L72E1		 ; no condition
1 12202	    31AF  02				 DB 2			 ; error 2: ':'	expected
1 12203
1 12204	    31B0			 L6F48:	 ; matches a ';' and gives error 1 otherwise
1 12205						 ; match(';')
1 12206						 ; in:	 -
1 12207						 ; out:	 -
1 12208	    31B0  CD				 DB 0cdh
1 12209	    31B1  3177r				 DW  L6F0F		 ; match(';'), if present
1 12210	    31B3  C8				 DB 0c8h		 ; return if ';' matched
1 12211
1 12212	    31B4  CD			 L6F4C:	 DB 0cdh
1 12213	    31B5  34ECr				 DW  L72E1		 ; no condition
1 12214	    31B7  01				 DB 1			 ; error 1: ';'	expected
1 12215
1 12216	    31B8			 L6F50:	 ; matches a ';' and gives error 1 or 41 otherwise
1 12217	    31B8  CD				 DB 0cdh
1 12218	    31B9  3177r				 DW  L6F0F		 ; match(';'), if present
1 12219	    31BB  C8				 DB 0c8h		 ; return if ';' matched
1 12220	    31BC  3A				 DB 3ah
1 12221	    31BD  3F52r				 DW L7B98
1 12222	    31BF  B7				 DB 0b7h
1 12223	    31C0  28 F2				 DB 28h,(L6F4C)-$-1		 ; generate error 1 if (L7B98)=0
1 12224
1 12225	    31C2  CD				 DB 0cdh
1 12226	    31C3  34ECr				 DW  L72E1		 ; no condition
1 12227	    31C5  29				 DB 29H			 ; error 41: unknown identifier	or syntax error
1 12228
1 12229	    31C6			 L6F5E:	 ; matches a ',' and gives error 3 otherwise
1 12230	    31C6  CD				 DB 0cdh
1 12231	    31C7  317Br				 DW  L6F13		 ; match(','), if present
1 12232	    31C9  C8				 DB 0c8h		 ; return if ',' matched
1 12233
1 12234	    31CA  CD				 DB 0cdh
1 12235	    31CB  34ECr				 DW  L72E1		 ; no condition
1 12236	    31CD  03				 DB 3			 ; error 3: ','	expected
1 12237
1 12238	    31CE			 L6F66:	 ; matches a '(' and gives error 4 otherwise
1 12239	    31CE  CD				 DB 0cdh
1 12240	    31CF  3183r				 DW  L6F1B		 ; match('('), if present
1 12241	    31D1  C8				 DB 0c8h		 ; return if '(' matched
1 12242
1 12243	    31D2  CD				 DB 0cdh
1 12244	    31D3  34ECr				 DW  L72E1		 ; no condition
1 12245	    31D5  04				 DB 4			 ; error 4: '('	expected
1 12246
1 12247	    31D6			 L6F6E:	 ; matches a ')' and gives error 5 otherwise
1 12248	    31D6  CD				 DB 0cdh
1 12249	    31D7  3187r				 DW  L6F1F		 ; match(')'), if present
1 12250	    31D9  C8				 DB 0c8h		 ; return if ')' matched
1 12251
1 12252	    31DA  CD				 DB 0cdh
1 12253	    31DB  34ECr				 DW  L72E1		 ; no condition
1 12254	    31DD  05				 DB 5			 ; error 5: ')'	expected
1 12255
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 216
msx_asm\tur_comp.ASM



1 12256	    31DE			 L6F76:	 ; matches a '=' and gives error 6 otherwise
1 12257	    31DE  CD				 DB 0cdh
1 12258	    31DF  318Br				 DW  L6F23		 ; match('='), if present
1 12259	    31E1  C8				 DB 0c8h		 ; return if '=' matched
1 12260
1 12261	    31E2  CD				 DB 0cdh
1 12262	    31E3  34ECr				 DW  L72E1		 ; no condition
1 12263	    31E5  06				 DB 6			 ; error 6: '='	expected
1 12264
1 12265	    31E6			 L6F7E:	 ; matches a ':=' and gives error 7 if this is not present
1 12266						 ; in:	 -
1 12267						 ; out:	 -
1 12268	    31E6  CD				 DB 0cdh
1 12269	    31E7  30DEr				 DW  L6E76
1 12270	    31E9  3857r				 DW L7582		 ; start of reserved word: :=
1 12271	    31EB  C8				 DB 0c8h		 ; return if ':=' parsed
1 12272
1 12273	    31EC  CD				 DB 0cdh
1 12274	    31ED  34ECr				 DW  L72E1		 ; no condition
1 12275	    31EF  07				 DB 7			 ; error 7: ':=' expected
1 12276
1 12277	    31F0			 L6F88:	 ; matches OF and gives	error 15 if this is not	present
1 12278	    31F0  CD				 DB 0cdh
1 12279	    31F1  30DEr				 DW  L6E76
1 12280	    31F3  3835r				 DW L7560		 ; start of reserved word: OF
1 12281	    31F5  C8				 DB 0c8h
1 12282
1 12283	    31F6  CD				 DB 0cdh
1 12284	    31F7  34ECr				 DW  L72E1		 ; no condition
1 12285	    31F9  0F				 DB 0FH			 ; error 15: OF	expected
1 12286
1 12287	    31FA			 L6F92:	 ; moves to next non-blank
1 12288	    31FA  CD				 DB 0cdh
1 12289	    31FB  334Cr				 DW  L7124		 ; read	next character from input
1 12290
1 12291	    31FD			 L6F95:	 ; moves IX to the next	non-blank character
1 12292						 ; out:	 Zero on succes
1 12293	    31FD  AF				 DB 0afh
1 12294	    31FE  32				 DB 32h
1 12295	    31FF  3F52r				 DW L7B98
1 12296	    3201  3D				 DB 3dh
1 12297	    3202  32				 DB 32h
1 12298	    3203  3F7Ar				 DW L7BC0
1 12299	    3205  DD 7E	00			 DB 0ddh,7eh,+0
1 12300	    3208  B7				 DB 0b7h		 ; end of text line buffer?
1 12301	    3209  28 EF				 DB 28h,(L6F92)-$-1		 ; read	next line and next non blank
1 12302	    320B  FE 20				 DB 0feh, 20H			 ; start with space ?
1 12303	    320D  28 EB				 DB 28h,(L6F92)-$-1
1 12304	    320F  FE 09				 DB 0feh, 9			 ; start with TAB ?
1 12305	    3211  28 E7				 DB 28h,(L6F92)-$-1
1 12306	    3213  FE 28				 DB 0feh, '('			  ; first character of comment '(*   *)'
1 12307	    3215  28 11				 DB 28h,(L6FB5)-$-1
1 12308	    3217  FE 7B				 DB 0feh, '{'			  ; compiler option or comment
1 12309	    3219  28 17				 DB 28h,(L6FBF)-$-1
1 12310
1 12311	    321B  22DD 411Br		 L6FB3:	 DW 22ddh,FILEBUFFERLASTPOS
1 12312	    321F  C5				 DB 0c5h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 217
msx_asm\tur_comp.ASM



1 12313	    3220  E5				 DB 0e5h
1 12314	    3221  CD				 DB 0cdh
1 12315	    3222  2FF4r				 DW  BUILDID
1 12316	    3224  E1				 DB 0e1h
1 12317	    3225  C1				 DB 0c1h
1 12318	    3226  AF				 DB 0afh
1 12319	    3227  C9				 DB 0c9h
1 12320
1 12321	    3228  DD 7E	01		 L6FB5:	 DB 0ddh,7eh,+1
1 12322	    322B  FE 2A				 DB 0feh, '*'
1 12323	    322D  20 EC				 DB 20h,(L6FB3)-$-1
1 12324	    322F  CD				 DB 0cdh
1 12325	    3230  334Cr				 DW  L7124		 ; read	next character from input
1 12326	    3232  C5			 L6FBF:	 DB 0c5h
1 12327	    3233  DD 46	00			 DB 0ddh,46h,+0
1 12328	    3236  DD 7E	01			 DB 0ddh,7eh,+1
1 12329	    3239  FE 24				 DB 0feh, '$'			  ; '{'	followed by a '$'
1 12330	    323B  28 21				 DB 28h,(L6FEB)-$-1
1 12331
1 12332	    323D  CD			 L6FCA:	 DB 0cdh
1 12333	    323E  334Cr				 DW  L7124		 ; read	next character from input
1 12334
1 12335	    3240  78			 L6FCD:	 DB 78h
1 12336	    3241  FE 2A				 DB 0feh, '*'
1 12337	    3243  DD 7E	00			 DB 0ddh,7eh,+0
1 12338	    3246  20 0F				 DB 20h,(L6FE4)-$-1
1 12339	    3248  B8				 DB 0b8h
1 12340	    3249  20 F2				 DB 20h,(L6FCA)-$-1
1 12341	    324B  DD 7E	01			 DB 0ddh,7eh,+1
1 12342	    324E  FE 29				 DB 0feh, ')'
1 12343	    3250  20 EB				 DB 20h,(L6FCA)-$-1
1 12344	    3252  CD				 DB 0cdh
1 12345	    3253  334Cr				 DW  L7124		 ; read	next character from input
1 12346	    3255  18 04				 DB 18h,( L6FE8)-$-1
1 12347
1 12348	    3257  FE 7D			 L6FE4:	 DB 0feh, '}'
1 12349	    3259  20 E2				 DB 20h,(L6FCA)-$-1
1 12350
1 12351	    325B  C1			 L6FE8:	 DB 0c1h
1 12352	    325C  18 9C				 DB 18h,( L6F92)-$-1		 ; move	to next	non blank
1 12353
1 12354	    325E			 L6FEB:	 ; found: '{$'
1 12355	    325E  C5				 DB 0c5h
1 12356	    325F  D5				 DB 0d5h
1 12357	    3260  E5				 DB 0e5h
1 12358	    3261  CD				 DB 0cdh
1 12359	    3262  334Cr				 DW  L7124		 ; read	'{' away
1 12360	    3264  CD			 L6FF1:	 DB 0cdh
1 12361	    3265  334Cr				 DW  L7124		 ; read	'$' away
1 12362	    3267  DD 7E	00			 DB 0ddh,7eh,+0
1 12363	    326A  CD				 DB 0cdh
1 12364	    326B  0000e				 DW  L04A6		 ; upcase
1 12365	    326D  FE 49				 DB 0feh, 'I'			  ; I  = include or i/o	checking ?
1 12366									 ; I+ =	I/O Error Handling on
1 12367	    326F  06 01				 DB 06h,1			 ; bit 0
1 12368	    3271  28 4D				 DB 28h,(L704D)-$-1
1 12369
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 218
msx_asm\tur_comp.ASM



1 12370	    3273  FE 52				 DB 0feh, 'R'			  ; R+ = Index Range Check on
1 12371	    3275  06 02				 DB 06h,2			 ; bit 1
1 12372	    3277  28 47				 DB 28h,(L704D)-$-1
1 12373
1 12374	    3279  FE 41				 DB 0feh, 'A'			  ; A+ = Absolute code on
1 12375	    327B  06 04				 DB 06h,4			 ; bit 2
1 12376	    327D  28 41				 DB 28h,(L704D)-$-1
1 12377
1 12378	    327F  FE 55				 DB 0feh, 'U'			  ; U+ = User Interrupt	on
1 12379	    3281  06 08				 DB 06h,8			 ; bit 3
1 12380	    3283  28 3B				 DB 28h,(L704D)-$-1
1 12381
1 12382	    3285  FE 58				 DB 0feh, 'X'			  ; X+ = Array Optimization
1 12383	    3287  06 10				 DB 06h,10H		 ; bit 4
1 12384	    3289  28 35				 DB 28h,(L704D)-$-1
1 12385
1 12386	    328B  FE 56				 DB 0feh, 'V'			  ; V+ = Var-parameter Type Checking on
1 12387	    328D  06 20				 DB 06h,20H		 ; bit 5
1 12388	    328F  28 2F				 DB 28h,(L704D)-$-1
1 12389
1 12390	    3291  FE 42				 DB 0feh, 'B'			  ; B+ = I/O Mode Selection
1 12391	    3293  06 40				 DB 06h,40H		 ; bit 6
1 12392	    3295  28 29				 DB 28h,(L704D)-$-1
1 12393
1 12394	    3297  FE 43				 DB 0feh, 'C'			  ; C+ = Control C and S interpretation	on
1 12395	    3299  06 80				 DB 06h,80H		 ; bit 7
1 12396	    329B  28 23				 DB 28h,(L704D)-$-1
1 12397
1 12398	    329D  FE 57				 DB 0feh, 'W'			  ; W# = # levels of nesting With statements
1 12399	    329F  28 4C				 DB 28h,(L707A)-$-1
1 12400	    32A1  06 00				 DB 06h,0
1 12401
1 12402	    32A3  FE 4B				 DB 0feh, 'K'			  ; n.a.
1 12403	    32A5  28 19				 DB 28h,(L704D)-$-1
1 12404	    32A7  FE 44				 DB 0feh, 'D'			  ; n.a.
1 12405	    32A9  28 15				 DB 28h,(L704D)-$-1
1 12406	    32AB  FE 46				 DB 0feh, 'F'			  ; n.a.
1 12407	    32AD  28 52				 DB 28h,(L708E)-$-1
1 12408	    32AF  FE 47				 DB 0feh, 'G'			  ; n.a.
1 12409	    32B1  28 4E				 DB 28h,(L708E)-$-1
1 12410	    32B3  FE 50				 DB 0feh, 'P'			  ; n.a.
1 12411	    32B5  28 4A				 DB 28h,(L708E)-$-1
1 12412
1 12413	    32B7  CD				 DB 0cdh
1 12414	    32B8  34ECr				 DW  L72E1		 ; no condition
1 12415	    32BA  5D				 DB 5DH			 ; error 93: Invalid compiler directive
1 12416
1 12417	    32BB  E1			 L7048:	 DB 0e1h
1 12418	    32BC  D1				 DB 0d1h
1 12419	    32BD  C1				 DB 0c1h
1 12420	    32BE  18 80				 DB 18h,( L6FCD)-$-1
1 12421
1 12422	    32C0  CD			 L704D:	 DB 0cdh
1 12423	    32C1  334Cr				 DW  L7124		 ; read	letter away
1 12424	    32C3  DD 7E	00			 DB 0ddh,7eh,+0
1 12425	    32C6  0E 00				 DB 0eh,0
1 12426	    32C8  FE 2B				 DB 0feh, '+'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 219
msx_asm\tur_comp.ASM



1 12427	    32CA  28 0C				 DB 28h,(L7065)-$-1
1 12428	    32CC  0D				 DB 0dh			 ; C = 255
1 12429	    32CD  FE 2D				 DB 0feh, '-'
1 12430	    32CF  28 07				 DB 28h,(L7065)-$-1
1 12431	    32D1  05				 DB 05h			 ; B = 1 (include command) ?
1 12432
1 12433	    32D2  CD				 DB 0cdh
1 12434	    32D3  34E5r				 DW  L72DA		 ; NonZero --> error
1 12435	    32D5  5D				 DB 5DH			 ; error 93: Invalid compiler directive
1 12436
1 12437	    32D6  18 36				 DB 18h,( L709B)-$-1		 ; yes,	{$i filename}
1 12438
1 12439	    32D8  21			 L7065:	 DB 21h
1 12440	    32D9  3F57r				 DW L7B9D
1 12441	    32DB  7E				 DB 7eh
1 12442	    32DC  A9				 DB 0a9h		 ; XOR 0 = +, XOR 255 =	-
1 12443	    32DD  B0				 DB 0b0h		 ; set corresponding bit
1 12444	    32DE  A9				 DB 0a9h		 ; XOR 0 = +, XOR 255 =	-
1 12445	    32DF  77				 DB 77h
1 12446
1 12447	    32E0  CD			 L706D:	 DB 0cdh
1 12448	    32E1  334Cr				 DW  L7124		 ; read	next character from input
1 12449	    32E3  DD 7E	00		 L7070:	 DB 0ddh,7eh,+0
1 12450	    32E6  FE 2C				 DB 0feh, 02CH
1 12451	    32E8  CA				 DB 0cah
1 12452	    32E9  3264r				 DW L6FF1
1 12453	    32EB  18 CE				 DB 18h,( L7048)-$-1
1 12454
1 12455	    32ED  CD			 L707A:	 DB 0cdh
1 12456	    32EE  334Cr				 DW  L7124		 ; read	letter 'W'
1 12457	    32F0  DD 7E	00			 DB 0ddh,7eh,+0
1 12458	    32F3  CD				 DB 0cdh
1 12459	    32F4  34ABr				 DW  L7286		 ; carry reset if A = digit
1 12460
1 12461	    32F6  CD				 DB 0cdh
1 12462	    32F7  34D3r				 DW  L72C8		 ; carry set --> error
1 12463	    32F9  5D				 DB 5DH			 ; error 93: Invalid compiler directive
1 12464
1 12465	    32FA  D6 30				 DB 0d6h, '0'
1 12466	    32FC  32				  DB 32h
1 12467	    32FD  3F81r				 DW WITHDEPTH		; new WITHDEPTH
1 12468	    32FF  18 DF				 DB 18h,( L706D)-$-1
1 12469
1 12470	    3301  CD			 L708E:	 DB 0cdh
1 12471	    3302  334Cr				 DW  L7124		 ; read	next character from input
1 12472	    3304  DD 7E	00			 DB 0ddh,7eh,+0
1 12473	    3307  CD				 DB 0cdh
1 12474	    3308  34ABr				 DW  L7286		 ; carry reset if A = digit
1 12475	    330A  30 F5				 DB 30h,(L708E)-$-1
1 12476	    330C  18 D5				 DB 18h,( L7070)-$-1
1 12477
1 12478	    330E			 L709B:	 ; parse spaces	and then the include file name
1 12479	    330E  FE 20				 DB 0feh, ' '			  ; followed by	a space	?
1 12480	    3310  20 08				 DB 20h,(L70A7)-$-1		 ; no, end
1 12481	    3312  CD				 DB 0cdh
1 12482	    3313  334Cr				 DW  L7124		 ; read	next character from input
1 12483	    3315  DD 7E	00			 DB 0ddh,7eh,+0
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 220
msx_asm\tur_comp.ASM



1 12484	    3318  18 F4				 DB 18h,( L709B)-$-1
1 12485
1 12486	    331A			 L70A7:
1 12487					 ;	  LD A,(L790E)
1 12488					 ;	  OR A			  ; already reading from a secondary file ?
1 12489					 ;				  ; (an	include	file)
1 12490					 ;
1 12491	    331A  3A				 DB 3ah
1 12492	    331B  40D7r				 DW FILELEVEL
1 12493	    331D  FE 04				 DB 0feh, MAXFILELEVELS
1 12494	    331F  CD				 DB 0cdh
1 12495	    3320  34DFr				 DW  L72D4		 ; Zero	--> error
1 12496	    3322  60				 DB 60H			 ; error 96: No	nesting	of include files
1 12497
1 12498	    3323  DD E5				 DB 0ddh,0e5h
1 12499	    3325  E1				 DB 0e1h		 ; HL =	compiler source	text pointer
1 12500
1 12501	    3326  E5				 DB 0e5h
1 12502
1 12503	    3327  11				  DB 11h
1 12504	    3328  4094r				 DW TEMPFILEDATA
1 12505	    332A  3E 50				 DB 3eh,'P'
1 12506	    332C  01				 DB 01h
1 12507	    332D  4153				 DW 'A'*256+'S'
1 12508	    332F  CD				 DB 0cdh
1 12509	    3330  0000e				 DW  PARSENAME
1 12510
1 12511	    3332  D1				 DB 0d1h		 ; DE =	start of filename
1 12512
1 12513					 ;	  CALL L2D2A		  ; parse filename at DE with no wildcards and
1 12514					 ;				  ; a default extension	of '.PAS'
1 12515
1 12516	    3333  E5				 DB 0e5h		 ; save	current	compiler source	text pointer
1 12517	    3334  EB				 DB 0ebh
1 12518
1 12519	    3335  CD				  DB 0cdh
1 12520	    3336  3FC0r				 DW  GONEXTFILELEVEL
1 12521
1 12522	    3338  DD E1				 DB 0ddh,0e1h			 ; IX =	new compiler source text pointer
1 12523
1 12524					 ;	  LD DE,L005C
1 12525					 ;	  PUSH DE
1 12526					 ;	  LD C,00FH
1 12527					 ;	  CALL DOSIXIY		  ; open file
1 12528					 ;	  POP HL
1 12529					 ;	  INC A			  ; A was 0FFH if error	occurred
1 12530					 ;
1 12531					 ;	  CALL L72D4		  ; Zero --> error
1 12532					 ;	  DB 5AH		  ; error 90: File not found
1 12533					 ;
1 12534					 ;	  LD DE,L790F
1 12535					 ;	  LD BC,FCB_LEN
1 12536					 ;	  LDIR			  ; copy opened	FCB at L005C to	FCB at L790F
1 12537					 ;
1 12538					 ;	  LD A,(L7900)
1 12539					 ;	  DEC A
1 12540					 ;	  JR Z,L70E2		  ; jump if compiling to disk
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 221
msx_asm\tur_comp.ASM



1 12541					 ;				  ; that is calculate a	buffer to read more
1 12542					 ;				  ; text at once for more efficiency
1 12543					 ;
1 12544					 ;	  LD HL,L7957		  ; start address buffer
1 12545					 ;	  LD (L7BE4),HL
1 12546					 ;	  LD HL,L79D7		  ; end	address	buffer
1 12547					 ;	  LD A,1		  ; read from file = NonZero
1 12548					 ;	  JR L7103
1 12549					 ;
1 12550					 ;L70E2:  LD HL,(L7B73)		  ; bottom of variable table
1 12551					 ;	  LD DE,(L7BE1)		  ; start address of free area
1 12552					 ;	  LD (L7BE4),DE		  ; save start of text buffer
1 12553					 ;	  OR A
1 12554					 ;	  SBC HL,DE		  ; HL = total space that is still free
1 12555					 ;
1 12556					 ;	  SRL H			  ; divide by 2
1 12557					 ;	  RR L
1 12558					 ;;	   SRL H
1 12559					 ;;	   RR L			   ; divide by 4
1 12560					 ;
1 12561					 ;	  LD A,H		  ; check if >=	256
1 12562					 ;	  OR A
1 12563					 ;
1 12564					 ;	  CALL L72D4		  ; Zero --> error
1 12565					 ;	  DB 63H		  ; error 99: Compiler overflow
1 12566					 ;
1 12567					 ;	  LD A,L		  ; round off to 128 bytes
1 12568					 ;	  AND 128
1 12569					 ;	  LD L,A
1 12570					 ;	  PUSH HL
1 12571					 ;	  ADD HL,HL
1 12572					 ;	  LD A,H		  ; A =	number of blocks of
1 12573					 ;
1 12574					 ;	  POP HL
1 12575					 ;	  ADD HL,DE
1 12576					 ;
1 12577					 ;L7103:
1 12578					 ;	  LD (L7BE6),HL
1 12579					 ;	  LD (L7BE9),HL
1 12580					 ;	  LD (L7BE8),A		  ; save number	of records of 128 bytes
1 12581					 ;	  LD (L790E),A		  ; set: read from file	= non-zero
1 12582					 ;
1 12583					 ;	  LD HL,0
1 12584					 ;	  LD (L7BEB),HL		  ; init current position in include file
1 12585					 ;	  LD HL,0
1 12586					 ;	  LD (INCLINE),HL		  ; restart line number
1 12587
1 12588	    333A  CD				 DB 0cdh
1 12589	    333B  33C9r				 DW  L718F		 ; print current line number
1 12590
1 12591	    333D  3A				 DB 3ah
1 12592	    333E  3F57r				 DW L7B9D		 ; compiler directives
1 12593	    3340  32				 DB 32h
1 12594	    3341  3F59r				 DW L7B9F		 ; save	them
1 12595	    3343  3A				 DB 3ah
1 12596	    3344  3F81r				 DW WITHDEPTH
1 12597	    3346  32				 DB 32h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 222
msx_asm\tur_comp.ASM



1 12598	    3347  3F82r				 DW L7BC8		 ; save	?
1 12599	    3349  C3				 DB 0c3h
1 12600	    334A  32BBr				 DW  L7048
1 12601
1 12602	    334C			 L7124:	  ; -----------------------------------------------------------
1 12603						 ; ReadLine
1 12604						 ; -----------------------------------------------------------
1 12605
1 12606						 ; read	next character from input buffer
1 12607	    334C  DD 7E	00			 DB 0ddh,7eh,+0
1 12608	    334F  DD 23				 DB 0ddh,23h
1 12609	    3351  B7				 DB 0b7h		 ; begins with a zero?
1 12610	    3352  C0				 DB 0c0h		 ; no, buffer is not empty,
1 12611									 ; quit	with character
1 12612
1 12613						 ; read	a new line from	the input buffer
1 12614	    3353  C5				 DB 0c5h
1 12615	    3354  D5				 DB 0d5h
1 12616	    3355  E5				 DB 0e5h
1 12617
1 12618	    3356  3A				 DB 3ah
1 12619	    3357  3F5Cr				 DW L7BA2
1 12620	    3359  B7				 DB 0b7h		 ; end of file found ?
1 12621
1 12622	    335A  CD				 DB 0cdh
1 12623	    335B  34E5r				 DW  L72DA		 ; NonZero --> error
1 12624	    335D  5B				 DB 5BH			 ; error 91: Unexpected	end of source
1 12625
1 12626					 ;	  LD HL,(L7BD7)		  ; current text pointer
1 12627					 ;	  LD (L7BD9),HL		  ; save start of line of text in memory
1 12628
1 12629					 ;	  LD HL,(L7BEB)		  ; HL = character position in include file
1 12630					 ;	  LD (L7BED),HL		  ; save start of line in include file
1 12631
1 12632	    335E  21				 DB 21h
1 12633	    335F  3D91r				 DW L79D7
1 12634	    3361  E5				 DB 0e5h
1 12635	    3362  DD E1				 DB 0ddh,0e1h			 ; set IX at start of text line	buffer again
1 12636
1 12637	    3364  06 7F				 DB 06h,07FH		 ; maximum number of characters	is 127
1 12638	    3366  E5			 L714A:	 DB 0e5h
1 12639	    3367  C5				 DB 0c5h
1 12640	    3368  CD				 DB 0cdh
1 12641	    3369  3464r				 DW  L71F3		 ; read	character from input
1 12642	    336B  C1				 DB 0c1h
1 12643	    336C  E1				 DB 0e1h
1 12644	    336D  FE 0D				 DB 0feh, 0DH			 ; carriage return?
1 12645	    336F  28 20				 DB 28h,(L7175)-$-1
1 12646	    3371  FE 1A				 DB 0feh, 1AH			 ; end of text?
1 12647	    3373  28 11				 DB 28h,(L716A)-$-1
1 12648	    3375  FE 09				 DB 0feh, 9			 ; TAB?, exception on characters < 20H
1 12649	    3377  28 04				 DB 28h,(L7161)-$-1
1 12650	    3379  FE 20				 DB 0feh, ' '			  ; < 20H, < space
1 12651	    337B  38 E9				 DB 38h,(L714A)-$-1		 ; yes,	read next character
1 12652	    337D  10 03			 L7161:	 DB 10h,( L7166)-$-1
1 12653
1 12654						 ; skip	rest of	line until return, end of text,	tab or space
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 223
msx_asm\tur_comp.ASM



1 12655	    337F  04				 DB 04h
1 12656	    3380  18 E4				 DB 18h,( L714A)-$-1
1 12657
1 12658	    3382  77			 L7166:	 DB 77h		 ; store character in buffer
1 12659	    3383  23				 DB 23h
1 12660	    3384  18 E0				 DB 18h,( L714A)-$-1		 ; next	character
1 12661
1 12662	    3386  32			 L716A:	 DB 32h
1 12663	    3387  3F5Cr				 DW L7BA2		 ; set to non-zero, end	of file	found =	true
1 12664
1 12665	    3389  CD				 DB 0cdh
1 12666	    338A  339Ar				 DW  L717E		 ; increase and	print line number
1 12667	    338C  CD				 DB 0cdh
1 12668	    338D  33C9r				 DW  L718F		 ; print line number
1 12669	    338F  18 03				 DB 18h,( L7178)-$-1
1 12670
1 12671	    3391  CD			 L7175:	 DB 0cdh
1 12672	    3392  339Ar				 DW  L717E		 ; increase and	print line number
1 12673
1 12674	    3394  36 00			 L7178:	 DB 36h,0
1 12675	    3396  E1				 DB 0e1h
1 12676	    3397  D1				 DB 0d1h
1 12677	    3398  C1				 DB 0c1h
1 12678	    3399  C9				 DB 0c9h
1 12679
1 12680	    339A			 L717E:	 ; increases and prints	the current line number	each time
1 12681						 ; line	number and 3fh = 0
1 12682						 ; and gives an	'abort compilation' message if a key is	pressed
1 12683						 ; in:	 -
1 12684						 ; out:	 -
1 12685	    339A  F5				 DB 0f5h
1 12686	    339B  E5				 DB 0e5h
1 12687
1 12688	    339C  2A				 DB 02ah
1 12689	    339D  4119r				 DW FILEBUFFERLINE
1 12690	    339F  23				 DB 23h
1 12691	    33A0  22				 DB 22h
1 12692	    33A1  4119r				 DW FILEBUFFERLINE
1 12693
1 12694	    33A3  2A				 DB 02ah
1 12695	    33A4  40D5r				 DW TOTALLINES
1 12696	    33A6  23				 DB 23h
1 12697	    33A7  22				 DB 22h
1 12698	    33A8  40D5r				 DW TOTALLINES
1 12699
1 12700	    33AA  7D				 DB 7dh
1 12701	    33AB  E6 3F				 DB 0e6h, 3FH			 ; line	number mod 64 =	0?
1 12702	    33AD  28 1C				 DB 28h,(L7191)-$-1		 ; yes,	print this number and skip PUSH	AF,HL
1 12703	    33AF  E1				 DB 0e1h
1 12704	    33B0  F1				 DB 0f1h
1 12705	    33B1  C9				 DB 0c9h
1 12706
1 12707	    33B2			 PRINTFILENAME:
1 12708						  ; in:	   DE =	handle/FCB block
1 12709
1 12710	    33B2  13				 DB 13h
1 12711	    33B3  EB				 DB 0ebh
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 224
msx_asm\tur_comp.ASM



1 12712
1 12713	    33B4			 PRINTASCIIZUPCASED:
1 12714	    33B4  7E				 DB 7eh
1 12715	    33B5  B7				 DB 0b7h
1 12716	    33B6  C8				 DB 0c8h
1 12717	    33B7  CD				 DB 0cdh
1 12718	    33B8  0000e				 DW  UPCASE
1 12719	    33BA  CD				 DB 0cdh
1 12720	    33BB  0000e				 DW  L03C9
1 12721	    33BD  23				 DB 23h
1 12722	    33BE  18 F4				 DB 18h,( PRINTASCIIZUPCASED)-$-1
1 12723
1 12724	    33C0			 PRINTASCIIZ:
1 12725	    33C0  7E				 DB 7eh
1 12726	    33C1  B7				 DB 0b7h
1 12727	    33C2  C8				 DB 0c8h
1 12728	    33C3  CD				 DB 0cdh
1 12729	    33C4  0000e				 DW  L03C9
1 12730	    33C6  23				 DB 23h
1 12731	    33C7  18 F7				 DB 18h,( PRINTASCIIZ)-$-1
1 12732
1 12733	    33C9			 L718F:	 ; prints current line number and tests	keypressing during compilation
1 12734						 ; changes: -
1 12735	    33C9  F5				 DB 0f5h
1 12736	    33CA  E5				 DB 0e5h
1 12737
1 12738	    33CB  C5			 L7191:	 DB 0c5h
1 12739	    33CC  D5				 DB 0d5h
1 12740	    33CD  DD E5				 DB 0ddh,0e5h
1 12741	    33CF  FD E5				 DB 0fdh,0e5h
1 12742
1 12743					 ;	  LD HL,(0FC9EH)
1 12744					 ;	  PUSH HL
1 12745
1 12746	    33D1  3E 0D				 DB 3eh,13
1 12747	    33D3  CD				 DB 0cdh
1 12748	    33D4  0000e				 DW  L03C9		 ; print carriage return
1 12749
1 12750					 ;	  LD A,(L7BE3)
1 12751					 ;	  CALL L04B4		  ; print update count
1 12752					 ;
1 12753					 ;	  LD A,' '
1 12754					 ;	  CALL L03C9
1 12755
1 12756	    33D6  2A				 DB 02ah
1 12757	    33D7  3F2Dr				 DW L7B73
1 12758	    33D9  ED 5B				 DB 0edh,5bh
1 12759	    33DB  2D3Cr				 DW COMPCUR
1 12760	    33DD  B7				 DB 0b7h
1 12761	    33DE  ED 52				 DB 0EDH,052h
1 12762	    33E0  CD				 DB 0cdh
1 12763	    33E1  0942r				 DW  L2E5C		 ; print free memory in	compiler
1 12764									 ; print in decimals, always 5 characters
1 12765
1 12766					 ;	  LD HL,(COMPCUR)		  ; current compiler address
1 12767					 ;	  CALL L04AF		  ; print HL hexadecimal
1 12768					 ;	  LD A,'-'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 225
msx_asm\tur_comp.ASM



1 12769					 ;	  CALL L03C9		  ; print '-'
1 12770					 ;	  LD HL,(L7B73)		  ; bottom of variable table
1 12771					 ;	  CALL L04AF
1 12772
1 12773	    33E3  3E 20				 DB 3eh,' '
1 12774	    33E5  CD				 DB 0cdh
1 12775	    33E6  0000e				 DW  L03C9
1 12776	    33E8  CD				 DB 0cdh
1 12777	    33E9  0000e				 DW  L03C9
1 12778
1 12779					 ;	  LD HL,(MEMCUR)	  ; current address for	new code
1 12780					 ;	  CALL L04AF		  ; print
1 12781					 ;	  LD A,'-'
1 12782					 ;	  CALL L03C9
1 12783					 ;	  LD HL,(L7908)		  ; highest possible address for generated code
1 12784					 ;	  DEC H			  ; minus 512
1 12785					 ;	  DEC H
1 12786					 ;	  CALL L04AF
1 12787					 ;
1 12788					 ;	  LD A,' '
1 12789					 ;	  CALL L03C9
1 12790
1 12791	    33EB  2A				 DB 02ah
1 12792	    33EC  40D5r				 DW TOTALLINES
1 12793	    33EE  CD				 DB 0cdh
1 12794	    33EF  0942r				 DW  L2E5C		 ; print total compiled	pascal lines
1 12795
1 12796	    33F1  3E 20				 DB 3eh,' '
1 12797	    33F3  CD				 DB 0cdh
1 12798	    33F4  0000e				 DW  L03C9
1 12799
1 12800	    33F6  2A				 DB 02ah
1 12801	    33F7  4119r				 DW FILEBUFFERLINE
1 12802	    33F9  CD				 DB 0cdh
1 12803	    33FA  0942r				 DW  L2E5C		 ; print current line number in	file
1 12804
1 12805	    33FC  3E 20				 DB 3eh,' '
1 12806	    33FE  CD				 DB 0cdh
1 12807	    33FF  0000e				 DW  L03C9
1 12808	    3401  CD				 DB 0cdh
1 12809	    3402  0000e				 DW  L03C9
1 12810
1 12811	    3404  3A				 DB 3ah
1 12812	    3405  40D7r				 DW FILELEVEL
1 12813	    3407  C6 30				 DB 0c6h,'0'
1 12814	    3409  FE 30				 DB 0feh, '0'
1 12815	    340B  20 02				 DB 20h,(L7192)-$-1		 ; jump	to print include level
1 12816
1 12817	    340D  3E 20				 DB 3eh,' '
1 12818
1 12819	    340F  CD			 L7192:	 DB 0cdh
1 12820	    3410  0000e				 DW  L03C9		 ; print include level or space
1 12821
1 12822	    3412  3E 20				 DB 3eh,' '
1 12823	    3414  CD				 DB 0cdh
1 12824	    3415  0000e				 DW  L03C9		 ; space between level and filename
1 12825
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 226
msx_asm\tur_comp.ASM



1 12826					 ;	  LD A,(L790E)		  ; reading from include file?
1 12827					 ;	  OR A
1 12828					 ;	  JR Z,L71A6		  ; jump if reading from memory
1 12829					 ;
1 12830					 ;	  LD HL,(INCLINE)
1 12831					 ;	  LD DE,L790F		  ; HL = address of include file FCB
1 12832					 ;	  LD A,'I'		     ; print 'I' if reading from include file
1 12833					 ;	  JR L71A8
1 12834					 ;
1 12835					 ;L71A6:
1 12836
1 12837	    3417  11				 DB 11h
1 12838	    3418  40D8r				 DW FILECURRENTINFO
1 12839	    341A  CD				  DB 0cdh
1 12840	    341B  33B2r				 DW  PRINTFILENAME
1 12841
1 12842					 ;	   LD A,(DOS2Present)
1 12843					 ;	   OR A
1 12844					 ;	  PUSH AF
1 12845					 ;	  CALL Z,L2DF8		  ; print FCB if DOS 1
1 12846					 ;	  INC DE
1 12847					 ;	  POP AF
1 12848					 ;	  EX DE,HL
1 12849					 ;	  CALL NZ,PrintASCIIZ	  ; print drive/path/filename if DOS 2
1 12850
1 12851					 ;	  LD DE,L451D		  ; work filename FCB
1 12852					 ;	  JR Z,L71A61
1 12853					 ;
1 12854					 ;	  LD DE,L44F9		  ; main filename FCB
1 12855					 ;
1 12856					 ;L71A61:  LD A,' '		      ;	otherwise print	space
1 12857					 ;
1 12858					 ;L71A8:  PUSH DE		  ; save FCB address
1 12859					 ;	  PUSH HL
1 12860					 ;
1 12861					 ;	  CALL L03C9
1 12862					 ;	  LD A,' '
1 12863					 ;	  CALL L03C9		  ; print space
1 12864					 ;
1 12865					 ;	  POP HL		  ; current line number
1 12866					 ;	  CALL L2E5C		  ; print in decimals, always 5	characters
1 12867					 ;	  CALL L2E61		  ; print line number
1 12868					 ;	  LD A,' '
1 12869					 ;	  CALL L03C9		  ; print space
1 12870					 ;
1 12871					 ;	  POP DE		  ; DE = FCB address
1 12872					 ;	  CALL L2DF8		  ; print file name in DE
1 12873
1 12874	    341D  3E 1B				 DB 3eh,27
1 12875	    341F  CD				 DB 0cdh
1 12876	    3420  0000e				 DW  L03C9
1 12877	    3422  3E 4B				 DB 3eh,'K'
1 12878	    3424  CD				 DB 0cdh
1 12879	    3425  0000e				 DW  L03C9		 ; print ESC K,	delete until end of line
1 12880
1 12881					 ;	  LD B,8
1 12882					 ;L71A81:  LD A,' '
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 227
msx_asm\tur_comp.ASM



1 12883					 ;	  CALL L03C9
1 12884					 ;	  DJNZ L71A81
1 12885
1 12886	    3427  CD				 DB 0cdh
1 12887	    3428  0000e				 DW  CONSTPTR		 ; keypressed ?
1 12888	    342A  B7				 DB 0b7h
1 12889	    342B  28 2E				 DB 28h,(L71EA)-$-1
1 12890	    342D  CD				 DB 0cdh
1 12891	    342E  0000e				 DW  L0200
1 12892	    3430  20 20	20 2A 2A 2A 20+		 DB '	*** Abort compilation',0
  12893		  41 62	6F 72 74 20 63+
  12894		  6F 6D	70 69 6C 61 74+
  12895		  69 6F	6E 00
1 12896	    3449  CD				 DB 0cdh
1 12897	    344A  0919r				 DW  L2D01		 ; print ' (Y/N)? '
1 12898
1 12899	    344C  CD				 DB 0cdh
1 12900	    344D  34E5r				 DW  L72DA		 ; NonZero --> error
1 12901	    344F  CA				 DB 0CAH		 ; staat niet in Herman's boek(je)
1 12902
1 12903	    3450  06 20				 DB 06h,20H
1 12904	    3452  CD			 L71E1:	 DB 0cdh
1 12905	    3453  0000e				 DW  L0200
1 12906	    3455  08 20	08 00			 DB 8,'	',8,0		    ; backspace, space,	backspace
1 12907	    3459  10 F7				 DB 10h,( L71E1)-$-1
1 12908
1 12909	    345B			 L71EA:
1 12910
1 12911					 ;	  POP HL
1 12912					 ;	  LD (0FC9EH),HL
1 12913
1 12914	    345B  FD E1				 DB 0fdh,0e1h
1 12915	    345D  DD E1				 DB 0ddh,0e1h
1 12916	    345F  D1				 DB 0d1h
1 12917	    3460  C1			 L71EF:	 DB 0c1h
1 12918	    3461  E1				 DB 0e1h
1 12919	    3462  F1				 DB 0f1h
1 12920	    3463  C9				 DB 0c9h
1 12921
1 12922	    3464			 L71F3:	  ; in:	   -
1 12923						 ; out:	 A = next character from text file, memory or include
1 12924						 ;	 Z-flag	set if A was 1AH, end of text
1 12925					 ;	  LD HL,(FileBufferCount)
1 12926					 ;	  DEC HL
1 12927					 ;	  LD A,H
1 12928					 ;	  OR L
1 12929					 ;; ;!	    pushf
1 12930					 ;	  DEC HL
1 12931					 ;; ;!	    popf
1 12932					 ;	  LD (FileBufferCount),HL
1 12933					 ;
1 12934					 ;	  CALL Z,FileReadBuffer	  ; read new buffer if count ==	0
1 12935
1 12936	    3464  2A				 DB 02ah
1 12937	    3465  411Fr				 DW FILEBUFFERPOS
1 12938	    3467  7E				 DB 7eh
1 12939					 ;	  CALL L03C9
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 228
msx_asm\tur_comp.ASM



1 12940	    3468  23				 DB 23h
1 12941	    3469  22				 DB 22h
1 12942	    346A  411Fr				 DW FILEBUFFERPOS
1 12943
1 12944	    346C  F5				 DB 0f5h
1 12945
1 12946	    346D  2A				 DB 02ah
1 12947	    346E  4121r				 DW FILEBUFFERCOUNT
1 12948	    3470  2B				 DB 2bh
1 12949	    3471  7C				 DB 7ch
1 12950	    3472  B5				 DB 0b5h
1 12951	    3473  CC				 DB 0cch
1 12952	    3474  405Ar				 DW FILEREADBUFFER	 ; read	new buffer if count = 0
1 12953	    3476  22				 DB 22h
1 12954	    3477  4121r				 DW FILEBUFFERCOUNT
1 12955
1 12956	    3479  F1				 DB 0f1h
1 12957
1 12958	    347A  FE 1A				 DB 0feh, 1AH			 ; end of file marker (^Z) ?
1 12959	    347C  C0				 DB 0c0h		 ; quit	if it was not end of file
1 12960					 ; 33e
1 12961
1 12962	    347D  01				  DB 01h
1 12963	    347E  40D8r				 DW FILECURRENTINFO	 ; 33e TODO, 568A
1 12964	    3480  CD				  DB 0cdh
1 12965	    3481  0000e				 DW  CLOSEFILE
1 12966	    3483  CD				  DB 0cdh
1 12967	    3484  34E5r				 DW  L72DA
1 12968	    3486  85				  DB 85H
1 12969
1 12970					 ; 33e
1 12971	    3487  3A				 DB 3ah
1 12972	    3488  40D7r				 DW FILELEVEL
1 12973	    348A  B7				 DB 0b7h		 ; previous level = include file ?
1 12974	    348B  3E 1A				 DB 3eh,1AH
1 12975	    348D  C8				 DB 0c8h		 ; return with end of file if end of all
1 12976
1 12977	    348E  CD				 DB 0cdh
1 12978	    348F  4049r				 DW  GOPREVIOUSFILELEVEL
1 12979
1 12980	    3491  CD				 DB 0cdh
1 12981	    3492  33C9r				 DW  L718F		 ; update display status
1 12982
1 12983	    3494  18 CE				 DB 18h,( L71F3)-$-1		 ; read	next character from this level
1 12984
1 12985					 ;	  LD A,(L790E)
1 12986					 ;	  OR A
1 12987					 ;	  JR NZ,L7205		  ; jump if reading from include file
1 12988					 ;
1 12989					 ;L71F9:  LD HL,(L7BD7)		  ; HL = current text pointer
1 12990					 ;	  LD A,(HL)
1 12991					 ;	  CP 1AH		  ; end	of text?
1 12992					 ;	  RET Z
1 12993					 ;	  INC HL		  ; next position
1 12994					 ;	  LD (L7BD7),HL
1 12995					 ;	  RET
1 12996					 ;
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 229
msx_asm\tur_comp.ASM



1 12997					 ;L7205:  ; read from text file
1 12998					 ;
1 12999					 ;	  LD HL,(L7BE9)		  ; current text pointer for include file
1 13000					 ;	  LD DE,(L7BE6)		  ; end	address	of include file	data
1 13001					 ;	  OR A
1 13002					 ;	  SBC HL,DE
1 13003					 ;	  ADD HL,DE
1 13004					 ;	  JR C,L7242		  ; jump if current pointer < end address
1 13005					 ;				  ; still data present
1 13006					 ;
1 13007					 ;	  LD DE,(L7BE4)		  ; destination	address, start address for
1 13008					 ;				  ; include file data
1 13009					 ;	  LD A,(L7BE8)		  ; calculate number of	records
1 13010					 ;	  LD B,A		  ; 128	bytes to read
1 13011					 ;L721A:  PUSH BC
1 13012					 ;	  PUSH DE
1 13013					 ;	  LD C,1AH
1 13014					 ;	  CALL DOSIXIY		  ; set	DMA address
1 13015					 ;
1 13016					 ;	  LD DE,L790F		  ; include FCB
1 13017					 ;	  LD C,14H
1 13018					 ;	  CALL DOSIXIY		  ; sequential read 128	bytes
1 13019					 ;	  POP DE
1 13020					 ;	  POP BC
1 13021					 ;	  OR A
1 13022					 ;	  JR NZ,L7237		  ; truncate at	last DMA address
1 13023					 ;
1 13024					 ;	  LD HL,128
1 13025					 ;	  ADD HL,DE		  ; destination	address	for next block
1 13026					 ;	  EX DE,HL
1 13027					 ;	  DJNZ L721A
1 13028					 ;	  JR L723F
1 13029					 ;
1 13030					 ;L7237:  ; error occurred during loading of text place	a CTRL-Z (end-of-text)
1 13031					 ;	  ; error means	a partially read last block of 128 bytes so the	end
1 13032					 ;	  ; address of the include file	text must be adjusted
1 13033					 ;	  LD A,1AH
1 13034					 ;	  LD (DE),A
1 13035					 ;	  INC DE
1 13036					 ;	  LD (L7BE6),DE		  ; set	new end	address	of include file
1 13037					 ;
1 13038					 ;L723F:  ; init current pointer
1 13039					 ;	  LD HL,(L7BE4)		  ; HL = start address of loaded text
1 13040					 ;
1 13041					 ;L7242:  LD A,(HL)
1 13042					 ;	  INC HL		  ; point to next character
1 13043					 ;	  LD (L7BE9),HL		  ; set	new current text pointer
1 13044					 ;	  CP 1AH
1 13045					 ;	  JR NZ,L725D
1 13046					 ;
1 13047					 ;	  XOR A
1 13048					 ;	  LD (L790E),A		  ; set: read from memory
1 13049					 ;
1 13050					 ;	  LD A,(L7B9F)		  ; saved directives
1 13051					 ;	  LD (L7B9D),A		  ; restore compiler directives
1 13052					 ;
1 13053					 ;	  LD A,(L7BC8)
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 230
msx_asm\tur_comp.ASM



1 13054					 ;	  LD (WITHDEPTH),A	  ; restore
1 13055					 ;
1 13056					 ;	  JR L71F9
1 13057					 ;
1 13058					 ;L725D:  LD HL,(L7BEB)
1 13059					 ;	  INC HL		  ; increase current file position
1 13060					 ;				  ; in include file
1 13061					 ;	  LD (L7BEB),HL
1 13062					 ;	  RET
1 13063
1 13064					 ;DOSIXIY: PUSH	IX
1 13065					 ;	   PUSH	IY
1 13066					 ;	   CALL	MSXDOS
1 13067					 ;	   POP IY
1 13068					 ;	   POP IX
1 13069					 ;	   RET
1 13070
1 13071	    3496			 L7271:	 ; in:	 A = testing character
1 13072						 ; out:	 Carry Flag Reset if A in ['A'..'Z','a'..'z','_']
1 13073						 ;	 Carry Flag Set	if A is	not a letter and not an	underscore
1 13074						 ;	 A unchanged
1 13075	    3496  FE 41				 DB 0feh, 'A'
1 13076	    3498  D8				 DB 0d8h
1 13077	    3499  FE 5B				 DB 0feh, 'Z'+1
1 13078	    349B  3F				 DB 3fh
1 13079	    349C  D0				 DB 0d0h
1 13080	    349D  FE 5F				 DB 0feh, '_'
1 13081	    349F  C8				 DB 0c8h
1 13082	    34A0  FE 61				 DB 0feh, 'a'
1 13083	    34A2  D8				 DB 0d8h
1 13084	    34A3  FE 7B				 DB 0feh, 'z'+1
1 13085	    34A5  3F				 DB 3fh
1 13086	    34A6  C9				 DB 0c9h
1 13087
1 13088	    34A7			 L7282:	 ; in:	 A = testing character
1 13089						 ; out:	 Carry Flag Reset if see condition at L7271 and	if
1 13090						 ;	 A in ['0'..'9']
1 13091						 ;	 Carry Flag Set	if not an letter, underscore or	decimal
1 13092	    34A7  CD				 DB 0cdh
1 13093	    34A8  3496r				 DW  L7271		 ; letter or underscore
1 13094	    34AA  D0				 DB 0d0h
1 13095
1 13096	    34AB			 L7286:	 ; in:	 A = testing character
1 13097						 ; out:	 Carry Flag Reset if A in ['0'..'9']
1 13098						 ;	 Carry Flag Set	otherwise
1 13099	    34AB  FE 30				 DB 0feh, '0'			  ; < '0' ?
1 13100	    34AD  D8				 DB 0d8h
1 13101	    34AE  FE 3A				 DB 0feh, '9'+1			  ; > '9' ?
1 13102	    34B0  3F				 DB 3fh
1 13103	    34B1  C9				 DB 0c9h
1 13104
1 13105	    34B2			 L728D:	 ; checks if the lower bound <=	upper bound
1 13106						 ; in:	 HL = <n>, upper bound
1 13107						 ;	 DE = <m>, lower bound
1 13108						 ; out:	 Carry = 1, if HL < DE
1 13109	    34B2  7C				 DB 7ch
1 13110	    34B3  AA				 DB 0aah
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 231
msx_asm\tur_comp.ASM



1 13111
1 13112	    34B4  7C				 DB 7ch
1 13113	    34B5  FA				 DB 0fah
1 13114	    34B6  34BDr				 DW L7298		 ; jump	if one bound is	negative
1 13115	    34B8  BA				 DB 0bah
1 13116	    34B9  C0				 DB 0c0h
1 13117	    34BA  7D				 DB 7dh
1 13118	    34BB  BB				 DB 0bbh
1 13119	    34BC  C9				 DB 0c9h
1 13120
1 13121	    34BD  17			 L7298:	 DB 17h			 ; return Carry	= 1, if	upper bound < 0
1 13122	    34BE  C9				 DB 0c9h
1 13123
1 13124	    34BF			 L729A:	 ; in:	 HL, DE
1 13125						 ; out:	 HL = HL * DE
1 13126	    34BF  44				 DB 44h
1 13127	    34C0  4D				 DB 4dh
1 13128	    34C1  21				 DB 21h
1 13129	    34C2  0000				 DW 0			 ; sum = 0
1 13130	    34C4  3E 10				 DB 3eh,16
1 13131
1 13132	    34C6  29			 L72A1:	 DB 029h
1 13133	    34C7  D8				 DB 0d8h		 ; quit	if overflow
1 13134
1 13135	    34C8  EB				 DB 0ebh
1 13136	    34C9  29				 DB 029h
1 13137	    34CA  EB				 DB 0ebh
1 13138	    34CB  30 02				 DB 30h,(L72AA)-$-1
1 13139
1 13140	    34CD  09				 DB 09h
1 13141	    34CE  D8				 DB 0d8h
1 13142	    34CF  3D			 L72AA:	 DB 3dh
1 13143	    34D0  20 F4				 DB 20h,(L72A1)-$-1
1 13144	    34D2  C9				 DB 0c9h
1 13145
1 13146					 ;	  divide ?
1 13147					 ;	  LD B,D
1 13148					 ;	  LD C,E
1 13149					 ;	  EX DE,HL
1 13150					 ;	  XOR A
1 13151					 ;	  LD H,A
1 13152					 ;	  LD L,A
1 13153					 ;	  LD A,011H
1 13154					 ;L72B6:  ADC HL,HL
1 13155					 ;	  SBC HL,BC
1 13156					 ;	  JR NC,L72BE
1 13157					 ;	  ADD HL,BC
1 13158					 ;	  SCF
1 13159					 ;L72BE:  CCF
1 13160					 ;	  RL E
1 13161					 ;	  RL D
1 13162					 ;	  DEC A
1 13163					 ;	  JR NZ,L72B6
1 13164					 ;	  EX DE,HL
1 13165					 ;	  RET
1 13166
1 13167	    34D3  E3			 L72C8:	 DB 0e3h	 ; error if carry set
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 232
msx_asm\tur_comp.ASM



1 13168	    34D4  23				 DB 23h
1 13169	    34D5  E3				 DB 0e3h
1 13170	    34D6  D0				 DB 0d0h
1 13171	    34D7  18 10				 DB 18h,( L72DE)-$-1
1 13172
1 13173	    34D9  E3			 L72CE:	 DB 0e3h	 ; error if carry reset	; unused ???
1 13174	    34DA  23				 DB 23h
1 13175	    34DB  E3				 DB 0e3h
1 13176	    34DC  D8				 DB 0d8h
1 13177	    34DD  18 0A				 DB 18h,( L72DE)-$-1
1 13178
1 13179	    34DF  E3			 L72D4:	 DB 0e3h	 ; error if zero flag set
1 13180					 ;!	 pushf
1 13181	    34E0  23				 DB 23h
1 13182					 ;!	 popf
1 13183	    34E1  E3				 DB 0e3h
1 13184	    34E2  C0				 DB 0c0h
1 13185	    34E3  18 04				 DB 18h,( L72DE)-$-1
1 13186
1 13187	    34E5  E3			 L72DA:	 DB 0e3h	 ; error if zero flag reset
1 13188					 ;!	 pushf
1 13189	    34E6  23				 DB 23h
1 13190					 ;!	 popf
1 13191	    34E7  E3				 DB 0e3h
1 13192	    34E8  C8				 DB 0c8h
1 13193	    34E9  E1			 L72DE:	 DB 0e1h
1 13194	    34EA  2B				 DB 2bh
1 13195	    34EB  E5				 DB 0e5h
1 13196
1 13197	    34EC  E1			 L72E1:	 DB 0e1h
1 13198	    34ED  7E				 DB 7eh		 ; A = error code
1 13199
1 13200	    34EE  CD			 L72E3:	 DB 0cdh
1 13201	    34EF  33C9r				 DW  L718F		 ; make	update of current line
1 13202
1 13203	    34F1  32				 DB 32h
1 13204	    34F2  3914r				 DW L7901		 ; save	error code
1 13205	    34F4  B7				 DB 0b7h
1 13206	    34F5  28 08				 DB 28h,(L730C)-$-1
1 13207
1 13208	    34F7  DD E5				 DB 0ddh,0e5h
1 13209	    34F9  E1				 DB 0e1h
1 13210	    34FA  11				 DB 11h
1 13211	    34FB  3D91r				 DW L79D7		 ; DE =	start of line buffer
1 13212						 ; NonCarry
1 13213	    34FD  ED 52				 DB 0EDH,052h		 ; HL =	zero-based column
1 13214
1 13215					 ;	  LD DE,(L7BED)		  ; text position in include file
1 13216					 ;	  LD A,(L790E)
1 13217					 ;	  OR A
1 13218					 ;	  JR NZ,L7308		  ; jump if reading from include file
1 13219					 ;
1 13220					 ;	  LD DE,(L4544)		  ; HL = start of text area
1 13221					 ;	  SBC HL,DE
1 13222					 ;	  LD DE,(L7BD9)		  ; DE = start of line of text in memory
1 13223					 ;
1 13224					 ;L7308:  ADD HL,DE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 233
msx_asm\tur_comp.ASM



1 13225					 ;	  LD (L790C),HL
1 13226
1 13227	    34FF  3A			 L730C:	 DB 3ah
1 13228	    3500  3913r				 DW L7900
1 13229	    3502  3D				 DB 3dh
1 13230	    3503  20 06				 DB 20h,(L731A)-$-1		 ; jump	if searching
1 13231
1 13232	    3505  01				  DB 01h
1 13233	    3506  3921r				 DW CODEFILE
1 13234	    3508  CD				  DB 0cdh
1 13235	    3509  0000e				 DW  CLOSEFILE
1 13236
1 13237					 ;	   LD DE,L7933
1 13238					 ;	   LD C,010H
1 13239					 ;	   CALL	DOSIXIY		      ;	close
1 13240
1 13241	    350B  ED 7B			 L731A:	 DB 0edh,7bh
1 13242	    350D  3F2Br				 DW L7B71
1 13243	    350F  C9				 DB 0c9h
1 13244
1 13245	    3510  000B			 L731F:	 DW 0BH
1 13246	    3512  379Fr				 DW LONGDEF		 ; definition of a longint
1 13247	    3514  D4				 DB 'T'	+ 80H
1 13248	    3515  4E 49	47 4E 4F 4C		 DB 'NIGNOL'		    ; LONGINT
1 13249	    351B  00 03				 DB 0,3			 ; type
1 13250
1 13251	    351D  000B				 DW 0BH			 ; length
1 13252	    351F  37A7r				 DW L74DA		 ; definition of an integer
1 13253	    3521  D2 45	47 45 54 4E 49		 DB 0D2H,'EGETNI'	    ; INTEGER
1 13254	    3528  00 03				 DB 0,3			 ; type
1 13255
1 13256	    352A  0008				 DW 8			 ; length
1 13257	    352C  37AFr				 DW L74E2		 ; definition of a char
1 13258	    352E  D2 41	48 43			 DB 0D2H,'AHC'		    ; CHAR
1 13259	    3532  00 03				 DB 0,3			 ; type
1 13260
1 13261	    3534  0008				 DW 8			 ; length
1 13262	    3536  37B7r				 DW L74EA		 ; definition of a real
1 13263	    3538  CC 41	45 52			 DB 0CCH,'AER'		    ; REAL
1 13264	    353C  00 03				 DB 0,3			 ; type
1 13265
1 13266	    353E  000B				 DW 0BH			 ; length
1 13267	    3540  37BFr				 DW L74F2		 ; definition of a boolean
1 13268	    3542  CE 41	45 4C 4F 4F 42		 DB 0CEH,'AELOOB'	    ; BOOLEAN
1 13269	    3549  00 03				 DB 0,3			 ; type
1 13270
1 13271					 ;	  DW 8
1 13272					 ;	  DW FILEDEF
1 13273					 ;	  DB 0C5H,'LIF'		     ; FILE
1 13274					 ;	  DB 0,3		  ; type
1 13275
1 13276	    354B  0008				 DW 8			 ; length
1 13277	    354D  37CFr				 DW L74FA		 ; definition of text
1 13278	    354F  D4 58	45 54			 DB 0D4H,'XET'		    ; TEXT
1 13279	    3553  00 03				 DB 0,3			 ; type
1 13280
1 13281	    3555  0008				 DW 8			 ; length
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 234
msx_asm\tur_comp.ASM



1 13282	    3557  37D7r				 DW L7502		 ; definition of a byte
1 13283	    3559  C5 54	59 42			 DB 0C5H,'TYB'		    ; BYTE
1 13284	    355D  00 03				 DB 0,3			 ; type
1 13285
1 13286
1 13287	    355F  0009				 DW 9			 ; length
1 13288	    3561  0001				 DW 0001H		 ; value of true
1 13289	    3563  0B				 DB 0BH			 ; type: boolean
1 13290	    3564  C5 55	52 54			 DB 0C5H,'URT'		    ; TRUE
1 13291	    3568  00 02				 DB 0,2			 ; constant
1 13292
1 13293	    356A  000A				 DW 0AH			 ; length
1 13294	    356C  0000				 DW 0000H		 ; value of false
1 13295	    356E  0B				 DB 0BH			 ; type: boolean
1 13296	    356F  C5 53	4C 41 46		 DB 0C5H,'SLAF'		    ; FALSE
1 13297	    3574  00 02				 DB 0,2			 ; constant
1 13298
1 13299	    3576  000B				 DW 0BH			 ; length
1 13300	    3578  7FFF				 DW 7FFFH		 ; value of MAXINT
1 13301	    357A  0A				 DB 0AH			 ; type: integer
1 13302	    357B  D4 4E	49 58 41 4D		 DB 0D4H,'NIXAM'	    ; MAXINT
1 13303	    3581  00 02				 DB 0,2			 ; constant
1 13304
1 13305	    3583  0011				 DW 11H			   ; length
1 13306	    3585  FFFF				 DW 0FFFFH
1 13307	    3587  7FFF				 DW 07FFFH
1 13308	    3589  0E				 DB 0EH			 ; type: longint
1 13309	    358A  D4 4E	49 47 4E 4F 4C+		 DB 0D4H,'NIGNOLXAM'	    ; MAXLONGINT
  13310		  58 41	4D
1 13311	    3594  00 02				 DB 0,2			 ; constant
1 13312
1 13313	    3596  000B				 DW 0BH			 ; length
1 13314	    3598  82 21	A2 DA 0F 49		 DB 82H,21H,0A2H,0DAH,0FH,49H ;	REAL value of PI
1 13315	    359E  09				 DB 9			 ; type: real
1 13316	    359F  C9 50				 DB 0C9H,'P'		    ; PI
1 13317	    35A1  00 02				 DB 0,2			 ; constant
1 13318
1 13319	    35A3  000D				 DW 0DH			 ; length
1 13320	    35A5  37CFr				 DW L74FA		 ; definition of a text
1 13321	    35A7  018A				 DW _OUTPUT		 ; LIB,	value
1 13322	    35A9  00				 DB 0
1 13323	    35AA  D4 55	50 54 55 4F		 DB 0D4H,'UPTUO'	    ; OUTPUT
1 13324	    35B0  00 04				 DB 0,4			 ; var absolute
1 13325
1 13326	    35B2  000C				 DW 0CH			 ; length
1 13327	    35B4  37CFr				 DW L74FA		 ; definition of a text
1 13328	    35B6  018A				 DW _OUTPUT		 ; LIB
1 13329	    35B8  00				 DB 0
1 13330	    35B9  D4 55	50 4E 49		 DB 0D4H,'UPNI'		    ; INPUT
1 13331	    35BE  00 04				 DB 0,4			 ; var absolute
1 13332
1 13333	    35C0  000A				 DW 0AH			 ; length
1 13334	    35C2  37CFr				 DW L74FA		 ; definition of a text
1 13335	    35C4  0180				 DW _L00B8		 ; LIB
1 13336	    35C6  00				 DB 0
1 13337	    35C7  CE 4F	43			 DB 0CEH,'OC'		    ; CON
1 13338	    35CA  00 04				 DB 0,4
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 235
msx_asm\tur_comp.ASM



1 13339
1 13340	    35CC  000A				 DW 0AH			 ; length
1 13341	    35CE  37CFr				 DW L74FA		 ; definition of a text
1 13342	    35D0  0180				 DW _L00B8		 ; LIB
1 13343	    35D2  00				 DB 0
1 13344	    35D3  CD 52	54			 DB 0CDH,'RT'		    ; TRM
1 13345	    35D6  00 04				 DB 0,4
1 13346
1 13347	    35D8  000A				 DW 0AH			 ; length
1 13348	    35DA  37CFr				 DW L74FA		 ; definition of a text
1 13349	    35DC  0182				 DW _L00BA		 ; LIB
1 13350	    35DE  00				 DB 0
1 13351	    35DF  C4 42	4B			 DB 0C4H,'BK'		    ; KBD
1 13352	    35E2  00 04				 DB 0,4
1 13353
1 13354	    35E4  000A				 DW 0AH			 ; length
1 13355	    35E6  37CFr				 DW L74FA		 ; definition of a text
1 13356	    35E8  0184				 DW _LST		 ; LIB
1 13357	    35EA  00				 DB 0
1 13358	    35EB  D4 53	4C			 DB 0D4H,'SL'		    ; LST
1 13359	    35EE  00 04				 DB 0,4
1 13360
1 13361	    35F0  000A				 DW 0AH			 ; length
1 13362	    35F2  37CFr				 DW L74FA		 ; definition of a text
1 13363	    35F4  0186				 DW _L00BE		 ; LIB
1 13364	    35F6  00				 DB 0
1 13365	    35F7  D8 55	41			 DB 0D8H,'UA'		    ; AUX
1 13366	    35FA  00 04				 DB 0,4
1 13367
1 13368	    35FC  000A				 DW 0AH			 ; length
1 13369	    35FE  37CFr				 DW L74FA		 ; definition of a text
1 13370	    3600  0188				 DW _L00C0		 ; LIB
1 13371	    3602  00				 DB 0
1 13372	    3603  D2 53	55			 DB 0D2H,'SU'		    ; USR
1 13373	    3606  00 04				 DB 0,4
1 13374
1 13375	    3608  000D				 DW 0DH			 ; length
1 13376	    360A  37D7r				 DW L7502		 ; definition of a byte
1 13377	    360C  018C				 DW _BUFLEN		 ; LIB
1 13378	    360E  00				 DB 0
1 13379	    360F  CE 45	4C 46 55 42		 DB 0CEH,'ELFUB'	    ; BUFLEN
1 13380	    3615  00 04				 DB 0,4
1 13381
1 13382	    3617  000E				 DW 0EH			 ; length
1 13383	    3619  37A7r				 DW L74DA		 ; definition of an integer
1 13384	    361B  0192				 DW _HEAPPTR		 ; LIB
1 13385	    361D  00				 DB 0
1 13386	    361E  D2 54	50 50 41 45 48		 DB 0D2H,'TPPAEH'	    ; HEAPPTR
1 13387	    3625  00 04				 DB 0,4
1 13388
1 13389	    3627  000F				 DW 0FH			 ; length
1 13390	    3629  37A7r				 DW L74DA		 ; definition of an integer
1 13391	    362B  0194				 DW _RECURPTR		 ; LIB
1 13392	    362D  00				 DB 0
1 13393	    362E  D2 54	50 52 55 43 45+		 DB 0D2H,'TPRUCER'	    ; RECURPTR
  13394		  52
1 13395	    3636  00 04				 DB 0,4
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 236
msx_asm\tur_comp.ASM



1 13396
1 13397	    3638  000F				 DW 0FH			 ; length
1 13398	    363A  37A7r				 DW L74DA		 ; definition of an integer
1 13399	    363C  0169				 DW _CONSTPTR+1		 ; LIB
1 13400	    363E  00				 DB 0
1 13401	    363F  D2 54	50 54 53 4E 4F+		 DB 0D2H,'TPTSNOC'	    ; CONSTPTR
  13402		  43
1 13403	    3647  00 04				 DB 0,4
1 13404
1 13405	    3649  000F				 DW 0FH			 ; length
1 13406	    364B  37A7r				 DW L74DA		 ; definition of an integer
1 13407	    364D  016C				 DW _CONINPTR+1		 ; LIB
1 13408	    364F  00				 DB 0
1 13409	    3650  D2 54	50 4E 49 4E 4F+		 DB 0D2H,'TPNINOC'	    ; CONINPTR
  13410		  43
1 13411	    3658  00 04				 DB 0,4
1 13412
1 13413	    365A  0010				 DW 10H			 ; length
1 13414	    365C  37A7r				 DW L74DA		 ; definition of an integer
1 13415	    365E  016F				 DW _CONOUTPTR+1	 ; LIB
1 13416	    3660  00				 DB 0
1 13417	    3661  D2 54	50 54 55 4F 4E+		 DB 0D2H,'TPTUONOC'	    ; CONOUTPTR
  13418		  4F 43
1 13419	    366A  00 04				 DB 0,4
1 13420
1 13421	    366C  0010				 DW 10H			 ; length
1 13422	    366E  37A7r				 DW L74DA		 ; definition of an integer
1 13423	    3670  0172				 DW _LSTOUTPTR+1	 ; LIB
1 13424	    3672  00				 DB 0
1 13425	    3673  D2 54	50 54 55 4F 54+		 DB 0D2H,'TPTUOTSL'	    ; LSTOUTPTR
  13426		  53 4C
1 13427	    367C  00 04				 DB 0,4
1 13428
1 13429	    367E  000F				 DW 0FH			 ; length
1 13430	    3680  37A7r				 DW L74DA		 ; definition of an integer
1 13431	    3682  0178				 DW _AUXINPTR+1		 ; LIB
1 13432	    3684  00				 DB 0
1 13433	    3685  D2 54	50 4E 49 58 55+		 DB 0D2H,'TPNIXUA'	    ; AUXINPTR
  13434		  41
1 13435	    368D  00 04				 DB 0,4
1 13436
1 13437	    368F  0010				 DW 10H			 ; length
1 13438	    3691  37A7r				 DW L74DA		 ; definition of an integer
1 13439	    3693  0175				 DW _AUXOUTPTR+1	 ; LIB
1 13440	    3695  00				 DB 0
1 13441	    3696  D2 54	50 54 55 4F 58+		 DB 0D2H,'TPTUOXUA'	    ; AUXOUTPTR
  13442		  55 41
1 13443	    369F  00 04				 DB 0,4
1 13444
1 13445	    36A1  000F				 DW 0FH			 ; length
1 13446	    36A3  37A7r				 DW L74DA		 ; definition of an integer
1 13447	    36A5  017E				 DW _USRINPTR+1		 ; LIB
1 13448	    36A7  00				 DB 0
1 13449	    36A8  D2 54	50 4E 49 52 53+		 DB 0D2H,'TPNIRSU'	    ; USRINPTR
  13450		  55
1 13451	    36B0  00 04				 DB 0,4
1 13452
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 237
msx_asm\tur_comp.ASM



1 13453	    36B2  0010				 DW 10H			 ; length
1 13454	    36B4  37A7r				 DW L74DA		 ; definition of an integer
1 13455	    36B6  017B				 DW _USROUTPTR+1	 ; LIB
1 13456	    36B8  00				 DB 0
1 13457	    36B9  D2 54	50 54 55 4F 52+		 DB 0D2H,'TPTUORSU'	    ; USROUTPTR
  13458		  53 55
1 13459	    36C2  00 04				 DB 0,4
1 13460
1 13461	    36C4  0011				 DW 11H
1 13462	    36C6  37A7r				 DW L74DA		 ; definition of an integer
1 13463	    36C8  238F				  DW _OVERLAYLOADPTR+1	     ; LIB
1 13464	    36CA  00				 DB 0
1 13465	    36CB  D2 54	50 59 41 4C 52+		 DB 0D2H,'TPYALREVO'	    ; OVERLAYPTR
  13466		  45 56	4F
1 13467	    36D5  00 04				 DB 0,4
1 13468
1 13469	    36D7  000F				 DW 0FH			 ; length
1 13470	    36D9  37A7r				 DW L74DA		 ; definition of an integer
1 13471	    36DB  018E				 DW _ERRORPTR+1		 ; LIB
1 13472	    36DD  00				 DB 0
1 13473	    36DE  D2 54	50 52 4F 52 52+		 DB 0D2H,'TPRORRE'	    ; ERRORPTR
  13474		  45
1 13475	    36E6  00 04				 DB 0,4
1 13476
1 13477	    36E8  000E				 DW 0EH			 ; length
1 13478	    36EA  37D7r				 DW L7502		 ; definition of a byte
1 13479	    36EC  FAF6				 DW 0FAF6H		 ; byte	absolute $FAF6
1 13480	    36EE  00				 DB 0
1 13481	    36EF  C5 47	41 50 54 43 41		 DB 'E'+80H,'GAPTCA'	    ; ACTPAGE
1 13482	    36F6  00 04				 DB 0,4
1 13483
1 13484	    36F8  000D				 DW 0DH			 ; length
1 13485	    36FA  37D7r				 DW L7502		 ; definition of a byte
1 13486	    36FC  FB02				 DW 0FB02H		 ; byte	absolute $FB02
1 13487	    36FE  00				 DB 0
1 13488	    36FF  D2 50	4F 47 4F 4C		 DB 'R'+80H,'POGOL'	    ; LOGOPR
1 13489	    3705  00 04				 DB 0,4
1 13490
1 13491	    3707  000D				 DW 0DH			 ; length
1 13492	    3709  37D7r				 DW L7502		 ; definition of a byte
1 13493	    370B  F3F2				 DW 0F3F2H		 ; byte	absolute $F3F2
1 13494	    370D  00				 DB 0
1 13495	    370E  D4 59	42 52 54 41		 DB 'T'+80H,'YBRTA'	    ; ATRBYT
1 13496	    3714  00 04				 DB 0,4
1 13497
1 13498	    3716  000D				 DW 0DH			 ; length
1 13499	    3718  37D7r				 DW L7502		 ; definition of a byte
1 13500	    371A  F3EB				 DW 0F3EBH		 ; byte	absolute $F3EB
1 13501	    371C  00				 DB 0
1 13502	    371D  D2 45	44 52 4F 42		 DB 'R'+80H,'EDROB'	    ; BORDER
1 13503	    3723  00 04				 DB 0,4
1 13504
1 13505	    3725  0014				 DW 14H			 ; length
1 13506	    3727  37A7r				 DW L74DA		 ; definition of an integer
1 13507	    3729  057F				 DW _MEMMNVER		 ; LIB
1 13508	    372B  00				 DB 0
1 13509	    372C  CE 4F	49 53 52 45 56+		 DB 'N'+80H,'OISREVNAMMEM'  ; MemManVersion
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 238
msx_asm\tur_comp.ASM



  13510		  4E 41	4D 4D 45 4D
1 13511	    3739  00 04				 DB 0,4
1 13512
1 13513	    373B  000E				 DW 0EH			 ; length
1 13514	    373D  37A7r				 DW L74DA		 ; definition of an integer
1 13515	    373F  057C				 DW _RUNGIOS+1
1 13516	    3741  00				 DB 0
1 13517	    3742  D3 4F	49 47 4E 55 52		 DB 'S'+80H,'OIGNUR'	    ; RunGIOS
1 13518	    3749  00 04				 DB 0,4
1 13519
1 13520	    374B  0012				 DW 12H			 ; length
1 13521	    374D  37A7r				 DW L74DA		 ; definition of an integer
1 13522	    374F  0582				 DW _GIOSVER		 ; LIB
1 13523	    3751  00				 DB 0
1 13524	    3752  CE 4F	49 53 52 45 56+		 DB 'N'+80H,'OISREVSOIG'    ; GIOSVersion
  13525		  53 4F	49 47
1 13526	    375D  00 04				 DB 0,4
1 13527
1 13528	    375F  0012				 DW 12H			 ; length
1 13529	    3761  37BFr				 DW L74F2		 ; definition of a boolean
1 13530	    3763  0581				 DW _GIOSOK
1 13531	    3765  00				 DB 0
1 13532	    3766  D4 4E	45 53 45 52 50+		 DB 'T'+80H,'NESERPSOIG'    ; GIOSPresent
  13533		  53 4F	49 47
1 13534	    3771  00 04				 DB 0,4
1 13535
1 13536	    3773  0014				 DW 14H			 ; length
1 13537	    3775  37BFr				 DW L74F2		 ; definition of a boolean
1 13538	    3777  057E				 DW _MEMMAN
1 13539	    3779  00				 DB 0
1 13540	    377A  D4 4E	45 53 45 52 50+		 DB 'T'+80H,'NESERPNAMMEM'  ; MemManPresent
  13541		  4E 41	4D 4D 45 4D
1 13542	    3787  00 04				 DB 0,4
1 13543
1 13544	    3789  000D				 DW 0DH			 ; length
1 13545	    378B  37BFr				 DW L74F2		 ; definition of a boolean
1 13546	    378D  0190				 DW _CBREAK		 ; LIB
1 13547	    378F  00				 DB 0
1 13548	    3790  CB 41	45 52 42 43		 DB 0CBH,'AERBC'	    ; CBREAK
1 13549	    3796  00				 DB 0
1 13550	    3797  04			 L74D2:	 DB 4			 ; start of variable table, going downwards
1 13551
1 13552						 ; basic types
1 13553						 ;  5  = typed file
1 13554						 ;  6  = text
1 13555						 ;  7  = untyped file
1 13556						 ;  8  = string
1 13557						 ;  9  = real
1 13558						 ; 0AH = integer, byte --> differences in range	and length only
1 13559						 ; 0BH = boolean
1 13560						 ; 0CH = char
1 13561						 ; 0EH = longint
1 13562
1 13563						 ; definition of a longint
1 13564	    3798  00				 DB 0
1 13565	    3799  04				 DB 4			 ; length of a longint
1 13566	    379A  00 00				 DB 0,0			 ; max value, ignored
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 239
msx_asm\tur_comp.ASM



1 13567	    379C  00 00				 DB 0,0			 ; min value, ignored
1 13568	    379E  00				 DB 0
1 13569	    379F  0E			 LONGDEF: DB 0EH		 ; type	= LONGINT
1 13570
1 13571						 ; definition of an integer
1 13572	    37A0  00				 DB 0
1 13573	    37A1  02				 DB 2			 ; length of an	integer
1 13574	    37A2  7F FF				 DB 7FH,0FFH		 ; max value
1 13575	    37A4  80 00				 DB 80H,000H		 ; min value
1 13576	    37A6  00				 DB 0
1 13577	    37A7  0A			 L74DA:	 DB 0AH			 ; type	= integer
1 13578
1 13579						 ; definition of a char
1 13580	    37A8  00				 DB 0
1 13581	    37A9  01				 DB 1			 ; length of a character
1 13582	    37AA  00 FF				 DB 0,0FFH		 ; max value
1 13583	    37AC  00 00				 DB 0,0			 ; min value
1 13584	    37AE  00				 DB 0
1 13585	    37AF  0C			 L74E2:	 DB 0CH			 ; type	= char
1 13586
1 13587						 ; definition of a real
1 13588	    37B0  00				 DB 0
1 13589	    37B1  06				 DB 6			 ; length of a real
1 13590	    37B2  00 00				 DB 0,0			 ; max value, ignored
1 13591	    37B4  00 00				 DB 0,0			 ; min value, ignored
1 13592	    37B6  00				 DB 0
1 13593	    37B7  09			 L74EA:	 DB 9			 ; type	= real
1 13594
1 13595						 ; definition of a boolean
1 13596	    37B8  00				 DB 0
1 13597	    37B9  01				 DB 1			 ; length of a boolean
1 13598	    37BA  00 01				 DB 0,1			 ; max value
1 13599	    37BC  00 00				 DB 0,0			 ; min value
1 13600	    37BE  00				 DB 0
1 13601	    37BF  0B			 L74F2:	 DB 0BH			 ; type	= boolean
1 13602
1 13603						 ; definition of an untyped file
1 13604	    37C0  00				 DB 0
1 13605	    37C1  51				  DB DOS_LEN-128
1 13606	    37C2  00 00				 DB 0,0
1 13607	    37C4  00 00				 DB 0,0
1 13608	    37C6  00				 DB 0
1 13609	    37C7  07			 FILEDEF: DB 7			 ; type	= untyped file
1 13610
1 13611						 ; definition of a text
1 13612	    37C8  00				 DB 0
1 13613	    37C9  D1				  DB DOS_LEN		     ; length of a file	info block, FIB
1 13614	    37CA  00 00				 DB 0,0			 ; max value, ignored
1 13615	    37CC  00 00				 DB 0,0			 ; min value, ignored
1 13616	    37CE  00				 DB 0
1 13617	    37CF  06			 L74FA:	 DB 6			 ; type	= text
1 13618
1 13619						 ; definition of a byte
1 13620	    37D0  00				 DB 0
1 13621	    37D1  01				 DB 1			 ; length of a byte
1 13622	    37D2  00 FF				 DB 0,0FFH		 ; max value
1 13623	    37D4  00 00				 DB 0,0			 ; min value
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 240
msx_asm\tur_comp.ASM



1 13624	    37D6  00				 DB 0
1 13625	    37D7  0A			 L7502:	 DB 0AH			 ; type	= byte
1 13626
1 13627	    37D8  00				 DB 0
1 13628	    37D9  09				 DB 9			 ; length
1 13629	    37DA  00 00				 DB 0,0
1 13630	    37DC  00 00				 DB 0,0
1 13631	    37DE  00				 DB 0
1 13632	    37DF  08			 L750A:	 DB 8			 ; type	= string
1 13633
1 13634	    37E0  00				 DB 0
1 13635	    37E1  00				 DB 0			 ; length
1 13636	    37E2  00 00				 DB 0,0
1 13637	    37E4  00 00				 DB 0,0
1 13638	    37E6  00				 DB 0
1 13639	    37E7  00			 L7512:	 DB 0			 ; type
1 13640
1 13641	    37E8  00			 L7513:	 DB 0			 ; 0 indicates 0 bytes following the name
1 13642	    37E9  37FEr				 DW L7529		 ; start of reserved word list:
1 13643									 ; PROGRAM, END, FORWARD,
1 13644									 ; EXTERNAL, PACKED, ARRAY, FILE,
1 13645									 ; SET,	RECORD,	STRING,	OF, ABSOLUTE,
1 13646									 ; THEN, ELSE, DO, UNTIL, NOT, NIL
1 13647
1 13648	    37EB  01				 DB 1			 ; 1 byte following
1 13649	    37EC  3859r				 DW L7584		 ; start of reserved word list:
1 13650									 ; LABEL, CONST, TYPE, VAR, BEGIN, OVERLAY
1 13651									 ; PROCEDURE, FUNCTION
1 13652
1 13653	    37EE  02				 DB 2			 ; 2 bytes following
1 13654	    37EF  3890r				 DW L75BB		 ; start of reserved word list:
1 13655									 ; BEGIN, IF, WHILE, REPEAT, FOR
1 13656									 ; CASE, GOTO, WITH, INLINE
1 13657
1 13658	    37F1  01				 DB 1			 ; 1 byte following
1 13659	    37F2  38CAr				 DW L75F5
1 13660
1 13661	    37F4  01				 DB 1			 ; 1 byte following
1 13662	    37F5  38D9r				 DW L7604
1 13663
1 13664	    37F7  01				 DB 1			 ; 1 byte following
1 13665	    37F8  38F2r				 DW L761D
1 13666
1 13667	    37FA  01				 DB 1			 ; 1 byte following
1 13668	    37FB  3909r				 DW L7634
1 13669
1 13670	    37FD  FF				 DB 0FFH		 ; end of this table
1 13671
1 13672	    37FE			 L7529:	 DC 'PROGRAM'
2 13673
2 13674		  =0009				 strsize sizestr <'PROGRAM'>
2 13675		  =0000				 pos = 0
2 13676
2 13677						 irpc parameter,'PROGRAM'
2 13678							 pos = pos + 1
2 13679
2 13680							 if pos	EQ strsize - 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 241
msx_asm\tur_comp.ASM



2 13681							 db '&parameter' + 80h
2 13682							 endif
2 13683
2 13684							 if pos	GT 1
2 13685								 if pos	LT strsize -1
2 13686									 db '&parameter'
2 13687								 endif
2 13688							 endif
2 13689
2 13690						 endm
3 13691		  =0001					 pos = pos + 1
3 13692
3 13693
3 13694
3 13695		  =0002					 pos = pos + 1
3 13696
3 13697
3 13698	    37FE  50							 db 'P'
3 13699
3 13700		  =0003					 pos = pos + 1
3 13701
3 13702
3 13703	    37FF  52							 db 'R'
3 13704
3 13705		  =0004					 pos = pos + 1
3 13706
3 13707
3 13708	    3800  4F							 db 'O'
3 13709
3 13710		  =0005					 pos = pos + 1
3 13711
3 13712
3 13713	    3801  47							 db 'G'
3 13714
3 13715		  =0006					 pos = pos + 1
3 13716
3 13717
3 13718	    3802  52							 db 'R'
3 13719
3 13720		  =0007					 pos = pos + 1
3 13721
3 13722
3 13723	    3803  41							 db 'A'
3 13724
3 13725		  =0008					 pos = pos + 1
3 13726
3 13727	    3804  CD					 db 'M'	+ 80h
3 13728
3 13729
3 13730		  =0009					 pos = pos + 1
3 13731
3 13732
3 13733
2 13734
1 13735	    3805			 L7530:	 DC 'END'
2 13736
2 13737		  =0005				 strsize sizestr <'END'>
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 242
msx_asm\tur_comp.ASM



2 13738		  =0000				 pos = 0
2 13739
2 13740						 irpc parameter,'END'
2 13741							 pos = pos + 1
2 13742
2 13743							 if pos	EQ strsize - 1
2 13744							 db '&parameter' + 80h
2 13745							 endif
2 13746
2 13747							 if pos	GT 1
2 13748								 if pos	LT strsize -1
2 13749									 db '&parameter'
2 13750								 endif
2 13751							 endif
2 13752
2 13753						 endm
3 13754		  =0001					 pos = pos + 1
3 13755
3 13756
3 13757
3 13758		  =0002					 pos = pos + 1
3 13759
3 13760
3 13761	    3805  45							 db 'E'
3 13762
3 13763		  =0003					 pos = pos + 1
3 13764
3 13765
3 13766	    3806  4E							 db 'N'
3 13767
3 13768		  =0004					 pos = pos + 1
3 13769
3 13770	    3807  C4					 db 'D'	+ 80h
3 13771
3 13772
3 13773		  =0005					 pos = pos + 1
3 13774
3 13775
3 13776
2 13777
1 13778	    3808			 L7533:	 DC 'FORWARD'
2 13779
2 13780		  =0009				 strsize sizestr <'FORWARD'>
2 13781		  =0000				 pos = 0
2 13782
2 13783						 irpc parameter,'FORWARD'
2 13784							 pos = pos + 1
2 13785
2 13786							 if pos	EQ strsize - 1
2 13787							 db '&parameter' + 80h
2 13788							 endif
2 13789
2 13790							 if pos	GT 1
2 13791								 if pos	LT strsize -1
2 13792									 db '&parameter'
2 13793								 endif
2 13794							 endif
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 243
msx_asm\tur_comp.ASM



2 13795
2 13796						 endm
3 13797		  =0001					 pos = pos + 1
3 13798
3 13799
3 13800
3 13801		  =0002					 pos = pos + 1
3 13802
3 13803
3 13804	    3808  46							 db 'F'
3 13805
3 13806		  =0003					 pos = pos + 1
3 13807
3 13808
3 13809	    3809  4F							 db 'O'
3 13810
3 13811		  =0004					 pos = pos + 1
3 13812
3 13813
3 13814	    380A  52							 db 'R'
3 13815
3 13816		  =0005					 pos = pos + 1
3 13817
3 13818
3 13819	    380B  57							 db 'W'
3 13820
3 13821		  =0006					 pos = pos + 1
3 13822
3 13823
3 13824	    380C  41							 db 'A'
3 13825
3 13826		  =0007					 pos = pos + 1
3 13827
3 13828
3 13829	    380D  52							 db 'R'
3 13830
3 13831		  =0008					 pos = pos + 1
3 13832
3 13833	    380E  C4					 db 'D'	+ 80h
3 13834
3 13835
3 13836		  =0009					 pos = pos + 1
3 13837
3 13838
3 13839
2 13840
1 13841	    380F			 L753A:	 DC 'EXTERNAL'
2 13842
2 13843		  =000A				 strsize sizestr <'EXTERNAL'>
2 13844		  =0000				 pos = 0
2 13845
2 13846						 irpc parameter,'EXTERNAL'
2 13847							 pos = pos + 1
2 13848
2 13849							 if pos	EQ strsize - 1
2 13850							 db '&parameter' + 80h
2 13851							 endif
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 244
msx_asm\tur_comp.ASM



2 13852
2 13853							 if pos	GT 1
2 13854								 if pos	LT strsize -1
2 13855									 db '&parameter'
2 13856								 endif
2 13857							 endif
2 13858
2 13859						 endm
3 13860		  =0001					 pos = pos + 1
3 13861
3 13862
3 13863
3 13864		  =0002					 pos = pos + 1
3 13865
3 13866
3 13867	    380F  45							 db 'E'
3 13868
3 13869		  =0003					 pos = pos + 1
3 13870
3 13871
3 13872	    3810  58							 db 'X'
3 13873
3 13874		  =0004					 pos = pos + 1
3 13875
3 13876
3 13877	    3811  54							 db 'T'
3 13878
3 13879		  =0005					 pos = pos + 1
3 13880
3 13881
3 13882	    3812  45							 db 'E'
3 13883
3 13884		  =0006					 pos = pos + 1
3 13885
3 13886
3 13887	    3813  52							 db 'R'
3 13888
3 13889		  =0007					 pos = pos + 1
3 13890
3 13891
3 13892	    3814  4E							 db 'N'
3 13893
3 13894		  =0008					 pos = pos + 1
3 13895
3 13896
3 13897	    3815  41							 db 'A'
3 13898
3 13899		  =0009					 pos = pos + 1
3 13900
3 13901	    3816  CC					 db 'L'	+ 80h
3 13902
3 13903
3 13904		  =000A					 pos = pos + 1
3 13905
3 13906
3 13907
2 13908
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 245
msx_asm\tur_comp.ASM



1 13909	    3817			 L7542:	 DC 'PACKED'
2 13910
2 13911		  =0008				 strsize sizestr <'PACKED'>
2 13912		  =0000				 pos = 0
2 13913
2 13914						 irpc parameter,'PACKED'
2 13915							 pos = pos + 1
2 13916
2 13917							 if pos	EQ strsize - 1
2 13918							 db '&parameter' + 80h
2 13919							 endif
2 13920
2 13921							 if pos	GT 1
2 13922								 if pos	LT strsize -1
2 13923									 db '&parameter'
2 13924								 endif
2 13925							 endif
2 13926
2 13927						 endm
3 13928		  =0001					 pos = pos + 1
3 13929
3 13930
3 13931
3 13932		  =0002					 pos = pos + 1
3 13933
3 13934
3 13935	    3817  50							 db 'P'
3 13936
3 13937		  =0003					 pos = pos + 1
3 13938
3 13939
3 13940	    3818  41							 db 'A'
3 13941
3 13942		  =0004					 pos = pos + 1
3 13943
3 13944
3 13945	    3819  43							 db 'C'
3 13946
3 13947		  =0005					 pos = pos + 1
3 13948
3 13949
3 13950	    381A  4B							 db 'K'
3 13951
3 13952		  =0006					 pos = pos + 1
3 13953
3 13954
3 13955	    381B  45							 db 'E'
3 13956
3 13957		  =0007					 pos = pos + 1
3 13958
3 13959	    381C  C4					 db 'D'	+ 80h
3 13960
3 13961
3 13962		  =0008					 pos = pos + 1
3 13963
3 13964
3 13965
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 246
msx_asm\tur_comp.ASM



2 13966
1 13967	    381D			 L7548:	 DC 'ARRAY'
2 13968
2 13969		  =0007				 strsize sizestr <'ARRAY'>
2 13970		  =0000				 pos = 0
2 13971
2 13972						 irpc parameter,'ARRAY'
2 13973							 pos = pos + 1
2 13974
2 13975							 if pos	EQ strsize - 1
2 13976							 db '&parameter' + 80h
2 13977							 endif
2 13978
2 13979							 if pos	GT 1
2 13980								 if pos	LT strsize -1
2 13981									 db '&parameter'
2 13982								 endif
2 13983							 endif
2 13984
2 13985						 endm
3 13986		  =0001					 pos = pos + 1
3 13987
3 13988
3 13989
3 13990		  =0002					 pos = pos + 1
3 13991
3 13992
3 13993	    381D  41							 db 'A'
3 13994
3 13995		  =0003					 pos = pos + 1
3 13996
3 13997
3 13998	    381E  52							 db 'R'
3 13999
3 14000		  =0004					 pos = pos + 1
3 14001
3 14002
3 14003	    381F  52							 db 'R'
3 14004
3 14005		  =0005					 pos = pos + 1
3 14006
3 14007
3 14008	    3820  41							 db 'A'
3 14009
3 14010		  =0006					 pos = pos + 1
3 14011
3 14012	    3821  D9					 db 'Y'	+ 80h
3 14013
3 14014
3 14015		  =0007					 pos = pos + 1
3 14016
3 14017
3 14018
2 14019
1 14020	    3822			 L754D:	 DC 'FILE'
2 14021
2 14022		  =0006				 strsize sizestr <'FILE'>
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 247
msx_asm\tur_comp.ASM



2 14023		  =0000				 pos = 0
2 14024
2 14025						 irpc parameter,'FILE'
2 14026							 pos = pos + 1
2 14027
2 14028							 if pos	EQ strsize - 1
2 14029							 db '&parameter' + 80h
2 14030							 endif
2 14031
2 14032							 if pos	GT 1
2 14033								 if pos	LT strsize -1
2 14034									 db '&parameter'
2 14035								 endif
2 14036							 endif
2 14037
2 14038						 endm
3 14039		  =0001					 pos = pos + 1
3 14040
3 14041
3 14042
3 14043		  =0002					 pos = pos + 1
3 14044
3 14045
3 14046	    3822  46							 db 'F'
3 14047
3 14048		  =0003					 pos = pos + 1
3 14049
3 14050
3 14051	    3823  49							 db 'I'
3 14052
3 14053		  =0004					 pos = pos + 1
3 14054
3 14055
3 14056	    3824  4C							 db 'L'
3 14057
3 14058		  =0005					 pos = pos + 1
3 14059
3 14060	    3825  C5					 db 'E'	+ 80h
3 14061
3 14062
3 14063		  =0006					 pos = pos + 1
3 14064
3 14065
3 14066
2 14067
1 14068	    3826			 L7551:	 DC 'SET'
2 14069
2 14070		  =0005				 strsize sizestr <'SET'>
2 14071		  =0000				 pos = 0
2 14072
2 14073						 irpc parameter,'SET'
2 14074							 pos = pos + 1
2 14075
2 14076							 if pos	EQ strsize - 1
2 14077							 db '&parameter' + 80h
2 14078							 endif
2 14079
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 248
msx_asm\tur_comp.ASM



2 14080							 if pos	GT 1
2 14081								 if pos	LT strsize -1
2 14082									 db '&parameter'
2 14083								 endif
2 14084							 endif
2 14085
2 14086						 endm
3 14087		  =0001					 pos = pos + 1
3 14088
3 14089
3 14090
3 14091		  =0002					 pos = pos + 1
3 14092
3 14093
3 14094	    3826  53							 db 'S'
3 14095
3 14096		  =0003					 pos = pos + 1
3 14097
3 14098
3 14099	    3827  45							 db 'E'
3 14100
3 14101		  =0004					 pos = pos + 1
3 14102
3 14103	    3828  D4					 db 'T'	+ 80h
3 14104
3 14105
3 14106		  =0005					 pos = pos + 1
3 14107
3 14108
3 14109
2 14110
1 14111	    3829			 L7554:	 DC 'RECORD'
2 14112
2 14113		  =0008				 strsize sizestr <'RECORD'>
2 14114		  =0000				 pos = 0
2 14115
2 14116						 irpc parameter,'RECORD'
2 14117							 pos = pos + 1
2 14118
2 14119							 if pos	EQ strsize - 1
2 14120							 db '&parameter' + 80h
2 14121							 endif
2 14122
2 14123							 if pos	GT 1
2 14124								 if pos	LT strsize -1
2 14125									 db '&parameter'
2 14126								 endif
2 14127							 endif
2 14128
2 14129						 endm
3 14130		  =0001					 pos = pos + 1
3 14131
3 14132
3 14133
3 14134		  =0002					 pos = pos + 1
3 14135
3 14136
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 249
msx_asm\tur_comp.ASM



3 14137	    3829  52							 db 'R'
3 14138
3 14139		  =0003					 pos = pos + 1
3 14140
3 14141
3 14142	    382A  45							 db 'E'
3 14143
3 14144		  =0004					 pos = pos + 1
3 14145
3 14146
3 14147	    382B  43							 db 'C'
3 14148
3 14149		  =0005					 pos = pos + 1
3 14150
3 14151
3 14152	    382C  4F							 db 'O'
3 14153
3 14154		  =0006					 pos = pos + 1
3 14155
3 14156
3 14157	    382D  52							 db 'R'
3 14158
3 14159		  =0007					 pos = pos + 1
3 14160
3 14161	    382E  C4					 db 'D'	+ 80h
3 14162
3 14163
3 14164		  =0008					 pos = pos + 1
3 14165
3 14166
3 14167
2 14168
1 14169	    382F			 L755A:	 DC 'STRING'
2 14170
2 14171		  =0008				 strsize sizestr <'STRING'>
2 14172		  =0000				 pos = 0
2 14173
2 14174						 irpc parameter,'STRING'
2 14175							 pos = pos + 1
2 14176
2 14177							 if pos	EQ strsize - 1
2 14178							 db '&parameter' + 80h
2 14179							 endif
2 14180
2 14181							 if pos	GT 1
2 14182								 if pos	LT strsize -1
2 14183									 db '&parameter'
2 14184								 endif
2 14185							 endif
2 14186
2 14187						 endm
3 14188		  =0001					 pos = pos + 1
3 14189
3 14190
3 14191
3 14192		  =0002					 pos = pos + 1
3 14193
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 250
msx_asm\tur_comp.ASM



3 14194
3 14195	    382F  53							 db 'S'
3 14196
3 14197		  =0003					 pos = pos + 1
3 14198
3 14199
3 14200	    3830  54							 db 'T'
3 14201
3 14202		  =0004					 pos = pos + 1
3 14203
3 14204
3 14205	    3831  52							 db 'R'
3 14206
3 14207		  =0005					 pos = pos + 1
3 14208
3 14209
3 14210	    3832  49							 db 'I'
3 14211
3 14212		  =0006					 pos = pos + 1
3 14213
3 14214
3 14215	    3833  4E							 db 'N'
3 14216
3 14217		  =0007					 pos = pos + 1
3 14218
3 14219	    3834  C7					 db 'G'	+ 80h
3 14220
3 14221
3 14222		  =0008					 pos = pos + 1
3 14223
3 14224
3 14225
2 14226
1 14227	    3835			 L7560:	 DC 'OF'
2 14228
2 14229		  =0004				 strsize sizestr <'OF'>
2 14230		  =0000				 pos = 0
2 14231
2 14232						 irpc parameter,'OF'
2 14233							 pos = pos + 1
2 14234
2 14235							 if pos	EQ strsize - 1
2 14236							 db '&parameter' + 80h
2 14237							 endif
2 14238
2 14239							 if pos	GT 1
2 14240								 if pos	LT strsize -1
2 14241									 db '&parameter'
2 14242								 endif
2 14243							 endif
2 14244
2 14245						 endm
3 14246		  =0001					 pos = pos + 1
3 14247
3 14248
3 14249
3 14250		  =0002					 pos = pos + 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 251
msx_asm\tur_comp.ASM



3 14251
3 14252
3 14253	    3835  4F							 db 'O'
3 14254
3 14255		  =0003					 pos = pos + 1
3 14256
3 14257	    3836  C6					 db 'F'	+ 80h
3 14258
3 14259
3 14260		  =0004					 pos = pos + 1
3 14261
3 14262
3 14263
2 14264
1 14265	    3837			 L7562:	 DC 'ABSOLUTE'
2 14266
2 14267		  =000A				 strsize sizestr <'ABSOLUTE'>
2 14268		  =0000				 pos = 0
2 14269
2 14270						 irpc parameter,'ABSOLUTE'
2 14271							 pos = pos + 1
2 14272
2 14273							 if pos	EQ strsize - 1
2 14274							 db '&parameter' + 80h
2 14275							 endif
2 14276
2 14277							 if pos	GT 1
2 14278								 if pos	LT strsize -1
2 14279									 db '&parameter'
2 14280								 endif
2 14281							 endif
2 14282
2 14283						 endm
3 14284		  =0001					 pos = pos + 1
3 14285
3 14286
3 14287
3 14288		  =0002					 pos = pos + 1
3 14289
3 14290
3 14291	    3837  41							 db 'A'
3 14292
3 14293		  =0003					 pos = pos + 1
3 14294
3 14295
3 14296	    3838  42							 db 'B'
3 14297
3 14298		  =0004					 pos = pos + 1
3 14299
3 14300
3 14301	    3839  53							 db 'S'
3 14302
3 14303		  =0005					 pos = pos + 1
3 14304
3 14305
3 14306	    383A  4F							 db 'O'
3 14307
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 252
msx_asm\tur_comp.ASM



3 14308		  =0006					 pos = pos + 1
3 14309
3 14310
3 14311	    383B  4C							 db 'L'
3 14312
3 14313		  =0007					 pos = pos + 1
3 14314
3 14315
3 14316	    383C  55							 db 'U'
3 14317
3 14318		  =0008					 pos = pos + 1
3 14319
3 14320
3 14321	    383D  54							 db 'T'
3 14322
3 14323		  =0009					 pos = pos + 1
3 14324
3 14325	    383E  C5					 db 'E'	+ 80h
3 14326
3 14327
3 14328		  =000A					 pos = pos + 1
3 14329
3 14330
3 14331
2 14332
1 14333	    383F			 L756A:	 DC 'THEN'
2 14334
2 14335		  =0006				 strsize sizestr <'THEN'>
2 14336		  =0000				 pos = 0
2 14337
2 14338						 irpc parameter,'THEN'
2 14339							 pos = pos + 1
2 14340
2 14341							 if pos	EQ strsize - 1
2 14342							 db '&parameter' + 80h
2 14343							 endif
2 14344
2 14345							 if pos	GT 1
2 14346								 if pos	LT strsize -1
2 14347									 db '&parameter'
2 14348								 endif
2 14349							 endif
2 14350
2 14351						 endm
3 14352		  =0001					 pos = pos + 1
3 14353
3 14354
3 14355
3 14356		  =0002					 pos = pos + 1
3 14357
3 14358
3 14359	    383F  54							 db 'T'
3 14360
3 14361		  =0003					 pos = pos + 1
3 14362
3 14363
3 14364	    3840  48							 db 'H'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 253
msx_asm\tur_comp.ASM



3 14365
3 14366		  =0004					 pos = pos + 1
3 14367
3 14368
3 14369	    3841  45							 db 'E'
3 14370
3 14371		  =0005					 pos = pos + 1
3 14372
3 14373	    3842  CE					 db 'N'	+ 80h
3 14374
3 14375
3 14376		  =0006					 pos = pos + 1
3 14377
3 14378
3 14379
2 14380
1 14381	    3843			 L756E:	 DC 'ELSE'
2 14382
2 14383		  =0006				 strsize sizestr <'ELSE'>
2 14384		  =0000				 pos = 0
2 14385
2 14386						 irpc parameter,'ELSE'
2 14387							 pos = pos + 1
2 14388
2 14389							 if pos	EQ strsize - 1
2 14390							 db '&parameter' + 80h
2 14391							 endif
2 14392
2 14393							 if pos	GT 1
2 14394								 if pos	LT strsize -1
2 14395									 db '&parameter'
2 14396								 endif
2 14397							 endif
2 14398
2 14399						 endm
3 14400		  =0001					 pos = pos + 1
3 14401
3 14402
3 14403
3 14404		  =0002					 pos = pos + 1
3 14405
3 14406
3 14407	    3843  45							 db 'E'
3 14408
3 14409		  =0003					 pos = pos + 1
3 14410
3 14411
3 14412	    3844  4C							 db 'L'
3 14413
3 14414		  =0004					 pos = pos + 1
3 14415
3 14416
3 14417	    3845  53							 db 'S'
3 14418
3 14419		  =0005					 pos = pos + 1
3 14420
3 14421	    3846  C5					 db 'E'	+ 80h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 254
msx_asm\tur_comp.ASM



3 14422
3 14423
3 14424		  =0006					 pos = pos + 1
3 14425
3 14426
3 14427
2 14428
1 14429	    3847			 L7572:	 DC 'DO'
2 14430
2 14431		  =0004				 strsize sizestr <'DO'>
2 14432		  =0000				 pos = 0
2 14433
2 14434						 irpc parameter,'DO'
2 14435							 pos = pos + 1
2 14436
2 14437							 if pos	EQ strsize - 1
2 14438							 db '&parameter' + 80h
2 14439							 endif
2 14440
2 14441							 if pos	GT 1
2 14442								 if pos	LT strsize -1
2 14443									 db '&parameter'
2 14444								 endif
2 14445							 endif
2 14446
2 14447						 endm
3 14448		  =0001					 pos = pos + 1
3 14449
3 14450
3 14451
3 14452		  =0002					 pos = pos + 1
3 14453
3 14454
3 14455	    3847  44							 db 'D'
3 14456
3 14457		  =0003					 pos = pos + 1
3 14458
3 14459	    3848  CF					 db 'O'	+ 80h
3 14460
3 14461
3 14462		  =0004					 pos = pos + 1
3 14463
3 14464
3 14465
2 14466
1 14467	    3849			 L7574:	 DC 'UNTIL'
2 14468
2 14469		  =0007				 strsize sizestr <'UNTIL'>
2 14470		  =0000				 pos = 0
2 14471
2 14472						 irpc parameter,'UNTIL'
2 14473							 pos = pos + 1
2 14474
2 14475							 if pos	EQ strsize - 1
2 14476							 db '&parameter' + 80h
2 14477							 endif
2 14478
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 255
msx_asm\tur_comp.ASM



2 14479							 if pos	GT 1
2 14480								 if pos	LT strsize -1
2 14481									 db '&parameter'
2 14482								 endif
2 14483							 endif
2 14484
2 14485						 endm
3 14486		  =0001					 pos = pos + 1
3 14487
3 14488
3 14489
3 14490		  =0002					 pos = pos + 1
3 14491
3 14492
3 14493	    3849  55							 db 'U'
3 14494
3 14495		  =0003					 pos = pos + 1
3 14496
3 14497
3 14498	    384A  4E							 db 'N'
3 14499
3 14500		  =0004					 pos = pos + 1
3 14501
3 14502
3 14503	    384B  54							 db 'T'
3 14504
3 14505		  =0005					 pos = pos + 1
3 14506
3 14507
3 14508	    384C  49							 db 'I'
3 14509
3 14510		  =0006					 pos = pos + 1
3 14511
3 14512	    384D  CC					 db 'L'	+ 80h
3 14513
3 14514
3 14515		  =0007					 pos = pos + 1
3 14516
3 14517
3 14518
2 14519
1 14520
1 14521	    384E			 L7579:	 DC 'NOT'
2 14522
2 14523		  =0005				 strsize sizestr <'NOT'>
2 14524		  =0000				 pos = 0
2 14525
2 14526						 irpc parameter,'NOT'
2 14527							 pos = pos + 1
2 14528
2 14529							 if pos	EQ strsize - 1
2 14530							 db '&parameter' + 80h
2 14531							 endif
2 14532
2 14533							 if pos	GT 1
2 14534								 if pos	LT strsize -1
2 14535									 db '&parameter'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 256
msx_asm\tur_comp.ASM



2 14536								 endif
2 14537							 endif
2 14538
2 14539						 endm
3 14540		  =0001					 pos = pos + 1
3 14541
3 14542
3 14543
3 14544		  =0002					 pos = pos + 1
3 14545
3 14546
3 14547	    384E  4E							 db 'N'
3 14548
3 14549		  =0003					 pos = pos + 1
3 14550
3 14551
3 14552	    384F  4F							 db 'O'
3 14553
3 14554		  =0004					 pos = pos + 1
3 14555
3 14556	    3850  D4					 db 'T'	+ 80h
3 14557
3 14558
3 14559		  =0005					 pos = pos + 1
3 14560
3 14561
3 14562
2 14563
1 14564	    3851			 L757C:	 DC 'NIL'
2 14565
2 14566		  =0005				 strsize sizestr <'NIL'>
2 14567		  =0000				 pos = 0
2 14568
2 14569						 irpc parameter,'NIL'
2 14570							 pos = pos + 1
2 14571
2 14572							 if pos	EQ strsize - 1
2 14573							 db '&parameter' + 80h
2 14574							 endif
2 14575
2 14576							 if pos	GT 1
2 14577								 if pos	LT strsize -1
2 14578									 db '&parameter'
2 14579								 endif
2 14580							 endif
2 14581
2 14582						 endm
3 14583		  =0001					 pos = pos + 1
3 14584
3 14585
3 14586
3 14587		  =0002					 pos = pos + 1
3 14588
3 14589
3 14590	    3851  4E							 db 'N'
3 14591
3 14592		  =0003					 pos = pos + 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 257
msx_asm\tur_comp.ASM



3 14593
3 14594
3 14595	    3852  49							 db 'I'
3 14596
3 14597		  =0004					 pos = pos + 1
3 14598
3 14599	    3853  CC					 db 'L'	+ 80h
3 14600
3 14601
3 14602		  =0005					 pos = pos + 1
3 14603
3 14604
3 14605
2 14606
1 14607	    3854  00				 DB 0			 ; end of this table
1 14608
1 14609	    3855			 L7580:	 DC '..'
2 14610
2 14611		  =0004				 strsize sizestr <'..'>
2 14612		  =0000				 pos = 0
2 14613
2 14614						 irpc parameter,'..'
2 14615							 pos = pos + 1
2 14616
2 14617							 if pos	EQ strsize - 1
2 14618							 db '&parameter' + 80h
2 14619							 endif
2 14620
2 14621							 if pos	GT 1
2 14622								 if pos	LT strsize -1
2 14623									 db '&parameter'
2 14624								 endif
2 14625							 endif
2 14626
2 14627						 endm
3 14628		  =0001					 pos = pos + 1
3 14629
3 14630
3 14631
3 14632		  =0002					 pos = pos + 1
3 14633
3 14634
3 14635	    3855  2E							 db '.'
3 14636
3 14637		  =0003					 pos = pos + 1
3 14638
3 14639	    3856  AE					 db '.'	+ 80h
3 14640
3 14641
3 14642		  =0004					 pos = pos + 1
3 14643
3 14644
3 14645
2 14646
1 14647
1 14648	    3857			 L7582:	 DC ':='		    ; assign
2 14649
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 258
msx_asm\tur_comp.ASM



2 14650		  =0004				 strsize sizestr <':='>
2 14651		  =0000				 pos = 0
2 14652
2 14653						 irpc parameter,':='
2 14654							 pos = pos + 1
2 14655
2 14656							 if pos	EQ strsize - 1
2 14657							 db '&parameter' + 80h
2 14658							 endif
2 14659
2 14660							 if pos	GT 1
2 14661								 if pos	LT strsize -1
2 14662									 db '&parameter'
2 14663								 endif
2 14664							 endif
2 14665
2 14666						 endm
3 14667		  =0001					 pos = pos + 1
3 14668
3 14669
3 14670
3 14671		  =0002					 pos = pos + 1
3 14672
3 14673
3 14674	    3857  3A							 db ':'
3 14675
3 14676		  =0003					 pos = pos + 1
3 14677
3 14678	    3858  BD					 db '='	+ 80h
3 14679
3 14680
3 14681		  =0004					 pos = pos + 1
3 14682
3 14683
3 14684
2 14685
1 14686
1 14687	    3859			 L7584:	 DC 'LABEL'		    ; 4x list
2 14688
2 14689		  =0007				 strsize sizestr <'LABEL'>
2 14690		  =0000				 pos = 0
2 14691
2 14692						 irpc parameter,'LABEL'
2 14693							 pos = pos + 1
2 14694
2 14695							 if pos	EQ strsize - 1
2 14696							 db '&parameter' + 80h
2 14697							 endif
2 14698
2 14699							 if pos	GT 1
2 14700								 if pos	LT strsize -1
2 14701									 db '&parameter'
2 14702								 endif
2 14703							 endif
2 14704
2 14705						 endm
3 14706		  =0001					 pos = pos + 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 259
msx_asm\tur_comp.ASM



3 14707
3 14708
3 14709
3 14710		  =0002					 pos = pos + 1
3 14711
3 14712
3 14713	    3859  4C							 db 'L'
3 14714
3 14715		  =0003					 pos = pos + 1
3 14716
3 14717
3 14718	    385A  41							 db 'A'
3 14719
3 14720		  =0004					 pos = pos + 1
3 14721
3 14722
3 14723	    385B  42							 db 'B'
3 14724
3 14725		  =0005					 pos = pos + 1
3 14726
3 14727
3 14728	    385C  45							 db 'E'
3 14729
3 14730		  =0006					 pos = pos + 1
3 14731
3 14732	    385D  CC					 db 'L'	+ 80h
3 14733
3 14734
3 14735		  =0007					 pos = pos + 1
3 14736
3 14737
3 14738
2 14739
1 14740	    385E  01				 DB 1
1 14741						 DC 'CONST'
2 14742
2 14743		  =0007				 strsize sizestr <'CONST'>
2 14744		  =0000				 pos = 0
2 14745
2 14746						 irpc parameter,'CONST'
2 14747							 pos = pos + 1
2 14748
2 14749							 if pos	EQ strsize - 1
2 14750							 db '&parameter' + 80h
2 14751							 endif
2 14752
2 14753							 if pos	GT 1
2 14754								 if pos	LT strsize -1
2 14755									 db '&parameter'
2 14756								 endif
2 14757							 endif
2 14758
2 14759						 endm
3 14760		  =0001					 pos = pos + 1
3 14761
3 14762
3 14763
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 260
msx_asm\tur_comp.ASM



3 14764		  =0002					 pos = pos + 1
3 14765
3 14766
3 14767	    385F  43							 db 'C'
3 14768
3 14769		  =0003					 pos = pos + 1
3 14770
3 14771
3 14772	    3860  4F							 db 'O'
3 14773
3 14774		  =0004					 pos = pos + 1
3 14775
3 14776
3 14777	    3861  4E							 db 'N'
3 14778
3 14779		  =0005					 pos = pos + 1
3 14780
3 14781
3 14782	    3862  53							 db 'S'
3 14783
3 14784		  =0006					 pos = pos + 1
3 14785
3 14786	    3863  D4					 db 'T'	+ 80h
3 14787
3 14788
3 14789		  =0007					 pos = pos + 1
3 14790
3 14791
3 14792
2 14793
1 14794	    3864  02				 DB 2
1 14795						 DC 'TYPE'
2 14796
2 14797		  =0006				 strsize sizestr <'TYPE'>
2 14798		  =0000				 pos = 0
2 14799
2 14800						 irpc parameter,'TYPE'
2 14801							 pos = pos + 1
2 14802
2 14803							 if pos	EQ strsize - 1
2 14804							 db '&parameter' + 80h
2 14805							 endif
2 14806
2 14807							 if pos	GT 1
2 14808								 if pos	LT strsize -1
2 14809									 db '&parameter'
2 14810								 endif
2 14811							 endif
2 14812
2 14813						 endm
3 14814		  =0001					 pos = pos + 1
3 14815
3 14816
3 14817
3 14818		  =0002					 pos = pos + 1
3 14819
3 14820
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 261
msx_asm\tur_comp.ASM



3 14821	    3865  54							 db 'T'
3 14822
3 14823		  =0003					 pos = pos + 1
3 14824
3 14825
3 14826	    3866  59							 db 'Y'
3 14827
3 14828		  =0004					 pos = pos + 1
3 14829
3 14830
3 14831	    3867  50							 db 'P'
3 14832
3 14833		  =0005					 pos = pos + 1
3 14834
3 14835	    3868  C5					 db 'E'	+ 80h
3 14836
3 14837
3 14838		  =0006					 pos = pos + 1
3 14839
3 14840
3 14841
2 14842
1 14843	    3869  03				 DB 3
1 14844	    386A			 L7595:	 DC 'VAR'
2 14845
2 14846		  =0005				 strsize sizestr <'VAR'>
2 14847		  =0000				 pos = 0
2 14848
2 14849						 irpc parameter,'VAR'
2 14850							 pos = pos + 1
2 14851
2 14852							 if pos	EQ strsize - 1
2 14853							 db '&parameter' + 80h
2 14854							 endif
2 14855
2 14856							 if pos	GT 1
2 14857								 if pos	LT strsize -1
2 14858									 db '&parameter'
2 14859								 endif
2 14860							 endif
2 14861
2 14862						 endm
3 14863		  =0001					 pos = pos + 1
3 14864
3 14865
3 14866
3 14867		  =0002					 pos = pos + 1
3 14868
3 14869
3 14870	    386A  56							 db 'V'
3 14871
3 14872		  =0003					 pos = pos + 1
3 14873
3 14874
3 14875	    386B  41							 db 'A'
3 14876
3 14877		  =0004					 pos = pos + 1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 262
msx_asm\tur_comp.ASM



3 14878
3 14879	    386C  D2					 db 'R'	+ 80h
3 14880
3 14881
3 14882		  =0005					 pos = pos + 1
3 14883
3 14884
3 14885
2 14886
1 14887	    386D  04				 DB 4
1 14888						 DC 'BEGIN'
2 14889
2 14890		  =0007				 strsize sizestr <'BEGIN'>
2 14891		  =0000				 pos = 0
2 14892
2 14893						 irpc parameter,'BEGIN'
2 14894							 pos = pos + 1
2 14895
2 14896							 if pos	EQ strsize - 1
2 14897							 db '&parameter' + 80h
2 14898							 endif
2 14899
2 14900							 if pos	GT 1
2 14901								 if pos	LT strsize -1
2 14902									 db '&parameter'
2 14903								 endif
2 14904							 endif
2 14905
2 14906						 endm
3 14907		  =0001					 pos = pos + 1
3 14908
3 14909
3 14910
3 14911		  =0002					 pos = pos + 1
3 14912
3 14913
3 14914	    386E  42							 db 'B'
3 14915
3 14916		  =0003					 pos = pos + 1
3 14917
3 14918
3 14919	    386F  45							 db 'E'
3 14920
3 14921		  =0004					 pos = pos + 1
3 14922
3 14923
3 14924	    3870  47							 db 'G'
3 14925
3 14926		  =0005					 pos = pos + 1
3 14927
3 14928
3 14929	    3871  49							 db 'I'
3 14930
3 14931		  =0006					 pos = pos + 1
3 14932
3 14933	    3872  CE					 db 'N'	+ 80h
3 14934
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 263
msx_asm\tur_comp.ASM



3 14935
3 14936		  =0007					 pos = pos + 1
3 14937
3 14938
3 14939
2 14940
1 14941	    3873  08				 DB 8
1 14942	    3874			 L759F:	 DC 'OVERLAY'
2 14943
2 14944		  =0009				 strsize sizestr <'OVERLAY'>
2 14945		  =0000				 pos = 0
2 14946
2 14947						 irpc parameter,'OVERLAY'
2 14948							 pos = pos + 1
2 14949
2 14950							 if pos	EQ strsize - 1
2 14951							 db '&parameter' + 80h
2 14952							 endif
2 14953
2 14954							 if pos	GT 1
2 14955								 if pos	LT strsize -1
2 14956									 db '&parameter'
2 14957								 endif
2 14958							 endif
2 14959
2 14960						 endm
3 14961		  =0001					 pos = pos + 1
3 14962
3 14963
3 14964
3 14965		  =0002					 pos = pos + 1
3 14966
3 14967
3 14968	    3874  4F							 db 'O'
3 14969
3 14970		  =0003					 pos = pos + 1
3 14971
3 14972
3 14973	    3875  56							 db 'V'
3 14974
3 14975		  =0004					 pos = pos + 1
3 14976
3 14977
3 14978	    3876  45							 db 'E'
3 14979
3 14980		  =0005					 pos = pos + 1
3 14981
3 14982
3 14983	    3877  52							 db 'R'
3 14984
3 14985		  =0006					 pos = pos + 1
3 14986
3 14987
3 14988	    3878  4C							 db 'L'
3 14989
3 14990		  =0007					 pos = pos + 1
3 14991
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 264
msx_asm\tur_comp.ASM



3 14992
3 14993	    3879  41							 db 'A'
3 14994
3 14995		  =0008					 pos = pos + 1
3 14996
3 14997	    387A  D9					 db 'Y'	+ 80h
3 14998
3 14999
3 15000		  =0009					 pos = pos + 1
3 15001
3 15002
3 15003
2 15004
1 15005	    387B  07				 DB 7
1 15006	    387C			 L75A7:	 DC 'PROCEDURE'		    ; 1x list
2 15007
2 15008		  =000B				 strsize sizestr <'PROCEDURE'>
2 15009		  =0000				 pos = 0
2 15010
2 15011						 irpc parameter,'PROCEDURE'
2 15012							 pos = pos + 1
2 15013
2 15014							 if pos	EQ strsize - 1
2 15015							 db '&parameter' + 80h
2 15016							 endif
2 15017
2 15018							 if pos	GT 1
2 15019								 if pos	LT strsize -1
2 15020									 db '&parameter'
2 15021								 endif
2 15022							 endif
2 15023
2 15024						 endm
3 15025		  =0001					 pos = pos + 1
3 15026
3 15027
3 15028
3 15029		  =0002					 pos = pos + 1
3 15030
3 15031
3 15032	    387C  50							 db 'P'
3 15033
3 15034		  =0003					 pos = pos + 1
3 15035
3 15036
3 15037	    387D  52							 db 'R'
3 15038
3 15039		  =0004					 pos = pos + 1
3 15040
3 15041
3 15042	    387E  4F							 db 'O'
3 15043
3 15044		  =0005					 pos = pos + 1
3 15045
3 15046
3 15047	    387F  43							 db 'C'
3 15048
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 265
msx_asm\tur_comp.ASM



3 15049		  =0006					 pos = pos + 1
3 15050
3 15051
3 15052	    3880  45							 db 'E'
3 15053
3 15054		  =0007					 pos = pos + 1
3 15055
3 15056
3 15057	    3881  44							 db 'D'
3 15058
3 15059		  =0008					 pos = pos + 1
3 15060
3 15061
3 15062	    3882  55							 db 'U'
3 15063
3 15064		  =0009					 pos = pos + 1
3 15065
3 15066
3 15067	    3883  52							 db 'R'
3 15068
3 15069		  =000A					 pos = pos + 1
3 15070
3 15071	    3884  C5					 db 'E'	+ 80h
3 15072
3 15073
3 15074		  =000B					 pos = pos + 1
3 15075
3 15076
3 15077
2 15078
1 15079	    3885  05				 DB 5
1 15080						 DC 'FUNCTION'
2 15081
2 15082		  =000A				 strsize sizestr <'FUNCTION'>
2 15083		  =0000				 pos = 0
2 15084
2 15085						 irpc parameter,'FUNCTION'
2 15086							 pos = pos + 1
2 15087
2 15088							 if pos	EQ strsize - 1
2 15089							 db '&parameter' + 80h
2 15090							 endif
2 15091
2 15092							 if pos	GT 1
2 15093								 if pos	LT strsize -1
2 15094									 db '&parameter'
2 15095								 endif
2 15096							 endif
2 15097
2 15098						 endm
3 15099		  =0001					 pos = pos + 1
3 15100
3 15101
3 15102
3 15103		  =0002					 pos = pos + 1
3 15104
3 15105
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 266
msx_asm\tur_comp.ASM



3 15106	    3886  46							 db 'F'
3 15107
3 15108		  =0003					 pos = pos + 1
3 15109
3 15110
3 15111	    3887  55							 db 'U'
3 15112
3 15113		  =0004					 pos = pos + 1
3 15114
3 15115
3 15116	    3888  4E							 db 'N'
3 15117
3 15118		  =0005					 pos = pos + 1
3 15119
3 15120
3 15121	    3889  43							 db 'C'
3 15122
3 15123		  =0006					 pos = pos + 1
3 15124
3 15125
3 15126	    388A  54							 db 'T'
3 15127
3 15128		  =0007					 pos = pos + 1
3 15129
3 15130
3 15131	    388B  49							 db 'I'
3 15132
3 15133		  =0008					 pos = pos + 1
3 15134
3 15135
3 15136	    388C  4F							 db 'O'
3 15137
3 15138		  =0009					 pos = pos + 1
3 15139
3 15140	    388D  CE					 db 'N'	+ 80h
3 15141
3 15142
3 15143		  =000A					 pos = pos + 1
3 15144
3 15145
3 15146
2 15147
1 15148	    388E  06				 DB 6
1 15149	    388F  00				 DB 0
1 15150
1 15151	    3890			 L75BB:	 DC 'BEGIN'		    ; 1x list
2 15152
2 15153		  =0007				 strsize sizestr <'BEGIN'>
2 15154		  =0000				 pos = 0
2 15155
2 15156						 irpc parameter,'BEGIN'
2 15157							 pos = pos + 1
2 15158
2 15159							 if pos	EQ strsize - 1
2 15160							 db '&parameter' + 80h
2 15161							 endif
2 15162
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 267
msx_asm\tur_comp.ASM



2 15163							 if pos	GT 1
2 15164								 if pos	LT strsize -1
2 15165									 db '&parameter'
2 15166								 endif
2 15167							 endif
2 15168
2 15169						 endm
3 15170		  =0001					 pos = pos + 1
3 15171
3 15172
3 15173
3 15174		  =0002					 pos = pos + 1
3 15175
3 15176
3 15177	    3890  42							 db 'B'
3 15178
3 15179		  =0003					 pos = pos + 1
3 15180
3 15181
3 15182	    3891  45							 db 'E'
3 15183
3 15184		  =0004					 pos = pos + 1
3 15185
3 15186
3 15187	    3892  47							 db 'G'
3 15188
3 15189		  =0005					 pos = pos + 1
3 15190
3 15191
3 15192	    3893  49							 db 'I'
3 15193
3 15194		  =0006					 pos = pos + 1
3 15195
3 15196	    3894  CE					 db 'N'	+ 80h
3 15197
3 15198
3 15199		  =0007					 pos = pos + 1
3 15200
3 15201
3 15202
2 15203
1 15204	    3895  1940r				 DW L5377		 ; statements ended by 'END'
1 15205
1 15206						 DC 'IF'
2 15207
2 15208		  =0004				 strsize sizestr <'IF'>
2 15209		  =0000				 pos = 0
2 15210
2 15211						 irpc parameter,'IF'
2 15212							 pos = pos + 1
2 15213
2 15214							 if pos	EQ strsize - 1
2 15215							 db '&parameter' + 80h
2 15216							 endif
2 15217
2 15218							 if pos	GT 1
2 15219								 if pos	LT strsize -1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 268
msx_asm\tur_comp.ASM



2 15220									 db '&parameter'
2 15221								 endif
2 15222							 endif
2 15223
2 15224						 endm
3 15225		  =0001					 pos = pos + 1
3 15226
3 15227
3 15228
3 15229		  =0002					 pos = pos + 1
3 15230
3 15231
3 15232	    3897  49							 db 'I'
3 15233
3 15234		  =0003					 pos = pos + 1
3 15235
3 15236	    3898  C6					 db 'F'	+ 80h
3 15237
3 15238
3 15239		  =0004					 pos = pos + 1
3 15240
3 15241
3 15242
2 15243
1 15244	    3899  19BDr				  DW L53EF
1 15245
1 15246						 DC 'WHILE'
2 15247
2 15248		  =0007				 strsize sizestr <'WHILE'>
2 15249		  =0000				 pos = 0
2 15250
2 15251						 irpc parameter,'WHILE'
2 15252							 pos = pos + 1
2 15253
2 15254							 if pos	EQ strsize - 1
2 15255							 db '&parameter' + 80h
2 15256							 endif
2 15257
2 15258							 if pos	GT 1
2 15259								 if pos	LT strsize -1
2 15260									 db '&parameter'
2 15261								 endif
2 15262							 endif
2 15263
2 15264						 endm
3 15265		  =0001					 pos = pos + 1
3 15266
3 15267
3 15268
3 15269		  =0002					 pos = pos + 1
3 15270
3 15271
3 15272	    389B  57							 db 'W'
3 15273
3 15274		  =0003					 pos = pos + 1
3 15275
3 15276
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 269
msx_asm\tur_comp.ASM



3 15277	    389C  48							 db 'H'
3 15278
3 15279		  =0004					 pos = pos + 1
3 15280
3 15281
3 15282	    389D  49							 db 'I'
3 15283
3 15284		  =0005					 pos = pos + 1
3 15285
3 15286
3 15287	    389E  4C							 db 'L'
3 15288
3 15289		  =0006					 pos = pos + 1
3 15290
3 15291	    389F  C5					 db 'E'	+ 80h
3 15292
3 15293
3 15294		  =0007					 pos = pos + 1
3 15295
3 15296
3 15297
2 15298
1 15299	    38A0  19F4r				 DW L5424
1 15300
1 15301						 DC 'REPEAT'
2 15302
2 15303		  =0008				 strsize sizestr <'REPEAT'>
2 15304		  =0000				 pos = 0
2 15305
2 15306						 irpc parameter,'REPEAT'
2 15307							 pos = pos + 1
2 15308
2 15309							 if pos	EQ strsize - 1
2 15310							 db '&parameter' + 80h
2 15311							 endif
2 15312
2 15313							 if pos	GT 1
2 15314								 if pos	LT strsize -1
2 15315									 db '&parameter'
2 15316								 endif
2 15317							 endif
2 15318
2 15319						 endm
3 15320		  =0001					 pos = pos + 1
3 15321
3 15322
3 15323
3 15324		  =0002					 pos = pos + 1
3 15325
3 15326
3 15327	    38A2  52							 db 'R'
3 15328
3 15329		  =0003					 pos = pos + 1
3 15330
3 15331
3 15332	    38A3  45							 db 'E'
3 15333
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 270
msx_asm\tur_comp.ASM



3 15334		  =0004					 pos = pos + 1
3 15335
3 15336
3 15337	    38A4  50							 db 'P'
3 15338
3 15339		  =0005					 pos = pos + 1
3 15340
3 15341
3 15342	    38A5  45							 db 'E'
3 15343
3 15344		  =0006					 pos = pos + 1
3 15345
3 15346
3 15347	    38A6  41							 db 'A'
3 15348
3 15349		  =0007					 pos = pos + 1
3 15350
3 15351	    38A7  D4					 db 'T'	+ 80h
3 15352
3 15353
3 15354		  =0008					 pos = pos + 1
3 15355
3 15356
3 15357
2 15358
1 15359	    38A8  1A24r				 DW L544C
1 15360
1 15361						 DC 'FOR'
2 15362
2 15363		  =0005				 strsize sizestr <'FOR'>
2 15364		  =0000				 pos = 0
2 15365
2 15366						 irpc parameter,'FOR'
2 15367							 pos = pos + 1
2 15368
2 15369							 if pos	EQ strsize - 1
2 15370							 db '&parameter' + 80h
2 15371							 endif
2 15372
2 15373							 if pos	GT 1
2 15374								 if pos	LT strsize -1
2 15375									 db '&parameter'
2 15376								 endif
2 15377							 endif
2 15378
2 15379						 endm
3 15380		  =0001					 pos = pos + 1
3 15381
3 15382
3 15383
3 15384		  =0002					 pos = pos + 1
3 15385
3 15386
3 15387	    38AA  46							 db 'F'
3 15388
3 15389		  =0003					 pos = pos + 1
3 15390
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 271
msx_asm\tur_comp.ASM



3 15391
3 15392	    38AB  4F							 db 'O'
3 15393
3 15394		  =0004					 pos = pos + 1
3 15395
3 15396	    38AC  D2					 db 'R'	+ 80h
3 15397
3 15398
3 15399		  =0005					 pos = pos + 1
3 15400
3 15401
3 15402
2 15403
1 15404	    38AD  1A43r				 DW L546B
1 15405
1 15406	    38AF			 L75DA:	 DC 'CASE'
2 15407
2 15408		  =0006				 strsize sizestr <'CASE'>
2 15409		  =0000				 pos = 0
2 15410
2 15411						 irpc parameter,'CASE'
2 15412							 pos = pos + 1
2 15413
2 15414							 if pos	EQ strsize - 1
2 15415							 db '&parameter' + 80h
2 15416							 endif
2 15417
2 15418							 if pos	GT 1
2 15419								 if pos	LT strsize -1
2 15420									 db '&parameter'
2 15421								 endif
2 15422							 endif
2 15423
2 15424						 endm
3 15425		  =0001					 pos = pos + 1
3 15426
3 15427
3 15428
3 15429		  =0002					 pos = pos + 1
3 15430
3 15431
3 15432	    38AF  43							 db 'C'
3 15433
3 15434		  =0003					 pos = pos + 1
3 15435
3 15436
3 15437	    38B0  41							 db 'A'
3 15438
3 15439		  =0004					 pos = pos + 1
3 15440
3 15441
3 15442	    38B1  53							 db 'S'
3 15443
3 15444		  =0005					 pos = pos + 1
3 15445
3 15446	    38B2  C5					 db 'E'	+ 80h
3 15447
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 272
msx_asm\tur_comp.ASM



3 15448
3 15449		  =0006					 pos = pos + 1
3 15450
3 15451
3 15452
2 15453
1 15454	    38B3  1AFDr				 DW L5521
1 15455
1 15456						 DC 'GOTO'
2 15457
2 15458		  =0006				 strsize sizestr <'GOTO'>
2 15459		  =0000				 pos = 0
2 15460
2 15461						 irpc parameter,'GOTO'
2 15462							 pos = pos + 1
2 15463
2 15464							 if pos	EQ strsize - 1
2 15465							 db '&parameter' + 80h
2 15466							 endif
2 15467
2 15468							 if pos	GT 1
2 15469								 if pos	LT strsize -1
2 15470									 db '&parameter'
2 15471								 endif
2 15472							 endif
2 15473
2 15474						 endm
3 15475		  =0001					 pos = pos + 1
3 15476
3 15477
3 15478
3 15479		  =0002					 pos = pos + 1
3 15480
3 15481
3 15482	    38B5  47							 db 'G'
3 15483
3 15484		  =0003					 pos = pos + 1
3 15485
3 15486
3 15487	    38B6  4F							 db 'O'
3 15488
3 15489		  =0004					 pos = pos + 1
3 15490
3 15491
3 15492	    38B7  54							 db 'T'
3 15493
3 15494		  =0005					 pos = pos + 1
3 15495
3 15496	    38B8  CF					 db 'O'	+ 80h
3 15497
3 15498
3 15499		  =0006					 pos = pos + 1
3 15500
3 15501
3 15502
2 15503
1 15504	    38B9  1C04r				 DW L5626
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 273
msx_asm\tur_comp.ASM



1 15505						 DC 'WITH'
2 15506
2 15507		  =0006				 strsize sizestr <'WITH'>
2 15508		  =0000				 pos = 0
2 15509
2 15510						 irpc parameter,'WITH'
2 15511							 pos = pos + 1
2 15512
2 15513							 if pos	EQ strsize - 1
2 15514							 db '&parameter' + 80h
2 15515							 endif
2 15516
2 15517							 if pos	GT 1
2 15518								 if pos	LT strsize -1
2 15519									 db '&parameter'
2 15520								 endif
2 15521							 endif
2 15522
2 15523						 endm
3 15524		  =0001					 pos = pos + 1
3 15525
3 15526
3 15527
3 15528		  =0002					 pos = pos + 1
3 15529
3 15530
3 15531	    38BB  57							 db 'W'
3 15532
3 15533		  =0003					 pos = pos + 1
3 15534
3 15535
3 15536	    38BC  49							 db 'I'
3 15537
3 15538		  =0004					 pos = pos + 1
3 15539
3 15540
3 15541	    38BD  54							 db 'T'
3 15542
3 15543		  =0005					 pos = pos + 1
3 15544
3 15545	    38BE  C8					 db 'H'	+ 80h
3 15546
3 15547
3 15548		  =0006					 pos = pos + 1
3 15549
3 15550
3 15551
2 15552
1 15553	    38BF  1C2Cr				 DW L564E
1 15554	    38C1			 L75EC:	 DC 'INLINE'
2 15555
2 15556		  =0008				 strsize sizestr <'INLINE'>
2 15557		  =0000				 pos = 0
2 15558
2 15559						 irpc parameter,'INLINE'
2 15560							 pos = pos + 1
2 15561
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 274
msx_asm\tur_comp.ASM



2 15562							 if pos	EQ strsize - 1
2 15563							 db '&parameter' + 80h
2 15564							 endif
2 15565
2 15566							 if pos	GT 1
2 15567								 if pos	LT strsize -1
2 15568									 db '&parameter'
2 15569								 endif
2 15570							 endif
2 15571
2 15572						 endm
3 15573		  =0001					 pos = pos + 1
3 15574
3 15575
3 15576
3 15577		  =0002					 pos = pos + 1
3 15578
3 15579
3 15580	    38C1  49							 db 'I'
3 15581
3 15582		  =0003					 pos = pos + 1
3 15583
3 15584
3 15585	    38C2  4E							 db 'N'
3 15586
3 15587		  =0004					 pos = pos + 1
3 15588
3 15589
3 15590	    38C3  4C							 db 'L'
3 15591
3 15592		  =0005					 pos = pos + 1
3 15593
3 15594
3 15595	    38C4  49							 db 'I'
3 15596
3 15597		  =0006					 pos = pos + 1
3 15598
3 15599
3 15600	    38C5  4E							 db 'N'
3 15601
3 15602		  =0007					 pos = pos + 1
3 15603
3 15604	    38C6  C5					 db 'E'	+ 80h
3 15605
3 15606
3 15607		  =0008					 pos = pos + 1
3 15608
3 15609
3 15610
2 15611
1 15612	    38C7  1C76r				 DW L5698
1 15613	    38C9  00				 DB 0			 ; end of this table
1 15614
1 15615	    38CA			 L75F5:	 DC 'TO'		    ; 1x list
2 15616
2 15617		  =0004				 strsize sizestr <'TO'>
2 15618		  =0000				 pos = 0
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 275
msx_asm\tur_comp.ASM



2 15619
2 15620						 irpc parameter,'TO'
2 15621							 pos = pos + 1
2 15622
2 15623							 if pos	EQ strsize - 1
2 15624							 db '&parameter' + 80h
2 15625							 endif
2 15626
2 15627							 if pos	GT 1
2 15628								 if pos	LT strsize -1
2 15629									 db '&parameter'
2 15630								 endif
2 15631							 endif
2 15632
2 15633						 endm
3 15634		  =0001					 pos = pos + 1
3 15635
3 15636
3 15637
3 15638		  =0002					 pos = pos + 1
3 15639
3 15640
3 15641	    38CA  54							 db 'T'
3 15642
3 15643		  =0003					 pos = pos + 1
3 15644
3 15645	    38CB  CF					 db 'O'	+ 80h
3 15646
3 15647
3 15648		  =0004					 pos = pos + 1
3 15649
3 15650
3 15651
2 15652
1 15653	    38CC  23				 DB 23H			 ; opcode: INC HL
1 15654						 DC 'DOWNTO'
2 15655
2 15656		  =0008				 strsize sizestr <'DOWNTO'>
2 15657		  =0000				 pos = 0
2 15658
2 15659						 irpc parameter,'DOWNTO'
2 15660							 pos = pos + 1
2 15661
2 15662							 if pos	EQ strsize - 1
2 15663							 db '&parameter' + 80h
2 15664							 endif
2 15665
2 15666							 if pos	GT 1
2 15667								 if pos	LT strsize -1
2 15668									 db '&parameter'
2 15669								 endif
2 15670							 endif
2 15671
2 15672						 endm
3 15673		  =0001					 pos = pos + 1
3 15674
3 15675
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 276
msx_asm\tur_comp.ASM



3 15676
3 15677		  =0002					 pos = pos + 1
3 15678
3 15679
3 15680	    38CD  44							 db 'D'
3 15681
3 15682		  =0003					 pos = pos + 1
3 15683
3 15684
3 15685	    38CE  4F							 db 'O'
3 15686
3 15687		  =0004					 pos = pos + 1
3 15688
3 15689
3 15690	    38CF  57							 db 'W'
3 15691
3 15692		  =0005					 pos = pos + 1
3 15693
3 15694
3 15695	    38D0  4E							 db 'N'
3 15696
3 15697		  =0006					 pos = pos + 1
3 15698
3 15699
3 15700	    38D1  54							 db 'T'
3 15701
3 15702		  =0007					 pos = pos + 1
3 15703
3 15704	    38D2  CF					 db 'O'	+ 80h
3 15705
3 15706
3 15707		  =0008					 pos = pos + 1
3 15708
3 15709
3 15710
2 15711
1 15712	    38D3  2B				 DB 2BH			 ; opcode: DEC HL
1 15713	    38D4  00				 DB 0			 ; end of this table
1 15714
1 15715	    38D5			 L7600:	 DC '*'			    ; 0, *
2 15716
2 15717		  =0003				 strsize sizestr <'*'>
2 15718		  =0000				 pos = 0
2 15719
2 15720						 irpc parameter,'*'
2 15721							 pos = pos + 1
2 15722
2 15723							 if pos	EQ strsize - 1
2 15724							 db '&parameter' + 80h
2 15725							 endif
2 15726
2 15727							 if pos	GT 1
2 15728								 if pos	LT strsize -1
2 15729									 db '&parameter'
2 15730								 endif
2 15731							 endif
2 15732
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 277
msx_asm\tur_comp.ASM



2 15733						 endm
3 15734		  =0001					 pos = pos + 1
3 15735
3 15736
3 15737
3 15738		  =0002					 pos = pos + 1
3 15739
3 15740	    38D5  AA					 db '*'	+ 80h
3 15741
3 15742
3 15743		  =0003					 pos = pos + 1
3 15744
3 15745
3 15746
2 15747
1 15748	    38D6  00				 DB 0
1 15749	    38D7			 L7602:	 DC '/'			    ; 1, /
2 15750
2 15751		  =0003				 strsize sizestr <'/'>
2 15752		  =0000				 pos = 0
2 15753
2 15754						 irpc parameter,'/'
2 15755							 pos = pos + 1
2 15756
2 15757							 if pos	EQ strsize - 1
2 15758							 db '&parameter' + 80h
2 15759							 endif
2 15760
2 15761							 if pos	GT 1
2 15762								 if pos	LT strsize -1
2 15763									 db '&parameter'
2 15764								 endif
2 15765							 endif
2 15766
2 15767						 endm
3 15768		  =0001					 pos = pos + 1
3 15769
3 15770
3 15771
3 15772		  =0002					 pos = pos + 1
3 15773
3 15774	    38D7  AF					 db '/'	+ 80h
3 15775
3 15776
3 15777		  =0003					 pos = pos + 1
3 15778
3 15779
3 15780
2 15781
1 15782	    38D8  01				 DB 1
1 15783
1 15784	    38D9			 L7604:	 DC 'AND'		    ; 2, AND
2 15785
2 15786		  =0005				 strsize sizestr <'AND'>
2 15787		  =0000				 pos = 0
2 15788
2 15789						 irpc parameter,'AND'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 278
msx_asm\tur_comp.ASM



2 15790							 pos = pos + 1
2 15791
2 15792							 if pos	EQ strsize - 1
2 15793							 db '&parameter' + 80h
2 15794							 endif
2 15795
2 15796							 if pos	GT 1
2 15797								 if pos	LT strsize -1
2 15798									 db '&parameter'
2 15799								 endif
2 15800							 endif
2 15801
2 15802						 endm
3 15803		  =0001					 pos = pos + 1
3 15804
3 15805
3 15806
3 15807		  =0002					 pos = pos + 1
3 15808
3 15809
3 15810	    38D9  41							 db 'A'
3 15811
3 15812		  =0003					 pos = pos + 1
3 15813
3 15814
3 15815	    38DA  4E							 db 'N'
3 15816
3 15817		  =0004					 pos = pos + 1
3 15818
3 15819	    38DB  C4					 db 'D'	+ 80h
3 15820
3 15821
3 15822		  =0005					 pos = pos + 1
3 15823
3 15824
3 15825
2 15826
1 15827	    38DC  02				 DB 2
1 15828						 DC 'DIV'		    ; 3, DIV
2 15829
2 15830		  =0005				 strsize sizestr <'DIV'>
2 15831		  =0000				 pos = 0
2 15832
2 15833						 irpc parameter,'DIV'
2 15834							 pos = pos + 1
2 15835
2 15836							 if pos	EQ strsize - 1
2 15837							 db '&parameter' + 80h
2 15838							 endif
2 15839
2 15840							 if pos	GT 1
2 15841								 if pos	LT strsize -1
2 15842									 db '&parameter'
2 15843								 endif
2 15844							 endif
2 15845
2 15846						 endm
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 279
msx_asm\tur_comp.ASM



3 15847		  =0001					 pos = pos + 1
3 15848
3 15849
3 15850
3 15851		  =0002					 pos = pos + 1
3 15852
3 15853
3 15854	    38DD  44							 db 'D'
3 15855
3 15856		  =0003					 pos = pos + 1
3 15857
3 15858
3 15859	    38DE  49							 db 'I'
3 15860
3 15861		  =0004					 pos = pos + 1
3 15862
3 15863	    38DF  D6					 db 'V'	+ 80h
3 15864
3 15865
3 15866		  =0005					 pos = pos + 1
3 15867
3 15868
3 15869
2 15870
1 15871	    38E0  03				 DB 3
1 15872						 DC 'MOD'		    ; 4, MOD
2 15873
2 15874		  =0005				 strsize sizestr <'MOD'>
2 15875		  =0000				 pos = 0
2 15876
2 15877						 irpc parameter,'MOD'
2 15878							 pos = pos + 1
2 15879
2 15880							 if pos	EQ strsize - 1
2 15881							 db '&parameter' + 80h
2 15882							 endif
2 15883
2 15884							 if pos	GT 1
2 15885								 if pos	LT strsize -1
2 15886									 db '&parameter'
2 15887								 endif
2 15888							 endif
2 15889
2 15890						 endm
3 15891		  =0001					 pos = pos + 1
3 15892
3 15893
3 15894
3 15895		  =0002					 pos = pos + 1
3 15896
3 15897
3 15898	    38E1  4D							 db 'M'
3 15899
3 15900		  =0003					 pos = pos + 1
3 15901
3 15902
3 15903	    38E2  4F							 db 'O'
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 280
msx_asm\tur_comp.ASM



3 15904
3 15905		  =0004					 pos = pos + 1
3 15906
3 15907	    38E3  C4					 db 'D'	+ 80h
3 15908
3 15909
3 15910		  =0005					 pos = pos + 1
3 15911
3 15912
3 15913
2 15914
1 15915	    38E4  04				 DB 4
1 15916						 DC 'SHL'		    ; 5, SHL
2 15917
2 15918		  =0005				 strsize sizestr <'SHL'>
2 15919		  =0000				 pos = 0
2 15920
2 15921						 irpc parameter,'SHL'
2 15922							 pos = pos + 1
2 15923
2 15924							 if pos	EQ strsize - 1
2 15925							 db '&parameter' + 80h
2 15926							 endif
2 15927
2 15928							 if pos	GT 1
2 15929								 if pos	LT strsize -1
2 15930									 db '&parameter'
2 15931								 endif
2 15932							 endif
2 15933
2 15934						 endm
3 15935		  =0001					 pos = pos + 1
3 15936
3 15937
3 15938
3 15939		  =0002					 pos = pos + 1
3 15940
3 15941
3 15942	    38E5  53							 db 'S'
3 15943
3 15944		  =0003					 pos = pos + 1
3 15945
3 15946
3 15947	    38E6  48							 db 'H'
3 15948
3 15949		  =0004					 pos = pos + 1
3 15950
3 15951	    38E7  CC					 db 'L'	+ 80h
3 15952
3 15953
3 15954		  =0005					 pos = pos + 1
3 15955
3 15956
3 15957
2 15958
1 15959	    38E8  05				 DB 5
1 15960						 DC 'SHR'		    ; 6, SHR
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 281
msx_asm\tur_comp.ASM



2 15961
2 15962		  =0005				 strsize sizestr <'SHR'>
2 15963		  =0000				 pos = 0
2 15964
2 15965						 irpc parameter,'SHR'
2 15966							 pos = pos + 1
2 15967
2 15968							 if pos	EQ strsize - 1
2 15969							 db '&parameter' + 80h
2 15970							 endif
2 15971
2 15972							 if pos	GT 1
2 15973								 if pos	LT strsize -1
2 15974									 db '&parameter'
2 15975								 endif
2 15976							 endif
2 15977
2 15978						 endm
3 15979		  =0001					 pos = pos + 1
3 15980
3 15981
3 15982
3 15983		  =0002					 pos = pos + 1
3 15984
3 15985
3 15986	    38E9  53							 db 'S'
3 15987
3 15988		  =0003					 pos = pos + 1
3 15989
3 15990
3 15991	    38EA  48							 db 'H'
3 15992
3 15993		  =0004					 pos = pos + 1
3 15994
3 15995	    38EB  D2					 db 'R'	+ 80h
3 15996
3 15997
3 15998		  =0005					 pos = pos + 1
3 15999
3 16000
3 16001
2 16002
1 16003	    38EC  06				 DB 6
1 16004	    38ED  00				 DB 0			 ; end of this table
1 16005
1 16006	    38EE			 L7619:	 DC '+'			    ; 0, +
2 16007
2 16008		  =0003				 strsize sizestr <'+'>
2 16009		  =0000				 pos = 0
2 16010
2 16011						 irpc parameter,'+'
2 16012							 pos = pos + 1
2 16013
2 16014							 if pos	EQ strsize - 1
2 16015							 db '&parameter' + 80h
2 16016							 endif
2 16017
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 282
msx_asm\tur_comp.ASM



2 16018							 if pos	GT 1
2 16019								 if pos	LT strsize -1
2 16020									 db '&parameter'
2 16021								 endif
2 16022							 endif
2 16023
2 16024						 endm
3 16025		  =0001					 pos = pos + 1
3 16026
3 16027
3 16028
3 16029		  =0002					 pos = pos + 1
3 16030
3 16031	    38EE  AB					 db '+'	+ 80h
3 16032
3 16033
3 16034		  =0003					 pos = pos + 1
3 16035
3 16036
3 16037
2 16038
1 16039	    38EF  00				 DB 0
1 16040						 DC '-'			    ; 1, -
2 16041
2 16042		  =0003				 strsize sizestr <'-'>
2 16043		  =0000				 pos = 0
2 16044
2 16045						 irpc parameter,'-'
2 16046							 pos = pos + 1
2 16047
2 16048							 if pos	EQ strsize - 1
2 16049							 db '&parameter' + 80h
2 16050							 endif
2 16051
2 16052							 if pos	GT 1
2 16053								 if pos	LT strsize -1
2 16054									 db '&parameter'
2 16055								 endif
2 16056							 endif
2 16057
2 16058						 endm
3 16059		  =0001					 pos = pos + 1
3 16060
3 16061
3 16062
3 16063		  =0002					 pos = pos + 1
3 16064
3 16065	    38F0  AD					 db '-'	+ 80h
3 16066
3 16067
3 16068		  =0003					 pos = pos + 1
3 16069
3 16070
3 16071
2 16072
1 16073	    38F1  01				 DB 1
1 16074
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 283
msx_asm\tur_comp.ASM



1 16075	    38F2			 L761D:	 DC 'OR'		    ; 2, OR
2 16076
2 16077		  =0004				 strsize sizestr <'OR'>
2 16078		  =0000				 pos = 0
2 16079
2 16080						 irpc parameter,'OR'
2 16081							 pos = pos + 1
2 16082
2 16083							 if pos	EQ strsize - 1
2 16084							 db '&parameter' + 80h
2 16085							 endif
2 16086
2 16087							 if pos	GT 1
2 16088								 if pos	LT strsize -1
2 16089									 db '&parameter'
2 16090								 endif
2 16091							 endif
2 16092
2 16093						 endm
3 16094		  =0001					 pos = pos + 1
3 16095
3 16096
3 16097
3 16098		  =0002					 pos = pos + 1
3 16099
3 16100
3 16101	    38F2  4F							 db 'O'
3 16102
3 16103		  =0003					 pos = pos + 1
3 16104
3 16105	    38F3  D2					 db 'R'	+ 80h
3 16106
3 16107
3 16108		  =0004					 pos = pos + 1
3 16109
3 16110
3 16111
2 16112
1 16113	    38F4  02				 DB 2
1 16114						 DC 'XOR'		    ; 3, XOR
2 16115
2 16116		  =0005				 strsize sizestr <'XOR'>
2 16117		  =0000				 pos = 0
2 16118
2 16119						 irpc parameter,'XOR'
2 16120							 pos = pos + 1
2 16121
2 16122							 if pos	EQ strsize - 1
2 16123							 db '&parameter' + 80h
2 16124							 endif
2 16125
2 16126							 if pos	GT 1
2 16127								 if pos	LT strsize -1
2 16128									 db '&parameter'
2 16129								 endif
2 16130							 endif
2 16131
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 284
msx_asm\tur_comp.ASM



2 16132						 endm
3 16133		  =0001					 pos = pos + 1
3 16134
3 16135
3 16136
3 16137		  =0002					 pos = pos + 1
3 16138
3 16139
3 16140	    38F5  58							 db 'X'
3 16141
3 16142		  =0003					 pos = pos + 1
3 16143
3 16144
3 16145	    38F6  4F							 db 'O'
3 16146
3 16147		  =0004					 pos = pos + 1
3 16148
3 16149	    38F7  D2					 db 'R'	+ 80h
3 16150
3 16151
3 16152		  =0005					 pos = pos + 1
3 16153
3 16154
3 16155
2 16156
1 16157	    38F8  03				 DB 3
1 16158	    38F9  00				 DB 0			 ; end of this table
1 16159
1 16160	    38FA  BD			 L7625:	 DB '='	+ 80H		    ;  0, =
1 16161	    38FB  00				 DB 0
1 16162	    38FC  3C BE			 L7627:	 DB '<','>' + 80H	    ;  1, <>
1 16163	    38FE  01				 DB 1
1 16164	    38FF  3E BD			 L762A:	 DB '>','=' + 80H	    ;  2, >=
1 16165	    3901  02				 DB 2
1 16166	    3902  3C BD			 L762D:	 DB '<','=' + 80H	    ;  3, <=
1 16167	    3904  03				 DB 3
1 16168	    3905  BE			 L7630:	 DB '>'	+ 80H		    ;  4, >
1 16169	    3906  04				 DB 4
1 16170	    3907  BC			 L7632:	 DB '<'	+ 80H		    ;  5, <
1 16171	    3908  05				 DB 5
1 16172	    3909			 L7634:	 DC 'IN'		    ; ffh, IN
2 16173
2 16174		  =0004				 strsize sizestr <'IN'>
2 16175		  =0000				 pos = 0
2 16176
2 16177						 irpc parameter,'IN'
2 16178							 pos = pos + 1
2 16179
2 16180							 if pos	EQ strsize - 1
2 16181							 db '&parameter' + 80h
2 16182							 endif
2 16183
2 16184							 if pos	GT 1
2 16185								 if pos	LT strsize -1
2 16186									 db '&parameter'
2 16187								 endif
2 16188							 endif
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 285
msx_asm\tur_comp.ASM



2 16189
2 16190						 endm
3 16191		  =0001					 pos = pos + 1
3 16192
3 16193
3 16194
3 16195		  =0002					 pos = pos + 1
3 16196
3 16197
3 16198	    3909  49							 db 'I'
3 16199
3 16200		  =0003					 pos = pos + 1
3 16201
3 16202	    390A  CE					 db 'N'	+ 80h
3 16203
3 16204
3 16205		  =0004					 pos = pos + 1
3 16206
3 16207
3 16208
2 16209
1 16210	    390B  FF				 DB 0FFH
1 16211	    390C  00				 DB 0			 ; end of list
1 16212
1 16213	    390D			 L78FA:	 DC 'MEM'
2 16214
2 16215		  =0005				 strsize sizestr <'MEM'>
2 16216		  =0000				 pos = 0
2 16217
2 16218						 irpc parameter,'MEM'
2 16219							 pos = pos + 1
2 16220
2 16221							 if pos	EQ strsize - 1
2 16222							 db '&parameter' + 80h
2 16223							 endif
2 16224
2 16225							 if pos	GT 1
2 16226								 if pos	LT strsize -1
2 16227									 db '&parameter'
2 16228								 endif
2 16229							 endif
2 16230
2 16231						 endm
3 16232		  =0001					 pos = pos + 1
3 16233
3 16234
3 16235
3 16236		  =0002					 pos = pos + 1
3 16237
3 16238
3 16239	    390D  4D							 db 'M'
3 16240
3 16241		  =0003					 pos = pos + 1
3 16242
3 16243
3 16244	    390E  45							 db 'E'
3 16245
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 286
msx_asm\tur_comp.ASM



3 16246		  =0004					 pos = pos + 1
3 16247
3 16248	    390F  CD					 db 'M'	+ 80h
3 16249
3 16250
3 16251		  =0005					 pos = pos + 1
3 16252
3 16253
3 16254
2 16255
1 16256	    3910  00 00	00			 DB 0,0,0
1 16257
1 16258	    3913  00			 L7900:	 DB 0			 ; 0 = compilation to memory
1 16259									 ; 1 = compilation to disk
1 16260									 ; 2 = searching for address while compiling
1 16261
1 16262	    3914  00			 L7901:	 DB 0			 ; contains error from abort compilation
1 16263
1 16264	    3915  0000			 L7902:	 DW 0
1 16265	    3917  0000			 L7904:	 DW 0			 ; code	start address
1 16266	    3919  0000			 L7906:	 DW 0			 ; code	end address
1 16267	    391B  0000			 L7908:	 DW 0			 ; data	start address
1 16268	    391D  0000			 L790A:	 DW 0			 ; data	end address
1 16269	    391F  00			 L790C:	 DB 0
1 16270	    3920  00				 DB 0
1 16271
1 16272					 ;L790E:  DB 0			  ; 0 =	read text from memory
1 16273					 ;				  ;NZ =	read text from include file
1 16274
1 16275					 ;	  ; FCB
1 16276					 ;L790F:  DB 0,'DUMMY	FCB'
1 16277					 ;	  DS 36			  ; used as FCB
1 16278
1 16279	    3921			 CODEFILE:
1 16280	    3921  41*(00)			  db 1 + 64 dup	(0)
1 16281
1 16282	    3962			 CODEFILEPOS:
1 16283	    3962  0000				  DW 0
1 16284	    3964  0000				  DW 0
1 16285
1 16286	    3966			 CODEFILESTART:
1 16287	    3966  0000				  DW 0
1 16288	    3968  0000				  DW 0
1 16289
1 16290						 ; FCB
1 16291	    396A  00			 L7933:	  DB 0			     ; used as FCB
1 16292	    396B  08*(00)		 L7934:	 db 8 dup (0)			 ; file	name
1 16293	    3973  00			 L793C:	 DB 0
1 16294	    3974  00			 L793D:	 DB 0
1 16295	    3975  00				 DB 0
1 16296	    3976  15*(00)			 db 21 dup (0)
1 16297	    398B  0000			 L7954:	  DW 0			     ; block count
1 16298	    398D  00				 DB 0
1 16299
1 16300		  =_TEXT:3998		 L7961	  EQU $+10
1 16301
1 16302
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 287
msx_asm\tur_comp.ASM



1 16303		  =0400			 CODEFILEBUFFERSIZE	    EQU	1024
1 16304
1 16305	    398E  0000			 CODEFILEBUFFERPOS:	    DW 0
1 16306	    3990  0400*(00)		 CODEFILEBUFFER:	    db CODEFILEBUFFERSIZE dup (0)
1 16307
1 16308	    3D90  00			 CODEFILECREATED:	    DB 0     ; 0 = no code file	created
1 16309									     ;NZ = code	file created
1 16310
1 16311
1 16312					 ;L7957:   DS 128		      ;	used as	FCB or 128 byte	text buffer
1 16313					 ;
1 16314	    3D91  80*(00)		 L79D7:	 db 128	dup (0)			 ; buffer, line	buffer
1 16315
1 16316	    3E11  80*(00)		 L7A57:	 db 128	dup (0)
1 16317
1 16318	    3E91  80*(00)		 L7AD7:	 db 128	dup (0)
1 16319
1 16320						 ; buffer of 13	bytes that is placed on	the stack
1 16321	    3F11  00			 L7B57:	 DB 0
1 16322	    3F12  00			 L7B58:	 DB 0
1 16323	    3F13  00			 L7B59:	 DB 0
1 16324	    3F14  00			 L7B5A:	 DB 0
1 16325	    3F15  00				 DB 0
1 16326						 ; buffer of 8 bytes where id info is placed
1 16327	    3F16  00			 L7B5C:	 DB 0			 ; type
1 16328	    3F17  00			 L7B5D:	 DB 0
1 16329	    3F18  00			 L7B5E:	 DB 0
1 16330	    3F19  00				 DB 0
1 16331	    3F1A  00			 L7B60:	 DB 0
1 16332	    3F1B  00				 DB 0
1 16333	    3F1C  00			 L7B62:	 DB 0			 ; length
1 16334	    3F1D  00				 DB 0
1 16335
1 16336	    3F1E  00			 L7B64:	 DB 0
1 16337	    3F1F  00			 L7B65:	 DB 0
1 16338	    3F20  00				 DB 0
1 16339	    3F21  00				 DB 0
1 16340	    3F22  00				 DB 0
1 16341	    3F23  00			 L7B69:	 DB 0
1 16342	    3F24  00				 DB 0
1 16343	    3F25  00			 L7B6B:	 DB 0
1 16344	    3F26  00				 DB 0
1 16345	    3F27  00			 L7B6D:	 DB 0
1 16346	    3F28  00				 DB 0
1 16347	    3F29  00			 L7B6F:	 DB 0
1 16348	    3F2A  00				 DB 0
1 16349	    3F2B  00			 L7B71:	 DB 0			 ; stack pointer saved at entering the compiler
1 16350	    3F2C  00			 L7B72:	 DB 0
1 16351	    3F2D  00			 L7B73:	 DB 0
1 16352	    3F2E  00			 L7B74:	 DB 0
1 16353	    3F2F  00			 L7B75:	 DB 0
1 16354	    3F30  00				 DB 0
1 16355	    3F31  0000			 L7B77:	 DW 0
1 16356	    3F33  0000			 L7B79:	 DW 0
1 16357	    3F35  00			 L7B7B:	 DB 0
1 16358	    3F36  00				 DB 0
1 16359
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 288
msx_asm\tur_comp.ASM



1 16360	    3F37  00			 L7B7D:	 DB 0
1 16361	    3F38  00				 DB 0
1 16362	    3F39  00			 L7B7F:	 DB 0
1 16363	    3F3A  00				 DB 0
1 16364	    3F3B  00			 L7B81:	 DB 0
1 16365	    3F3C  00				 DB 0
1 16366	    3F3D  00			 L7B83:	 DB 0
1 16367	    3F3E  00				 DB 0
1 16368	    3F3F  00			 L7B85:	 DB 0
1 16369	    3F40  00				 DB 0
1 16370	    3F41  00			 L7B87:	 DB 0
1 16371	    3F42  00			 L7B88:	 DB 0
1 16372	    3F43  00			 L7B89:	 DB 0
1 16373	    3F44  00				 DB 0
1 16374
1 16375	    3F45  0000			 L7B8B:	 DW 0
1 16376
1 16377	    3F47  00			 L7B8D:	 DB 0
1 16378	    3F48  00				 DB 0
1 16379	    3F49  00			 L7B8F:	 DB 0			 ; 0 = no VAR, 255 = VAR
1 16380	    3F4A  00			 L7B90:	 DB 0			 ; 0 = not absolute, 255 = absolute
1 16381	    3F4B  00			 L7B91:	 DB 0
1 16382	    3F4C  00			 L7B92:	 DB 0
1 16383	    3F4D  00			 L7B93:	 DB 0			 ; current type	used by	SCALARS
1 16384									 ; starts at 16
1 16385	    3F4E  00			 L7B94:	 DB 0
1 16386	    3F4F  00			 L7B95:	 DB 0
1 16387
1 16388	    3F50  00			 L7B96:	 DB 0			 ; number of the overlay file
1 16389									 ; FILE.001
1 16390									 ; FILE.002
1 16391									 ; etc.
1 16392
1 16393	    3F51  00			 L7B97:	  DB 0			     ; 0 = procedure, 1	= function
1 16394	    3F52  00			 L7B98:	 DB 0
1 16395	    3F53  00			 L7B99:	 DB 0
1 16396	    3F54  00			 L7B9A:	 DB 0
1 16397	    3F55  00			 L7B9B:	 DB 0
1 16398	    3F56  00			 L7B9C:	 DB 0
1 16399
1 16400	    3F57  00			 L7B9D:	 DB 0			 ; compiler directive flags
1 16401									 ; bit 0: 1 = I/O Error	Handling
1 16402									 ; bit 1: 1 = Index Range Check
1 16403									 ; bit 2: 1 = Absolute Code
1 16404									 ; bit 3: 1 = User Interrupt
1 16405									 ; bit 4: 1 = Array Optimization
1 16406									 ; bit 5: 1 = Var-parameter Type Checking
1 16407									 ; bit 6: 1 = I/O Mode Selection
1 16408									 ; bit 7: 1 = Control C	and S interpretation
1 16409	    3F58  00			 L7B9E:	 DB 0			 ; saved compiler directives
1 16410	    3F59  00			 L7B9F:	 DB 0			 ; saved compiler directives
1 16411
1 16412	    3F5A  00			 L7BA0:	 DB 0
1 16413	    3F5B  00			 L7BA1:	 DB 0			 ; 255 = minus sign
1 16414									 ;   0 = no sign
1 16415									 ;   1 = plus sign
1 16416	    3F5C  00			 L7BA2:	 DB 0			 ; end of file found flag
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 289
msx_asm\tur_comp.ASM



1 16417	    3F5D  00			 L7BA3:	 DB 0
1 16418	    3F5E  00			 L7BA4:	 DB 0
1 16419	    3F5F  00				 DB 0
1 16420	    3F60  00			 L7BA6:	 DB 0
1 16421	    3F61  00			 L7BA7:	 DB 0
1 16422	    3F62  00				 DB 0
1 16423	    3F63  0000			 L7BA9:	 DW 0			 ; used	to save	current	text pointer
1 16424									 ; because library call	that uses IX
1 16425	    3F65  00			 L7BAB:	 DB 0
1 16426	    3F66  00				 DB 0
1 16427	    3F67  00				 DB 0
1 16428	    3F68  00				 DB 0
1 16429	    3F69  00				 DB 0
1 16430
1 16431	    3F6A  00			 L7BB0:	  DB 0			     ; length of largest part
1 16432	    3F6B  00				 DB 0
1 16433
1 16434	    3F6C  00			 L7BB2:	 DB 0
1 16435	    3F6D  00				 DB 0
1 16436	    3F6E  00				 DB 0
1 16437	    3F6F  00				 DB 0
1 16438	    3F70  00				 DB 0
1 16439	    3F71  00				 DB 0
1 16440	    3F72  00				 DB 0
1 16441	    3F73  00				 DB 0
1 16442	    3F74  00				 DB 0
1 16443	    3F75  00				 DB 0
1 16444	    3F76  00				 DB 0
1 16445	    3F77  00			 L7BBD:	 DB 0
1 16446	    3F78  00			 L7BBE:	 DB 0
1 16447	    3F79  00				 DB 0
1 16448	    3F7A  00			 L7BC0:	 DB 0
1 16449
1 16450	    3F7B  00			 L7BC1:	 DB 0
1 16451	    3F7C  00			 L7BC2:	 DB 0
1 16452	    3F7D  00				 DB 0
1 16453	    3F7E  00			 L7BC4:	 DB 0
1 16454	    3F7F  00				 DB 0
1 16455	    3F80  00			 L7BC6:	 DB 0
1 16456	    3F81  00			 WITHDEPTH:DB 0			 ; initial value at 4
1 16457	    3F82  00			 L7BC8:	 DB 0
1 16458	    3F83  00			 L7BC9:	 DB 0
1 16459	    3F84  00			 L7BCA:	 DB 0
1 16460	    3F85  00				 DB 0
1 16461
1 16462	    3F86  00			 L7BCC:	 DB 0
1 16463	    3F87  00				 DB 0
1 16464	    3F88  00				 DB 0
1 16465	    3F89  00				 DB 0
1 16466	    3F8A  00				 DB 0
1 16467	    3F8B  00				 DB 0
1 16468	    3F8C  00				 DB 0
1 16469	    3F8D  00				 DB 0
1 16470	    3F8E  00				 DB 0
1 16471	    3F8F  00			 L7BD5:	 DB 0
1 16472	    3F90  00				 DB 0
1 16473
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 290
msx_asm\tur_comp.ASM



1 16474					 ;L7BD7:  DW 0			  ; text pointer of text in memory
1 16475					 ;L7BD9:  DB 0
1 16476					 ;	  DB 0
1 16477
1 16478	    3F91  00			 L7BDB:	 DB 0			 ; bit 0 = '0':	block already read
1 16479									 ; bit 1 = '0':	block is not dirty
1 16480
1 16481					 ;L7BDC:   DB 0			      ;	index to current block
1 16482
1 16483	    3F92  0000			 L7BDD:	 DW 0			 ; first block of current part
1 16484
1 16485	    3F94  0000			 L7BDF:	 DW 0			 ; start of free area
1 16486	    3F96  0000			 L7BE1:	 DW 0			 ; start of free area +	1024
1 16487	    3F98  00			 L7BE3:	 DB 0
1 16488
1 16489	    3F99  00			 L7BF1:	 DB 0
1 16490	    3F9A  00			 L7BF2:	 DB 0
1 16491	    3F9B  0000			 L7BF3:	 DW 0
1 16492
1 16493	    3F9D			 TABLEINDEX2:
1 16494						 ; HL =	tablename[index]
1 16495						 ; maximum of 128 indexes, 0 ..	127
1 16496						 ; in:	 HL = table base address
1 16497						 ;	  A = table index, zero	based
1 16498						 ; out:	 HL = contents of index, word
1 16499						 ; changes: AF
1 16500	    3F9D  87				 DB 087h
1 16501
1 16502	    3F9E  85				 DB 085h
1 16503	    3F9F  30 01				 DB 30h,(TABLEINDEX2_1)-$-1
1 16504	    3FA1  24				 DB 24h
1 16505	    3FA2			 TABLEINDEX2_1:
1 16506	    3FA2  6F				 DB 6fh
1 16507
1 16508	    3FA3  7E				 DB 7eh
1 16509	    3FA4  23				 DB 23h
1 16510	    3FA5  66				 DB 66h
1 16511	    3FA6  6F				 DB 6fh
1 16512	    3FA7  C9				 DB 0c9h
1 16513
1 16514	    3FA8			 COMPAREHL_DE:
1 16515						 ; compares HL with DE,	by subtraction HL - DE
1 16516						 ; in:	 HL, DE
1 16517						 ; out:	 Carry,	if HL <	DE
1 16518						 ;	 Zero, if HL ==	DE
1 16519						 ;	 Zero and NonCarry, if HL >= DE
1 16520						 ; changes: AF
1 16521	    3FA8  7C				 DB 7ch
1 16522	    3FA9  92				 DB 092h
1 16523	    3FAA  C0				 DB 0c0h
1 16524	    3FAB  7D				 DB 7dh
1 16525	    3FAC  93				 DB 093h
1 16526	    3FAD  C9				 DB 0c9h
1 16527
1 16528	    3FAE			 MINIMUMHL_DE:
1 16529						 ; in:	 HL, DE
1 16530						 ; out:	 HL = minimum value, DE	= maximum value
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 291
msx_asm\tur_comp.ASM



1 16531	    3FAE  CD				 DB 0cdh
1 16532	    3FAF  3FA8r				 DW  COMPAREHL_DE
1 16533	    3FB1  D8				 DB 0d8h		 ; quit	if HL =	minimum	(HL < DE)
1 16534
1 16535	    3FB2  EB				 DB 0ebh		 ; swap	values
1 16536	    3FB3  C9				 DB 0c9h
1 16537
1 16538	    3FB4			 FILEINFOENTRYADDRESS:
1 16539						 ; in:	 A = include level, 0 .. FileLevels - 1
1 16540						 ; out:	 HL = address of info within FileInfo table
1 16541	    3FB4  11				 DB 11h
1 16542	    3FB5  004D				 DW FILEINFOENTRYSIZE
1 16543
1 16544	    3FB7  21				 DB 21h
1 16545	    3FB8  4125r				 DW FILEINFO
1 16546
1 16547	    3FBA			 FILEINFOENTRYADDRESS1:
1 16548	    3FBA  B7				 DB 0b7h
1 16549	    3FBB  C8				 DB 0c8h
1 16550	    3FBC  3D				 DB 3dh
1 16551	    3FBD  19				 DB 019h
1 16552	    3FBE  18 FA				 DB 18h,( FILEINFOENTRYADDRESS1)-$-1
1 16553
1 16554	    3FC0			 GONEXTFILELEVEL:
1 16555						 ; in:	 HL = address of filename of text file
1 16556
1 16557						 ; push	default	extension 'INC'
1 16558	    3FC0  3E 49				 DB 3eh,'I'
1 16559	    3FC2  01				 DB 01h
1 16560	    3FC3  4E43				 DW 'N'*256+'C'
1 16561	    3FC5  F5				 DB 0f5h
1 16562	    3FC6  C5				 DB 0c5h
1 16563
1 16564	    3FC7  E5				 DB 0e5h
1 16565
1 16566	    3FC8  2A				 DB 02ah
1 16567	    3FC9  4121r				 DW FILEBUFFERCOUNT
1 16568	    3FCB  11				 DB 11h
1 16569	    3FCC  0400				 DW FILELEVELMINIMUM
1 16570	    3FCE  B7				 DB 0b7h
1 16571	    3FCF  ED 52				 DB 0EDH,052h		 ; HL =	number of lost bytes
1 16572	    3FD1  28 1C				 DB 28h,(GONEXTFILELEVELNOLOSS)-$-1 ; jump if Count = 0
1 16573	    3FD3  38 1A				 DB 38h,(GONEXTFILELEVELNOLOSS)-$-1 ; jump if Count < 1024
1 16574
1 16575	    3FD5  44				 DB 44h			 ; BC =	number of lost bytes
1 16576	    3FD6  4D				 DB 4dh
1 16577
1 16578	    3FD7  C5				 DB 0c5h
1 16579	    3FD8  01				 DB 01h
1 16580	    3FD9  40D8r				 DW FILECURRENTINFO
1 16581	    3FDB  CD				 DB 0cdh
1 16582	    3FDC  0000e				 DW  FILEPOS
1 16583	    3FDE  C1				 DB 0c1h
1 16584
1 16585	    3FDF  B7				 DB 0b7h
1 16586	    3FE0  ED 42				 DB 0EDH,042h		 ; subtract loss from low-word
1 16587	    3FE2  30 01				 DB 30h,(GONEXTFILELEVEL0)-$-1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 292
msx_asm\tur_comp.ASM



1 16588
1 16589	    3FE4  1B				 DB 1bh			 ; decrease high-word
1 16590
1 16591	    3FE5			 GONEXTFILELEVEL0:
1 16592	    3FE5  01				 DB 01h
1 16593	    3FE6  40D8r				 DW FILECURRENTINFO
1 16594	    3FE8  CD				 DB 0cdh
1 16595	    3FE9  0000e				 DW  FILESEEK		 ; set file position back with the number
1 16596									 ; of lost bytes
1 16597
1 16598	    3FEB  CD				 DB 0cdh
1 16599	    3FEC  34E5r				 DW  L72DA		 ; NonZero --> error
1 16600	    3FEE  84				 DB 84H			 ; error 132: error seeking file
1 16601
1 16602	    3FEF			 GONEXTFILELEVELNOLOSS:
1 16603
1 16604	    3FEF  2A				 DB 02ah
1 16605	    3FF0  4121r				 DW FILEBUFFERCOUNT
1 16606	    3FF2  11				 DB 11h
1 16607	    3FF3  0400				 DW FILELEVELMINIMUM	 ; 1024	= minimum size used by a file
1 16608	    3FF5  CD				 DB 0cdh
1 16609	    3FF6  3FAEr				 DW  MINIMUMHL_DE
1 16610						 ; LD (FileBufferSize),HL	   ; set new size
1 16611	    3FF8  22				 DB 22h
1 16612	    3FF9  4121r				 DW FILEBUFFERCOUNT	 ; set new count
1 16613
1 16614	    3FFB  44				 DB 44h			 ; BC =	HL = count
1 16615	    3FFC  4D				 DB 4dh
1 16616	    3FFD  2A				 DB 02ah
1 16617	    3FFE  411Fr				 DW FILEBUFFERPOS
1 16618	    4000  ED 5B				 DB 0edh,5bh
1 16619	    4002  411Dr				 DW FILEBUFFERSTART
1 16620	    4004  D5				 DB 0d5h
1 16621
1 16622	    4005  ED B0				 DB 0edh,0b0h			 ; move	to start of buffer
1 16623
1 16624	    4007  E1				 DB 0e1h
1 16625	    4008  22				 DB 22h
1 16626	    4009  411Fr				 DW FILEBUFFERPOS	 ; buffer pos =	buffer start
1 16627
1 16628	    400B  D5				 DB 0d5h		 ; save	buffer start for next level
1 16629
1 16630	    400C  3A				 DB 3ah
1 16631	    400D  40D7r				 DW FILELEVEL
1 16632	    400F  CD				 DB 0cdh
1 16633	    4010  3FB4r				 DW  FILEINFOENTRYADDRESS
1 16634	    4012  EB				 DB 0ebh		 ; DE =	address	where to save current info
1 16635	    4013  21				 DB 21h
1 16636	    4014  40D8r				 DW FILEINFOENTRYSTART
1 16637	    4016  01				 DB 01h
1 16638	    4017  004D				 DW FILEINFOENTRYSIZE
1 16639	    4019  ED B0				 DB 0edh,0b0h			 ; save	current	entry in table
1 16640
1 16641	    401B  21				 DB 21h
1 16642	    401C  40D7r				 DW FILELEVEL
1 16643	    401E  34				 DB 034h		 ; go to next include level
1 16644
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 293
msx_asm\tur_comp.ASM



1 16645	    401F			 GONEXTFILELEVEL1:
1 16646	    401F  E1				 DB 0e1h
1 16647	    4020  22				 DB 22h
1 16648	    4021  411Dr				 DW FILEBUFFERSTART	 ; set new buffer start
1 16649	    4023  22				 DB 22h
1 16650	    4024  411Fr				 DW FILEBUFFERPOS	 ; set new buffer pos
1 16651
1 16652	    4026  EB				 DB 0ebh
1 16653	    4027  21				 DB 21h
1 16654	    4028  6259r				 DW FILEBUFFEREND
1 16655	    402A  B7				 DB 0b7h
1 16656	    402B  ED 52				 DB 0EDH,052h		 ; HL =	size for new buffer
1 16657	    402D  22				 DB 22h
1 16658	    402E  4123r				 DW FILEBUFFERSIZE
1 16659
1 16660	    4030  11				 DB 11h
1 16661	    4031  40D8r				 DW FILECURRENTINFO
1 16662
1 16663	    4033  E1				 DB 0e1h		 ; DE =	address	of filename to parse
1 16664
1 16665	    4034  C1				 DB 0c1h
1 16666	    4035  F1				 DB 0f1h
1 16667	    4036  CD				 DB 0cdh
1 16668	    4037  0000e				 DW  OPENFILE
1 16669
1 16670	    4039  CD				 DB 0cdh
1 16671	    403A  34E5r				 DW  L72DA		 ; NonZero --> error
1 16672	    403C  5A				 DB 5AH			 ; error 90: File not found
1 16673
1 16674	    403D  21				 DB 21h
1 16675	    403E  0000				 DW 0
1 16676	    4040  22				 DB 22h
1 16677	    4041  4119r				 DW FILEBUFFERLINE	 ; start at line 0
1 16678
1 16679	    4043  CD				 DB 0cdh
1 16680	    4044  405Ar				 DW  FILEREADBUFFER
1 16681
1 16682	    4046  7C				 DB 7ch
1 16683	    4047  B5				 DB 0b5h
1 16684	    4048  C0				 DB 0c0h		 ; quit	if some	bytes read
1 16685
1 16686	    4049			 GOPREVIOUSFILELEVEL:
1 16687					 ; 33e	  LD BC,FileCurrentInfo
1 16688					 ; 33e	  CALL CloseFile	     ; close the current file
1 16689
1 16690					 ; 33e	  CALL L72DA		     ; NonZero --> error
1 16691					 ; 33e	  DB 85H		     ; error 133: error	closing	file
1 16692
1 16693	    4049  21				 DB 21h
1 16694	    404A  40D7r				 DW FILELEVEL
1 16695	    404C  35				 DB 035h		 ; decrease level
1 16696	    404D  7E				 DB 7eh
1 16697	    404E  CD				 DB 0cdh
1 16698	    404F  3FB4r				 DW  FILEINFOENTRYADDRESS
1 16699	    4051  11				 DB 11h
1 16700	    4052  40D8r				 DW FILEINFOENTRYSTART
1 16701	    4054  01				 DB 01h
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 294
msx_asm\tur_comp.ASM



1 16702	    4055  004D				 DW FILEINFOENTRYSIZE
1 16703	    4057  ED B0				 DB 0edh,0b0h			 ; restore to previous level
1 16704	    4059  C9				 DB 0c9h
1 16705
1 16706	    405A			 FILEREADBUFFER:
1 16707						 ; in:	 -
1 16708						 ; out:	 HL = bytes read from file
1 16709
1 16710	    405A  2A				 DB 02ah
1 16711	    405B  4123r				 DW FILEBUFFERSIZE
1 16712	    405D  ED 5B				 DB 0edh,5bh
1 16713	    405F  411Dr				 DW FILEBUFFERSTART
1 16714	    4061  53ED 411Fr			 DW 53edh,FILEBUFFERPOS
1 16715	    4065  01				 DB 01h
1 16716	    4066  40D8r				 DW FILECURRENTINFO	 ; handle/FCB address
1 16717	    4068  CD				  DB 0cdh
1 16718	    4069  0000e				 DW  READFILE
1 16719	    406B  22				 DB 22h
1 16720	    406C  4121r				 DW FILEBUFFERCOUNT
1 16721
1 16722	    406E  CD				 DB 0cdh
1 16723	    406F  34E5r				 DW  L72DA		 ; NonZero --> error
1 16724	    4071  83				 DB 83H			 ; error 131: error reading file
1 16725
1 16726	    4072  7C				 DB 7ch
1 16727	    4073  B5				 DB 0b5h
1 16728	    4074  C0				 DB 0c0h		 ; quit	if something was read
1 16729
1 16730	    4075  2A				 DB 02ah
1 16731	    4076  411Dr				 DW FILEBUFFERSTART
1 16732	    4078  36 1A				 DB 36h,1AH		 ; place end of	file marker (^Z)
1 16733	    407A  21				 DB 21h
1 16734	    407B  0001				 DW 1
1 16735	    407D  22				 DB 22h
1 16736	    407E  4121r				 DW FILEBUFFERCOUNT	 ; count = 1
1 16737
1 16738	    4080  C9				 DB 0c9h
1 16739
1 16740	    4081			 FILEINIT:
1 16741						 ; in:	 HL = address of filename of text file
1 16742
1 16743						 ; push	default	extension 'PAS'
1 16744	    4081  3E 50				 DB 3eh,'P'
1 16745	    4083  01				 DB 01h
1 16746	    4084  4153				 DW 'A'*256+'S'
1 16747	    4086  F5				 DB 0f5h
1 16748	    4087  C5				 DB 0c5h
1 16749
1 16750	    4088  E5				 DB 0e5h
1 16751	    4089  AF				 DB 0afh
1 16752	    408A  32				 DB 32h
1 16753	    408B  40D7r				 DW FILELEVEL
1 16754	    408D  21				 DB 21h
1 16755	    408E  4259r				 DW FILEBUFFER
1 16756	    4090  E5				 DB 0e5h
1 16757	    4091  C3				 DB 0c3h
1 16758	    4092  401Fr				 DW  GONEXTFILELEVEL1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 295
msx_asm\tur_comp.ASM



1 16759
1 16760		  =2000			 TOTALFILEBUFFERSIZE EQU 8192	     ; 8 KByte
1 16761		  =0400			 FILELEVELMINIMUM  EQU 1024
1 16762		  =0004			 MAXFILELEVELS	 EQU 4		 ; levels 0 - 3
1 16763
1 16764	    4094  41*(00)		 TEMPFILEDATA:	   db 1	+ 64 dup (0)
1 16765
1 16766	    40D5  0000			 TOTALLINES:	 DW 0
1 16767	    40D7  00			 FILELEVEL:	 DB 0		 ; current include level, 0 default
1 16768
1 16769	    40D8			 FILEINFOENTRYSTART:
1 16770
1 16771	    40D8  41*(00)		 FILECURRENTINFO:  db 1	+ 64 dup (0)	     ; DOS 1: 37 byte FCB
1 16772									 ; DOS 2: handle, 63 bytes name, '\0'
1 16773	    4119  0000			 FILEBUFFERLINE: DW 0		 ; current line	number in text file
1 16774	    411B  0000			 FILEBUFFERLASTPOS:DW 0		 ; starting position of	last read item
1 16775	    411D  4259r			 FILEBUFFERSTART:	 DW FILEBUFFER	 ; start of current file buffer, address
1 16776	    411F  4259r			 FILEBUFFERPOS:	 DW FILEBUFFER	 ; address of next byte	to read
1 16777	    4121  0000			 FILEBUFFERCOUNT:	 DW 0		 ; bytes left in current buffer
1 16778	    4123  2000			 FILEBUFFERSIZE: DW TOTALFILEBUFFERSIZE	; size in bytes	of current buffer
1 16779
1 16780		  =004D			 FILEINFOENTRYSIZE EQU $-FILEINFOENTRYSTART ; size never greater than 128 !!
1 16781
1 16782	    4125			 FILEINFO:
1 16783	    4125  0134*(00)			 db FILEINFOENTRYSIZE *	MAXFILELEVELS dup (0)
1 16784
1 16785	    4259			 FILEBUFFER:
1 16786	    4259  2000*(00)			 db TOTALFILEBUFFERSIZE	dup (0)
1 16787	    6259			 FILEBUFFEREND:
1 16788
1 16789					 ;	   DB 'EXTRA'
1 16790					 ; L90FC:   DW 0		       ; 33e TODO, L90FC
1 16791
1 16792						  END
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 296
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "15/03/00"
??FILENAME			  Text	 "tur_comp"
??TIME				  Text	 "23:13:12"
??VERSION			  Number 0314
@32BIT				  Text	 0
@CODE				  Text	 _TEXT
@CODESIZE			  Text	 0
@CPU				  Text	 1F1FH
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 TUR_COMP
@INTERFACE			  Text	 00H
@MODEL				  Text	 2
@STACK				  Text	 @STACK
@WORDSIZE			  Text	 4
A2L				  Near	 _TEXT:---- Extern
BOOLOPER			  Near	 _TEXT:19F2
BOOLOPTIM			  Near	 _TEXT:19F3
BUILDI1				  Near	 _TEXT:3007
BUILDI2				  Near	 _TEXT:3015
BUILDID				  Near	 _TEXT:2FF4
CLEANUPCODEFILE			  Near	 _TEXT:05C1
CLOSEFILE			  Near	 _TEXT:---- Extern
CODEFILE			  Near	 _TEXT:3921
CODEFILEBUFFER			  Near	 _TEXT:3990
CODEFILEBUFFERPOS		  Near	 _TEXT:398E
CODEFILEBUFFERSIZE		  Number 0400
CODEFILECREATED			  Near	 _TEXT:3D90
CODEFILEPOS			  Near	 _TEXT:3962
CODEFILESTART			  Near	 _TEXT:3966
COMPAREHL_DE			  Near	 _TEXT:3FA8
COMPCUR				  Near	 _TEXT:2D3C
COMPILED			  Near	 _TEXT:09E5
CON1OUTPTR			  Near	 _TEXT:---- Extern
CONSTPTR			  Near	 _TEXT:---- Extern
CREATEFILE			  Near	 _TEXT:---- Extern
DEF_TYPE			  Near	 _TEXT:2036
DELETEFILE			  Near	 _TEXT:---- Extern
DOS2PRESENT			  Near	 _TEXT:---- Extern
DOS_BLEN			  Number 0004
DOS_BUF				  Number 0051
DOS_CHR				  Number 0001
DOS_CUR				  Number 000C
DOS_FCB				  Number 0010
DOS_FLG				  Number 0000
DOS_LEN				  Number 00D1
DOS_NUM				  Number 0006
DOS_PTR				  Number 0002
DOS_REC				  Number 000A
EMCUR				  Near	 _TEXT:2D3E
ENDOFLINE			  Near	 _TEXT:0795
ENVTPOUT			  Near	 _TEXT:0476
ERR62				  Near	 _TEXT:2D40
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 297
Symbol Table



ERR63				  Near	 _TEXT:2D44
ERRORFILEINFO			  Near	 _TEXT:0696
ERRORFILEMAKE			  Near	 _TEXT:06E4
ERRORFILEMAKE1			  Near	 _TEXT:0750
ERRORFILENAME			  Near	 _TEXT:0653
ERRORFILEPTR			  Near	 _TEXT:0694
ERRORFILEWRITE			  Near	 _TEXT:06D7
EXPANDLINE			  Near	 _TEXT:077D
EXPANDLINE1			  Near	 _TEXT:0782
EXPANDLINE2			  Near	 _TEXT:0790
FASTCMP				  Near	 _TEXT:2FDE
FASTCMPL			  Near	 _TEXT:2FE2
FASTCMPQ			  Near	 _TEXT:2FF2
FASTCMPR			  Near	 _TEXT:2FD3
FCB_DRIVE			  Number 0000
FCB_EXT				  Number 0009
FCB_FILEPOS			  Number 0021
FCB_FILESIZE			  Number 0010
FCB_LEN				  Number 0024
FCB_NAME			  Number 0001
FCB_RECSIZE			  Number 000E
FIB_BUF				  Number 0030
FIB_CHR				  Number 0001
FIB_CUR				  Number 0008
FIB_F				  Number 0000
FIB_FCB				  Number 000C
FIB_LEN				  Number 00B0
FIB_NUM				  Number 0004
FIB_PTR				  Number 0002
FIB_REC				  Number 0006
FILEBUFFER			  Near	 _TEXT:4259
FILEBUFFERCOUNT			  Near	 _TEXT:4121
FILEBUFFEREND			  Near	 _TEXT:6259
FILEBUFFERLASTPOS		  Near	 _TEXT:411B
FILEBUFFERLINE			  Near	 _TEXT:4119
FILEBUFFERPOS			  Near	 _TEXT:411F
FILEBUFFERSIZE			  Near	 _TEXT:4123
FILEBUFFERSTART			  Near	 _TEXT:411D
FILECURRENTINFO			  Near	 _TEXT:40D8
FILEDEF				  Near	 _TEXT:37C7
FILEINFO			  Near	 _TEXT:4125
FILEINFOENTRYADDRESS		  Near	 _TEXT:3FB4
FILEINFOENTRYADDRESS1		  Near	 _TEXT:3FBA
FILEINFOENTRYSIZE		  Number 004D
FILEINFOENTRYSTART		  Near	 _TEXT:40D8
FILEINIT			  Near	 _TEXT:4081
FILELEVEL			  Near	 _TEXT:40D7
FILELEVELMINIMUM		  Number 0400
FILEPOS				  Near	 _TEXT:---- Extern
FILEREADBUFFER			  Near	 _TEXT:405A
FILESEEK			  Near	 _TEXT:---- Extern
FIL_HDR				  Number 0004
GETCOLUMNNUMBER			  Near	 _TEXT:0755
GETCOLUMNNUMBER1		  Near	 _TEXT:075E
GETCOLUMNNUMBERTAB		  Near	 _TEXT:0771
GETHEX				  Near	 _TEXT:033F
GETHEX1				  Near	 _TEXT:0342
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 298
Symbol Table



GETHEX2				  Near	 _TEXT:0360
GETPAR1				  Near	 _TEXT:02AF
GETPAR2				  Near	 _TEXT:02C0
GETPAR3				  Near	 _TEXT:02CC
GETPAR4				  Near	 _TEXT:02DD
GETPAR5				  Near	 _TEXT:02EE
GETPAR51			  Near	 _TEXT:031F
GETPAR6				  Near	 _TEXT:0327
GETPARAM			  Near	 _TEXT:0259
GETPARAMERRORFILENAME		  Near	 _TEXT:01D3
GETPARAMHEXNUMBER		  Near	 _TEXT:0200
GETPARAMUNKNOWNOPTION		  Near	 _TEXT:0233
GETPARLP			  Near	 _TEXT:02A7
GETPAR_A			  Near	 _TEXT:0290
GETPAR_B			  Near	 _TEXT:0295
GONEXTFILELEVEL			  Near	 _TEXT:3FC0
GONEXTFILELEVEL0		  Near	 _TEXT:3FE5
GONEXTFILELEVEL1		  Near	 _TEXT:401F
GONEXTFILELEVELNOLOSS		  Near	 _TEXT:3FEF
GOPREVIOUSFILELEVEL		  Near	 _TEXT:4049
INITFILEIO			  Near	 _TEXT:---- Extern
I_L				  Near	 _TEXT:1000
L0080				  Near	 _TEXT:---- Extern
L00CE				  Near	 _TEXT:---- Extern
L0100				  Near	 _TEXT:---- Extern
L01E1				  Near	 _TEXT:---- Extern
L0200				  Near	 _TEXT:---- Extern
L0364				  Near	 _TEXT:---- Extern
L03C9				  Near	 _TEXT:---- Extern
L03E1				  Near	 _TEXT:---- Extern
L04A6				  Near	 _TEXT:---- Extern
L04AF				  Near	 _TEXT:---- Extern
L0581				  Near	 _TEXT:---- Extern
L0591				  Near	 _TEXT:---- Extern
L059B				  Near	 _TEXT:---- Extern
L0612				  Near	 _TEXT:---- Extern
L0783				  Near	 _TEXT:---- Extern
L07F7				  Near	 _TEXT:---- Extern
L1008				  Near	 _TEXT:---- Extern
L11A3				  Near	 _TEXT:---- Extern
L149B				  Near	 _TEXT:---- Extern
L1726				  Near	 _TEXT:---- Extern
L20E2				  Near	 _TEXT:0000
L20E5				  Near	 _TEXT:0368
L20F2				  Near	 _TEXT:0375
L215E				  Near	 _TEXT:037F
L223B				  Near	 _TEXT:043B
L232E				  Near	 _TEXT:0443
L2338				  Near	 _TEXT:044D
L27D7				  Near	 _TEXT:047C
L27D9				  Near	 _TEXT:04B9
L2827				  Near	 _TEXT:04C6
L283C				  Near	 _TEXT:04D8
L2841				  Near	 _TEXT:04DD
L2842				  Near	 _TEXT:04EF
L2850				  Near	 _TEXT:0529
L2877				  Near	 _TEXT:0532
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 299
Symbol Table



L287B				  Near	 _TEXT:0536
L28A9				  Near	 _TEXT:055B
L28D0				  Near	 _TEXT:0586
L28FA				  Near	 _TEXT:05D2
L292A				  Near	 _TEXT:060F
L2970				  Near	 _TEXT:07C8
L2995				  Near	 _TEXT:082D
L29AD				  Near	 _TEXT:0844
L29B6				  Near	 _TEXT:084D
L29BC				  Near	 _TEXT:084D
L29C9				  Near	 _TEXT:0858
L29D2				  Near	 _TEXT:0861
L29DD				  Near	 _TEXT:086C
L29E6				  Near	 _TEXT:0875
L29E9				  Near	 _TEXT:0878
L29EC				  Near	 _TEXT:087B
L29F8				  Near	 _TEXT:0887
L2A5A				  Near	 _TEXT:08DC
L2A7A				  Near	 _TEXT:08FC
L2A96				  Near	 _TEXT:0918
L2D01				  Near	 _TEXT:0919
L2D0D				  Near	 _TEXT:0925
L2D1B				  Near	 _TEXT:0933
L2D21				  Near	 _TEXT:0939
L2E5C				  Near	 _TEXT:0942
L2E61				  Near	 _TEXT:0947
L2E64				  Near	 _TEXT:094A
L2E76				  Near	 _TEXT:095C
L2E88				  Near	 _TEXT:096E
L44F1				  Near	 _TEXT:0977
L44F2				  Near	 _TEXT:0978
L44F3				  Near	 _TEXT:0979
L44F4				  Near	 _TEXT:097A
L44F6				  Near	 _TEXT:097C
L44F9				  Near	 _TEXT:097F
L44FA				  Near	 _TEXT:0980
L450C				  Near	 _TEXT:0992
L451D				  Near	 _TEXT:09A3
L4541				  Near	 _TEXT:09E4
L4543				  Near	 _TEXT:09E6
L4544				  Near	 _TEXT:09E7
L4546				  Near	 _TEXT:09E9
L4548				  Near	 _TEXT:09EB
L454A				  Near	 _TEXT:09ED
L45E2				  Near	 _TEXT:0A95
L45EA				  Near	 _TEXT:0A9D
L45FC				  Near	 _TEXT:0AAF
L4607				  Near	 _TEXT:0ABA
L460A				  Near	 _TEXT:0ABD
L4621				  Near	 _TEXT:0AD4
L462E				  Near	 _TEXT:0AE1
L4692				  Near	 _TEXT:0B45
L469E				  Near	 _TEXT:0B51
L46B3				  Near	 _TEXT:0B66
L46BE				  Near	 _TEXT:0B71
L46C7				  Near	 _TEXT:0B7A
L46D0				  Near	 _TEXT:0B83
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 300
Symbol Table



L46D9				  Near	 _TEXT:0B8C
L46E6				  Near	 _TEXT:0B99
L4709				  Near	 _TEXT:0BBC
L470D				  Near	 _TEXT:0BDA
L4723				  Near	 _TEXT:0BF7
L4724				  Near	 _TEXT:0C04
L473B				  Near	 _TEXT:0C1B
L478C				  Near	 _TEXT:0C75
L4799				  Near	 _TEXT:0C85
L47C6				  Near	 _TEXT:0CB8
L47FF				  Near	 _TEXT:0CE1
L4821				  Near	 _TEXT:0D16
L484E				  Near	 _TEXT:0D4D
L4850				  Near	 _TEXT:0D4F
L485E				  Near	 _TEXT:0D5D
L486A				  Near	 _TEXT:0D69
L4880				  Near	 _TEXT:0D7F
L4884				  Near	 _TEXT:0D83
L488E				  Near	 _TEXT:0D8D
L48A5				  Near	 _TEXT:0DA4
L48B7				  Near	 _TEXT:0DB6
L48DB				  Near	 _TEXT:0DDF
L48DB1				  Near	 _TEXT:0DE7
L48E3				  Near	 _TEXT:0DF2
L48EC				  Near	 _TEXT:0DFB
L48F6				  Near	 _TEXT:0E05
L48FA				  Near	 _TEXT:0E09
L4901				  Near	 _TEXT:0E10
L4928				  Near	 _TEXT:0E37
L4937				  Near	 _TEXT:0E47
L4946				  Near	 _TEXT:0E59
L4978				  Near	 _TEXT:0E8B
L497B				  Near	 _TEXT:0E8E
L498A				  Near	 _TEXT:0E9D
L499A				  Near	 _TEXT:0EAD
L499D				  Near	 _TEXT:0EB0
L49A1				  Near	 _TEXT:0EB4
L49B6				  Near	 _TEXT:0EC9
L49EB				  Near	 _TEXT:0EFE
L49F6				  Near	 _TEXT:0F09
L49FA				  Near	 _TEXT:0F0D
L4A20				  Near	 _TEXT:0F33
L4A37				  Near	 _TEXT:0F4A
L4A3F				  Near	 _TEXT:0F52
L4A4B				  Near	 _TEXT:0F5E
L4A6F				  Near	 _TEXT:0F82
L4A7A				  Near	 _TEXT:0F8D
L4A8D				  Near	 _TEXT:0FA0
L4A91				  Near	 _TEXT:0FA4
L4A99				  Near	 _TEXT:0FAC
L4AAF				  Near	 _TEXT:0FC6
L4AAF1				  Near	 _TEXT:0FD3
L4AB5				  Near	 _TEXT:0FCC
L4ABC				  Near	 _TEXT:0FDA
L4ABC1				  Near	 _TEXT:1008
L4ACA				  Near	 _TEXT:1016
L4AE7				  Near	 _TEXT:1036
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 301
Symbol Table



L4AEB				  Near	 _TEXT:103A
L4AEF				  Near	 _TEXT:103E
L4B2A				  Near	 _TEXT:1079
L4B3A				  Near	 _TEXT:1089
L4B42				  Near	 _TEXT:1091
L4B45				  Near	 _TEXT:10DB
L4B88				  Near	 _TEXT:10E5
L4B9E				  Near	 _TEXT:10FB
L4BB8				  Near	 _TEXT:1115
L4BC3				  Near	 _TEXT:1120
L4BDA				  Near	 _TEXT:1137
L4BF8				  Near	 _TEXT:1155
L4C07				  Near	 _TEXT:1164
L4C2C				  Near	 _TEXT:1189
L4C38				  Near	 _TEXT:1195
L4C44				  Near	 _TEXT:11B2
L4C5B				  Near	 _TEXT:11C9
L4C61				  Near	 _TEXT:11CF
L4C76				  Near	 _TEXT:11E4
L4C84				  Near	 _TEXT:11F2
L4CA7				  Near	 _TEXT:1215
L4CD2				  Near	 _TEXT:1240
L4CD6				  Near	 _TEXT:1244
L4CE1				  Near	 _TEXT:124F
L4CFD				  Near	 _TEXT:126B
L4D04				  Near	 _TEXT:1272
L4D2B				  Near	 _TEXT:1299
L4D79				  Near	 _TEXT:12EF
L4D86				  Near	 _TEXT:12FC
L4D8F				  Near	 _TEXT:1305
L4DBD				  Near	 _TEXT:133F
L4DD4				  Near	 _TEXT:1356
L4DE3				  Near	 _TEXT:1365
L4DE6				  Near	 _TEXT:1368
L4DE9				  Near	 _TEXT:136B
L4DF3				  Near	 _TEXT:1375
L4E24				  Near	 _TEXT:13A6
L4E35				  Near	 _TEXT:13B7
L4E46				  Near	 _TEXT:13C8
L4E65				  Near	 _TEXT:13E7
L4E74				  Near	 _TEXT:13F4
L4E76				  Near	 _TEXT:1404
L4E78				  Near	 _TEXT:1422
L4E79				  Near	 _TEXT:1427
L4E8A				  Near	 _TEXT:1438
L4E8D				  Near	 _TEXT:143B
L4EA4				  Near	 _TEXT:1452
L4EA7				  Near	 _TEXT:1455
L4EB5				  Near	 _TEXT:1463
L4EBB				  Near	 _TEXT:1469
L4EDD				  Near	 _TEXT:148B
L4F0C				  Near	 _TEXT:14BA
L4F0F				  Near	 _TEXT:14BD
L4F14				  Near	 _TEXT:14C2
L4F18				  Near	 _TEXT:14C6
L4F181				  Near	 _TEXT:14DD
L4F35				  Near	 _TEXT:14F3
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 302
Symbol Table



L4F51				  Near	 _TEXT:150F
L4F52				  Near	 _TEXT:1510
L4F60				  Near	 _TEXT:151E
L4F72				  Near	 _TEXT:1530
L4F7B				  Near	 _TEXT:1539
L4F7E				  Near	 _TEXT:153C
L4F9B				  Near	 _TEXT:1559
L4FC8				  Near	 _TEXT:1586
L4FDB				  Near	 _TEXT:1599
L4FE6				  Near	 _TEXT:15A4
L5012				  Near	 _TEXT:15D0
L5039				  Near	 _TEXT:15F7
L508B				  Near	 _TEXT:1649
L50A9				  Near	 _TEXT:1667
L50B0				  Near	 _TEXT:166E
L50B9				  Near	 _TEXT:1677
L50C1				  Near	 _TEXT:167F
L50E8				  Near	 _TEXT:16A6
L50F9				  Near	 _TEXT:16B7
L5106				  Near	 _TEXT:16C4
L5140				  Near	 _TEXT:16FE
L516B				  Near	 _TEXT:1729
L518A				  Near	 _TEXT:1748
L5197				  Near	 _TEXT:1755
L519C				  Near	 _TEXT:175A
L51A5				  Near	 _TEXT:1763
L51C5				  Near	 _TEXT:1783
L51CC				  Near	 _TEXT:178A
L51F8				  Near	 _TEXT:17B6
L520A				  Near	 _TEXT:17C8
L5210				  Near	 _TEXT:17CE
L523B				  Near	 _TEXT:1804
L5254				  Near	 _TEXT:181D
L5265				  Near	 _TEXT:182E
L5271				  Near	 _TEXT:183A
L5276				  Near	 _TEXT:183F
L5287				  Near	 _TEXT:1850
L528A				  Near	 _TEXT:1853
L528D				  Near	 _TEXT:1856
L5295				  Near	 _TEXT:185E
L529B				  Near	 _TEXT:1864
L52C7				  Near	 _TEXT:1890
L52E1				  Near	 _TEXT:18AA
L52E9				  Near	 _TEXT:18B2
L52F8				  Near	 _TEXT:18C1
L52FC				  Near	 _TEXT:18C5
L5310				  Near	 _TEXT:18D9
L533A				  Near	 _TEXT:1903
L5340				  Near	 _TEXT:1909
L534A				  Near	 _TEXT:1913
L5355				  Near	 _TEXT:191E
L5360				  Near	 _TEXT:1929
L5363				  Near	 _TEXT:192C
L5377				  Near	 _TEXT:1940
L5385				  Near	 _TEXT:194E
L539C				  Near	 _TEXT:196A
L53CB				  Near	 _TEXT:1999
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 303
Symbol Table



L53D0				  Near	 _TEXT:199E
L53EF				  Near	 _TEXT:19BD
L5420				  Near	 _TEXT:19EE
L5424				  Near	 _TEXT:19F4
L544C				  Near	 _TEXT:1A24
L544E				  Near	 _TEXT:1A26
L545D				  Near	 _TEXT:1A35
L546B				  Near	 _TEXT:1A43
L5485				  Near	 _TEXT:1A5D
L5489				  Near	 _TEXT:1A61
L54D5				  Near	 _TEXT:1AB1
L550C				  Near	 _TEXT:1AE8
L5521				  Near	 _TEXT:1AFD
L5531				  Near	 _TEXT:1B0F
L5533				  Near	 _TEXT:1B11
L5549				  Near	 _TEXT:1B27
L5582				  Near	 _TEXT:1B60
L558B				  Near	 _TEXT:1B69
L55A5				  Near	 _TEXT:1B83
L55AB				  Near	 _TEXT:1B89
L55B4				  Near	 _TEXT:1B92
L55DF				  Near	 _TEXT:1BBD
L560F				  Near	 _TEXT:1BED
L561E				  Near	 _TEXT:1BFC
L561F				  Near	 _TEXT:1BFD
L5626				  Near	 _TEXT:1C04
L5639				  Near	 _TEXT:1C17
L564E				  Near	 _TEXT:1C2C
L5652				  Near	 _TEXT:1C30
L568C				  Near	 _TEXT:1C6A
L5698				  Near	 _TEXT:1C76
L569B				  Near	 _TEXT:1C79
L56AE				  Near	 _TEXT:1C8C
L56B5				  Near	 _TEXT:1C93
L56C5				  Near	 _TEXT:1CA3
L56CE				  Near	 _TEXT:1CAC
L56DA				  Near	 _TEXT:1CB8
L56EA				  Near	 _TEXT:1CC8
L56FC				  Near	 _TEXT:1CDA
L5702				  Near	 _TEXT:1CE0
L570A				  Near	 _TEXT:1CE8
L5729				  Near	 _TEXT:1D07
L572F				  Near	 _TEXT:1D0D
L5732				  Near	 _TEXT:1D10
L573D				  Near	 _TEXT:1D1B
L575E				  Near	 _TEXT:1D41
L576B				  Near	 _TEXT:1D4E
L5778				  Near	 _TEXT:1D5B
L57781				  Near	 _TEXT:1D85
L57A1				  Near	 _TEXT:1D8C
L57A9				  Near	 _TEXT:1D94
L57AF				  Near	 _TEXT:1D9A
L57BD				  Near	 _TEXT:1DA8
L57C0				  Near	 _TEXT:1DAB
L57C9				  Near	 _TEXT:1DB4
L57D3				  Near	 _TEXT:1DBE
L57D6				  Near	 _TEXT:1DC1
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 304
Symbol Table



L57E0				  Near	 _TEXT:1DD5
L57E3				  Near	 _TEXT:1DE2
L57EA				  Near	 _TEXT:1DE9
L57F9				  Near	 _TEXT:1DF8
L57FD				  Near	 _TEXT:1DFC
L580A				  Near	 _TEXT:1E09
L5812				  Near	 _TEXT:1E11
L581A				  Near	 _TEXT:1E19
L5845				  Near	 _TEXT:1E44
L584A				  Near	 _TEXT:1E49
L5852				  Near	 _TEXT:1E51
L5857				  Near	 _TEXT:1E56
L5864				  Near	 _TEXT:1E63
L58641				  Near	 _TEXT:1E76
L5877				  Near	 _TEXT:1E81
L588C				  Near	 _TEXT:1E96
L588C1				  Near	 _TEXT:1EA6
L588C2				  Near	 _TEXT:1EB6
L588C3				  Near	 _TEXT:1EC1
L589A				  Near	 _TEXT:1ECE
L589D				  Near	 _TEXT:1ED1
L58B1				  Near	 _TEXT:1EE5
L58C1				  Near	 _TEXT:1EF5
L58C5				  Near	 _TEXT:1EF9
L58E3				  Near	 _TEXT:1F17
L5906				  Near	 _TEXT:1F3A
L590E				  Near	 _TEXT:1F42
L5916				  Near	 _TEXT:1F4A
L591B				  Near	 _TEXT:1F4F
L591F				  Near	 _TEXT:1F53
L593A				  Near	 _TEXT:1F71
L5960				  Near	 _TEXT:1FC3
L59E9				  Near	 _TEXT:1F7A
L5A0C				  Near	 _TEXT:1F85
L5A17				  Near	 _TEXT:1F90
L5A2F				  Near	 _TEXT:1FA8
L5CAD				  Near	 _TEXT:1FAB
L5D76				  Near	 _TEXT:1FB8
L5E84				  Near	 _TEXT:1FC9
L5E8E				  Near	 _TEXT:1FD3
L5E97				  Near	 _TEXT:1FDC
L5EA2				  Near	 _TEXT:1FE9
L5EB0				  Near	 _TEXT:1FFA
L5EBB				  Near	 _TEXT:2007
L5EBE				  Near	 _TEXT:200A
L5ED0				  Near	 _TEXT:201C
L5EDD				  Near	 _TEXT:202B
L5EE8				  Near	 _TEXT:204C
L5EEB				  Near	 _TEXT:205A
L5F28				  Near	 _TEXT:20B1
L5F34				  Near	 _TEXT:20BD
L5F47				  Near	 _TEXT:20D0
L5F5F				  Near	 _TEXT:20E8
L5F62				  Near	 _TEXT:20EB
L5F68				  Near	 _TEXT:20F1
L5F98				  Near	 _TEXT:2151
L5F9B				  Near	 _TEXT:2158
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 305
Symbol Table



L5FC9				  Near	 _TEXT:2186
L5FFC				  Near	 _TEXT:21C8
L6006				  Near	 _TEXT:21D3
L600B				  Near	 _TEXT:21D8
L6010				  Near	 _TEXT:21DE
L601B				  Near	 _TEXT:21E9
L602F				  Near	 _TEXT:2204
L6039				  Near	 _TEXT:220E
L604A				  Near	 _TEXT:2226
L6054				  Near	 _TEXT:2230
L6057				  Near	 _TEXT:2237
L6083				  Near	 _TEXT:2263
L609E				  Near	 _TEXT:2289
L60A4				  Near	 _TEXT:228F
L60A9				  Near	 _TEXT:2295
L60C3				  Near	 _TEXT:22B6
L60CC				  Near	 _TEXT:22C0
L60CC1				  Near	 _TEXT:22DF
L60E9				  Near	 _TEXT:2300
L6107				  Near	 _TEXT:2325
L61071				  Near	 _TEXT:2330
L6112				  Near	 _TEXT:2336
L61121				  Near	 _TEXT:2363
L613B				  Near	 _TEXT:2371
L6143				  Near	 _TEXT:2379
L6148				  Near	 _TEXT:237E
L615D				  Near	 _TEXT:239B
L6160				  Near	 _TEXT:239E
L61D3				  Near	 _TEXT:2443
L61D31				  Near	 _TEXT:2449
L61EA				  Near	 _TEXT:245A
L6201				  Near	 _TEXT:2499
L620F				  Near	 _TEXT:24A7
L621D				  Near	 _TEXT:24B5
L622D				  Near	 _TEXT:24C5
L6239				  Near	 _TEXT:24D1
L6249				  Near	 _TEXT:24E1
L62491				  Near	 _TEXT:24EF
L6257				  Near	 _TEXT:2500
L6271				  Near	 _TEXT:251C
L6276				  Near	 _TEXT:2521
L6285				  Near	 _TEXT:2530
L629D				  Near	 _TEXT:2548
L62D2				  Near	 _TEXT:257D
L62E4				  Near	 _TEXT:258F
L62EF				  Near	 _TEXT:259C
L6310				  Near	 _TEXT:25BF
L631C				  Near	 _TEXT:25CB
L6327				  Near	 _TEXT:25D6
L6335				  Near	 _TEXT:25E4
L6345				  Near	 _TEXT:25FA
L6540				  Near	 _TEXT:2615
L65D5				  Near	 _TEXT:2628
L65DE				  Near	 _TEXT:2631
L65E4				  Near	 _TEXT:2637
L65E7				  Near	 _TEXT:263A
L65EF				  Near	 _TEXT:265B
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 306
Symbol Table



L65F7				  Near	 _TEXT:2665
L6608				  Near	 _TEXT:2676
L661B				  Near	 _TEXT:2683
L6634				  Near	 _TEXT:269C
L6648				  Near	 _TEXT:26B0
L664C				  Near	 _TEXT:26B4
L6653				  Near	 _TEXT:26BB
L665B				  Near	 _TEXT:26C3
L665E				  Near	 _TEXT:26C6
L6672				  Near	 _TEXT:26DB
L669D				  Near	 _TEXT:270A
L66A6				  Near	 _TEXT:2713
L66B7				  Near	 _TEXT:2724
L66CC				  Near	 _TEXT:2739
L66CF				  Near	 _TEXT:273C
L66DA				  Near	 _TEXT:2780
L66FE				  Near	 _TEXT:27A4
L6701				  Near	 _TEXT:27A7
L67011				  Near	 _TEXT:27C8
L6714				  Near	 _TEXT:27CD
L671B				  Near	 _TEXT:27D4
L672B				  Near	 _TEXT:27F6
L6734				  Near	 _TEXT:27FF
L6749				  Near	 _TEXT:2814
L677F				  Near	 _TEXT:284A
L6787				  Near	 _TEXT:2852
L678B				  Near	 _TEXT:2856
L679D				  Near	 _TEXT:2868
L67A2				  Near	 _TEXT:286D
L67B0				  Near	 _TEXT:287B
L67B2				  Near	 _TEXT:287D
L67CF				  Near	 _TEXT:289A
L67D9				  Near	 _TEXT:28A4
L67ED				  Near	 _TEXT:28B8
L680C				  Near	 _TEXT:28D7
L6810				  Near	 _TEXT:28DB
L683A				  Near	 _TEXT:2905
L6847				  Near	 _TEXT:2912
L6867				  Near	 _TEXT:2935
L6874				  Near	 _TEXT:2942
L687C				  Near	 _TEXT:294A
L6888				  Near	 _TEXT:2956
L6893				  Near	 _TEXT:2961
L68AE				  Near	 _TEXT:297C
L68AE1				  Near	 _TEXT:2997
L68C9				  Near	 _TEXT:29A3
L68D8				  Near	 _TEXT:29B2
L68EA				  Near	 _TEXT:29C4
L68ED				  Near	 _TEXT:29C7
L6900				  Near	 _TEXT:29DA
L6903				  Near	 _TEXT:29DD
L690A				  Near	 _TEXT:29E4
L690C				  Near	 _TEXT:29E6
L6914				  Near	 _TEXT:29EE
L691C				  Near	 _TEXT:29F6
L6927				  Near	 _TEXT:2A01
L6931				  Near	 _TEXT:2A0B
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 307
Symbol Table



L6948				  Near	 _TEXT:2A22
L6967				  Near	 _TEXT:2A41
L6974				  Near	 _TEXT:2A4E
L6988				  Near	 _TEXT:2A62
L6997				  Near	 _TEXT:2A71
L699F				  Near	 _TEXT:2A79
L69C7				  Near	 _TEXT:2AA1
L69EA				  Near	 _TEXT:2AC4
L69F2				  Near	 _TEXT:2ACC
L69FD				  Near	 _TEXT:2ADC
L6A0D				  Near	 _TEXT:2AEC
L6A1F				  Near	 _TEXT:2AFE
L6A1F1				  Near	 _TEXT:2B0F
L6A30				  Near	 _TEXT:2B13
L6A31				  Near	 _TEXT:2B18
L6A39				  Near	 _TEXT:2B1F
L6A47				  Near	 _TEXT:2B2D
L6A4A				  Near	 _TEXT:2B30
L6A56				  Near	 _TEXT:2B40
L6A58				  Near	 _TEXT:2B42
L6A5C				  Near	 _TEXT:2B47
L6A5C_SIGN			  Near	 _TEXT:2B46
L6A74				  Near	 _TEXT:2B67
L6A741				  Near	 _TEXT:2B7C
L6A742				  Near	 _TEXT:2B70
L6A88				  Near	 _TEXT:2B7F
L6A8E				  Near	 _TEXT:2B85
L6A97				  Near	 _TEXT:2B8E
L6A99				  Near	 _TEXT:2B90
L6AA8				  Near	 _TEXT:2B9F
L6AAD				  Near	 _TEXT:2BA4
L6ABC				  Near	 _TEXT:2BB3
L6AD3				  Near	 _TEXT:2BC8
L6AD31				  Near	 _TEXT:2BCD
L6AD8				  Near	 _TEXT:2BD1
L6AE9				  Near	 _TEXT:2BE0
L6AEE				  Near	 _TEXT:2BE5
L6AFE				  Near	 _TEXT:2BF5
L6B0B				  Near	 _TEXT:2C02
L6B0E				  Near	 _TEXT:2C05
L6B15				  Near	 _TEXT:2C0C
L6B1A				  Near	 _TEXT:2C11
L6B1D				  Near	 _TEXT:2C14
L6B39				  Near	 _TEXT:2C30
L6B45				  Near	 _TEXT:2C3C
L6B451				  Near	 _TEXT:2C68
L6B46				  Near	 _TEXT:2C6E
L6B461				  Near	 _TEXT:2C8A
L6B53				  Near	 _TEXT:2CAF
L6B54				  Near	 _TEXT:2CB0
L6B5E				  Near	 _TEXT:2CBA
L6B62				  Near	 _TEXT:2CBE
L6B66				  Near	 _TEXT:2CC2
L6BC1				  Near	 _TEXT:2D14
L6BC4				  Near	 _TEXT:2D17
L6BC6				  Near	 _TEXT:2D19
L6BC7				  Near	 _TEXT:2D1A
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 308
Symbol Table



L6C02				  Near	 _TEXT:2D48
L6C12				  Near	 _TEXT:2D58
L6C2B				  Near	 _TEXT:2D85
L6C2C				  Near	 _TEXT:2D88
L6C30				  Near	 _TEXT:2D8D
L6C3F				  Near	 _TEXT:2D9D
L6C42				  Near	 _TEXT:2DA0
L6C53				  Near	 _TEXT:2DB1
L6C5E				  Near	 _TEXT:2DBC
L6C71				  Near	 _TEXT:2DCF
L6C84				  Near	 _TEXT:2DE2
L6C96				  Near	 _TEXT:2DF4
L6C9B				  Near	 _TEXT:2DF9
L6CA3				  Near	 _TEXT:2E01
L6CC2				  Near	 _TEXT:2E20
L6CC3				  Near	 _TEXT:2E3D
L6CC4				  Near	 _TEXT:2E5F
L6CF6				  Near	 _TEXT:2E6D
L6CF9				  Near	 _TEXT:2E70
L6CFD				  Near	 _TEXT:2E96
L6D09				  Near	 _TEXT:2EA0
L6D24				  Near	 _TEXT:2EC6
L6D2A				  Near	 _TEXT:2ECC
L6D2E				  Near	 _TEXT:2ED0
L6D3D				  Near	 _TEXT:2EDF
L6D43				  Near	 _TEXT:2EE5
L6D49				  Near	 _TEXT:2EEB
L6D4D				  Near	 _TEXT:2EEF
L6D5D				  Near	 _TEXT:2EFF
L6D63				  Near	 _TEXT:2F05
L6D67				  Near	 _TEXT:2F09
L6D72				  Near	 _TEXT:2F14
L6D75				  Near	 _TEXT:2F17
L6D7A				  Near	 _TEXT:2F26
L6D87				  Near	 _TEXT:2F33
L6D8D				  Near	 _TEXT:2F39
L6D94				  Near	 _TEXT:2F40
L6D9A				  Near	 _TEXT:2F46
L6DA4				  Near	 _TEXT:2F50
L6DBA				  Near	 _TEXT:2F66
L6DC6				  Near	 _TEXT:2F72
L6DDB				  Near	 _TEXT:2F87
L6DE0				  Near	 _TEXT:2F8C
L6DE3				  Near	 _TEXT:2F8F
L6DF3				  Near	 _TEXT:2FA0
L6E03				  Near	 _TEXT:2FB3
L6E37				  Near	 _TEXT:2FCF
L6E3B				  Near	 _TEXT:309F
L6E48				  Near	 _TEXT:30B0
L6E54				  Near	 _TEXT:30BC
L6E5A				  Near	 _TEXT:30C2
L6E63				  Near	 _TEXT:30CB
L6E68				  Near	 _TEXT:30D0
L6E76				  Near	 _TEXT:30DE
L6E7D				  Near	 _TEXT:30E5
L6E92				  Near	 _TEXT:30FA
L6E96				  Near	 _TEXT:30FE
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 309
Symbol Table



L6E9C				  Alias	 FASTCMP
L6E9C1				  Near	 _TEXT:3104
L6E9D				  Near	 _TEXT:3105
L6EAE				  Near	 _TEXT:3116
L6EB6				  Near	 _TEXT:311E
L6EB8				  Near	 _TEXT:3120
L6EBB				  Near	 _TEXT:3123
L6ED0				  Near	 _TEXT:3138
L6ED7				  Near	 _TEXT:313F
L6EE0				  Near	 _TEXT:3148
L6EF2				  Near	 _TEXT:315A
L6EF7				  Near	 _TEXT:315F
L6F0B				  Near	 _TEXT:3173
L6F0F				  Near	 _TEXT:3177
L6F13				  Near	 _TEXT:317B
L6F17				  Near	 _TEXT:317F
L6F1B				  Near	 _TEXT:3183
L6F1F				  Near	 _TEXT:3187
L6F23				  Near	 _TEXT:318B
L6F27				  Near	 _TEXT:318F
L6F29				  Near	 _TEXT:3191
L6F30				  Near	 _TEXT:3198
L6F38				  Near	 _TEXT:31A0
L6F40				  Near	 _TEXT:31A8
L6F48				  Near	 _TEXT:31B0
L6F4C				  Near	 _TEXT:31B4
L6F50				  Near	 _TEXT:31B8
L6F5E				  Near	 _TEXT:31C6
L6F66				  Near	 _TEXT:31CE
L6F6E				  Near	 _TEXT:31D6
L6F76				  Near	 _TEXT:31DE
L6F7E				  Near	 _TEXT:31E6
L6F88				  Near	 _TEXT:31F0
L6F92				  Near	 _TEXT:31FA
L6F95				  Near	 _TEXT:31FD
L6FB3				  Near	 _TEXT:321B
L6FB5				  Near	 _TEXT:3228
L6FBF				  Near	 _TEXT:3232
L6FCA				  Near	 _TEXT:323D
L6FCD				  Near	 _TEXT:3240
L6FE4				  Near	 _TEXT:3257
L6FE8				  Near	 _TEXT:325B
L6FEB				  Near	 _TEXT:325E
L6FF1				  Near	 _TEXT:3264
L7048				  Near	 _TEXT:32BB
L704D				  Near	 _TEXT:32C0
L7065				  Near	 _TEXT:32D8
L706D				  Near	 _TEXT:32E0
L7070				  Near	 _TEXT:32E3
L707A				  Near	 _TEXT:32ED
L708E				  Near	 _TEXT:3301
L709B				  Near	 _TEXT:330E
L70A7				  Near	 _TEXT:331A
L7124				  Near	 _TEXT:334C
L714A				  Near	 _TEXT:3366
L7161				  Near	 _TEXT:337D
L7166				  Near	 _TEXT:3382
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 310
Symbol Table



L716A				  Near	 _TEXT:3386
L7175				  Near	 _TEXT:3391
L7178				  Near	 _TEXT:3394
L717E				  Near	 _TEXT:339A
L718F				  Near	 _TEXT:33C9
L7191				  Near	 _TEXT:33CB
L7192				  Near	 _TEXT:340F
L71E1				  Near	 _TEXT:3452
L71EA				  Near	 _TEXT:345B
L71EF				  Near	 _TEXT:3460
L71F3				  Near	 _TEXT:3464
L7271				  Near	 _TEXT:3496
L7282				  Near	 _TEXT:34A7
L7286				  Near	 _TEXT:34AB
L728D				  Near	 _TEXT:34B2
L7298				  Near	 _TEXT:34BD
L729A				  Near	 _TEXT:34BF
L72A1				  Near	 _TEXT:34C6
L72AA				  Near	 _TEXT:34CF
L72C8				  Near	 _TEXT:34D3
L72CE				  Near	 _TEXT:34D9
L72D4				  Near	 _TEXT:34DF
L72DA				  Near	 _TEXT:34E5
L72DE				  Near	 _TEXT:34E9
L72E1				  Near	 _TEXT:34EC
L72E3				  Near	 _TEXT:34EE
L730C				  Near	 _TEXT:34FF
L731A				  Near	 _TEXT:350B
L731F				  Near	 _TEXT:3510
L74D2				  Near	 _TEXT:3797
L74DA				  Near	 _TEXT:37A7
L74E2				  Near	 _TEXT:37AF
L74EA				  Near	 _TEXT:37B7
L74F2				  Near	 _TEXT:37BF
L74FA				  Near	 _TEXT:37CF
L7502				  Near	 _TEXT:37D7
L750A				  Near	 _TEXT:37DF
L7512				  Near	 _TEXT:37E7
L7513				  Near	 _TEXT:37E8
L7529				  Near	 _TEXT:37FE
L7530				  Near	 _TEXT:3805
L7533				  Near	 _TEXT:3808
L753A				  Near	 _TEXT:380F
L7542				  Near	 _TEXT:3817
L7548				  Near	 _TEXT:381D
L754D				  Near	 _TEXT:3822
L7551				  Near	 _TEXT:3826
L7554				  Near	 _TEXT:3829
L755A				  Near	 _TEXT:382F
L7560				  Near	 _TEXT:3835
L7562				  Near	 _TEXT:3837
L756A				  Near	 _TEXT:383F
L756E				  Near	 _TEXT:3843
L7572				  Near	 _TEXT:3847
L7574				  Near	 _TEXT:3849
L7579				  Near	 _TEXT:384E
L757C				  Near	 _TEXT:3851
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 311
Symbol Table



L7580				  Near	 _TEXT:3855
L7582				  Near	 _TEXT:3857
L7584				  Near	 _TEXT:3859
L7595				  Near	 _TEXT:386A
L759F				  Near	 _TEXT:3874
L75A7				  Near	 _TEXT:387C
L75BB				  Near	 _TEXT:3890
L75DA				  Near	 _TEXT:38AF
L75EC				  Near	 _TEXT:38C1
L75F5				  Near	 _TEXT:38CA
L7600				  Near	 _TEXT:38D5
L7602				  Near	 _TEXT:38D7
L7604				  Near	 _TEXT:38D9
L7619				  Near	 _TEXT:38EE
L761D				  Near	 _TEXT:38F2
L7625				  Near	 _TEXT:38FA
L7627				  Near	 _TEXT:38FC
L762A				  Near	 _TEXT:38FF
L762D				  Near	 _TEXT:3902
L7630				  Near	 _TEXT:3905
L7632				  Near	 _TEXT:3907
L7634				  Near	 _TEXT:3909
L7638				  Word	 _TEXT:---- Extern
L77B1				  Word	 _TEXT:---- Extern
L78FA				  Near	 _TEXT:390D
L7900				  Near	 _TEXT:3913
L7901				  Near	 _TEXT:3914
L7902				  Near	 _TEXT:3915
L7904				  Near	 _TEXT:3917
L7906				  Near	 _TEXT:3919
L7908				  Near	 _TEXT:391B
L790A				  Near	 _TEXT:391D
L790C				  Near	 _TEXT:391F
L7933				  Near	 _TEXT:396A
L7934				  Near	 _TEXT:396B
L793C				  Near	 _TEXT:3973
L793D				  Near	 _TEXT:3974
L7954				  Near	 _TEXT:398B
L7961				  Number _TEXT:3998
L79D7				  Near	 _TEXT:3D91
L7A57				  Near	 _TEXT:3E11
L7AD7				  Near	 _TEXT:3E91
L7B57				  Near	 _TEXT:3F11
L7B58				  Near	 _TEXT:3F12
L7B59				  Near	 _TEXT:3F13
L7B5A				  Near	 _TEXT:3F14
L7B5C				  Near	 _TEXT:3F16
L7B5D				  Near	 _TEXT:3F17
L7B5E				  Near	 _TEXT:3F18
L7B60				  Near	 _TEXT:3F1A
L7B62				  Near	 _TEXT:3F1C
L7B64				  Near	 _TEXT:3F1E
L7B65				  Near	 _TEXT:3F1F
L7B69				  Near	 _TEXT:3F23
L7B6B				  Near	 _TEXT:3F25
L7B6D				  Near	 _TEXT:3F27
L7B6F				  Near	 _TEXT:3F29
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 312
Symbol Table



L7B71				  Near	 _TEXT:3F2B
L7B72				  Near	 _TEXT:3F2C
L7B73				  Near	 _TEXT:3F2D
L7B74				  Near	 _TEXT:3F2E
L7B75				  Near	 _TEXT:3F2F
L7B77				  Near	 _TEXT:3F31
L7B79				  Near	 _TEXT:3F33
L7B7B				  Near	 _TEXT:3F35
L7B7D				  Near	 _TEXT:3F37
L7B7F				  Near	 _TEXT:3F39
L7B81				  Near	 _TEXT:3F3B
L7B83				  Near	 _TEXT:3F3D
L7B85				  Near	 _TEXT:3F3F
L7B87				  Near	 _TEXT:3F41
L7B88				  Near	 _TEXT:3F42
L7B89				  Near	 _TEXT:3F43
L7B8B				  Near	 _TEXT:3F45
L7B8D				  Near	 _TEXT:3F47
L7B8F				  Near	 _TEXT:3F49
L7B90				  Near	 _TEXT:3F4A
L7B91				  Near	 _TEXT:3F4B
L7B92				  Near	 _TEXT:3F4C
L7B93				  Near	 _TEXT:3F4D
L7B94				  Near	 _TEXT:3F4E
L7B95				  Near	 _TEXT:3F4F
L7B96				  Near	 _TEXT:3F50
L7B97				  Near	 _TEXT:3F51
L7B98				  Near	 _TEXT:3F52
L7B99				  Near	 _TEXT:3F53
L7B9A				  Near	 _TEXT:3F54
L7B9B				  Near	 _TEXT:3F55
L7B9C				  Near	 _TEXT:3F56
L7B9D				  Near	 _TEXT:3F57
L7B9E				  Near	 _TEXT:3F58
L7B9F				  Near	 _TEXT:3F59
L7BA0				  Near	 _TEXT:3F5A
L7BA1				  Near	 _TEXT:3F5B
L7BA2				  Near	 _TEXT:3F5C
L7BA3				  Near	 _TEXT:3F5D
L7BA4				  Near	 _TEXT:3F5E
L7BA6				  Near	 _TEXT:3F60
L7BA7				  Near	 _TEXT:3F61
L7BA9				  Near	 _TEXT:3F63
L7BAB				  Near	 _TEXT:3F65
L7BB0				  Near	 _TEXT:3F6A
L7BB2				  Near	 _TEXT:3F6C
L7BBD				  Near	 _TEXT:3F77
L7BBE				  Near	 _TEXT:3F78
L7BC0				  Near	 _TEXT:3F7A
L7BC1				  Near	 _TEXT:3F7B
L7BC2				  Near	 _TEXT:3F7C
L7BC4				  Near	 _TEXT:3F7E
L7BC6				  Near	 _TEXT:3F80
L7BC8				  Near	 _TEXT:3F82
L7BC9				  Near	 _TEXT:3F83
L7BCA				  Near	 _TEXT:3F84
L7BCC				  Near	 _TEXT:3F86
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 313
Symbol Table



L7BD5				  Near	 _TEXT:3F8F
L7BDB				  Near	 _TEXT:3F91
L7BDD				  Near	 _TEXT:3F92
L7BDF				  Near	 _TEXT:3F94
L7BE1				  Near	 _TEXT:3F96
L7BE3				  Near	 _TEXT:3F98
L7BF1				  Near	 _TEXT:3F99
L7BF2				  Near	 _TEXT:3F9A
L7BF3				  Near	 _TEXT:3F9B
L7BF5				  Near	 _TEXT:---- Extern
LOGDRV				  Near	 _TEXT:097E
LONGDEF				  Near	 _TEXT:379F
L_NEG				  Near	 _TEXT:---- Extern
L_R				  Near	 _TEXT:---- Extern
MAXFILELEVELS			  Number 0004
MINIMUMHL_DE			  Near	 _TEXT:3FAE
MSX				  Near	 _TEXT:0000
MSXDOS				  Number 0005
OPENFILE			  Near	 _TEXT:---- Extern
OP_B_B				  Near	 _TEXT:2400
OP_CNVTAB			  Near	 _TEXT:2471
OP_CNV_END			  Near	 _TEXT:243C
OP_CNV_FOUND			  Near	 _TEXT:23B6
OP_CNV_SRCH			  Near	 _TEXT:23A8
OP_C_C				  Near	 _TEXT:2400
OP_C_S				  Near	 _TEXT:2410
OP_I_I				  Near	 _TEXT:2400
OP_I_L				  Near	 _TEXT:2428
OP_I_R				  Near	 _TEXT:23E7
OP_L_I				  Near	 _TEXT:2419
OP_L_R				  Near	 _TEXT:23F3
OP_R_I				  Near	 _TEXT:23CB
OP_R_L				  Near	 _TEXT:23D9
OP_R_R				  Near	 _TEXT:23C2
OP_SCALAR			  Near	 _TEXT:2400
OP_S_C				  Near	 _TEXT:2405
OUT_LONG			  Near	 _TEXT:0FF7
O_BYTE				  Near	 _TEXT:2CF8
O_C3				  Near	 _TEXT:2CD3
O_CALHL				  Near	 _TEXT:2CE2
O_CODE				  Near	 _TEXT:2CAC
O_DE				  Near	 _TEXT:2CD7
O_HL				  Near	 _TEXT:2CF3
O_JPHL				  Near	 _TEXT:2CDE
O_LDBC				  Near	 _TEXT:2CE6
O_LDDE				  Near	 _TEXT:2CEA
O_LDHL				  Near	 _TEXT:2CEE
O_LDLONG			  Near	 _TEXT:27E8
O_OPHL				  Near	 _TEXT:2CF0
O_POPHL				  Near	 _TEXT:2CCF
O_PSHHL				  Near	 _TEXT:2CCB
O_PSHLONG			  Near	 _TEXT:2396
PARSENAME			  Near	 _TEXT:---- Extern
PARSE_O_IL_C			  Near	 _TEXT:2645
PF_INL				  Near	 _TEXT:11A1
POPLONG				  Near	 _TEXT:1337
POS				  Number 0005
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 314
Symbol Table



PRINTASCIIZ			  Near	 _TEXT:33C0
PRINTASCIIZUPCASED		  Near	 _TEXT:33B4
PRINTCURRENTLINE		  Near	 _TEXT:0897
PRINTCURRENTLINE1		  Near	 _TEXT:08B5
PRINTCURRENTLINE2		  Near	 _TEXT:08BF
PRINTCURRENTLINE3		  Near	 _TEXT:08CA
PRINTCURRENTLINE4		  Near	 _TEXT:08D4
PRINTERRORMESSAGE		  Near	 _TEXT:082A
PRINTFILENAME			  Near	 _TEXT:33B2
PRINTTAB			  Near	 _TEXT:0797
PRINTTAB1			  Near	 _TEXT:07A2
PRINT_SYNTAX			  Near	 _TEXT:0003
READFILE			  Near	 _TEXT:---- Extern
SCANLEFTRIGHT			  Near	 _TEXT:07AA
SCANLEFTRIGHT1			  Near	 _TEXT:07BA
SCANLEFTRIGHT2			  Near	 _TEXT:07BE
SETDF1				  Near	 _TEXT:2048
SETDFT				  Near	 _TEXT:2037
SETEXTENSION			  Near	 _TEXT:---- Extern
SMART_CONST			  Near	 _TEXT:2C8F
SMART_CONST_INTEGER		  Near	 _TEXT:2C73
SMART_CONST_LONGINT		  Near	 _TEXT:2C4F
STRSIZE				  Number 0005
ST_LONG				  Near	 _TEXT:2747
ST_LONG02			  Near	 _TEXT:275D
ST_LONG_HL			  Near	 _TEXT:2751
ST_LONG_INDIRECT		  Near	 _TEXT:2774
TABLEINDEX2			  Near	 _TEXT:3F9D
TABLEINDEX2_1			  Near	 _TEXT:3FA2
TEMPFILEDATA			  Near	 _TEXT:4094
TEMPID				  Near	 _TEXT:301F
TEMPPTR				  Near	 _TEXT:301D
TOTALFILEBUFFERSIZE		  Number 2000
TOTALLINES			  Near	 _TEXT:40D5
TPOUT_COPY			  Near	 _TEXT:04A4
TPOUT_OLD_STYLE			  Near	 _TEXT:04AE
TPOUT_SCAN			  Near	 _TEXT:049A
TPOUT_SCAN_END			  Near	 _TEXT:04A1
TURBOERRORMESSAGES		  Word	 _TEXT:---- Extern
UPCASE				  Alias	 L04A6
USELIB				  Near	 _TEXT:0000
USETIMER			  Near	 _TEXT:0000
WITHDEPTH			  Near	 _TEXT:3F81
WRITEFILE			  Near	 _TEXT:---- Extern
_AUXINPTR			  Number OFFSET	0177
_AUXOUTPTR			  Number OFFSET	0174
_BUFLEN				  Number OFFSET	018C
_CBREAK				  Number OFFSET	0190
_CONINPTR			  Number OFFSET	016B
_CONOUTPTR			  Number OFFSET	016E
_CONSTPTR			  Number OFFSET	0168
_DOSERRORHANDLEROFF		  Number OFFSET	2887
_DOSERRORHANDLERON		  Number OFFSET	2884
_ERROREXIT			  Number OFFSET	286F
_ERRORPTR			  Number OFFSET	018D
_GETERROR_LIB			  Number OFFSET	2703
_GIOSOK				  Number OFFSET	0581
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 315
Symbol Table



_GIOSVER			  Number OFFSET	0582
_HEAPPTR			  Number OFFSET	0192
_L00B8				  Number OFFSET	0180
_L00BA				  Number OFFSET	0182
_L00BE				  Number OFFSET	0186
_L00C0				  Number OFFSET	0188
_L021D				  Number OFFSET	02D0
_L023E				  Number OFFSET	02F1
_L0259				  Number OFFSET	030C
_L0262				  Number OFFSET	0315
_L026B				  Number OFFSET	031E
_L0284				  Number OFFSET	0337
_L0299				  Number OFFSET	034C
_L030A				  Number OFFSET	03BD
_L0310				  Number OFFSET	03C3
_L0364				  Number OFFSET	0420
_L04D4				  Number OFFSET	06C3
_L0508				  Number OFFSET	06F4
_L0522				  Number OFFSET	070E
_L052C				  Number OFFSET	0717
_L053A				  Number OFFSET	0725
_L054D				  Number OFFSET	0738
_L055D				  Number OFFSET	0748
_L0581				  Number OFFSET	076C
_L0591				  Number OFFSET	077C
_L059B				  Number OFFSET	0786
_L05D1				  Number OFFSET	07BC
_L05E2				  Number OFFSET	07CD
_L0601				  Number OFFSET	07EC
_L0612				  Number OFFSET	07FD
_L0623				  Number OFFSET	080E
_L0638				  Number OFFSET	0823
_L064C				  Number OFFSET	0837
_L0656				  Number OFFSET	0841
_L0666				  Number OFFSET	0851
_L0676				  Number OFFSET	0861
_L067F				  Number OFFSET	086A
_L0688				  Number OFFSET	0889
_L068D				  Number OFFSET	088F
_L0692				  Number OFFSET	0895
_L069B				  Number OFFSET	08A3
_L06A0				  Number OFFSET	08A8
_L06A5				  Number OFFSET	08AD
_L06AE				  Number OFFSET	08BB
_L06B3				  Number OFFSET	08C0
_L06B8				  Number OFFSET	08C5
_L06C2				  Number OFFSET	08D4
_L06C7				  Number OFFSET	08D9
_L06CC				  Number OFFSET	08DE
_L06D6				  Number OFFSET	08ED
_L06DB				  Number OFFSET	08F2
_L06E0				  Number OFFSET	08F7
_L06E9				  Number OFFSET	0905
_L06EE				  Number OFFSET	090A
_L06F3				  Number OFFSET	090F
_L06F5				  Number OFFSET	0911
_L070F				  Number OFFSET	092B
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 316
Symbol Table



_L073B				  Number OFFSET	0999
_L0745				  Number OFFSET	09A3
_L074E				  Number OFFSET	09B0
_L0756				  Number OFFSET	09B8
_L0780				  Number OFFSET	09E2
_L0783				  Number OFFSET	09E5
_L078B				  Number OFFSET	09ED
_L083D				  Number OFFSET	0D66
_L086B				  Number OFFSET	0D94
_L08A3				  Number OFFSET	0DCC
_L08B2				  Number OFFSET	0DDB
_L08F3				  Number OFFSET	0E1C
_L0920				  Number OFFSET	0E49
_L0996				  Number OFFSET	0EBF
_L09A2				  Number OFFSET	0ECB
_L09E9				  Number OFFSET	0F12
_L09F2				  Number OFFSET	0F1B
_L09F7				  Number OFFSET	0F20
_L09FA				  Number OFFSET	0F23
_L09FF				  Number OFFSET	0F28
_L0BFD				  Number OFFSET	1171
_L0C34				  Number OFFSET	11A8
_L0C46				  Number OFFSET	11BA
_L0C7F				  Number OFFSET	11F3
_L0C87				  Number OFFSET	11FB
_L0D2B				  Number OFFSET	129F
_L0DB6				  Number OFFSET	132A
_L0E46				  Number OFFSET	13BA
_L0FB4				  Number OFFSET	1528
_L0FD0				  Number OFFSET	1544
_L0FDE				  Number OFFSET	1552
_L1008				  Number OFFSET	1581
_L12DD				  Number OFFSET	18AA
_L12E1				  Number OFFSET	18AE
_L12FC				  Number OFFSET	18C9
_L1300				  Number OFFSET	18CD
_L1318				  Number OFFSET	18E5
_L1326				  Number OFFSET	18F3
_L1333				  Number OFFSET	1900
_L134F				  Number OFFSET	191C
_L136F				  Number OFFSET	193C
_L1370				  Number OFFSET	193D
_L13FE				  Number OFFSET	19D6
_L13FF				  Number OFFSET	19D7
_L1469				  Number OFFSET	1A45
_L149B				  Number OFFSET	1A77
_L14A9				  Number OFFSET	1A85
_L14BA				  Number OFFSET	1A96
_L14CB				  Number OFFSET	1AA7
_L14CC				  Number OFFSET	1AAB
_L1644				  Number OFFSET	1C67
_L164D				  Number OFFSET	1C70
_L164E				  Number OFFSET	1C74
_L1671				  Number OFFSET	1C98
_L1672				  Number OFFSET	1CBE
_L168E				  Number OFFSET	1CDA
_L16AB				  Number OFFSET	1CF7
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 317
Symbol Table



_L1722				  Number OFFSET	1D83
_L1726				  Number OFFSET	1D87
_L1779				  Number OFFSET	1DDA
_L178B				  Number OFFSET	1E18
_L17AA				  Number OFFSET	1E37
_L17BA				  Number OFFSET	1E47
_L17CD				  Number OFFSET	1E5A
_L17D7				  Number OFFSET	1E64
_L17DC				  Number OFFSET	1E69
_L17E1				  Number OFFSET	1E6E
_L17E6				  Number OFFSET	1E73
_L1810				  Number OFFSET	1E9D
_L1811				  Number OFFSET	1EA2
_L187A				  Number OFFSET	1F40
_L18A4				  Number OFFSET	1F4A
_L18B6				  Number OFFSET	1F5E
_L18DC				  Number OFFSET	1F80
_L19A5				  Number OFFSET	1F8E
_L19D5				  Number OFFSET	1FBA
_L1A49				  Number OFFSET	2014
_L1A55				  Number OFFSET	2028
_L1A5D				  Number OFFSET	203F
_L1A6F				  Number OFFSET	2052
_L1A70				  Number OFFSET	2057
_L1AB0				  Number OFFSET	20B8
_L1ABA				  Number OFFSET	20C2
_L1ABE				  Number OFFSET	20C6
_L1AED				  Number OFFSET	2192
_L1AF1				  Number OFFSET	2196
_L1B6F				  Number OFFSET	21C4
_L1B93				  Number OFFSET	2213
_L1BA5				  Number OFFSET	224F
_L1BEA				  Number OFFSET	227A
_L1BEB				  Number OFFSET	227E
_L1CDB				  Number OFFSET	23C6
_L1CE5				  Number OFFSET	23D0
_L1D7A				  Number OFFSET	2465
_L1E3D				  Number OFFSET	2528
_L1E44				  Number OFFSET	252F
_L1EA3				  Number OFFSET	258E
_L1EAB				  Number OFFSET	2596
_L1EBC				  Number OFFSET	25A8
_L1EBD				  Number OFFSET	25AC
_L1EBE				  Number OFFSET	25B0
_L1EF2				  Number OFFSET	25EC
_L1EF3				  Number OFFSET	25F0
_L1EF4				  Number OFFSET	25F4
_L1F48				  Number OFFSET	2650
_L1F4E				  Number OFFSET	2656
_L1F64				  Number OFFSET	266C
_L1F7D				  Number OFFSET	2685
_L1F9B				  Number OFFSET	26A3
_L1FDB				  Number OFFSET	26E3
_L1FE4				  Number OFFSET	26EC
_L1FEA				  Number OFFSET	26F2
_L1FF1				  Number OFFSET	26F9
_L201B				  Number OFFSET	272A
Turbo Assembler	 Version 3.2	    15/03/00 23:13:12	    Page 318
Symbol Table



_L20D4				  Number OFFSET	27FD
_L20E2				  Number OFFSET	2E9B
_LOADRUNOVERLAY			  Number OFFSET	2339
_LOADRUNOVERLAYREC		  Number OFFSET	232C
_LST				  Number OFFSET	0184
_LSTOUTPTR			  Number OFFSET	0171
_L_ABS				  Number OFFSET	0A61
_L_ADD				  Number OFFSET	0A74
_L_AND				  Number OFFSET	0A1E
_L_DIV				  Number OFFSET	0B16
_L_EQ				  Number OFFSET	0883
_L_FOR_DOWNTO			  Number OFFSET	0851
_L_FOR_TO			  Number OFFSET	0851
_L_GT				  Number OFFSET	08E8
_L_GTE				  Number OFFSET	08B6
_L_LS				  Number OFFSET	0900
_L_LSE				  Number OFFSET	08CF
_L_MOD				  Number OFFSET	0B2C
_L_MUL				  Number OFFSET	0A9A
_L_NEG				  Number OFFSET	0A64
_L_NEQ				  Number OFFSET	089E
_L_NOT				  Number OFFSET	0A54
_L_OR				  Number OFFSET	0A30
_L_PRED				  Number OFFSET	0873
_L_R				  Number OFFSET	15A0
_L_SHL				  Number OFFSET	0BD5
_L_SHR				  Number OFFSET	0BF1
_L_SQR				  Number OFFSET	0A94
_L_SUB				  Number OFFSET	0A7F
_L_SUCC				  Number OFFSET	087C
_L_XOR				  Number OFFSET	0A42
_MEMMAN				  Number OFFSET	057E
_MEMMNVER			  Number OFFSET	057F
_OUTPUT				  Number OFFSET	018A
_OVERLAYLOADPTR			  Number OFFSET	238E
_OVERLAYREC1			  Number OFFSET	2301
_PRT_LONG			  Number OFFSET	1DEC
_RECURPTR			  Number OFFSET	0194
_RENAMEFILE_LIB			  Number OFFSET	2225
_RUNGIOS			  Number OFFSET	057B
_R_L				  Number OFFSET	15C4
_TSRPRESENT			  Number OFFSET	052E
_USRINPTR			  Number OFFSET	017D
_USROUTPTR			  Number OFFSET	017A

Macro Name

DC
GLOBAL2
GLOBALS
OFF_HL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0000 Word	  Public  DATA
_TEXT				  16  6259 Word	  Public  CODE
